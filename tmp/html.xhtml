<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Untitled</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<style type="text/css">
    body { margin-left: 4em; margin-right: 4em; }
    p {
        text-rendering: optimizeLegibility;
        font-feature-settings: "kern";
        -webkit-font-feature-settings: "kern";
        -moz-font-feature-settings: "kern";
        -moz-font-feature-settings: "kern=1";
        font-kerning: normal;
        text-align: justify;
    }
    div.pod-content { padding-left: 20em; }
    div.pod-body { width: 60em }
    div.marginale { float: right; margin-right: -4em; width: 18em; font-size: 66%; text-align: left; }
    span.filename { font-family: monospace; font-stretch: condensed; }
    h1.title { font-size: 200%; }
    h1 { font-size: 160%; }
    h2 { font-size: 140%; }
    h3 { font-size: 120%; }
    h4 { font-size: 100%; }
    h5 { font-size: 100%; }
    h6 { font-size: 100%; }
    h7 { font-size: 100%; }
    pre { padding-left: 2em; }
    ul.toc { list-style-type: none; padding-left: 0; margin-left: 0 }
    ul.toc ul { list-style-type: none; }
    ul.toc ul { margin-left: 0; padding-left: 1em; }
    ul.toc li { margin-left: 0; padding-left: 0em; }
    ul.toc li.toc-level-1 { padding-left: 1em; }
    ul.toc li.toc-level-2 { padding-left: 1em; }
    ul.toc li.toc-level-3 { padding-left: 1em; }
    ul.toc li.toc-level-4 { padding-left: 1em; }
    ul.toc li.toc-level-5 { padding-left: 1em; }
    ul.toc li.toc-level-6 { padding-left: 1em; }
    ul.toc li.toc-level-7 { padding-left: 1em; }
    ul.toc li.toc-level-8 { padding-left: 1em; }
    ul.toc li.toc-level-9 { padding-left: 1em; }
    ul.toc li.toc-level-10{ padding-left: 1em; }
    #left-side-menu { 
        width: 20em; margin-left: -22em; 
        float: left; 
        position: fixed;
        top: 0;
        overflow: scroll;
        height: 100%;
        padding: 0;
        white-space: nowrap;
    }
    #left-side-menu-header { 
        transform: rotate(90deg); 
        transform-origin: left bottom 0;
        z-index: 1;
        position: fixed;
        float: left;
        top: 0;
        margin-left: -23.5em;
    }
    #left-side-menu-header span.selection { padding-left: 1em; padding-right: 1em; }
    .code { font-family: monospace; background-color: #f9f9f9; }
    ul.numbered {
        list-style: none;
    }
    span.numbered-prefix {
        float: left;
    }
    span.numbered-prefix::after {
        content: ")\00a0";
    }

    @media print {
        div.pod-content { padding-left: 0; width: 100% }
        div.pod-body { width: 90%; }
        #left-side-menu { 
            width: unset;
            margin-left: unset; 
            float: unset; 
            position: unset;
            top: unset;
            overflow: unset;
            height: unset;
            padding: unset;
            white-space: unset;
        }
        div.left-side-menu-header, #index { display: none; }
    }
    </style>
<link href="pod-to-bigpage.css" rel="stylesheet" type="text/css" />

</head>
<body>
  <div class="pod-content">

<!-- /HomePage.pod6 --><div class="pod-body"><a id="_HomePage.pod6"></a><img style="float: right; margin: 0 0 1em 1em" src="/images/camelia.png" alt="" id="home_logo"/> Welcome to the official documentation of the <a href="https://perl6.org">Perl 6</a> programming language! Besides online browsing and searching, you can also <!-- <a>download</a> an offline HTML or PDF copy, and --> <a href="https://github.com/perl6/doc">contribute</a> by reporting mistakes or sending patches. <hr/> <dl> <dt><a href="/language.html">Language Reference &amp; Tutorials</a></dt> <dd> A collection of documents describing, in detail, the various conceptual parts of the language.<!-- If you're new to Perl 6, language>intro is a good place to start. --> </dd> <dt><a href="/type.html">Type Reference</a></dt> <dd> Index of built-in classes and roles. </dd> <dt><a href="/routine.html">Routine Reference</a></dt> <dd> Index of built-in subroutines and methods. </dd> <dt><a href="/programs.html">Perl 6 Programs</a></dt> <dd> A collection of documents describing how to run the Perl 6 executable program and other utilities, how to debug Perl 6 programs, and how to hack on Perl 6 source code. </dd> <!--  <dt><a href="/module.html">Module Reference</a></dt> <dd> Index of modules that are part of the official core distribution. </dd>  --> </dl> <hr/> <p>The Perl 6 homepage offers <a href="https://perl6.org/documentation/">a comprehensive list of Perl 6 documentation</a>, including tutorials, HowTos and <a href="/language/faq">FAQs (Frequently Asked Questions)</a>.</p> <p> You may also be interested in the Perl 6 <a href="https://design.perl6.org">design documents</a>, which are in some places more complete than this documentation, but targeted toward compiler writers rather than users of the language. Documentation for the different but related <a href="https://www.perl.org/">Perl 5</a> language can be found on the <a href="http://perldoc.perl.org/">Perl 5 documentation website</a>. </p>
</div> <!-- /language/5to6-nutshell.pod6 --><div class="pod-body"><a id="_language_5to6-nutshell.pod6"></a><a name="t1"><h1 class="title">1 5to6-nutshell</h1></a> <p class="subtitle">Perl 5 to Perl 6, in a nutshell: How do I do what I used to do?</p> <p>This page attempts to index the changes in syntax and semantics from Perl 5 to Perl 6. Whatever worked in Perl 5 and must be written differently in Perl 6, should be listed here (whereas many <i>new</i> Perl 6 features and idioms won't be).</p>
 <p>Hence this should not be mistaken for a beginner tutorial or a promotional overview of Perl 6; it is intended as a technical reference for Perl 6 learners with a strong Perl 5 background and for anyone porting Perl 5 code to Perl 6 (though note that <a href="#0-Automated Translation">#Automated Translation</a> might be more convenient).</p>
 <p>A note on semantics; when we say "now" in this document, we mostly just mean "now that you are trying out Perl 6." We don't mean to imply that Perl 5 is now suddenly obsolete. Quite the contrary, most of us love Perl 5, and we expect Perl 5 to continue in use for a good many years. Indeed, one of our more important goals has been to make interaction between Perl 5 and Perl 6 run smoothly. However, we do also like the design decisions in Perl 6, which are certainly newer and arguably better integrated than many of the historical design decisions in Perl 5. So many of us do hope that over the next decade or two, Perl 6 will become the more dominant language. If you want to take "now" in that future sense, that's okay too. But we're not at all interested in the either/or thinking that leads to fights.</p>
 <a name="t1.1"></a><h1 id="_language_5to6-nutshell.pod6-CPAN">1.1 CPAN</h1>
 <p>See <a href="https://modules.perl6.org/">https://modules.perl6.org/</a> .</p>
 <p>If the module that you were using has not been converted to Perl 6, and no alternative is listed in this document, then its use under Perl 6 may not have been addressed yet.</p>
 <p>There are multiple projects aiming to make it possible to <span class="code">use</span> Perl 5 modules directly from Perl 6 code:</p>
 <p><a href="https://github.com/rakudo-p5/v5/">v5</a> A slang that lets Rakudo itself parse blocks of Perl 5 code, and compile them to the same bytecode that it compiles Perl 6 code to.</p>
 <p><a href="https://github.com/niner/Inline-Perl5/">Inline::Perl5</a> Uses an embedded instance of the <span class="code">perl</span> interpreter to run Perl 5 code called from your Perl 6 script.</p>
 <p>Of these, Inline::Perl5 is currently the furthest along and the most promising.</p>
 <a name="t1.2"></a><h1 id="_language_5to6-nutshell.pod6-Syntax">1.2 Syntax</h1>
 <a name="t1.2.1"></a><h2 id="_language_5to6-nutshell.pod6-->_Method_calls">1.2.1 <span class="code">-></span> Method calls</h2>
 <p>If you've read any Perl 6 code at all, it's immediately obvious that method call syntax now uses a dot instead of an arrow:</p>
 <pre class="code">$person-&gt;name  # Perl 5
$person.name   # Perl 6</pre>
 <p>The dot notation is both easier to type and more of an industry standard. But we also wanted to steal the arrow for something else. (Concatenation is now done with the <span class="code">~</span> operator, if you were wondering.)</p>
 <p>To call a method whose name is not known until runtime:</p>
 <pre class="code">$object-&gt;$methodname(@args);  # Perl 5
$object."$methodname"(@args); # Perl 6</pre>
 <p>If you leave out the quotes, then Perl 6 expects <span class="code">$methodname</span> to contain a <span class="code">Method</span> object, rather than the simple string name of the method.</p>
 <a name="t1.2.2"></a><h2 id="_language_5to6-nutshell.pod6-Whitespace">1.2.2 Whitespace</h2>
 <p>Perl 5 allows a surprising amount of flexibility in the use of whitespace, even with strict mode and warnings turned on:</p>
 <pre class="code"># unidiomatic but valid Perl 5
say"Hello ".ucfirst  ($people
    [$ i]
    -&gt;
    name)."!"if$greeted[$i]&amp;lt;1;</pre>
 <p>Perl 6 also endorses programmer freedom and creativity, but balanced syntactic flexibility against its design goal of having a consistent, deterministic, extensible grammar that supports single-pass parsing and helpful error messages, integrates features like custom operators cleanly, and doesn't lead programmers to accidentally misstate their intent. Also, the practice of "code golf" is slightly de-emphasized; Perl 6 is designed to be more concise in concepts than in keystrokes.</p>
 <p>As a result, there are various places in the syntax where whitespace is optional in Perl 5, but is either mandatory or forbidden in Perl 6. Many of those restrictions are unlikely to concern much real-life Perl code (e.g., whitespace being disallowed between the sigil and name of a variable), but there are a few that will unfortunately conflict with some Perl hackers' habitual coding styles:</p>
 <ul><li><p><i>No space allowed before the opening parenthesis of an argument list.</i></p>
 <pre class="code">substr ($s, 4, 1); # Perl 5 (in Perl 6 this would try to pass a single
                   #         argument of type List to substr)
substr($s, 4, 1);  # Perl 6
substr $s, 4, 1;   # Perl 6 - alternative parentheses-less style</pre>
</li></ul> <ul><li><p><i>Space is  <b>required</b>  immediately after keywords</i></p>
 <pre class="code">my($alpha, $beta);          # Perl 5, tries to call my() sub in Perl 6
my ($alpha, $beta);         # Perl 6

if($a &amp;lt; 0) { ... }          # Perl 5, dies in Perl 6
if ($a &amp;lt; 0) { ... }         # Perl 6
if $a &amp;lt; 0 { ... }           # Perl 6, more idiomatic

while($x-- &gt; 5) { ... }     # Perl 5, dies in Perl 6
while ($x-- &gt; 5) { ... }    # Perl 6
while $x-- &gt; 5 { ... }      # Perl 6, more idiomatic</pre>
</li></ul> <ul><li><p><i>No space allowed after a prefix operator, or before a postfix/postcircumfix operator (including array/hash subscripts).</i></p>
 <pre class="code">$seen {$_} ++; # Perl 5
%seen{$_}++;   # Perl 6</pre>
</li></ul> <ul><li><p><i>No space allowed around the method call operator.</i></p>
 <pre class="code">$customer -&gt; name; # Perl 5
$customer.name;    # Perl 6</pre>
</li></ul> <ul><li><p><i>Space required before an infix operator if it would conflict with an existing postfix/postcircumfix operator.</i></p>
 <pre class="code">$n&amp;lt;1;   # Perl 5 (in Perl 6 this would conflict with postcircumfix &amp;lt; &gt;)
$n &amp;lt; 1; # Perl 6</pre>
</li></ul> <p>However, note that you can use <a href="https://design.perl6.org/S02.html#Unspaces">unspace</a> to add whitespace in Perl 6 code in places where it is otherwise not allowed:</p>
 <pre class="code"># Perl 5
my @books = $xml-&gt;parse_file($file)          # some comment
                -&gt;findnodes("/library/book");

# Perl 6
my @books = $xml.parse-file($file)\          # some comment
                .findnodes("/library/book");</pre>
 <p>See also <a href="https://design.perl6.org/S03.html#Minimal_whitespace_DWIMmery">S03#Minimal whitespace DWIMmery</a> and <a href="https://design.perl6.org/S04.html#Statement_parsing">S04#Statement parsing</a> in the Perl 6 design docs.</p>
 <a name="t1.2.3"></a><h2 id="_language_5to6-nutshell.pod6-Sigils">1.2.3 Sigils</h2>
 <p>In Perl 5, arrays and hashes use changing sigils depending on how they are being accessed. In Perl 6 the sigils are invariant, no matter how the variable is being used - you can think of them as part of the variable's name.</p>
 <p>(See also <a href="#0-Dereferencing">#Dereferencing</a>).</p>
 <a name="t1.2.3.1"></a><h3 id="_language_5to6-nutshell.pod6-$_Scalar">1.2.3.1 <span class="code">$</span> Scalar</h3>
 <p>The <span class="code">$</span> sigil is now always used with "scalar" variables (e.g. <span class="code">$name</span>), and no longer for <a href="#0-[]_Array_indexing/slicing">array indexing</a> and <a href="#0-{}_Hash_indexing/slicing">Hash indexing</a>. That is, you can still use <span class="code">$x[1]</span> and <span class="code">$x{"foo"}</span>, but it will act on $x, with no effect on a similarly named @x or %x. Those would now be accessed with @x[1] and %x{"foo"}.</p>
 <a name="t1.2.3.2"></a><h3 id="_language_5to6-nutshell.pod6-@_Array">1.2.3.2 <span class="code">@</span> Array</h3>
 <p>The <span class="code">@</span> sigil is now always used with "array" variables (e.g. <span class="code">@months</span>, <span class="code">@months[2]</span>, <span class="code">@months[2, 4]</span>), and no longer for <a href="#0-{}_Hash_indexing/slicing">value-slicing hashes</a>.</p>
 <a name="t1.2.3.3"></a><h3 id="_language_5to6-nutshell.pod6-%_Hash">1.2.3.3 <span class="code">%</span> Hash</h3>
 <p>The <span class="code">%</span> sigil is now always used with "hash" variables (e.g. <span class="code">%calories</span>, <span class="code">%calories&lt;apple></span>, <span class="code">%calories&lt;pear plum></span>), and no longer for <a href="#0-[]_Array_indexing/slicing">key/value-slicing arrays</a>.</p>
 <a name="t1.2.3.4"></a><h3 id="_language_5to6-nutshell.pod6-&amp;_Sub">1.2.3.4 <span class="code">&amp;</span> Sub</h3>
 <p>The <span class="code">&amp;</span> sigil is now used consistently (and without the help of a backslash) to refer to the function object of a named subroutine/operator without invoking it, i.e. to use the name as a "noun" instead of a "verb":</p>
 <pre class="code">my $sub = \&amp;amp;foo; # Perl 5
my $sub = &amp;amp;foo;  # Perl 6

callback =&gt; sub { say @_ }  # Perl 5 - can't pass built-in sub directly
callback =&gt; &amp;amp;say            # Perl 6 - &amp;amp; gives "noun" form of any sub</pre>
 <p>Since Perl 6 does not allow adding/removing symbols in a lexical scope once it has finished compiling, there is no equivalent to Perl 5's <span class="code">undef &amp;foo;</span>, and the closest equivalent to Perl 5's <span class="code">defined &amp;foo</span> would be <span class="code">defined &amp;::("foo")</span> (which uses the "dynamic symbol lookup" syntax). However, you can declare a mutable named subroutine with <span class="code">my &amp;foo;</span> and then change its meaning at runtime by assigning to <span class="code">&amp;foo</span>.</p>
 <p>In Perl 5, the ampersand sigil can additionally be used to call subroutines in special ways with subtly different behavior compared to normal sub calls. In Perl 6 those special forms are no longer available:</p>
 <ul><li><p><span class="code">&amp;foo(...)</span> <i>for circumventing a function prototype</i></p>
 <p>In Perl 6 there are no prototypes, and it no longer makes a difference whether you, say, pass a literal code block or a variable holding a code object as an argument:</p>
 <pre class="code"># Perl 5:
first_index { $_ &gt; 5 } @values;
&amp;amp;first_index($coderef, @values); # (disabling the prototype that parses a
                                 # literal block as the first argument)
# Perl 6:
first { $_ &gt; 5 }, @values, :k;   # the :k makes first return an index
first $coderef, @values, :k;</pre>
</li></ul> <ul><li><p><span class="code">&amp;foo;</span> <i>and</i> <span class="code">goto &amp;foo;</span> <i>for re-using the caller's argument list / replacing the caller in the call stack</i></p>
 <pre class="code">sub foo { say "before"; &amp;amp;bar;     say "after" } # Perl 5
sub foo { say "before"; bar(|@_); say "after" } # Perl 6 - have to be explicit

# TODO: Suggest .callsame once it has been implemented in Rakudo.

sub foo { say "before"; goto &amp;amp;bar } # Perl 5

# TODO: Suggest .nextsame and .nextwith once they've been implemented in Rakudo.</pre>
</li></ul> <a name="t1.2.3.5"></a><h3 id="_language_5to6-nutshell.pod6-*_Glob">1.2.3.5 <span class="code">*</span> Glob</h3>
 TODO: Research what exact use-cases still need typeglobs in Perl 5
         today, and refactor this section to list them (with translations).
 <p>In Perl 5, the <span class="code">*</span> sigil referred to the GLOB structure that Perl uses to store non-lexical variables, file handles, subs, and formats.</p>
 <p>(This should not be confused with the Perl 5 built-in <span class="code">glob()</span> function, which reads filenames from a directory).</p>
 <p>You are most likely to encounter a GLOB in code written on a early Perl version that does not support lexical filehandles, when a filehandle needed to be passed into a sub.</p>
 <pre class="code"># Perl 5 - ancient method
sub read_2 {
    local (*H) = @_;
    return scalar(&amp;lt;H&gt;), scalar(&amp;lt;H&gt;);
}
open FILE, '&amp;lt;', $path or die;
my ($line1, $line2) = read_2(*FILE);</pre>
 <p>You should refactor your Perl 5 code to remove the need for the GLOB, before translating into Perl 6.</p>
 <pre class="code"># Perl 5 - modern use of lexical filehandles
sub read_2 {
    my ($fh) = @_;
    return scalar(&amp;lt;$fh&gt;), scalar(&amp;lt;$fh&gt;);
}
open my $in_file, '&amp;lt;', $path or die;
my ($line1, $line2) = read_2($in_file);</pre>
 <p>And here's just one possible Perl 6 translation:</p>
 <pre class="code"># Perl 6
sub read-n($fh, $n) {
    return $fh.get xx $n;
}
my $in-file = open $path or die;
my ($line1, $line2) = read-n($in-file, 2);</pre>
 <a name="t1.2.4"></a><h2 id="_language_5to6-nutshell.pod6-[]_Array_indexing/slicing">1.2.4 [] Array indexing/slicing</h2>
 <p>Index and slice operations on arrays no longer inflect the variable's <a href="#0-@_Array">sigil</a>, and adverbs can be used to control the type of slice:</p>
 <ul><li><p><i>Indexing</i></p>
 <pre class="code">say $months[2]; # Perl 5
say @months[2]; # Perl 6 - @ instead of $</pre>
</li></ul> <ul><li><p><i>Value-slicing</i></p>
 <pre class="code">say join ',', @months[6, 8..11]; # Perl 5 and Perl 6</pre>
</li></ul> <ul><li><p><i>Key/value-slicing</i></p>
 <pre class="code">say join ',', %months[6, 8..11];    # Perl 5
say join ',', @months[6, 8..11]:kv; # Perl 6 - @ instead of %; use :kv adverb</pre>
</li></ul> <p>Also note that the subscripting brackets are now a normal postcircumfix operator rather than a special syntactic form, and thus <a href="#0-exists">checking for existence of elements</a> and <a href="#0-delete">unsetting elements</a> is done with adverbs.</p>
 <a name="t1.2.5"></a><h2 id="_language_5to6-nutshell.pod6-{}_Hash_indexing/slicing">1.2.5 {} Hash indexing/slicing</h2>
 <p>Index and slice operations on hashes no longer inflect the variable's <a href="#0-%_Hash">sigil</a>, and adverbs can be used to control the type of slice. Also, single-word subscripts are no longer magically autoquoted inside the curly braces; instead, the new angle-brackets version is available which always autoquotes its contents (using the same rules as the <span class="code">qw//</span> quoting construct):</p>
 <ul><li><p><i>Indexing</i></p>
 <pre class="code">say $calories{"apple"}; # Perl 5
say %calories{"apple"}; # Perl 6 - % instead of $

say $calories{apple}; # Perl 5
say %calories&amp;lt;apple&gt;; # Perl 6 - angle brackets; % instead of $
say %calories«$key»;  # Perl 6 - double angles interpolate as a list of Str</pre>
</li></ul> <ul><li><p><i>Value-slicing</i></p>
 <pre class="code">say join ',', @calories{'pear', 'plum'}; # Perl 5
say join ',', %calories{'pear', 'plum'}; # Perl 6 - % instead of @
say join ',', %calories&amp;lt;pear plum&gt;;      # Perl 6 (prettier version)
my $keys = 'pear plum';
say join ',', %calories«$keys»;          # Perl 6 the split is done after interpolation</pre>
</li></ul> <ul><li><p><i>Key/value-slicing</i></p>
 <pre class="code">say join ',', %calories{'pear', 'plum'};    # Perl 5
say join ',', %calories{'pear', 'plum'}:kv; # Perl 6 - use :kv adverb
say join ',', %calories&amp;lt;pear plum&gt;:kv;      # Perl 6 (prettier version)</pre>
</li></ul> <p>Also note that the subscripting curly braces are now a normal postcircumfix operator rather than a special syntactic form, and thus <a href="#0-exists">checking for existence of keys</a> and <a href="#0-delete">removing keys</a> is done with adverbs.</p>
 <a name="t1.2.6"></a><h2 id="_language_5to6-nutshell.pod6-Reference_creation">1.2.6 Reference creation</h2>
 TODO: Rewrite this section to make it clear that the "referencing/
         dereferencing" metaphor does not map cleanly to the actual Perl 6
         container system, and focus more on how one would translate or
         replace actual code that uses references in Perl 5.
 <p>In Perl 5, references to anonymous arrays and hashes and subs are returned during their creation. References to existing named variables and subs were generated with the <span class="code">\</span> operator.</p>
 <p>In Perl 6, anonymous arrays and hashes and subs still return their reference during creation. References to named subs are generated by preceding the sub name with a <span class="code">&amp;</span> sigil. References to existing named variables are generated by <span class="code">item</span> context.</p>
 <pre class="code">my $aref = [ 1, 2, 9 ];          # Both Perl 5&amp;amp;6
my $href = { A =&gt; 98, Q =&gt; 99 }; # Both Perl 5&amp;amp;6 [*See Note*]

my $aref =     \@aaa  ; # Perl 5
my $aref = item(@aaa) ; # Perl 6

my $href =     \%hhh  ; # Perl 5
my $href = item(%hhh) ; # Perl 6

my $sref =     \&amp;amp;foo  ; # Perl 5
my $sref =      &amp;amp;foo  ; # Perl 6</pre>
 <p><b>NOTE:</b> If one or more values reference the topic variable, <span class="code">$_</span>, the right-hand side of the assignment will be interpreted as a <a href="#_type_Block.pod6">Block</a>, not a Hash:</p>
 <pre class="code">my @people = [
    { id =&gt; "1A", firstName =&gt; "Andy", lastName =&gt; "Adams" },
    { id =&gt; "2B", firstName =&gt; "Beth", lastName =&gt; "Burke" },
    # ...
];

sub lookup-user (Hash $h) { #`(Do something...) $h }

my @names = map {
    my $query = { name =&gt; "$_&amp;lt;firstName&gt; $_&amp;lt;lastName&gt;" };
    say $query.WHAT;       # Block
    say $query&amp;lt;name&gt;;      # ERROR: Type Block does not support associative indexing

    lookup-user($query);   # Type check failed in binding $h; expected Hash but got Block
}, @people;</pre>
 <p>Instead, you should either:</p>
 <ul><li><p>1) use the <span class="code">%()</span> hash constructor:</p>
 <pre class="code">my $query = %( name =&gt; "$_&amp;lt;firstName&gt; $_&amp;lt;lastName&gt;" );</pre>
</li></ul> <ul><li><p>2) assign to a Hash type (<span class="code">%</span>) directly:</p>
 <pre class="code">my %query = name =&gt; "$_&amp;lt;firstName&gt; $_&amp;lt;lastName&gt;";   # No braces required</pre>
</li></ul> <ul><li><p>or 3) simply avoid the issue altogether by explicitly providing a name for the topic variable:</p>
 <pre class="code">my @names = @people.map: -&gt; $person {
    lookup-user( %( name =&gt; "$person&amp;lt;firstName&gt; $person&amp;lt;lastName&gt;" ) );
};</pre>
</li></ul> <p>See <a href="#_type_Hash.pod6-Hash_assignment">Hash assignment</a> for more details.</p>
 <a name="t1.2.7"></a><h2 id="_language_5to6-nutshell.pod6-Dereferencing">1.2.7 Dereferencing</h2>
 <p>In Perl 5, the syntax for dereferencing an entire reference is the type-sigil and curly braces, with the reference inside the curly braces.</p>
 <p>In Perl 6, the curly braces are changed to parentheses.</p>
 <pre class="code"># Perl 5
    say      ${$scalar_ref};
    say      @{$arrayref  };
    say keys %{$hashref   };
    say      &amp;amp;{$subref    };

# Perl 6
    say      $($scalar_ref);
    say      @($arrayref  );
    say keys %($hashref   );
    say      &amp;amp;($subref    );</pre>
 <p>Note that in both Perl 5 and Perl 6, the surrounding curly braces or parens can often be omitted, though the omission can reduce readability.</p>
 <p>In Perl 5, the arrow operator, <span class="code">-></span> , is used for single access to a composite's reference or to call a sub through its reference. In Perl 6, we now use the dot operator <span class="code">.</span> for those tasks.</p>
 <pre class="code"># Perl 5
    say $arrayref-&gt;[7];
    say $hashref-&gt;{'fire bad'};
    say $subref-&gt;($foo, $bar);

# Perl 6
    say $arrayref.[7];
    say $hashref.{'fire bad'};
    say $subref.($foo, $bar);</pre>
 <p>In recent versions of Perl 5 (5.20 and later), a new feature allows the use of the arrow op for dereferencing. See <a href="http://search.cpan.org/~shay/perl-5.20.1/pod/perl5200delta.pod#Experimental_Postfix_Dereferencing">http://search.cpan.org/~shay/perl-5.20.1/pod/perl5200delta.pod#Experimental_Postfix_Dereferencing</a> That new feature corresponds Perl 6 <span class="code">.list</span> and <span class="code">.hash</span> methods:</p>
 <pre class="code"># Perl 5.20
    use experimental qw&amp;lt; postderef &gt;;
    my @a = $arrayref-&gt;@*;
    my %h = $hashref-&gt;%*;
    my @slice = $arrayref-&gt;@[3..7];

# Perl 6
    my @a = $arrayref.list;         # or @($arrayref)
    my %h = $hashref.hash;          # or %($hashref)
    my @slice = $arrayref[3..7];</pre>
 <p>The "Zen" slice does the same thing:</p>
 <pre class="code"># Perl 6
    my @a = $arrayref[];
    my %h = $hashref{};</pre>
 <p>See <a href="https://design.perl6.org/S32/Containers.html">S32/Containers</a></p>
 <a name="t1.3"></a><h1 id="_language_5to6-nutshell.pod6-Operators">1.3 Operators</h1>
 <p>See <a href="https://design.perl6.org/S03.html#Overview">S03/Operators</a> for full details on all operators.</p>
 <p>Unchanged:</p>
 <ul><li><p><span class="code">,</span> List Separator</p>
</li></ul> <ul><li><p><span class="code">+</span> Numeric Addition</p>
</li></ul> <ul><li><p><span class="code">-</span> Numeric Subtraction</p>
</li></ul> <ul><li><p><span class="code">*</span> Numeric Multiplication</p>
</li></ul> <ul><li><p><span class="code">/</span> Numeric Division</p>
</li></ul> <ul><li><p><span class="code">%</span> Numeric Modulus</p>
</li></ul> <ul><li><p><span class="code">**</span> Numeric Exponentiation</p>
</li></ul> <ul><li><p><span class="code">++</span> Numeric Increment</p>
</li></ul> <ul><li><p><span class="code">--</span> Numeric Decrement</p>
</li></ul> <ul><li><p><span class="code">! &amp;&amp; || ^</span> Booleans, high-precedence</p>
</li></ul> <ul><li><p><span class="code">not and or xor</span> Booleans, low-precedence</p>
</li></ul> <ul><li><p><span class="code">== != &lt; > &lt;= >=</span> Numeric comparisons</p>
</li></ul> <ul><li><p><span class="code">eq ne lt gt le ge</span> String comparisons</p>
</li></ul> <a name="t1.3.1"></a><h2 id="_language_5to6-nutshell.pod6-&lt;=>_cmp_Three-way_comparisons">1.3.1 <span class="code">&lt;=> cmp</span> Three-way comparisons</h2>
 <p>In Perl 5, these operators returned -1, 0, or 1. In Perl 6, they return <span class="code">Order::Less</span>, <span class="code">Order::Same</span>, or <span class="code">Order::More</span>.</p>
 <p><span class="code">cmp</span> is now named <span class="code">leg</span>; it forces string context for the comparison.</p>
 <p><span class="code">&lt;=></span> still forces numeric context.</p>
 <p><span class="code">cmp</span> in Perl 6 does either <span class="code">&lt;=></span> or <span class="code">leg</span>, depending on the existing type of its arguments.</p>
 <a name="t1.3.2"></a><h2 id="_language_5to6-nutshell.pod6-~~_Smart-match_operator">1.3.2 <span class="code">~~</span> Smart-match operator</h2>
 <p>While the operator has not changed, the rules for what exactly is matched depends on the types of both arguments, and those rules are far from identical in Perl 5 and Perl 6. See <a href="https://design.perl6.org/S03.html#Smart_matching">S03/Smart matching</a></p>
 <a name="t1.3.3"></a><h2 id="_language_5to6-nutshell.pod6-&amp;_|_^_String_Bitwise_ops">1.3.3 <span class="code">&amp; | ^</span> String Bitwise ops</h2>
 <a name="t1.3.4"></a><h2 id="_language_5to6-nutshell.pod6-&amp;_|_^_Numeric_Bitwise_ops">1.3.4 <span class="code">&amp; | ^</span> Numeric Bitwise ops</h2>
 <a name="t1.3.5"></a><h2 id="_language_5to6-nutshell.pod6-&amp;_|_^_Boolean_ops">1.3.5 <span class="code">&amp; | ^</span> Boolean ops</h2>
 <p>In Perl 5, <span class="code">&amp; | ^</span> were invoked according to the contents of their arguments. For example, <span class="code">31 | 33</span> returns a different result than <span class="code">"31" | "33"</span>.</p>
 <p>In Perl 6, those single-character ops have been removed, and replaced by two-character ops which coerce their arguments to the needed context.</p>
 <pre class="code"># Infix ops (two arguments; one on each side of the op)
+&amp;amp;  +|  +^  And Or Xor: Numeric
~&amp;amp;  ~|  ~^  And Or Xor: String
?&amp;amp;  ?|  ?^  And Or Xor: Boolean

# Prefix ops (one argument, after the op)
+^  Not: Numeric
~^  Not: String
?^  Not: Boolean (same as the ! op)</pre>
 <a name="t1.3.6"></a><h2 id="_language_5to6-nutshell.pod6-&lt;&lt;_>>_Numeric_shift_left|right_ops">1.3.6 <span class="code">&lt;&lt; >></span> Numeric shift left|right ops</h2>
 <p>Replaced by <span class="code">+&lt;</span> and <span class="code">+></span> .</p>
 <pre class="code">say 42 &amp;lt;&amp;lt; 3; # Perl 5
say 42 +&amp;lt; 3; # Perl 6</pre>
 <a name="t1.3.7"></a><h2 id="_language_5to6-nutshell.pod6-=>_Fat_comma">1.3.7 <span class="code">=></span> Fat comma</h2>
 <p>In Perl 5, <span class="code">=></span> acted just like a comma, but also quoted its left-hand side.</p>
 <p>In Perl 6, <span class="code">=></span> is the Pair operator, which is quite different in principle, but works the same in many situations.</p>
 <p>If you were using <span class="code">=></span> in hash initialization, or in passing arguments to a sub that expects a hashref, then the usage is likely identical.</p>
 <pre class="code"># Works in Perl 5 and Perl 6
my %hash = ( AAA =&gt; 1, BBB =&gt; 2 );
get_the_loot( 'diamonds', { quiet_level =&gt; 'very', quantity =&gt; 9 }); # Note the curly braces</pre>
 <p>If you were using <span class="code">=></span> as a convenient shortcut to not have to quote part of a list, or in passing arguments to a sub that expects a flat list of KEY, VALUE, KEY, VALUE, then continuing to use <span class="code">=></span> may break your code. The easiest workaround is to change the fat comma to a regular comma, and manually add quotes to its left-hand side. Or, you can change the sub's API to slurp a hash. A better long-term solution is to change the sub's API to expect Pairs. However, this requires you to change all sub calls at once.</p>
 <pre class="code"># Perl 5
sub get_the_loot {
    my $loot = shift;
    my %options = @_;
    # ...
}
# Note: no curly braces in this sub call
get_the_loot( 'diamonds', quiet_level =&gt; 'very', quantity =&gt; 9 );
# Perl 6, original API
sub get_the_loot( $loot, *%options ) { # The * means to slurp everything
    ...
}
get_the_loot( 'diamonds', quiet_level =&gt; 'very', quantity =&gt; 9 ); # Note: no curly braces in this API

# Perl 6, API changed to specify valid options
# The colon before the sigils means to expect a Pair,
# with the key having the same name as the variable.
sub get_the_loot( $loot, :$quiet_level?, :$quantity = 1 ) {
    # This version will check for unexpected arguments!
    ...
}
get_the_loot( 'diamonds', quietlevel =&gt; 'very' ); # Throws error for misspelled parameter name</pre>
 <a name="t1.3.8"></a><h2 id="_language_5to6-nutshell.pod6-?_:_Ternary_operator">1.3.8 <span class="code">? :</span> Ternary operator</h2>
 <p>Now spelled with two question marks instead of one question mark, and two exclamation points instead of one colon.</p>
 <pre class="code">my $result = ( $score &gt; 60 )  ? 'Pass'  : 'Fail'; # Perl 5
my $result = ( $score &gt; 60 ) ?? 'Pass' !! 'Fail'; # Perl 6</pre>
 <a name="t1.3.9"></a><h2 id="_language_5to6-nutshell.pod6-._(Dot_op)_Concatenation">1.3.9 <span class="code">.</span> (Dot op) Concatenation</h2>
 <p>Replaced by the tilde.</p>
 <p>Mnemonic: think of "stitching" together the two strings with needle and thread.</p>
 <pre class="code">$food = 'grape' . 'fruit'; # Perl 5
$food = 'grape' ~ 'fruit'; # Perl 6</pre>
 <a name="t1.3.10"></a><h2 id="_language_5to6-nutshell.pod6-x_List_Repeat_op_or_String_Repeat_op">1.3.10 <span class="code">x</span> List Repeat op or String Repeat op</h2>
 <p>In Perl 5, <span class="code">x</span> was the Repetition operator.</p>
 <p>In scalar context, <span class="code">x</span> would repeat a string. In Perl 6, <span class="code">x</span> repeats strings in any context.</p>
 <p>In list context, <span class="code">x</span> would repeat a list—but only if the left argument is parenthesized! In Perl 6, the new <span class="code">xx</span> op repeats lists in any context.</p>
 <p>Mnemonic: x is short and xx is long, so xx is the one used for lists.</p>
 <pre class="code"># Perl 5
    print '-' x 80;             # Print row of dashes
    @ones = (1) x 80;           # A list of 80 1's
    @ones = (5) x @ones;        # Set all elements to 5
# Perl 6
    print '-' x 80;             # Unchanged
    @ones = 1 xx 80;            # Parens no longer needed
    @ones = 5 xx @ones;         # Parens no longer needed</pre>
 <a name="t1.3.11"></a><h2 id="_language_5to6-nutshell.pod6-.._..._Two_Dots_or_Three_Dots,_Range_op_or_Flipflop_op">1.3.11 <span class="code">..</span> <span class="code">...</span> Two Dots or Three Dots, Range op or Flipflop op</h2>
 <p>In Perl 5, <span class="code">..</span> was one of two completely different operators, depending on context.</p>
 <p>In list context, <span class="code">..</span> is the familiar range operator. Range has many new wrinkles in Perl 6, but ranges from Perl 5 code should not <b>require</b> translation.</p>
 <p>In scalar context, <span class="code">..</span> and <span class="code">...</span> were the little-known Flipflop operators. They have been replaced by <span class="code">ff</span> and <span class="code">fff</span>.</p>
 <a name="t1.3.12"></a><h2 id="_language_5to6-nutshell.pod6-String_interpolation">1.3.12 String interpolation</h2>
 <p>In Perl 5, <span class="code">"${foo}s"</span> deliminates a variable name from regular text next to it. In Perl 6, simply extend the curly braces to include the sigil too: <span class="code">"{$foo}s"</span></p>
 <a name="t1.4"></a><h1 id="_language_5to6-nutshell.pod6-Compound_Statements">1.4 Compound Statements</h1>
 <a name="t1.4.1"></a><h2 id="_language_5to6-nutshell.pod6-Conditionals">1.4.1 Conditionals</h2>
 <a name="t1.4.1.1"></a><h3 id="_language_5to6-nutshell.pod6-if_elsif_else_unless">1.4.1.1 <span class="code">if</span> <span class="code">elsif</span> <span class="code">else</span> <span class="code">unless</span></h3>
 <p>Mostly unchanged; parens around the conditions are now optional, but if used, must not immediately follow the keyword, or it will be taken as a function call instead. Binding the conditional expression to a variable is also a little different:</p>
 <pre class="code">if (my $x = dostuff()) {...}  # Perl 5
if dostuff() -&gt; $x {...}      # Perl 6</pre>
 <p>(You can still use the <span class="code">my</span> form in Perl 6, but it will scope to the outer block, not the inner.)</p>
 <p>The <span class="code">unless</span> conditional only allows for a single block in Perl 6; it does not allow for an <span class="code">elsif</span> or <span class="code">else</span> clause.</p>
 <a name="t1.4.1.2"></a><h3 id="_language_5to6-nutshell.pod6-given-when">1.4.1.2 <span class="code">given</span>-<span class="code">when</span></h3>
 <p>The <span class="code">given</span>-<span class="code">when</span> construct is like a chain of <span class="code">if</span>-<span class="code">elsif</span>-<span class="code">else</span> statements or like the <span class="code">switch</span>-<span class="code">case</span> construct in e.g. C. It has the general structure:</p>
 <pre class="code">given EXPR {
    when EXPR { ... }
    when EXPR { ... }
    default { ... }
}</pre>
 <p>In its simplest form, the construct is as follows:</p>
 <pre class="code">given $value {
    when "a match" {
        do-something();
    }
    when "another match" {
        do-something-else();
    }
    default {
        do-default-thing();
    }
}</pre>
 <p>This is simple in the sense that a scalar value is matched in the <span class="code">when</span> statements. More generally, the matches are actually smart-matches on the input value such that lookups using more complex entities such as regexps can be used instead of scalar values.</p>
 <p>See also the warnings on the smart-match op above.</p>
 <a name="t1.4.2"></a><h2 id="_language_5to6-nutshell.pod6-Loops">1.4.2 Loops</h2>
 <a name="t1.4.2.1"></a><h3 id="_language_5to6-nutshell.pod6-while_until">1.4.2.1 <span class="code">while</span> <span class="code">until</span></h3>
 <p>Mostly unchanged; parens around the conditions are now optional, but if used, must not immediately follow the keyword, or it will be taken as a function call instead. Binding the conditional expression to a variable is also a little different:</p>
 <pre class="code">while (my $x = dostuff()) {...}  # Perl 5
while dostuff() -&gt; $x {...}      # Perl 6</pre>
 <p>(You can still use the <span class="code">my</span> form in Perl 6, but it will scope to the outer block, not the inner.)</p>
 <p>Note that reading line-by-line from a filehandle has changed.</p>
 <p>In Perl 5, it was done in a <span class="code">while</span> loop using the diamond operator. Using <span class="code">for</span> instead of <span class="code">while</span> was a common bug, because the <span class="code">for</span> causes the whole file to be sucked in at once, swamping the program's memory usage.</p>
 <p>In Perl 6, <span class="code">for</span> statement is <b>lazy</b>, so we read line-by-line in a <span class="code">for</span> loop using the <span class="code">.lines</span> method.</p>
 <pre class="code">while (&amp;lt;IN_FH&gt;)  { } # Perl 5
for $IN_FH.lines { } # Perl 6</pre>
 <a name="t1.4.2.2"></a><h3 id="_language_5to6-nutshell.pod6-do_while/until">1.4.2.2 <span class="code">do</span> <span class="code">while</span>/<span class="code">until</span></h3>
 <pre class="code">do {
    ...
} while $x &amp;lt; 10;

do {
    ...
} until $x &gt;= 10;</pre>
 <p>The construct is still present, but <span class="code">do</span> was renamed to <span class="code">repeat</span>, to better represent what the construct does:</p>
 <pre class="code">repeat {
    ...
} while $x &amp;lt; 10;

repeat {
    ...
} until $x &gt;= 10;</pre>
 <a name="t1.4.2.3"></a><h3 id="_language_5to6-nutshell.pod6-for_foreach">1.4.2.3 <span class="code">for</span> <span class="code">foreach</span></h3>
 <p>Note first this common misunderstanding about the <span class="code">for</span> and <span class="code">foreach</span> keywords. Many programmers think that they distinguish between the C-style three-expression form and the list-iterator form; they do not! In fact, the keywords are interchangeable; the Perl 5 compiler looks for the semi-colons within the parens to determine which type of loop to parse.</p>
 <p>The C-style three-factor form now uses the <span class="code">loop</span> keyword, and is otherwise unchanged. The parens *are* still required.</p>
 <pre class="code">for  ( my $i = 1; $i &amp;lt;= 10; $i++ ) { ... } # Perl 5
loop ( my $i = 1; $i &amp;lt;= 10; $i++ ) { ... } # Perl 6</pre>
 <p>The loop-iterator form of <span class="code">for</span> or <span class="code">foreach</span> is named <span class="code">for</span> in Perl 6. <span class="code">foreach</span> is no longer a keyword. Parens are optional.</p>
 <p>The iteration variable, if any, has been moved from before the list, to after the list and an added arrow operator.</p>
 <p>The iteration variable is now always lexical; <span class="code">my</span> is neither needed nor allowed.</p>
 <p>In Perl 5, the iteration variable is a read-write alias to the current list element.</p>
 <p>In Perl 6, that alias is read-only (for safety), unless you change <span class="code">-></span> to <span class="code">&lt;-></span>. When translating, inspect the use of the loop variable to decide if read-write is needed.</p>
 <pre class="code">for my $car (@cars)  {...} # Perl 5; read-write
for @cars  -&gt; $car   {...} # Perl 6; read-only
for @cars &amp;lt;-&gt; $car   {...} # Perl 6; read-write</pre>
 <p>If the default topic <span class="code">$_</span> is being used, but needs to be read-write, then just use <span class="code">&lt;-></span> and explicitly specify <span class="code">$_</span>.</p>
 <pre class="code">for (@cars)      {...} # Perl 5; default topic
for @cars        {...} # Perl 6; $_ is read-only
for @cars &amp;lt;-&gt; $_ {...} # Perl 6; $_ is read-write</pre>
 <a name="t1.4.2.3.1"></a><h4 id="_language_5to6-nutshell.pod6-each">1.4.2.3.1 <span class="code">each</span></h4>
 <p>Here is the equivalent to Perl 5’s <span class="code">while…each(%hash)</span> or <span class="code">while…each(@array)</span> (= iterating over both the keys or indices and values of a data structure) in Perl 6:</p>
 <pre class="code">while (my ($i, $v) = each(@array)) { ... } # Perl 5
for @array.kv -&gt; $i, $v { ... } # Perl 6

while (my ($k, $v) = each(%hash)) { ... } # Perl 5
for %hash.kv -&gt; $k, $v { ... } # Perl 6</pre>
 <a name="t1.4.3"></a><h2 id="_language_5to6-nutshell.pod6-Flow_Control_statements">1.4.3 Flow Control statements</h2>
 <p>Unchanged:</p>
 <ul><li><p><span class="code">next</span></p>
</li></ul> <ul><li><p><span class="code">last</span></p>
</li></ul> <ul><li><p><span class="code">redo</span></p>
</li></ul> <a name="t1.4.3.1"></a><h3 id="_language_5to6-nutshell.pod6-continue">1.4.3.1 <span class="code">continue</span></h3>
 <p>There is no longer a <span class="code">continue</span> block. Instead, use a <span class="code">NEXT</span> block within the body of the loop.</p>
 <pre class="code"># Perl 5
    my $str = '';
    for (1..5) {
        next if $_ % 2 == 1;
        $str .= $_;
    }
    continue {
        $str .= ':'
    }
# Perl 6
    my $str = '';
    for 1..5 {
        next if $_ % 2 == 1;
        $str ~= $_;
        NEXT {
            $str ~= ':'
        }
    }</pre>
 <a name="t1.5"></a><h1 id="_language_5to6-nutshell.pod6-Functions">1.5 Functions</h1>
 NOTE FOR EDITORS: When adding functions, please place them in
                           alphabetical order.
 <a name="t1.5.1"></a><h2 id="_language_5to6-nutshell.pod6-Built-ins_with_bare_blocks">1.5.1 Built-ins with bare blocks</h2>
 <p>Builtins that previously accepted a bare block followed, without a comma, by the remainder of the arguments will now require a comma between the block and the arguments e.g. <span class="code">map</span>, <span class="code">grep</span>, etc.</p>
 <pre class="code">my @results = grep { $_ eq "bars" } @foo; # Perl 5
my @results = grep { $_ eq "bars" }, @foo; # Perl 6</pre>
 <a name="t1.5.2"></a><h2 id="_language_5to6-nutshell.pod6-delete">1.5.2 <span class="code">delete</span></h2>
 <p>Turned into an adverb of the <a href="#0-{}_Hash_indexing/slicing"> <span class="code">{}</span>  hash subscripting</a> and <a href="#0-[]_Array_indexing/slicing"> <span class="code">[]</span>  array subscripting</a> operators.</p>
 <pre class="code">my $deleted_value = delete $hash{$key};  # Perl 5
my $deleted_value = %hash{$key}:delete;  # Perl 6 - use :delete adverb

my $deleted_value = delete $array[$i];  # Perl 5
my $deleted_value = @array[$i]:delete;  # Perl 6 - use :delete adverb</pre>
 <a name="t1.5.3"></a><h2 id="_language_5to6-nutshell.pod6-exists">1.5.3 <span class="code">exists</span></h2>
 <p>Turned into an adverb of the <a href="#0-{}_Hash_indexing/slicing"> <span class="code">{}</span>  hash subscripting</a> and <a href="#0-[]_Array_indexing/slicing"> <span class="code">[]</span>  array subscripting</a> operators.</p>
 <pre class="code">say "element exists" if exists $hash{$key};  # Perl 5
say "element exists" if %hash{$key}:exists;  # Perl 6 - use :exists adverb

say "element exists" if exists $array[$i];  # Perl 5
say "element exists" if @array[$i]:exists;  # Perl 6 - use :exists adverb</pre>
 <a name="t1.6"></a><h1 id="_language_5to6-nutshell.pod6-Regular_Expressions_(_Regex_/_Regexp_)">1.6 Regular Expressions ( Regex / Regexp )</h1>
 <a name="t1.6.1"></a><h2 id="_language_5to6-nutshell.pod6-Change_=~_and_!~_to_~~_and_!~~_.">1.6.1 Change <span class="code">=~</span> and <span class="code">!~</span> to <span class="code">~~</span> and <span class="code">!~~</span> .</h2>
 <p>In Perl 5, matches and substitutions are done against a variable using the <span class="code">=~</span> regexp-binding op.</p>
 <p>In Perl 6, the <span class="code">~~</span> smartmatch op is used instead.</p>
 <pre class="code">next if $line  =~ /static/  ; # Perl 5
next if $line  ~~ /static/  ; # Perl 6

next if $line  !~ /dynamic/ ; # Perl 5
next if $line !~~ /dynamic/ ; # Perl 6

$line =~ s/abc/123/;          # Perl 5
$line ~~ s/abc/123/;          # Perl 6</pre>
 <p>Alternately, the new <span class="code">.match</span> and <span class="code">.subst</span> methods can be used. Note that <span class="code">.subst</span> is non-mutating. See <a href="https://design.perl6.org/S05.html#Substitution">S05/Substitution</a>.</p>
 <a name="t1.6.2"></a><h2 id="_language_5to6-nutshell.pod6-Captures_start_with_0,_not_1">1.6.2 Captures start with 0, not 1</h2>
 <pre class="code">/(.+)/ and print $1; # Perl 5
/(.+)/ and print $0; # Perl 6</pre>
 <a name="t1.6.3"></a><h2 id="_language_5to6-nutshell.pod6-Move_modifiers">1.6.3 Move modifiers</h2>
 <p>Move any modifiers from the end of the regex to the beginning. This may require you to add the optional <span class="code">m</span> on a plain match like <span class="code">/abc/</span>.</p>
 <pre class="code">next if $line =~    /static/i ; # Perl 5
next if $line ~~ m:i/static/  ; # Perl 6</pre>
 <a name="t1.6.4"></a><h2 id="_language_5to6-nutshell.pod6-Add_:P5_or_:Perl5_adverb">1.6.4 Add :P5 or :Perl5 adverb</h2>
 <p>If the actual regex is complex, you may want to use it as-is, by adding the <span class="code">P5</span> modifier.</p>
 <pre class="code">next if $line =~    m/[aeiou]/   ; # Perl 5
next if $line ~~ m:P5/[aeiou]/   ; # Perl 6, using P5 modifier
next if $line ~~ m/  &amp;lt;[aeiou]&gt; / ; # Perl 6, native new syntax</pre>
 <a name="t1.6.5"></a><h2 id="_language_5to6-nutshell.pod6-Special_matchers_generally_fall_under_the_&lt;>_syntax">1.6.5 Special matchers generally fall under the &lt;> syntax</h2>
 <p>There are many cases of special matching syntax that Perl 5 regexes support. They won't all be listed here, but often instead of being surrounded by <span class="code">()</span>, the assertions will be surrounded by <span class="code">&lt;></span>.</p>
 <p>For character classes, this means that:</p>
 <ul><li><p><span class="code">[abc]</span> becomes <span class="code">&lt;[abc]></span></p>
</li></ul> <ul><li><p><span class="code">[^abc]</span> becomes <span class="code">&lt;-[abc]></span></p>
</li></ul> <ul><li><p><span class="code">[a-zA-Z]</span> becomes <span class="code">&lt;[a..zA..Z]></span></p>
</li></ul> <ul><li><p><span class="code">[[:upper:]]</span> becomes <span class="code">&lt;:Upper></span></p>
</li></ul> <ul><li><p><span class="code">[abc[:upper:]]</span> becomes <span class="code">&lt;[abc]+:Upper></span></p>
</li></ul> <p>For look-around assertions:</p>
 <ul><li><p><span class="code">(?=[abc])</span> becomes <span class="code">&lt;?[abc]></span></p>
</li></ul> <ul><li><p><span class="code">(?=ar?bitrary* pattern)</span> becomes <span class="code">&lt;before ar?bitrary* pattern></span></p>
</li></ul> <ul><li><p><span class="code">(?!=[abc])</span> becomes <span class="code">&lt;![abc]></span></p>
</li></ul> <ul><li><p><span class="code">(?!=ar?bitrary* pattern)</span> becomes <span class="code">&lt;!before ar?bitrary* pattern></span></p>
</li></ul> <ul><li><p><span class="code">(?&lt;=ar?bitrary* pattern)</span> becomes <span class="code">&lt;after ar?bitrary* pattern></span></p>
</li></ul> <ul><li><p><span class="code">(?&lt;!ar?bitrary* pattern)</span> becomes <span class="code">&lt;!after ar?bitrary* pattern></span></p>
</li></ul> <p>(Unrelated to &lt;> syntax, the "lookaround" <span class="code">/foo\Kbar/</span> becomes <span class="code">/foo &lt;( bar )> /</span></p>
 <ul><li><p><span class="code">(?(?{condition))yes-pattern|no-pattern)</span> becomes <span class="code">[ &lt;?{condition}> yes-pattern | no-pattern ]</span></p>
</li></ul> <a name="t1.6.6"></a><h2 id="_language_5to6-nutshell.pod6-Longest_token_matching_(LTM)_displaces_alternation">1.6.6 Longest token matching (LTM) displaces alternation</h2>
 <p>In Perl 6 regexen, <span class="code">|</span> does LTM, which decides which alternation wins an ambiguous match based off of a set of rules, rather than about which was written first.</p>
 <p>The simplest way to deal with this is just to change any <span class="code">|</span> in your Perl 5 regex to a <span class="code">||</span>.</p>
 <p>TODO more rules. Use <a href="https://github.com/Util/Blue_Tiger/ "> <span class="code">translate_regex.pl</span>  from Blue Tiger</a> in the meantime.</p>
 <a name="t1.7"></a><h1 id="_language_5to6-nutshell.pod6-Pragmas">1.7 Pragmas</h1>
 <a name="t1.7.6.1"></a><h3 id="_language_5to6-nutshell.pod6-strict">1.7.6.1 <span class="code">strict</span></h3>
 <p>Strict mode is now on by default.</p>
 <a name="t1.7.6.2"></a><h3 id="_language_5to6-nutshell.pod6-warnings">1.7.6.2 <span class="code">warnings</span></h3>
 <p>Warnings are now on by default.</p>
 <p><span class="code">no warnings</span> is currently <a href="#_language_glossary.pod6-NYI">NYI</a>, but putting things in a quietly {} block will silence.</p>
 <a name="t1.7.6.3"></a><h3 id="_language_5to6-nutshell.pod6-autodie">1.7.6.3 <span class="code">autodie</span></h3>
 <p>The functions which were altered by <span class="code">autodie</span> to throw exceptions on error, now throw exceptions by default unless you test the return value explicitly.</p>
 <pre class="code"># Perl 5
open my $i_fh, '&amp;lt;', $input_path;  # Fails silently on error
use autodie;
open my $o_fh, '&gt;', $output_path; # Throws exception on error

# Perl 6
my $i_fh = open $input_path,  :r; # Throws exception on error
my $o_fh = open $output_path, :w; # Throws exception on error</pre>
 <a name="t1.7.6.4"></a><h3 id="_language_5to6-nutshell.pod6-base">1.7.6.4 <span class="code">base</span></h3>
 <a name="t1.7.6.5"></a><h3 id="_language_5to6-nutshell.pod6-parent">1.7.6.5 <span class="code">parent</span></h3>
 <p>Both <span class="code">use base</span> and <span class="code">use parent</span> have been replaced in Perl 6 by the <span class="code">is</span> keyword, in the class declaration.</p>
 <pre class="code"># Perl 5
package Cat;
use base qw(Animal);

# Perl 6
class Cat is Animal;</pre>
 <a name="t1.7.6.6"></a><h3 id="_language_5to6-nutshell.pod6-bigint_bignum_bigrat">1.7.6.6 <span class="code">bigint</span> <span class="code">bignum</span> <span class="code">bigrat</span></h3>
 <p>No longer relevant.</p>
 <p><span class="code">Int</span> is now arbitrary precision, as is the numerator of <span class="code">Rat</span> (the denominator is limited to <span class="code">2**64</span>, after which it will automatically upgrade to <span class="code">Num</span> to preserve performance). If you want a <span class="code">Rat</span> with an arbitrary-precision denominator, <span class="code">FatRat</span> is available.</p>
 <a name="t1.7.6.7"></a><h3 id="_language_5to6-nutshell.pod6-constant">1.7.6.7 <a name="1"></a> <span class="code">constant</span> </h3>
 <p>In Perl 6, <span class="code">constant</span> is a declarator for variables, just like <span class="code">my</span>, except the variable is permanently locked to the result of its initialization expression (evaluated at compile time).</p>
 <p>So, change the <span class="code">=></span> to <span class="code">=</span> , and add a sigil.</p>
 <pre class="code">use constant DEBUG =&gt; 0; # Perl 5
constant $DEBUG = 0;     # Perl 6

use constant pi =&gt; 4 * atan2(1, 1); # Perl 5
# pi, e, i are built-in constants in  Perl 6</pre>
 <a name="t1.7.6.8"></a><h3 id="_language_5to6-nutshell.pod6-encoding">1.7.6.8 <span class="code">encoding</span></h3>
 <p>TODO Allows you to write your script in non-ascii or non-utf8</p>
 <a name="t1.7.6.9"></a><h3 id="_language_5to6-nutshell.pod6-integer">1.7.6.9 <span class="code">integer</span></h3>
 <p>Perl pragma to use integer arithmetic instead of floating point</p>
 <a name="t1.7.6.10"></a><h3 id="_language_5to6-nutshell.pod6-lib">1.7.6.10 <span class="code">lib</span></h3>
 <p>Manipulate @INC at compile time</p>
 <a name="t1.7.6.11"></a><h3 id="_language_5to6-nutshell.pod6-mro">1.7.6.11 <span class="code">mro</span></h3>
 <p>No longer relevant.</p>
 <p>In Perl 6, method calls now always use the C3 method resolution order.</p>
 <a name="t1.7.6.12"></a><h3 id="_language_5to6-nutshell.pod6-utf8">1.7.6.12 <span class="code">utf8</span></h3>
 <p>No longer relevant.</p>
 <p>In Perl 6, source code is expected to be in utf8 encoding.</p>
 <a name="t1.7.6.13"></a><h3 id="_language_5to6-nutshell.pod6-vars">1.7.6.13 <span class="code">vars</span></h3>
 <p>Discouraged in Perl 5. See <a href="http://perldoc.perl.org/vars.html">http://perldoc.perl.org/vars.html</a>.</p>
 <p>You should refactor your Perl 5 code to remove the need for <span class="code">use vars</span>, before translating into Perl 6.</p>
 <a name="t1.8"></a><h1 id="_language_5to6-nutshell.pod6-Command-line_flags">1.8 Command-line flags</h1>
 <p>See <a href="https://design.perl6.org/S19.html#Command_Line_Elements">S19/commandline</a></p>
 <p>Unchanged:</p>
 <p>-c -e -h -I -n -p -S -T -v -V</p>
 <a name="t1.8.6.1"></a><h3 id="_language_5to6-nutshell.pod6--a">1.8.6.1 <span class="code">-a</span></h3>
 <p>Unchanged in the Spec, but not yet implemented in Rakudo.</p>
 <p>For now, change your code to use <span class="code">.split</span> manually.</p>
 <a name="t1.8.6.2"></a><h3 id="_language_5to6-nutshell.pod6--F">1.8.6.2 <span class="code">-F</span></h3>
 <p>Unchanged in the Spec, but not yet implemented in Rakudo.</p>
 <p>For now, change your code to use <span class="code">.split</span> manually.</p>
 <a name="t1.8.6.3"></a><h3 id="_language_5to6-nutshell.pod6--l">1.8.6.3 <span class="code">-l</span></h3>
 <p>This is now the default behavior.</p>
 <a name="t1.8.6.4"></a><h3 id="_language_5to6-nutshell.pod6--M_-m">1.8.6.4 <span class="code">-M</span> <span class="code">-m</span></h3>
 <p>Only <span class="code">-M</span> remains. And, as you can no longer use the "no Module" syntax, the use of <span class="code">-</span> with <span class="code">-M</span> to "no" a module is no longer available.</p>
 <a name="t1.8.6.5"></a><h3 id="_language_5to6-nutshell.pod6--E">1.8.6.5 <span class="code">-E</span></h3>
 <p>Since all features are already enabled, just use lowercase <span class="code">-e</span> .</p>
 <a name="t1.8.6.6"></a><h3 id="_language_5to6-nutshell.pod6--d,_-dt,_-d:foo,_-D,_etc.">1.8.6.6 <span class="code">-d</span>, <span class="code">-dt</span>, <span class="code">-d:foo</span>, <span class="code">-D</span>, etc.</h3>
 <p>Replaced with the <span class="code">++BUG</span> metasyntactic option.</p>
 <a name="t1.8.6.7"></a><h3 id="_language_5to6-nutshell.pod6--s">1.8.6.7 -s</h3>
 <p>Switch parsing is now done by the parameter list of the <span class="code">MAIN</span> subroutine.</p>
 <pre class="code"># Perl 5
    #!/usr/bin/perl -s
    if ($xyz) { print "$xyz\n" }
./example.pl -xyz=5
5

# Perl 6
    sub MAIN( Int :$xyz ) {
        say $xyz if $xyz.defined;
    }
perl6 example.p6 --xyz=5
5
perl6 example.p6 -xyz=5
5</pre>
 <ul><li><p><span class="code">-t</span></p>
</li></ul> <p>Taint warnings are not yet specified.</p>
 <ul><li><p><span class="code">-P</span> <span class="code">-u</span> <span class="code">-U</span> <span class="code">-W</span> <span class="code">-X</span></p>
</li></ul> <p>Removed. See <a href="https://design.perl6.org/S19.html#Removed_Syntactic_Features">S19#Removed Syntactic Features</a>.</p>
 <ul><li><p><span class="code">-w</span></p>
</li></ul> <p>This is now the default behavior.</p>
 <a name="t1.9"></a><h1 id="_language_5to6-nutshell.pod6-File-related_operations">1.9 File-related operations</h1>
 <a name="t1.9.1"></a><h2 id="_language_5to6-nutshell.pod6-Reading_the_lines_of_a_text_file_into_an_array">1.9.1 Reading the lines of a text file into an array</h2>
 <p>In Perl 5, a common idiom for reading the lines of a text file goes something like this:</p>
 <pre class="code">open my $fh, "&amp;lt;", "file" or die "$!";
my @lines = &amp;lt;$fh&gt;;
close $fh;</pre>
 <p>In Perl 6, this has been simplified to</p>
 <pre class="code">my @lines = "file".IO.lines;</pre>
 <p>Do <i>not</i> be tempted to try slurping in a file and splitting the resulting string on newlines as this will give an array with a trailing empty element, which is one more than you probably expect (it's also more complicated), e.g.:</p>
 <pre class="code"># initialize the file to read
spurt "test-file", q:to/END/;
first line
second line
third line
END
# read the file
my @lines = "test-file".IO.slurp.split(/\n/);
say @lines.elems;    #-&gt; 4</pre>
 <a name="t1.9.2"></a><h2 id="_language_5to6-nutshell.pod6-Trapping_the_standard_output_of_executables.">1.9.2 Trapping the standard output of executables.</h2>
 <p>Whereas in Perl 5 you would do:</p>
 <pre class="code">my $arg = 'Hello';
my $captured = `echo \Q$arg\E`;
my $captured = qx(echo \Q$arg\E);</pre>
 <p>Or using String::ShellQuote (because <span class="code">\Q…\E</span> is not completely right):</p>
 <pre class="code">my $arg = shell_quote 'Hello';
my $captured = `echo $arg`;
my $captured = qx(echo $arg);</pre>
 <p>In Perl 6, you will probably want to run commands without using the shell:</p>
 <pre class="code">my $arg = 'Hello';
my $captured = run('echo', $arg, :out).out.slurp-rest;
my $captured = run(«echo "$arg"», :out).out.slurp-rest;</pre>
 <p>You can also use the shell if you really want to:</p>
 <pre class="code">my $arg = 'Hello';
my $captured = shell("echo $arg", :out).out.slurp-rest;
my $captured = qqx{echo $arg};</pre>
 <p>But beware that in this case there is <b>no protection at all</b>! <span class="code">run</span> does not use the shell, so there is no need to escape the arguments (arguments are passed directly). If you are using <span class="code">shell</span> or <span class="code">qqx</span>, then everything ends up being one long string which is then passed to the shell. Unless you validate your arguments very carefully, there is a high chance to introduce shell injection vulnerabilities with such code.</p>
 <a name="t1.10"></a><h1 id="_language_5to6-nutshell.pod6-Environment_variables">1.10 Environment variables</h1>
 <a name="t1.10.1"></a><h2 id="_language_5to6-nutshell.pod6-Perl_module_library_path">1.10.1 Perl module library path</h2>
 <p>In Perl5 one of the environment variables to specify extra search paths for Perl modules is <span class="code">PERL5LIB</span>.</p>
 <pre class="code">$ PERL5LIB="/some/module/lib" perl program.pl</pre>
 <p>In Perl 6 this is similar, one merely needs to change a number! As you probably guessed, you just need to use <span class="indexed"><a id="2" name="PERL6LIB"> <span class="code">PERL6LIB</span> </a></span>:</p>
 <pre class="code">$ PERL6LIB="/some/module/lib" perl6 program.p6</pre>
 <p>In Perl 5 one uses the ':' (colon) as a directory separator for <span class="code">PERL5LIB</span>, but in Perl 6 one uses the ',' (comma). For example:</p>
 <pre class="code">$ export PERL5LIB=/module/dir1:/module/dir2;</pre>
 <p>but</p>
 <pre class="code">$ export PERL6LIB=/module/dir1,/module/dir2;</pre>
 <p>(Perl 6 does not recognize either the <span class="code">PERL5LIB</span> or the older Perl environment variable <span class="code">PERLLIB</span>.)</p>
 <p>As with Perl5, if you don't specify <span class="code">PERL6LIB</span>, you need to specify the library path within the program via the <span class="code">use lib</span> pragma:</p>
 <pre class="code">use lib '/some/module/lib'</pre>
 <p>Note that <span class="code">PERL6LIB</span> is more of a developer convenience in Perl 6 (as opposed to the equivalent usage of <span class="code">PERL5LIB</span> in Perl5) and shouldn't be used by module consumers as it could be removed in the future. This is because Perl 6's module loading isn't directly compatible with operating system paths.</p>
 <a name="t1.11"></a><h1 id="_language_5to6-nutshell.pod6-Misc.">1.11 Misc.</h1>
 <a name="t1.11.1"></a><h2 id="_language_5to6-nutshell.pod6-'0'_is_True">1.11.1 <span class="code">'0'</span> is True</h2>
 <p>Unlike Perl 5, a string containing nothing but zero ('0') is <span class="code">True</span>. As Perl 6 has types in core, that makes more sense. This also means the common pattern:</p>
 <pre class="code">... if defined $x and length $x; # or just length() in modern perls</pre>
 <p>In Perl 6 becomes a simple</p>
 <pre class="code">... if $x;</pre>
 <a name="t1.11.2"></a><h2 id="_language_5to6-nutshell.pod6-dump">1.11.2 <span class="code">dump</span></h2>
 <p>Gone.</p>
 <p>The Perl 6 design allows for automatic transparent saving-and-loading of compiled bytecode.</p>
 <p>Rakudo supports this only for modules so far.</p>
 <a name="t1.11.3"></a><h2 id="_language_5to6-nutshell.pod6-Importing_specific_functions_from_a_module">1.11.3 Importing specific functions from a module <a name="3"></a></h2>
 <p>In Perl 5 it is possible to selectively import functions from a given module like so:</p>
 <pre class="code">use ModuleName qw{foo bar baz};</pre>
 <p>In Perl 6 one specifies the functions which are to be exported by using the <span class="code">is export</span> role on the relevant subs and <i>all</i> subs with this role are then exported. Hence, the following module <span class="code">Bar</span> exports the subs <span class="code">foo</span> and <span class="code">bar</span> but not <span class="code">baz</span>:</p>
 <pre class="code">unit module Bar;

sub foo($a) is export { say "foo $a" }
sub bar($b) is export { say "bar $b" }
sub baz($z) { say "baz $z" }</pre>
 <p>To use this module, simply <span class="code">use Bar</span> and the functions <span class="code">foo</span> and <span class="code">bar</span> will be available</p>
 <pre class="code">use Bar;
foo(1);    #=&gt; "foo 1"
bar(2);    #=&gt; "bar 2"</pre>
 <p>If one tries to use <span class="code">baz</span> an "Undeclared routine" error is raised at compile time.</p>
 <p>So, how does one recreate the Perl 5 behaviour of being able to selectively import functions? For this one needs to define an <span class="code">EXPORT</span> sub inside the module which specifies the functions to be exported and (in the current implementation of Rakudo (2015.03)) remove the <span class="code">module Bar</span> statement. (Please note that not having the <span class="code">module</span> statement isn't consistent with Synopsis 11, however it works.)</p>
 <p>The module <span class="code">Bar</span> now is merely a file called <span class="code">Bar.pm</span> with the following contents:</p>
 <pre class="code">use v6;

sub EXPORT(*@import-list) {
    my %exportable-subs =
        '&amp;amp;foo' =&gt; &amp;amp;foo,
        '&amp;amp;bar' =&gt; &amp;amp;bar,
        ;
    my %subs-to-export;
    for @import-list -&gt; $import {
        if grep $sub-name, %exportable-subs.keys {
            %subs-to-export{$sub-name} = %exportable-subs{$sub-name};
        }
    }
    return %subs-to-export;
}

sub foo($a, $b, $c) { say "foo, $a, $b, $c" }
sub bar($a) { say "bar, $a" }
sub baz($z) { say "baz, $z" }</pre>
 <p>Note that the subs are no longer explicitly exported via the <span class="code">is export</span> role. We are defining an <span class="code">EXPORT</span> sub which specifies the subs in the module we want to be available for export and then we are populating a hash containing the subs which will actually be exported. The <span class="code">@import-list</span> is set by the <span class="code">use</span> statement in the calling code thus allowing us to selectively import the subs made available by the module.</p>
 <p>So, to import only the <span class="code">foo</span> routine, we do the following in the calling code:</p>
 <pre class="code">use Bar &amp;lt;foo&gt;;
foo(1);       #=&gt; "foo 1"</pre>
 <p>Here we see that even though <span class="code">bar</span> is able to be exported, if we don't explicitly import it, it's not available for use. Hence this causes an "Undeclared routine" error at compile time:</p>
 <pre class="code">use Bar &amp;lt;foo&gt;;
foo(1);
bar(5);       #!&gt; "Undeclared routine: bar used at line 3"</pre>
 <p>however, this will work</p>
 <pre class="code">use Bar &amp;lt;foo bar&gt;;
foo(1);       #=&gt; "foo 1"
bar(5);       #=&gt; "bar 5"</pre>
 <p>Note also that <span class="code">baz</span> remains unimportable even if specified in the <span class="code">use</span> statement:</p>
 <pre class="code">use Bar &amp;lt;foo bar baz&gt;;
baz(3);       #!&gt; "Undeclared routine: baz used at line 2"</pre>
 <p>In order to get this to work, one obviously has to jump through many hoops. In the standard use-case where one specifies the functions to be exported via the <span class="code">is export</span> role, Perl 6 automatically creates the <span class="code">EXPORT</span> sub in the correct manner for you, so one should consider very carefully whether or not writing one's own <span class="code">EXPORT</span> routine is worthwhile.</p>
 <a name="t1.12"></a><h1 id="_language_5to6-nutshell.pod6-Core_modules">1.12 Core modules</h1>
 <a name="t1.12.3.1"></a><h3 id="_language_5to6-nutshell.pod6-Data::Dumper">1.12.3.1 <span class="code">Data::Dumper</span></h3>
 <p>In Perl 5, the <a href="https://metacpan.org/pod/Data::Dumper">Data::Dumper</a> module was used for serialization, and for debugging views of program data structures by the programmer.</p>
 <p>In Perl 6, these tasks are accomplished with the <span class="code">.perl</span> method, which every object has.</p>
 <pre class="code"># Given:
    my @array_of_hashes = (
        { NAME =&gt; 'apple',   type =&gt; 'fruit' },
        { NAME =&gt; 'cabbage', type =&gt; 'no, please no' },
    );
# Perl 5
    use Data::Dumper;
    $Data::Dumper::Useqq = 1;
    print Dumper \@array_of_hashes; # Note the backslash.
# Perl 6
    say @array_of_hashes.perl; # .perl on the array, not on its reference.</pre>
 <p>In Perl 5, Data::Dumper has a more complex optional calling convention, which allows for naming the VARs.</p>
 <p>In Perl 6, placing a colon in front of the variable's sigil turns it into a Pair, with a key of the var name, and a value of the var value.</p>
 <pre class="code"># Given:
    my ( $foo, $bar ) = ( 42, 44 );
    my @baz = ( 16, 32, 64, 'Hike!' );
# Perl 5
    use Data::Dumper;
    print Data::Dumper-&gt;Dump(
        [     $foo, $bar, \@baz   ],
        [ qw(  foo   bar   *baz ) ],
    );
# Output
    $foo = 42;
    $bar = 44;
    @baz = (
             16,
             32,
             64,
             'Hike!'
           );
# Perl 6
    say [ :$foo, :$bar, :@baz ].perl;
# Output
    ["foo" =&gt; 42, "bar" =&gt; 44, "baz" =&gt; [16, 32, 64, "Hike!"]]</pre>
 <a name="t1.12.3.2"></a><h3 id="_language_5to6-nutshell.pod6-Getopt::Long">1.12.3.2 <span class="code">Getopt::Long</span></h3>
 <p>Switch parsing is now done by the parameter list of the <span class="code">MAIN</span> subroutine.</p>
 <pre class="code"># Perl 5
    use 5.010;
    use Getopt::Long;
    GetOptions(
        'length=i' =&gt; \( my $length = 24       ), # numeric
        'file=s'   =&gt; \( my $data = 'file.dat' ), # string
        'verbose'  =&gt; \( my $verbose           ), # flag
    ) or die;
    say $length;
    say $data;
    say 'Verbosity ', ($verbose ? 'on' : 'off') if defined $verbose;
perl example.pl
    24
    file.dat
perl example.pl --file=foo --length=42 --verbose
    42
    foo
    Verbosity on

perl example.pl --length=abc
    Value "abc" invalid for option length (number expected)
    Died at c.pl line 3.

# Perl 6
    sub MAIN( Int :$length = 24, :file($data) = 'file.dat', Bool :$verbose ) {
        say $length if $length.defined;
        say $data   if $data.defined;
        say 'Verbosity ', ($verbose ?? 'on' !! 'off');
    }
perl6 example.p6
    24
    file.dat
    Verbosity off
perl6 example.p6 --file=foo --length=42 --verbose
    42
    foo
    Verbosity on
perl6 example.p6 --length=abc
    Usage:
      c.p6 [--length=&amp;lt;Int&gt;] [--file=&amp;lt;Any&gt;] [--verbose]</pre>
 <p>Note that Perl 6 auto-generates a full usage message on error in command-line parsing.</p>
 <a name="t1.13"></a><h1 id="_language_5to6-nutshell.pod6-Automated_Translation">1.13 Automated Translation</h1>
 <p>A quick way to find the Perl 6 version of a Perl 5 construct, is to run it through an automated translator.</p>
 <p><b>NOTE:</b> None of these translators are yet complete.</p>
 <a name="t1.13.1"></a><h2 id="_language_5to6-nutshell.pod6-Blue_Tiger">1.13.1 Blue Tiger</h2>
 <p>This project is dedicated to automated modernization of Perl code. It does not (yet) have a web front-end, and so must be locally installed to be useful. It also contains a separate program to translate Perl 5 regexes into Perl 6.</p>
 <p><a href="https://github.com/Util/Blue_Tiger/">https://github.com/Util/Blue_Tiger/</a></p>
 <a name="t1.13.2"></a><h2 id="_language_5to6-nutshell.pod6-Perlito">1.13.2 Perlito</h2>
 <p>Online Translator!</p>
 <p>This project is a suite of Perl cross-compilers, including Perl 5-to-6 translation. It has a web front-end, and so can be used without installation. It only supports a subset of Perl 5 syntax so far.</p>
 <p><a href="http://fglock.github.io/Perlito/perlito/perlito5.html">http://fglock.github.io/Perlito/perlito/perlito5.html</a></p>
 <a name="t1.13.3"></a><h2 id="_language_5to6-nutshell.pod6-MAD">1.13.3 MAD</h2>
 <p>Larry Wall's own code for translating Perl 5 to Perl 6 has bit-rotted, and is not (currently) viable on recent releases of Perl 5.</p>
 <p>MAD (Misc Attribute Definition) is a configuration option when building Perl from a source distribution. The `perl` executable analyses and translates your Perl sourcecode into an op-tree, and then executes the program by walking the op-tree. Normally, most of the details from the analysis are thrown away during this process. When MAD is enabled, the `perl` executable will save those details to an XML file, which can then be read and further processed into Perl 6 code by a MAD parser.</p>
 <p>Please consult #perl6 to find out the best release of Perl 5 to use for your MAD science experiments.</p>
 <a name="t1.13.4"></a><h2 id="_language_5to6-nutshell.pod6-Perl-ToPerl6">1.13.4 Perl-ToPerl6</h2>
 <p>Jeff Goff's Perl::ToPerl6 module for Perl 5 is designed around Perl::Critic's framework. It aims to convert Perl5 to compilable (if not necessarily running) Perl 6 code with the bare minimum of changes. Code transformers are configurable and pluggable, so you can create and contribute your own transformers, and customize existing transformers to your own needs. You can install the latest release from CPAN, or follow the project live on GitHub. An online converter may become available at some point.</p>
 <a name="t1.14"></a><h1 id="_language_5to6-nutshell.pod6-Other_sources_of_translation_knowledge">1.14 Other sources of translation knowledge</h1>
 <ul><li><p><a href="https://perlgeek.de/en/article/5-to-6">https://perlgeek.de/en/article/5-to-6</a></p>
</li></ul> <ul><li><p><a href="https://github.com/Util/Blue_Tiger/">https://github.com/Util/Blue_Tiger/</a></p>
</li></ul> <ul><li><p><a href="https://perl6advent.wordpress.com/2011/12/23/day-23-idiomatic-perl-6/">https://perl6advent.wordpress.com/2011/12/23/day-23-idiomatic-perl-6/</a></p>
</li></ul> <ul><li><p><a href="http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet">http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet</a></p>
</li></ul></div> <!-- /language/5to6-perlfunc.pod6 --><div class="pod-body"><a id="_language_5to6-perlfunc.pod6"></a><a name="t2"><h1 class="title">2 5to6-perlfunc</h1></a> <p class="subtitle">Perl 5 to Perl 6 guide - functions</p> <a name="t2.1"></a><h1 id="_language_5to6-perlfunc.pod6-DESCRIPTION">2.1 DESCRIPTION</h1>
 <p>A (hopefully) comprehensive list of Perl 5 builtin functions with their Perl 6 equivalents with notes on variations between them where necessary.</p>
 <a name="t2.2"></a><h1 id="_language_5to6-perlfunc.pod6-NOTE">2.2 NOTE</h1>
 <p>I will <i>not</i> be explaining the functions in detail. This document is an attempt to guide you from the functions in Perl 5's perlfunc document to their equivalents in Perl 6. For full documentation on the Perl 6 functions, please see the Perl 6 documentation.</p>
 <p>One general comment: Perl 6 takes its objects a lot more seriously than Perl 5. In Perl 6, everything is an object, although the language is flexible enough to not force you to work in an object oriented manner if you do not wish to do so. What this does mean, however, is that a lot of things that are function calls of the form <span class="code">function(@args)</span> are now also method calls of the form <span class="code">@args.function</span> (In rare cases, there is <i>only</i> a method call). This should be obvious in the following text, but it probably behooves you to get into that frame of mind now.</p>
 <p>Also, unless otherwise stated, the use of the term "function" here will mean a function in the style of <span class="code">func(@args)</span>, while "method" will refer to a function in the style of <span class="code">@args.func</span>.</p>
 <a name="t2.3"></a><h1 id="_language_5to6-perlfunc.pod6-Alphabetical_Listing_of_Perl_Functions">2.3 Alphabetical Listing of Perl Functions</h1>
 <a name="t2.3.1"></a><h2 id="_language_5to6-perlfunc.pod6-Filetests">2.3.1 Filetests</h2>
 <ul><li><p>-X FILEHANDLE</p>
</li></ul> <ul><li><p>-X EXPR</p>
</li></ul> <ul><li><p>-X DIRHANDLE</p>
</li></ul> <ul><li><p>-X</p>
</li></ul> <p>Perl 6 gives you a couple of options when it comes to file tests. You can do a smart match (<span class="code">~~</span>) or you can call a method.</p>
 <p>In Perl 6, you don't need to actually open a filehandle in the traditional way (although you can) to do a filetest. You can simply append <span class="code">.IO</span> to the filename. For instance, here is how to check if a file is readable using smart match:</p>
 <pre class="code">'/path/to/file'.IO ~~ :r</pre>
 <p>You can, of course, use an already opened filehandle. Here, using the file handle <span class="code">$fh</span>, is an example, using the method syntax for the file test:</p>
 <pre class="code">$fh.r</pre>
 <p>Most of the former filetests have colon equivalents for use with smart match:</p>
 <pre class="code">:e Exists
:d Directory
:f File
:l Symbolic link
:r Readable
:w Writable
:x Executable
:s Size
:z Zero size</pre>
 <p>All of these tests can be used as methods (without the colon).</p>
 <p>Three tests, however, <i>only</i> have method equivalents:</p>
 <pre class="code">$fh.modified; # -M $fh
$fh.accessed; # -A $fh
$fh.changed;  # -C $fh</pre>
 <p>The remaining filetests in Perl 5 do not appear to be implemented in Perl 6.</p>
 <p>The documentation for this can be found at <a href="#_type_IO::Path.pod6-File_test_operators">File test operators</a>.</p>
 <p>There is more information on reading and writing files at <a href="#_language_io.pod6">io</a>. Also, the section on <span class="code">open()</span> below may be helpful.</p>
 <a name="t2.3.2"></a><h2 id="_language_5to6-perlfunc.pod6-abs">2.3.2 abs</h2>
 <ul><li><p>abs VALUE</p>
</li></ul> <p>Works as a function (<span class="code">abs($x)</span>), but also as a method. One gotcha, however - method calls bind more tightly than <span class="code">-</span>, so, for example, <span class="code">-15.abs</span> evaluates as <span class="code">-(15.abs)</span> giving you <span class="code">-15</span>. In this example, you would have to do something like <span class="code">(-15).abs</span>.</p>
 <p><span class="code">abs</span> also operates on <span class="code">$_</span> in the absence of a value, but not as a function, and as a method you need to call it as <span class="code">.abs</span> rather than simply <span class="code">abs</span>.</p>
 <a name="t2.3.3"></a><h2 id="_language_5to6-perlfunc.pod6-accept">2.3.3 accept</h2>
 <ul><li><p>accept NEWSOCKET,GENERICSOCKET</p>
</li></ul> <p><span class="code">accept</span> is a method you can call on a server, e. g. <span class="code">$server.accept()</span>. Instead of returning a packed address, it returns a socket, most likely an IO::Socket object of some sort.</p>
 <a name="t2.3.4"></a><h2 id="_language_5to6-perlfunc.pod6-alarm">2.3.4 alarm</h2>
 <ul><li><p>alarm SECONDS</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] <span class="code">alarm()</span> is no more. It has been suggested that a replacement may be somewhere in the new Concurrency features, such as <span class="code">Promise.in</span>, but some digging may be needed to find a true analog.</p>
 <a name="t2.3.5"></a><h2 id="_language_5to6-perlfunc.pod6-atan2">2.3.5 atan2</h2>
 <ul><li><p>atan2 Y,X</p>
</li></ul> <p>Available as a function as well as being able to be used as a method. For instance, these are equivalent:</p>
 <pre class="code">atan2(100);
100.atan2;</pre>
 <a name="t2.3.6"></a><h2 id="_language_5to6-perlfunc.pod6-bind">2.3.6 bind</h2>
 <ul><li><p>bind SOCKET,NAME</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] No sign of a socket-related <span class="code">bind()</span> in Perl 6. At a guess, whatever socket binding is needed happens when you create a new socket object.</p>
 <a name="t2.3.7"></a><h2 id="_language_5to6-perlfunc.pod6-binmode">2.3.7 binmode</h2>
 <ul><li><p>binmode FILEHANDLE</p>
</li></ul> <p>Instead of this, you would use <span class="code">:bin</span> as the file mode when opening the socket. E. g. <span class="code">my $fh = open("path/to/file", :bin);</span></p>
 <a name="t2.3.8"></a><h2 id="_language_5to6-perlfunc.pod6-bless">2.3.8 bless</h2>
 <ul><li><p>bless REF,CLASSNAME</p>
</li></ul> <p>With the changes in class creation in Perl 6, this may find less use than in Perl 5, and is a method as well as a function. The Perl 6 docs say "Creates a new object of the same type as the invocant, uses the named arguments to initialize attributes, and returns the created object." If you're porting a module from Perl 5 to Perl 6, it's quite possible you'll want to use <span class="code">new</span> for creating objects rather than <span class="code">bless</span>, although there may be some situations in which the latter may still be useful.</p>
 <a name="t2.3.9"></a><h2 id="_language_5to6-perlfunc.pod6-break">2.3.9 break</h2>
 <ul><li><p>break</p>
</li></ul> <p>Not in Perl 6. For breaking out of <span class="code">given</span> blocks, you should probably take a look at <span class="code">proceed</span> and <span class="code">succeed</span> <a href="#_language_control.pod6-proceed_and_succeed">here</a>.</p>
 <a name="t2.3.10"></a><h2 id="_language_5to6-perlfunc.pod6-caller">2.3.10 caller</h2>
 <ul><li><p>caller EXPR</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] What <span class="code">caller</span> does in Perl 5 is taken on by <span class="code">callframe</span>. However, a simple call to <span class="code">callframe</span> will be of little use, as it will return a CallFrame object, rather than any useful information. The filename and line number returned as the second and third values from <span class="code">caller</span> in Perl 5, are in <span class="code">callframe.annotations</span>. You get them by using <span class="code">callframe().annotations.&lt;file line> </span> or, individually, with <span class="code">callframe().annotations.&lt;file> </span> and <span class="code"> callframe().annotations.&lt;line> </span>. There does not seem to be a simple way of getting the package name out of <span class="code">callframe</span> however.</p>
 <a name="t2.3.11"></a><h2 id="_language_5to6-perlfunc.pod6-chdir">2.3.11 chdir</h2>
 <ul><li><p>chdir EXPR</p>
</li></ul> <p>Seems to work as it does in Perl 5.</p>
 <a name="t2.3.12"></a><h2 id="_language_5to6-perlfunc.pod6-chmod">2.3.12 chmod</h2>
 <ul><li><p>chmod LIST</p>
</li></ul> <p>Functions as under Perl 5, with the difference that octal numbers are represented differently (<span class="code">0o755</span> rather than <span class="code">0755</span>). You may also use it as a method, e. g. <span class="code">$fh.chmod(0o755)</span>.</p>
 <a name="t2.3.13"></a><h2 id="_language_5to6-perlfunc.pod6-chomp">2.3.13 chomp</h2>
 <ul><li><p>chomp VARIABLE</p>
</li></ul> <p>The behavior of <span class="code">chomp</span> is different than in Perl 5. It leaves the target unaffected and <i>returns</i> the target with a final logical newline removed. I. e. <span class="code">$x = "howdy\n";$y = chomp($x);</span> results in <span class="code">$x</span> containing "howdy\n" and <span class="code">$y</span> containing "howdy". Also works as a method, i. e. <span class="code">$y = $x.chomp</span>.</p>
 <a name="t2.3.14"></a><h2 id="_language_5to6-perlfunc.pod6-chop">2.3.14 chop</h2>
 <ul><li><p>chop VARIABLE</p>
</li></ul> <p>As with <span class="code">chomp</span>, in Perl 6, this returns the chopped string, rather than chopping in place. I. e. <span class="code">$x = "howdy";$y = chop($x);</span> results in <span class="code">$x</span> being "howdy" and <span class="code">$y</span> being "howd". Also works as a method: <span class="code">$y = $x.chop</span></p>
 <a name="t2.3.15"></a><h2 id="_language_5to6-perlfunc.pod6-chown">2.3.15 chown</h2>
 <ul><li><p>chown LIST</p>
</li></ul> <p><span class="code">chown</span> is not in Perl 6.</p>
 <a name="t2.3.16"></a><h2 id="_language_5to6-perlfunc.pod6-chr">2.3.16 chr</h2>
 <ul><li><p>chr NUMBER</p>
</li></ul> <p>Similar to the Perl 5 version, coerces the target to an integer, and uses that as a Unicode code point to return the relevant character. Can be used as a function and a method:</p>
 <pre class="code">chr(65); # "A"
65.chr;  # "A"</pre>
 <a name="t2.3.17"></a><h2 id="_language_5to6-perlfunc.pod6-chroot">2.3.17 chroot</h2>
 <ul><li><p>chroot FILENAME</p>
</li></ul> <p>Apparently this is not in Perl 6.</p>
 <a name="t2.3.18"></a><h2 id="_language_5to6-perlfunc.pod6-close">2.3.18 close</h2>
 <ul><li><p>close FILEHANDLE</p>
</li></ul> <p>As in Perl 5, closes a filehandle. Returns a boolean value. Both <span class="code">close $fh</span> and <span class="code">$fh.close</span> will work.</p>
 <a name="t2.3.19"></a><h2 id="_language_5to6-perlfunc.pod6-closedir">2.3.19 closedir</h2>
 <ul><li><p>closedir DIRHANDLE</p>
</li></ul> <p>Currently, there is no <span class="code">closedir</span> function. When it is implemented, it may well be a method in the IO::Dir class.</p>
 <a name="t2.3.20"></a><h2 id="_language_5to6-perlfunc.pod6-connect">2.3.20 connect</h2>
 <ul><li><p>connect SOCKET,NAME</p>
</li></ul> <p>Not clearly documented, but it appears that <span class="code">connect</span> will be a method you would call on some variety of IO::Socket object.</p>
 <a name="t2.3.21"></a><h2 id="_language_5to6-perlfunc.pod6-continue">2.3.21 continue</h2>
 <ul><li><p>continue BLOCK</p>
</li></ul> <ul><li><p>continue</p>
</li></ul> <p>Instead of a <span class="code">continue</span> block, you should use a <span class="code">NEXT</span> block. The closest analog to a bare <span class="code">continue;</span> in Perl 5 appears to be <span class="code">proceed</span>/<span class="code">succeed</span>.</p>
 <a name="t2.3.22"></a><h2 id="_language_5to6-perlfunc.pod6-cos">2.3.22 cos</h2>
 <ul><li><p>cos EXPR</p>
</li></ul> <p>Works as in Perl 5, but can be also used as a method, i. e. <span class="code">(1/60000).cos</span>.</p>
 <a name="t2.3.23"></a><h2 id="_language_5to6-perlfunc.pod6-crypt">2.3.23 crypt</h2>
 <ul><li><p>crypt PLAINTEXT,SALT</p>
</li></ul> <p>This appears not to have made it into Perl 6.</p>
 <a name="t2.3.24"></a><h2 id="_language_5to6-perlfunc.pod6-dbm_functions">2.3.24 dbm functions</h2>
 <ul><li><p>dbmclose HASH</p>
</li></ul> <ul><li><p>dbmopen HASH,DBNAME,MASK</p>
</li></ul> <p>These functions have largely been superseded in Perl 5, and are unlikely to ever turn up in Perl 6 (although any assumptions about the Perl 6 database implementation may be premature).</p>
 <a name="t2.3.25"></a><h2 id="_language_5to6-perlfunc.pod6-defined">2.3.25 defined</h2>
 <ul><li><p>defined EXPR</p>
</li></ul> <p>Probably does what you expect, but technically it returns <span class="code">False</span> on the type object, and <span class="code">True</span> otherwise. This may make more sense when you realize that <span class="code">$num.perl</span> is the type <span class="code">Any</span> if you haven't assigned anything to it, and the assigned value if you have. Can, of course be used as a method: <span class="code">$num.defined</span></p>
 <a name="t2.3.26"></a><h2 id="_language_5to6-perlfunc.pod6-delete">2.3.26 delete</h2>
 <ul><li><p>delete EXPR</p>
</li></ul> <p>Perl 6 replaces this with the new adverb syntax, specifically the <span class="code">:delete</span> adverb. E. g. <span class="code">my $deleted_value = %hash{$key}:delete;</span> and <span class="code">my $deleted_value = @array[$i]:delete;</span>.</p>
 <a name="t2.3.27"></a><h2 id="_language_5to6-perlfunc.pod6-die">2.3.27 die</h2>
 <ul><li><p>die LIST</p>
</li></ul> <p>Works similarly to the Perl 5 version, but Perl 6's Exception mechanism may give you more power and flexibility than is available in Perl 5. See <a href="#_language_exceptions.pod6">exceptions</a>. To omit the stacktrace and location, like Perl 5's <span class="code">die "...\n"</span>, use:</p>
 <pre class="code">note "...";
exit 1;</pre>
 <a name="t2.3.28"></a><h2 id="_language_5to6-perlfunc.pod6-do">2.3.28 do</h2>
 <ul><li><p>do BLOCK</p>
</li></ul> <p>Similar to the Perl 5 version. Note that there must be a space between the <span class="code">do</span> and the block.</p>
 <ul><li><p>do EXPR</p>
</li></ul> <p>Has been replaced in Perl 6 by <span class="code">EVALFILE</span>.</p>
 <a name="t2.3.29"></a><h2 id="_language_5to6-perlfunc.pod6-dump">2.3.29 dump</h2>
 <ul><li><p>dump LABEL</p>
</li></ul> <p>According to S29, <span class="code">dump</span> has been... dumped.</p>
 <a name="t2.3.30"></a><h2 id="_language_5to6-perlfunc.pod6-each">2.3.30 each</h2>
 <ul><li><p>each HASH</p>
</li></ul> <p>There is no exact equivalent, but you can use <span class="code">%hash.kv</span> which returns a list of keys and values. For example: <span class="code">for %hash.kv -> $k, $v { say "$k: $v" } </span></p>
 <p>Incidentally, what we have there with the <span class="code">-> </span> is called a pointy block and, though there are a number of examples in the documentation, there doesn't seem to be a really clear explanation of how they work. <a href="https://design.perl6.org/S04.html#The_for_statement">https://design.perl6.org/S04.html#The_for_statement</a> may be of some help here, as well as the design document at <a href="https://design.perl6.org/S06.html#%22Pointy_blocks%22">https://design.perl6.org/S06.html#%22Pointy_blocks%22</a>. There is also some information at <a href="https://en.wikibooks.org/wiki/Perl_6_Programming/Blocks_and_Closures#Pointy_Blocks">https://en.wikibooks.org/wiki/Perl_6_Programming/Blocks_and_Closures#Pointy_Blocks</a></p>
 <a name="t2.3.31"></a><h2 id="_language_5to6-perlfunc.pod6-eof">2.3.31 eof</h2>
 <ul><li><p>eof FILEHANDLE</p>
</li></ul> <p>In Perl 6, this is not usable as a function, but only as a method. I. e. <span class="code">$filehandle.eof</span>. Returns <span class="code">True</span> if at end of file.</p>
 <a name="t2.3.32"></a><h2 id="_language_5to6-perlfunc.pod6-eval">2.3.32 eval</h2>
 <ul><li><p>eval EXPR</p>
</li></ul> <ul><li><p>eval EXPR</p>
</li></ul> <p>Replaced by <span class="code">EVAL</span>. Note that <span class="code">EVAL</span> does not do any exception handling!</p>
 <a name="t2.3.33"></a><h2 id="_language_5to6-perlfunc.pod6-evalbytes">2.3.33 evalbytes</h2>
 <ul><li><p>evalbytes EXPR</p>
</li></ul> <p>No longer seems to exist.</p>
 <a name="t2.3.34"></a><h2 id="_language_5to6-perlfunc.pod6-exec">2.3.34 exec</h2>
 <ul><li><p>exec LIST</p>
</li></ul> <p>Nothing in Perl 6 exactly replicates the Perl 5 <span class="code">exec</span>. <span class="code">shell</span> and <span class="code">run</span> are similar to Perl 5's <span class="code">system</span>, but <span class="code">exec</span>'s behavior of not returning after executing a system command would have to be emulated by something like <span class="code">shell($command);exit();</span> or possibly <span class="code">exit shell($command);</span></p>
 <a name="t2.3.35"></a><h2 id="_language_5to6-perlfunc.pod6-exists">2.3.35 exists</h2>
 <ul><li><p>exists EXPR</p>
</li></ul> <p>In Perl 6, this is not a function, but an adverb:</p>
 <pre class="code">%hash{$key}:exists;
@array[$i]:exists;</pre>
 <a name="t2.3.36"></a><h2 id="_language_5to6-perlfunc.pod6-exit">2.3.36 exit</h2>
 <ul><li><p>exit EXPR</p>
</li></ul> <p>Appears to do the same thing as in Perl 5.</p>
 <a name="t2.3.37"></a><h2 id="_language_5to6-perlfunc.pod6-exp">2.3.37 exp</h2>
 <ul><li><p>exp EXPR</p>
</li></ul> <p>Same as in Perl 5, but can also be used as a method: <span class="code">5.exp</span>;</p>
 <a name="t2.3.38"></a><h2 id="_language_5to6-perlfunc.pod6-fc">2.3.38 fc</h2>
 <ul><li><p>fc EXPR</p>
</li></ul> <p>Looks like it does the same thing as in Perl 5.</p>
 <a name="t2.3.39"></a><h2 id="_language_5to6-perlfunc.pod6-fcntl">2.3.39 fcntl</h2>
 <ul><li><p>fcntl FILEHANDLE,FUNCTION,SCALAR</p>
</li></ul> <p>Appears not to be in Perl 6.</p>
 <a name="t2.3.40"></a><h2 id="_language_5to6-perlfunc.pod6-__FILE__">2.3.40 __FILE__</h2>
 <ul><li><p>__FILE__</p>
</li></ul> <p>Replaced by <span class="code">$?FILE</span>.</p>
 <a name="t2.3.41"></a><h2 id="_language_5to6-perlfunc.pod6-fileno">2.3.41 fileno</h2>
 <ul><li><p>fileno FILEHANDLE</p>
</li></ul> <p>S32 indicates that this should be available as a method, but appears currently unimplemented.</p>
 <a name="t2.3.42"></a><h2 id="_language_5to6-perlfunc.pod6-flock">2.3.42 flock</h2>
 <ul><li><p>flock FILEHANDLE,OPERATION</p>
</li></ul> <p>Currently unimplemented.</p>
 <a name="t2.3.43"></a><h2 id="_language_5to6-perlfunc.pod6-fork">2.3.43 fork</h2>
 <ul><li><p>fork</p>
</li></ul> <p>Not implemented as a built in function, but available through the <span class="code">NativeCall</span> interface. E. g. <span class="code">use NativeCall; sub fork returns int32 is native { * }; say fork;</span>.</p>
 <a name="t2.3.44"></a><h2 id="_language_5to6-perlfunc.pod6-formats">2.3.44 formats</h2>
 <ul><li><p>format</p>
</li></ul> <ul><li><p>formline PICTURE,LIST</p>
</li></ul> <p>Perl 6 does not have built-in formats.</p>
 <a name="t2.3.45"></a><h2 id="_language_5to6-perlfunc.pod6-getc">2.3.45 getc</h2>
 <ul><li><p>getc FILEHANDLE</p>
</li></ul> <p>Reads a single character from the input stream as in Perl 5. May now also be used as a method: <span class="code">$filehandle.getc</span></p>
 <a name="t2.3.46"></a><h2 id="_language_5to6-perlfunc.pod6-getlogin">2.3.46 getlogin</h2>
 <ul><li><p>getlogin</p>
</li></ul> <p>S29 lists it, but it does not seem to be implemented yet.</p>
 <a name="t2.3.47"></a><h2 id="_language_5to6-perlfunc.pod6-getpeername">2.3.47 getpeername</h2>
 <ul><li><p>getpeername SOCKET</p>
</li></ul> <p>S29 lists it, but the implementation does not seem clear or, for that matter, implemented.</p>
 <a name="t2.3.48"></a><h2 id="_language_5to6-perlfunc.pod6-getpgrp">2.3.48 getpgrp</h2>
 <ul><li><p>getpgrp PID</p>
</li></ul> <p>Does not appear to be implemented.</p>
 <a name="t2.3.49"></a><h2 id="_language_5to6-perlfunc.pod6-getpriority">2.3.49 getpriority</h2>
 <ul><li><p>getpriority WHICH,WHO</p>
</li></ul> <p>Does not appear to be implemented.</p>
 <a name="t2.3.50"></a><h2 id="_language_5to6-perlfunc.pod6-get_and_set_functions">2.3.50 get and set functions</h2>
 <ul><li><p>getpwnam NAME</p>
</li></ul> <ul><li><p>getgrnam NAME</p>
</li></ul> <ul><li><p>gethostbyname NAME</p>
</li></ul> <ul><li><p>getnetbyname NAME</p>
</li></ul> <ul><li><p>getprotobyname NAME</p>
</li></ul> <ul><li><p>getpwuid UID</p>
</li></ul> <ul><li><p>getgrgid GID</p>
</li></ul> <ul><li><p>getservbyname NAME,PROTO</p>
</li></ul> <ul><li><p>gethostbyaddr ADDR,ADDRTYPE</p>
</li></ul> <ul><li><p>getnetbyaddr ADDR,ADDRTYPE</p>
</li></ul> <ul><li><p>getprotobynumber NUMBER</p>
</li></ul> <ul><li><p>getservbyport PORT,PROTO</p>
</li></ul> <ul><li><p>getpwent</p>
</li></ul> <ul><li><p>getgrent</p>
</li></ul> <ul><li><p>gethostent</p>
</li></ul> <ul><li><p>getnetent</p>
</li></ul> <ul><li><p>getprotoent</p>
</li></ul> <ul><li><p>getservent</p>
</li></ul> <ul><li><p>setpwent</p>
</li></ul> <ul><li><p>setgrent</p>
</li></ul> <ul><li><p>sethostent STAYOPEN</p>
</li></ul> <ul><li><p>setnetent STAYOPEN</p>
</li></ul> <ul><li><p>setprotoent STAYOPEN</p>
</li></ul> <ul><li><p>setservent STAYOPEN</p>
</li></ul> <ul><li><p>endpwent</p>
</li></ul> <ul><li><p>endgrent</p>
</li></ul> <ul><li><p>endhostent</p>
</li></ul> <ul><li><p>endnetent</p>
</li></ul> <ul><li><p>endprotoent</p>
</li></ul> <ul><li><p>endservent</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] Apparently this range of functions are to be handled by roles like User, Group, etc.</p>
 <a name="t2.3.51"></a><h2 id="_language_5to6-perlfunc.pod6-getsock*">2.3.51 getsock*</h2>
 <ul><li><p>getsockname SOCKET</p>
</li></ul> <ul><li><p>getsockopt SOCKET,LEVEL,OPTNAME</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] These are likely implemented by some kind of IO::Socket object, but details are unclear.</p>
 <a name="t2.3.52"></a><h2 id="_language_5to6-perlfunc.pod6-glob">2.3.52 glob</h2>
 <ul><li><p>glob EXPR</p>
</li></ul> <p>Used in an example in S32, but apparently unimplemented.</p>
 <a name="t2.3.53"></a><h2 id="_language_5to6-perlfunc.pod6-gmtime">2.3.53 gmtime</h2>
 <ul><li><p>gmtime EXPR</p>
</li></ul> <p>Like the various parts of <span class="code">localtime</span>, <span class="code">gmtime</span>'s functionality appears to in the <span class="code">DateTime</span> object. To get a UTC version of a <span class="code">DateTime</span> object for the current time, for instance, use <span class="code">my $gmtime = DateTime.now.utc</span>.</p>
 <a name="t2.3.54"></a><h2 id="_language_5to6-perlfunc.pod6-goto">2.3.54 goto</h2>
 <ul><li><p>goto LABEL</p>
</li></ul> <ul><li><p>goto EXPR</p>
</li></ul> <ul><li><p>goto &amp;NAME</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] Described in S04, but not yet fully documented.</p>
 <a name="t2.3.55"></a><h2 id="_language_5to6-perlfunc.pod6-grep">2.3.55 grep</h2>
 <ul><li><p>grep BLOCK LIST</p>
</li></ul> <ul><li><p>grep EXPR,LIST</p>
</li></ul> <p>Still in Perl 6, with the caveat that the block form now requires a comma after the block. I.e. <span class="code">@foo = grep { $_ = "bars" }, @baz</span>. Can also be used as a method: <span class="code">@foo = @bar.grep(/^f/)</span></p>
 <a name="t2.3.56"></a><h2 id="_language_5to6-perlfunc.pod6-hex">2.3.56 hex</h2>
 <ul><li><p>hex EXPR</p>
</li></ul> <p>Replaced by the adverbial form <span class="code">:16</span>. E. g. <span class="code">:16("aF")</span> returns 175.</p>
 <p>Alternately, the same result can be achieved by using the <span class="code">.base</span> method: <span class="code">0xaF.base(10)</span></p>
 <p>It just so happens that <span class="code">.Str</span> defaults to base 10, so if you just <span class="code">say 0xaF</span>, that will also print 175, but that may not be immediately obvious, so may not be the best way to go for this.</p>
 <a name="t2.3.57"></a><h2 id="_language_5to6-perlfunc.pod6-import">2.3.57 import</h2>
 <ul><li><p>import LIST</p>
</li></ul> <p>Was never a builtin function in Perl 5 in the first place. In Perl 6, typically, one declares functions as exportable or not, and all the exportable ones are exported. Nevertheless, selective importing is possible, but beyond the scope of this document. For details, see <a href="#_language_5to6-nutshell.pod6-Importing_specific_functions_from_a_module">this section</a>.</p>
 <a name="t2.3.58"></a><h2 id="_language_5to6-perlfunc.pod6-index">2.3.58 index</h2>
 <ul><li><p>index STR,SUBSTR,POSITION</p>
</li></ul> <p>Works as in Perl 5. Can also now be used as a method: <span class="code">"howdy!".index("how"); # 0</span></p>
 <a name="t2.3.59"></a><h2 id="_language_5to6-perlfunc.pod6-int">2.3.59 int</h2>
 <ul><li><p>int EXPR</p>
</li></ul> <p>There is a <span class="code">truncate</span> function in Perl 6 (also usable as a method) that does what Perl 5's <span class="code">int</span> does. You may want to use that as a direct translation of Perl 5 code, but in Perl 6, you can just as easily call the <span class="code">.Int</span> method on the number. <span class="code">3.9.Int; # 3</span> and <span class="code">3.9.truncate</span> are equivalent.</p>
 <a name="t2.3.60"></a><h2 id="_language_5to6-perlfunc.pod6-ioctl">2.3.60 ioctl</h2>
 <ul><li><p>ioctl FILEHANDLE,FUNCTION,SCALAR</p>
</li></ul> <p>Currently unimplemented in Perl 6.</p>
 <a name="t2.3.61"></a><h2 id="_language_5to6-perlfunc.pod6-join">2.3.61 join</h2>
 <ul><li><p>join EXPR,LIST</p>
</li></ul> <p>Works as in Perl 5, and also works as a method: <span class="code">@x.join(",")</span></p>
 <a name="t2.3.62"></a><h2 id="_language_5to6-perlfunc.pod6-keys">2.3.62 keys</h2>
 <ul><li><p>keys HASH</p>
</li></ul> <p>Works as in Perl 5, and can also be used as a method: <span class="code">%hash.keys</span></p>
 <a name="t2.3.63"></a><h2 id="_language_5to6-perlfunc.pod6-kill">2.3.63 kill</h2>
 <ul><li><p>kill SIGNAL, LIST</p>
</li></ul> <ul><li><p>kill SIGNAL</p>
</li></ul> <p>Now part of the <a href="#_type_Proc::Async.pod6">Proc::Async</a> class, but looks to work as in Perl 5.</p>
 <a name="t2.3.64"></a><h2 id="_language_5to6-perlfunc.pod6-last">2.3.64 last</h2>
 <ul><li><p>last LABEL</p>
</li></ul> <ul><li><p>last EXPR</p>
</li></ul> <ul><li><p>last</p>
</li></ul> <p>Same as in Perl 5.</p>
 <a name="t2.3.65"></a><h2 id="_language_5to6-perlfunc.pod6-lc">2.3.65 lc</h2>
 <ul><li><p>lc EXPR</p>
</li></ul> <p>Works as in Perl 5, and also as a method: <span class="code">"UGH".lc</span></p>
 <a name="t2.3.66"></a><h2 id="_language_5to6-perlfunc.pod6-lcfirst">2.3.66 lcfirst</h2>
 <ul><li><p>lcfirst EXPR</p>
</li></ul> <p>Does not exist in Perl 6.</p>
 <a name="t2.3.67"></a><h2 id="_language_5to6-perlfunc.pod6-length">2.3.67 length</h2>
 <ul><li><p>length EXPR</p>
</li></ul> <p>Replaced by <span class="code">chars</span>, typically used as a method (<span class="code">$string.chars</span>), but also works as a function.</p>
 <a name="t2.3.68"></a><h2 id="_language_5to6-perlfunc.pod6-__LINE__">2.3.68 __LINE__</h2>
 <ul><li><p>__LINE__</p>
</li></ul> <p>Replaced by <span class="code">$?LINE</span>.</p>
 <a name="t2.3.69"></a><h2 id="_language_5to6-perlfunc.pod6-link">2.3.69 link</h2>
 <ul><li><p>link OLDFILE,NEWFILE</p>
</li></ul> <p>In Perl 6, part of the IO::Path class. The only difference between Perl 5 and Perl 6 is that the argument order has changed. It's now <span class="code">link($original, $linked_file)</span>.</p>
 <a name="t2.3.70"></a><h2 id="_language_5to6-perlfunc.pod6-listen">2.3.70 listen</h2>
 <ul><li><p>listen SOCKET,QUEUESIZE</p>
</li></ul> <p>Not clearly documented, but it appears that <span class="code">listen</span> will be a method you would call on some variety of IO::Socket object.</p>
 <a name="t2.3.71"></a><h2 id="_language_5to6-perlfunc.pod6-local">2.3.71 local</h2>
 <ul><li><p>local EXPR</p>
</li></ul> <p>The Perl 6 equivalent is <span class="code">temp</span>.</p>
 <a name="t2.3.72"></a><h2 id="_language_5to6-perlfunc.pod6-localtime">2.3.72 localtime</h2>
 <ul><li><p>localtime EXPR</p>
</li></ul> <p>Most of the functionality of <span class="code">localtime</span> is found in <span class="code">DateTime</span>. The specific parts of <span class="code">localtime</span> can be found as follows:</p>
 <pre class="code">my $d = DateTime.now; 
 $sec  = $d.second; # Potentially includes fractional seconds 
 $min  = $d.minute; 
 $hour = $d.hour; 
 $mday = $d.day-of-month; # or $d.day; 1..31 
 $mon  = $d.month; # 1..12 
 $year = $d.year; 
 $wday = $d.day-of-week; # 1 =&gt; Monday, 2 =&gt; Tuesday, etc. 
 $yday = $d.day-of-year; # 1..366 
 
</pre>
 <p>Please note that ranges are not 0-based in Perl 6, as shown in the comments in the example.</p>
 <p>There does not currently appear to be a way to get Perl 5's <span class="code">$isdst</span>. Also, the result of <span class="code">scalar(localtime)</span> that Perl 5 provides is not available. <span class="code">$d.Str</span> will give something along the lines of "2015-06-29T12:49:31-04:00".</p>
 <a name="t2.3.73"></a><h2 id="_language_5to6-perlfunc.pod6-lock">2.3.73 lock</h2>
 <ul><li><p>lock THING</p>
</li></ul> <p>In Perl 6, a method in the <span class="code">Lock</span> class.</p>
 <a name="t2.3.74"></a><h2 id="_language_5to6-perlfunc.pod6-log">2.3.74 log</h2>
 <ul><li><p>log EXPR</p>
</li></ul> <p>Available in Perl 6. Also works as a method. I. e. <span class="code">log(2)</span> is equivalent to <span class="code">2.log</span>.</p>
 <a name="t2.3.75"></a><h2 id="_language_5to6-perlfunc.pod6-lstat">2.3.75 lstat</h2>
 <ul><li><p>lstat FILEHANDLE</p>
</li></ul> <ul><li><p>lstat EXPR</p>
</li></ul> <ul><li><p>lstat DIRHANDLE</p>
</li></ul> <ul><li><p>lstat</p>
</li></ul> <p>Likely implemented somewhere in one of the <span class="code">IO</span> classes in Perl 6, but it is not clear where at this time.</p>
 <a name="t2.3.76"></a><h2 id="_language_5to6-perlfunc.pod6-m//">2.3.76 m//</h2>
 <ul><li><p>m//</p>
</li></ul> <p>Regular expression syntax is somewhat different in Perl 6, but the match operator still exists. If you're trying to rewrite some Perl 5 code, the most important difference is that <span class="code">=~</span> is replaced by the smart match operator, <span class="code">~~</span>. Similarly, <span class="code">!~</span> is replaced by <span class="code">!~~</span>. Options for regex operators are adverbs and are complicated. For details, see <a href="#_language_regexes.pod6-Adverbs">Adverbs</a></p>
 <a name="t2.3.77"></a><h2 id="_language_5to6-perlfunc.pod6-map">2.3.77 map</h2>
 <ul><li><p>map BLOCK LIST</p>
</li></ul> <ul><li><p>map EXPR,LIST</p>
</li></ul> <p>As a function, the only difference between Perl 5 and Perl 6 is that, if you're using a block, the block must be followed by a comma. Can also be used as a method: <span class="code">@new = @old.map: { $_ * 2 }</span></p>
 <a name="t2.3.78"></a><h2 id="_language_5to6-perlfunc.pod6-mkdir">2.3.78 mkdir</h2>
 <ul><li><p>mkdir FILENAME,MASK</p>
</li></ul> <ul><li><p>mkdir FILENAME</p>
</li></ul> <p>Works as in Perl 5.</p>
 <ul><li><p>mkdir</p>
</li></ul> <p>The zero argument (implicit <span class="code">$_</span>) version is not permitted in Perl 6.</p>
 <a name="t2.3.79"></a><h2 id="_language_5to6-perlfunc.pod6-msg*">2.3.79 msg*</h2>
 <ul><li><p>msgctl ID,CMD,ARG</p>
</li></ul> <ul><li><p>msgget KEY,FLAGS</p>
</li></ul> <ul><li><p>msgrcv ID,VAR,SIZE,TYPE,FLAGS</p>
</li></ul> <ul><li><p>msgsnd ID,MSG,FLAGS</p>
</li></ul> <p>Not builtins in Perl 6. May appear in an external module at some point. Maybe.</p>
 <a name="t2.3.80"></a><h2 id="_language_5to6-perlfunc.pod6-my">2.3.80 my</h2>
 <ul><li><p>my VARLIST</p>
</li></ul> <ul><li><p>my TYPE VARLIST</p>
</li></ul> <ul><li><p>my VARLIST : ATTRS</p>
</li></ul> <ul><li><p>my TYPE VARLIST : ATTRS</p>
</li></ul> <p>Works as in Perl 5.</p>
 <a name="t2.3.81"></a><h2 id="_language_5to6-perlfunc.pod6-next">2.3.81 next</h2>
 <ul><li><p>next LABEL</p>
</li></ul> <ul><li><p>next EXPR</p>
</li></ul> <ul><li><p>next</p>
</li></ul> <p>The same in Perl 6.</p>
 <a name="t2.3.82"></a><h2 id="_language_5to6-perlfunc.pod6-no">2.3.82 no</h2>
 <ul><li><p>no MODULE VERSION</p>
</li></ul> <ul><li><p>no MODULE LIST</p>
</li></ul> <ul><li><p>no MODULE</p>
</li></ul> <ul><li><p>no VERSION</p>
</li></ul> <p>In Perl 6, this is usable for pragmas such as <span class="code">strict</span>, but not for modules. It's unclear whether it can be used for versions, but since that's currently something of a moot point, I would guess not.</p>
 <a name="t2.3.83"></a><h2 id="_language_5to6-perlfunc.pod6-oct">2.3.83 oct</h2>
 <ul><li><p>oct</p>
</li></ul> <p>Replaced by the adverbial form <span class="code">:8</span>. E. g. <span class="code">:8("100")</span> returns 64.</p>
 <a name="t2.3.84"></a><h2 id="_language_5to6-perlfunc.pod6-open">2.3.84 open</h2>
 <ul><li><p>open FILEHANDLE,EXPR</p>
</li></ul> <ul><li><p>open FILEHANDLE,MODE,EXPR</p>
</li></ul> <ul><li><p>open FILEHANDLE,MODE,EXPR,LIST</p>
</li></ul> <ul><li><p>open FILEHANDLE,MODE,REFERENCE</p>
</li></ul> <ul><li><p>open FILEHANDLE</p>
</li></ul> <p>The most obvious change from Perl 5 is the file mode syntax. To open a file for reading only, you would say <span class="code">open("file", :r)</span>. For write- only, read-write, and append, you would use <span class="code">:w</span>, <span class="code">:rw</span>, and <span class="code">:a</span> respectively. There are also options for encoding and how the filehandle deals with newlines. Details <a href="#_routine_open.pod6">here</a>.</p>
 <a name="t2.3.85"></a><h2 id="_language_5to6-perlfunc.pod6-opendir">2.3.85 opendir</h2>
 <ul><li><p>opendir DIRHANDLE,EXPR</p>
</li></ul> <p>Not a builtin function in Perl 6. You would use the IO::Path class:</p>
 <pre class="code">my $dir = IO::Path.new("directory");

my $dir = "directory".IO; # Same, but probably more direct</pre>
 <a name="t2.3.86"></a><h2 id="_language_5to6-perlfunc.pod6-ord">2.3.86 ord</h2>
 <ul><li><p>ord EXPR</p>
</li></ul> <p>Same as in Perl 5. May be used as a method: <span class="code">"howdy!".ord; # 104</span></p>
 <a name="t2.3.87"></a><h2 id="_language_5to6-perlfunc.pod6-our">2.3.87 our</h2>
 <ul><li><p>our VARLIST</p>
</li></ul> <ul><li><p>our TYPE VARLIST</p>
</li></ul> <ul><li><p>our VARLIST : ATTRS</p>
</li></ul> <ul><li><p>our TYPE VARLIST : ATTRS</p>
</li></ul> <p>The same in Perl 6.</p>
 <a name="t2.3.88"></a><h2 id="_language_5to6-perlfunc.pod6-pack">2.3.88 pack</h2>
 <ul><li><p>pack TEMPLATE,LIST</p>
</li></ul> <p>Available in Perl 6. The template options are currently more restricted than they are in Perl 5. The current documented list can be found at <a href="#_routine_unpack.pod6">unpack</a>.</p>
 <a name="t2.3.89"></a><h2 id="_language_5to6-perlfunc.pod6-package">2.3.89 package</h2>
 <ul><li><p>package NAMESPACE</p>
</li></ul> <ul><li><p>package NAMESPACE VERSION</p>
</li></ul> <ul><li><p>package NAMESPACE BLOCK</p>
</li></ul> <ul><li><p>package NAMESPACE VERSION BLOCK</p>
</li></ul> <p>S10 indicates that <span class="code">package</span> can be used in Perl 6, but only with a block. I. e. <span class="code">package Foo { ... }</span> means that the code within the block would be in package Foo. There is a special case where a declaration of the form <span class="code">package Foo;</span> as the first statement in a file indicates that the rest of the file is Perl 5 code, but the usefulness of this is unclear. In fact, as modules and classes are declared with distinct keywords (such as <span class="code">class</span>), it's unlikely you will use <span class="code">package</span> directly in Perl 6.</p>
 <a name="t2.3.90"></a><h2 id="_language_5to6-perlfunc.pod6-__PACKAGE__">2.3.90 __PACKAGE__</h2>
 <ul><li><p>__PACKAGE__</p>
</li></ul> <p>Replaced by <span class="code">$?PACKAGE</span>.</p>
 <a name="t2.3.91"></a><h2 id="_language_5to6-perlfunc.pod6-pipe">2.3.91 pipe</h2>
 <ul><li><p>pipe READHANDLE,WRITEHANDLE</p>
</li></ul> <p>Probably replaced by something in the <span class="code">IO::Pipe</span> class, but this is not clearly documented.</p>
 <a name="t2.3.92"></a><h2 id="_language_5to6-perlfunc.pod6-pop">2.3.92 pop</h2>
 <ul><li><p>pop ARRAY</p>
</li></ul> <p>Works in Perl 6, and can also be used as a method. I. e. <span class="code">my $x = pop @a;</span> and <span class="code">my $x = @a.pop;</span> are equivalent.</p>
 <a name="t2.3.93"></a><h2 id="_language_5to6-perlfunc.pod6-pos">2.3.93 pos</h2>
 <ul><li><p>pos SCALAR</p>
</li></ul> <p>Not available in Perl 6. The closest equivalent is the <span class="code">:c</span> adverb, which defaults to <span class="code">$/.to</span> if <span class="code">$/</span> is true, and <span class="code">0</span> if it isn't. For information on <span class="code">:c</span>, see <a href="#_language_regexes.pod6-Continue">Continue</a>.</p>
 <a name="t2.3.94"></a><h2 id="_language_5to6-perlfunc.pod6-print">2.3.94 print</h2>
 <ul><li><p>print FILEHANDLE LIST</p>
</li></ul> <ul><li><p>print FILEHANDLE</p>
</li></ul> <ul><li><p>print LIST</p>
</li></ul> <ul><li><p>print</p>
</li></ul> <p><span class="code">print</span> can be used as a function in Perl 6, defaulting to standard out. To use <span class="code">print</span> as a function with a filehandle <i>instead</i> of standard out, you need to put a colon after the filehandle. I. e. <span class="code">print $fh: "Howdy!"</span>. The use of the colon as an "invocant marker" here is discussed at <a href="https://design.perl6.org/S03.html#line_4019">https://design.perl6.org/S03.html#line_4019</a>. Alternately, you can use a method call: <span class="code">$fh.print("howdy!")</span></p>
 <a name="t2.3.95"></a><h2 id="_language_5to6-perlfunc.pod6-printf">2.3.95 printf</h2>
 <ul><li><p>printf FILEHANDLE</p>
</li></ul> <ul><li><p>printf FORMAT, LIST</p>
</li></ul> <ul><li><p>printf</p>
</li></ul> <p>Works in Perl 6. For the formats, see the documentation for <span class="code">sprintf</span>.</p>
 <a name="t2.3.96"></a><h2 id="_language_5to6-perlfunc.pod6-prototype">2.3.96 prototype</h2>
 <ul><li><p>prototype FUNCTION</p>
</li></ul> <p>No available in Perl 6. The closest equivalent seems to be <span class="code">.signature</span>. E. g. <span class="code">say &amp;sprintf.signature</span> results in "(Cool $format, *@args)".</p>
 <a name="t2.3.97"></a><h2 id="_language_5to6-perlfunc.pod6-push">2.3.97 push</h2>
 <ul><li><p>push ARRAY,LIST</p>
</li></ul> <p>Works as in Perl 5, as well as being available as a method: <span class="code">@a.push("foo");</span>. <i>Note:</i> the flattening behaviour is different in Perl 6: <span class="code">@b.push: @a</span> will push <span class="code">@a</span> into <span class="code">@b</span> as a single element. See also the <a href="#_type_Array.pod6-method_append">append method</a>.</p>
 <a name="t2.3.98"></a><h2 id="_language_5to6-perlfunc.pod6-quoting">2.3.98 quoting</h2>
 <ul><li><p>q/STRING/</p>
</li></ul> <ul><li><p>qq/STRING/</p>
</li></ul> <ul><li><p>qw/STRING/</p>
</li></ul> <ul><li><p>qx/STRING/</p>
</li></ul> <p>These survive the transition to Perl 6. Some notes:</p>
 <pre class="code">q/.../ # is still equivalent to using single quotes.
qq/.../ # is still equivalent to using double quotes.
qw/.../ # is more commonly rendered as C&amp;lt;&amp;lt; &amp;lt;...&gt; &gt;&gt; in Perl 6.</pre>
 <p>There are some added quoting constructs and equivalents, as explained at <a href="#_language_quoting.pod6">quoting</a>.</p>
 <ul><li><p>qr/STRING/</p>
</li></ul> <p>Has been replaced by <span class="code">rx/.../</span>.</p>
 <ul><li><p>quotemeta EXPR</p>
</li></ul> <p>No direct equivalent, i.e. nothing that just returns the string with all the ASCII non-word characters backslashed. In regexes, however, using <span class="code">$foo</span> will treat <span class="code">$foo</span> as a literal string, and using <span class="code">&lt;$foo> </span> will interpret the contents of <span class="code">$foo</span> as regex code. Note that the angle brackets are doing something different here than they do outside a regex. For more information on this, see <a href="https://design.perl6.org/S05.html#Extensible_metasyntax_(%3C...%3E)">https://design.perl6.org/S05.html#Extensible_metasyntax_(%3C...%3E)</a></p>
 <a name="t2.3.99"></a><h2 id="_language_5to6-perlfunc.pod6-rand">2.3.99 rand</h2>
 <ul><li><p>rand EXPR</p>
</li></ul> <p><span class="code">rand</span> by itself works as it does in Perl 5, but you can no longer give it an argument. You can, however, use it as a method on a number to get that behavior. I. e. the Perl 5 <span class="code">rand(100)</span> is equivalent to <span class="code">100.rand</span> in Perl 6. Additionally, you can get a random integer by using something like <span class="code">(^100).pick</span>. For <i>why</i> you are able to do that, see <a href="#_language_operators.pod6-prefix_%5E">^ operator</a> and <a href="#_routine_pick.pod6">pick</a>.</p>
 <a name="t2.3.100"></a><h2 id="_language_5to6-perlfunc.pod6-read">2.3.100 read</h2>
 <ul><li><p>read FILEHANDLE,SCALAR,LENGTH,OFFSET</p>
</li></ul> <p><span class="code">read</span> is found in <span class="code">IO::Handle</span> and <span class="code">IO::Socket</span> in Perl 6. It reads the specified number of bytes (rather than characters) from the relevant handle or socket. The use of an offset available in Perl 5 is not documented to exist at this time.</p>
 <a name="t2.3.101"></a><h2 id="_language_5to6-perlfunc.pod6-readdir">2.3.101 readdir</h2>
 <ul><li><p>readdir DIRHANDLE</p>
</li></ul> <p>Not a builtin function. To iterate through the contents of a directory, take a look at <a href="#_type_IO::Path.pod6-routine_dir">dir routine</a>.</p>
 <a name="t2.3.102"></a><h2 id="_language_5to6-perlfunc.pod6-readline">2.3.102 readline</h2>
 <ul><li><p>readline</p>
</li></ul> <p>Not available in Perl 6. You most likely want to use the <span class="code">.lines</span> method in some way. For more detailed information on reading from files, see <a href="#_language_io.pod6">io</a>.</p>
 <a name="t2.3.103"></a><h2 id="_language_5to6-perlfunc.pod6-readlink">2.3.103 readlink</h2>
 <ul><li><p>readlink EXPR</p>
</li></ul> <p>Appears to be gone from Perl 6.</p>
 <a name="t2.3.104"></a><h2 id="_language_5to6-perlfunc.pod6-readpipe">2.3.104 readpipe</h2>
 <ul><li><p>readpipe EXPR</p>
</li></ul> <ul><li><p>readpipe</p>
</li></ul> <p>Doesn't appear to be working in Perl 6, but <span class="code">qx//</span> is functional, so it might be lurking around in some class that isn't obvious.</p>
 <a name="t2.3.105"></a><h2 id="_language_5to6-perlfunc.pod6-recv">2.3.105 recv</h2>
 <ul><li><p>recv SOCKET,SCALAR,LENGTH,FLAGS</p>
</li></ul> <p>Appears to be in IO::Socket. Not extensively documented at this time.</p>
 <a name="t2.3.106"></a><h2 id="_language_5to6-perlfunc.pod6-redo">2.3.106 redo</h2>
 <ul><li><p>redo LABEL</p>
</li></ul> <ul><li><p>redo EXPR</p>
</li></ul> <ul><li><p>redo</p>
</li></ul> <p>Unchanged in Perl 6.</p>
 <a name="t2.3.107"></a><h2 id="_language_5to6-perlfunc.pod6-ref">2.3.107 ref</h2>
 <ul><li><p>ref EXPR</p>
</li></ul> <p>Gone. To quote S29, "If you really want the type name, you can use <span class="code">$var.WHAT.perl</span>. If you really want P5 ref semantics, use <span class="code">Perl5::p5ref</span>." Except that <span class="code">Perl5::p5ref</span> does not seem to currently exist...</p>
 <a name="t2.3.108"></a><h2 id="_language_5to6-perlfunc.pod6-rename">2.3.108 rename</h2>
 <ul><li><p>rename OLDNAME,NEWNAME</p>
</li></ul> <p>Still available in Perl 6.</p>
 <a name="t2.3.109"></a><h2 id="_language_5to6-perlfunc.pod6-requires">2.3.109 requires</h2>
 <ul><li><p>require VERSION</p>
</li></ul> <p>Seems that <span class="code">require</span> may work for modules in Perl 6, but unclear if it will work with version numbers.</p>
 <a name="t2.3.110"></a><h2 id="_language_5to6-perlfunc.pod6-reset">2.3.110 reset</h2>
 <ul><li><p>reset EXPR</p>
</li></ul> <p>Seeing no evidence of this in Perl 6 and, in fact, S29 asks if there was a good use for this. I'm guessing it's probably gone.</p>
 <a name="t2.3.111"></a><h2 id="_language_5to6-perlfunc.pod6-return">2.3.111 return</h2>
 <ul><li><p>return EXPR</p>
</li></ul> <p>Appears to be available in Perl 6, although not clearly documented.</p>
 <a name="t2.3.112"></a><h2 id="_language_5to6-perlfunc.pod6-reverse">2.3.112 reverse</h2>
 <ul><li><p>reverse LIST</p>
</li></ul> <p>In Perl 6, this only reverses the elements of a list. <span class="code">reverse(@a)</span> or <span class="code">@a.reverse</span>. To reverse the characters in a string, use the <span class="code">.flip</span> method.</p>
 <a name="t2.3.113"></a><h2 id="_language_5to6-perlfunc.pod6-rewinddir">2.3.113 rewinddir</h2>
 <ul><li><p>rewinddir DIRHANDLE</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] There does not appear to be an obvious direct equivalent. It is possible that some incantation in <span class="code">IO::Path</span> may serve, but it's not clear what it would be.</p>
 <a name="t2.3.114"></a><h2 id="_language_5to6-perlfunc.pod6-rindex">2.3.114 rindex</h2>
 <ul><li><p>rindex STR,SUBSTR,POSITION</p>
</li></ul> <p>Works as in Perl 5, and may also be used as a method. E. g. <span class="code">$x = "babaganush";say $x.rindex("a");say $x.rindex("a", 3); # 5, 3</span></p>
 <a name="t2.3.115"></a><h2 id="_language_5to6-perlfunc.pod6-rmdir">2.3.115 rmdir</h2>
 <ul><li><p>rmdir FILENAME</p>
</li></ul> <p>Works in Perl 6 and can also be used as a method. <span class="code">rmdir "Foo";</span> and <span class="code">"Foo".IO.rmdir;</span> are equivalent.</p>
 <a name="t2.3.116"></a><h2 id="_language_5to6-perlfunc.pod6-s///">2.3.116 s///</h2>
 <ul><li><p>s///</p>
</li></ul> <p>Regular expression syntax is somewhat different in Perl 6, but the substitution operator exists. If you're trying to rewrite some Perl 5 code, the most important difference is that <span class="code">=~</span> is replaced by the smart match operator, <span class="code">~~</span>. Similarly, <span class="code">!~</span> is <span class="code">!~~</span>. Options for regex operators are adverbs and are complicated. For details, see <a href="#_language_regexes.pod6-Adverbs">Adverbs page</a></p>
 <a name="t2.3.117"></a><h2 id="_language_5to6-perlfunc.pod6-say">2.3.117 say</h2>
 <ul><li><p>say FILEHANDLE</p>
</li></ul> <ul><li><p>say LIST</p>
</li></ul> <ul><li><p>say</p>
</li></ul> <p><span class="code">say</span> can be used as a function, defaulting to standard out. To use <span class="code">say</span> as a function with a filehandle <i>instead</i> of standard out, you need to put a colon after the filehandle. I. e. <span class="code">say $fh: "Howdy!"</span>. The use of the colon as an "invocant marker" here is discussed at <a href="https://design.perl6.org/S03.html#line_4019">https://design.perl6.org/S03.html#line_4019</a>. Alternately, you can use a method call: <span class="code">$fh.say("howdy!")</span></p>
 <a name="t2.3.118"></a><h2 id="_language_5to6-perlfunc.pod6-scalar">2.3.118 scalar</h2>
 <ul><li><p>scalar EXPR</p>
</li></ul> <p>Gone. Apparently "very" gone.</p>
 <a name="t2.3.119"></a><h2 id="_language_5to6-perlfunc.pod6-seek">2.3.119 seek</h2>
 <ul><li><p>seek FILEHANDLE,POSITION,WHENCE</p>
</li></ul> <p>Not documented in a any real way yet, but listed under the <span class="code">IO::Handle</span> class.</p>
 <a name="t2.3.120"></a><h2 id="_language_5to6-perlfunc.pod6-seekdir">2.3.120 seekdir</h2>
 <ul><li><p>seekdir DIRHANDLE,POS</p>
</li></ul> <p>Not currently documented, but looks to be something that would be implemented in one of the <span class="code">IO</span> classes, likely <span class="code">IO::Path</span>.</p>
 <a name="t2.3.121"></a><h2 id="_language_5to6-perlfunc.pod6-select">2.3.121 select</h2>
 <ul><li><p>select FILEHANDLE</p>
</li></ul> <p>"[S]elect as a global concept is dead." When I asked around about <span class="code">select</span>, I was told that $*OUT and such are overridable in dynamic scope, and that <span class="code">IO::Capture::Simple</span> (at <a href="https://github.com/sergot/IO-Capture-Simple">https://github.com/sergot/IO-Capture-Simple</a>) may be of use for something you might be doing with the value of <span class="code">select</span>.</p>
 <a name="t2.3.122"></a><h2 id="_language_5to6-perlfunc.pod6-sem*">2.3.122 sem*</h2>
 <ul><li><p>semctl ID,SEMNUM,CMD,ARG</p>
</li></ul> <ul><li><p>semget KEY,NSEMS,FLAGS</p>
</li></ul> <ul><li><p>semop KEY,OPSTRING</p>
</li></ul> <p>Gone from the core. May turn up in a module somewhere.</p>
 <a name="t2.3.123"></a><h2 id="_language_5to6-perlfunc.pod6-send">2.3.123 send</h2>
 <ul><li><p>send SOCKET,MSG,FLAGS,TO</p>
</li></ul> <p>Can be found in the <span class="code">IO::Socket</span> class.</p>
 <a name="t2.3.124"></a><h2 id="_language_5to6-perlfunc.pod6-setpgrp">2.3.124 setpgrp</h2>
 <ul><li><p>setpgrp PID,PGRP</p>
</li></ul> <p>No longer in core. Will probably wind up in a POSIX module.</p>
 <a name="t2.3.125"></a><h2 id="_language_5to6-perlfunc.pod6-setpriority">2.3.125 setpriority</h2>
 <ul><li><p>setpriority WHICH,WHO,PRIORITY</p>
</li></ul> <p>No longer in core. Will probably wind up in a POSIX module.</p>
 <a name="t2.3.126"></a><h2 id="_language_5to6-perlfunc.pod6-setsockopt">2.3.126 setsockopt</h2>
 <ul><li><p>setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL</p>
</li></ul> <p>Not documented, but probably hiding in an <span class="code">IO</span> class somewhere.</p>
 <a name="t2.3.127"></a><h2 id="_language_5to6-perlfunc.pod6-shift">2.3.127 shift</h2>
 <ul><li><p>shift ARRAY</p>
</li></ul> <ul><li><p>shift EXPR</p>
</li></ul> <ul><li><p>shift</p>
</li></ul> <p>Works as a method as well as a function. <span class="code">shift @a</span> and <span class="code">@a.shift</span> are equivalent.</p>
 <a name="t2.3.128"></a><h2 id="_language_5to6-perlfunc.pod6-shm*">2.3.128 shm*</h2>
 <ul><li><p>shmctl ID,CMD,ARG</p>
</li></ul> <ul><li><p>shmget KEY,SIZE,FLAGS</p>
</li></ul> <ul><li><p>shmread ID,VAR,POS,SIZE</p>
</li></ul> <ul><li><p>shmwrite ID,STRING,POS,SIZE</p>
</li></ul> <p>Gone from the core. May turn up in a module somewhere.</p>
 <a name="t2.3.129"></a><h2 id="_language_5to6-perlfunc.pod6-shutdown">2.3.129 shutdown</h2>
 <ul><li><p>shutdown SOCKET,HOW</p>
</li></ul> <p>Not documented, but likely moved into <span class="code">IO::Socket</span>.</p>
 <a name="t2.3.130"></a><h2 id="_language_5to6-perlfunc.pod6-sin">2.3.130 sin</h2>
 <ul><li><p>sin EXPR</p>
</li></ul> <p>Works as a function and also as a method. <span class="code">sin(2)</span> and <span class="code">2.sin</span> are equivalent.</p>
 <a name="t2.3.131"></a><h2 id="_language_5to6-perlfunc.pod6-sleep">2.3.131 sleep</h2>
 <ul><li><p>sleep EXPR</p>
</li></ul> <p>Still works as in Perl 5. As of this writing, works as a method, but that is deprecated and will be removed soon.</p>
 <a name="t2.3.132"></a><h2 id="_language_5to6-perlfunc.pod6-sockets">2.3.132 sockets</h2>
 <ul><li><p>socket SOCKET,DOMAIN,TYPE,PROTOCOL</p>
</li></ul> <ul><li><p>socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL</p>
</li></ul> <p>Not currently documented, but will likely wind up in <span class="code">IO::Socket</span>.</p>
 <a name="t2.3.133"></a><h2 id="_language_5to6-perlfunc.pod6-sort">2.3.133 sort</h2>
 <ul><li><p>sort SUBNAME LIST</p>
</li></ul> <p><span class="code">sort</span> exists in Perl 6, but is somewhat different. <span class="code">$a</span> and <span class="code">$b</span> are no longer special (See <a href="5to6-perlvar">5to6-perlvar</a>) and sort routines no longer return positive integers, negative integers, or 0, but rather <span class="code">Order::Increase</span>, <span class="code">Order::Same</span>, or <span class="code">Order::Decrease</span> objects. See <a href="#_routine_sort.pod6">sort</a> for details. May also be used as a method I. e. <span class="code">sort(@a)</span> is equivalent to <span class="code">@a.sort</span>.</p>
 <a name="t2.3.134"></a><h2 id="_language_5to6-perlfunc.pod6-splice">2.3.134 splice</h2>
 <ul><li><p>splice ARRAY,OFFSET,LENGTH</p>
</li></ul> <ul><li><p>splice ARRAY,OFFSET</p>
</li></ul> <ul><li><p>splice ARRAY</p>
</li></ul> <ul><li><p>splice EXPR,OFFSET,LENGTH,LIST</p>
</li></ul> <ul><li><p>splice EXPR,OFFSET,LENGTH</p>
</li></ul> <ul><li><p>splice EXPR,OFFSET</p>
</li></ul> <ul><li><p>splice EXPR</p>
</li></ul> <p>Available in Perl 6. Can also be used as a method. <span class="code">splice(@foo, 2, 3, &lt;M N O P>); </span> is equivalent to <span class="code">@foo.splice(2, 3, &lt;M N O P>); </span>.</p>
 <a name="t2.3.135"></a><h2 id="_language_5to6-perlfunc.pod6-split">2.3.135 split</h2>
 <ul><li><p>split /PATTERN/,EXPR,LIMIT</p>
</li></ul> <ul><li><p>split /PATTERN/,EXPR</p>
</li></ul> <ul><li><p>split /PATTERN/</p>
</li></ul> <p>Works mostly as in Perl 5. There are some exceptions, though. To get the special behavior of using the empty string, you must actually use the empty string - the special case of the empty pattern <span class="code">//</span> being treated as the empty string does not apply. If you use a regex for the split, it will use the regex, while a literal string will be treated literally. If you wish to have the delimiters included in the resulting list, you need to use the named parameter <span class="code">:all</span>, like this: <span class="code">split(';', "a;b;c", :all) # a ; b ; c</span> Empty chunks are not removed from the result list as they are in Perl 5. For that behavior, see <span class="code">comb</span>. Details on <span class="code">split</span> are <a href="#_routine_split.pod6">here</a>. Unsurprisingly, <span class="code">split</span> also now works as a method: <span class="code">"a;b;c".split(';')</span></p>
 <ul><li><p>split</p>
</li></ul> <p>The zero argument version must now be called with an explicit empty string, as described above.</p>
 <a name="t2.3.136"></a><h2 id="_language_5to6-perlfunc.pod6-sprintf">2.3.136 sprintf</h2>
 <ul><li><p>sprintf FORMAT, LIST</p>
</li></ul> <p>Works as in Perl 5. The formats currently available are:</p>
 <table>
<tr><td>%</td> <td>a literal percent sign</td></tr>
 <tr><td>c</td> <td>a character with the given codepoint</td></tr>
 <tr><td>s</td> <td>a string</td></tr>
 <tr><td>d</td> <td>a signed integer, in decimal</td></tr>
 <tr><td>u</td> <td>an unsigned integer, in decimal</td></tr>
 <tr><td>o</td> <td>an unsigned integer, in octal</td></tr>
 <tr><td>x</td> <td>an unsigned integer, in hexadecimal</td></tr>
 <tr><td>e</td> <td>a floating-point number, in scientific notation</td></tr>
 <tr><td>f</td> <td>a floating-point number, in fixed decimal notation</td></tr>
 <tr><td>g</td> <td>a floating-point number, in %e or %f notation</td></tr>
 <tr><td>X</td> <td>like x, but using uppercase letters</td></tr>
 <tr><td>E</td> <td>like e, but using an uppercase "E"</td></tr>
 <tr><td>G</td> <td>like g, but with an uppercase "E" (if applicable)</td></tr>
</table> <p>Compatibility:</p>
 <table>
<tr><td>i</td> <td>a synonym for %d</td></tr>
 <tr><td>D</td> <td>a synonym for %ld</td></tr>
 <tr><td>U</td> <td>a synonym for %lu</td></tr>
 <tr><td>O</td> <td>a synonym for %lo</td></tr>
 <tr><td>F</td> <td>a synonym for %f</td></tr>
</table> <p>Perl 5 (non-)compatibility:</p>
 <table>
<tr><td>n</td> <td>produces a runtime exception</td></tr>
 <tr><td>p</td> <td>produces a runtime exception</td></tr>
</table> <p>There are modifiers for integers, but they're mainly no-ops, as the semantics aren't settled:</p>
 <table>
<tr><td>h</td> <td>interpret integer as native "short" (typically int16)</td></tr>
 <tr><td>l</td> <td>interpret integer as native "long" (typically int32 or int64)</td></tr>
 <tr><td>ll</td> <td>interpret integer as native "long long" (typically int64)</td></tr>
 <tr><td>L</td> <td>interpret integer as native "long long" (typically uint64)</td></tr>
 <tr><td>q</td> <td>interpret integer as native "quads" (typically int64 or larger)</td></tr>
</table> <a name="t2.3.137"></a><h2 id="_language_5to6-perlfunc.pod6-sqrt">2.3.137 sqrt</h2>
 <ul><li><p>sqrt EXPR</p>
</li></ul> <p>Works as a function and a method. <span class="code">sqrt(4)</span> and <span class="code">4.sqrt</span> are equivalent.</p>
 <a name="t2.3.138"></a><h2 id="_language_5to6-perlfunc.pod6-srand">2.3.138 srand</h2>
 <ul><li><p>srand EXPR</p>
</li></ul> <p>Available in Perl 6.</p>
 <a name="t2.3.139"></a><h2 id="_language_5to6-perlfunc.pod6-stat">2.3.139 stat</h2>
 <ul><li><p>stat EXPR</p>
</li></ul> <ul><li><p>stat DIRHANDLE</p>
</li></ul> <ul><li><p>stat</p>
</li></ul> <p>Likely implemented somewhere in <span class="code">IO</span>, but it is not clear where at this time.</p>
 <a name="t2.3.140"></a><h2 id="_language_5to6-perlfunc.pod6-state">2.3.140 state</h2>
 <ul><li><p>state VARLIST</p>
</li></ul> <ul><li><p>state TYPE VARLIST</p>
</li></ul> <ul><li><p>state VARLIST : ATTRS</p>
</li></ul> <ul><li><p>state TYPE VARLIST : ATTRS</p>
</li></ul> <p>Available in Perl 6, see <a href="#_syntax_state.pod6">state</a>.</p>
 <a name="t2.3.141"></a><h2 id="_language_5to6-perlfunc.pod6-study">2.3.141 study</h2>
 <ul><li><p>study SCALAR</p>
</li></ul> <ul><li><p>study</p>
</li></ul> <p><span class="code">study</span> is no more.</p>
 <a name="t2.3.142"></a><h2 id="_language_5to6-perlfunc.pod6-sub">2.3.142 sub</h2>
 <ul><li><p>sub NAME BLOCK</p>
</li></ul> <ul><li><p>sub NAME(PROTO) BLOCK</p>
</li></ul> <ul><li><p>sub NAME : ATTRS BLOCK</p>
</li></ul> <ul><li><p>sub NAME(PROTO) : ATTRS BLOCK</p>
</li></ul> <p>Unsurprisingly, we still have subroutines! You can have a signature in your subroutine which allows you to specify arguments. Nevertheless, in the absence of a signature (and only in the absence of a signature), <span class="code">@_</span> still contains what is passed to the function. So, in theory, you don't need to change that aspect of a function if porting from Perl 5 to Perl 6 (although you should probably consider the option of using a signature). For all the gory details, see <a href="#_language_functions.pod6">functions</a>.</p>
 <a name="t2.3.143"></a><h2 id="_language_5to6-perlfunc.pod6-__SUB__">2.3.143 __SUB__</h2>
 <ul><li><p>__SUB__</p>
</li></ul> <p>Replaced by <span class="code">&amp;?ROUTINE</span>.</p>
 <a name="t2.3.144"></a><h2 id="_language_5to6-perlfunc.pod6-substr">2.3.144 substr</h2>
 <ul><li><p>substr EXPR,OFFSET,LENGTH,REPLACEMENT</p>
</li></ul> <ul><li><p>substr EXPR,OFFSET,LENGTH</p>
</li></ul> <ul><li><p>substr EXPR,OFFSET</p>
</li></ul> <p>Can be used as a function or a method. <span class="code">substr("hola!", 1, 3)</span> and <span class="code">"hola!".substr(1, 3)</span> both return "ola".</p>
 <a name="t2.3.145"></a><h2 id="_language_5to6-perlfunc.pod6-symlink">2.3.145 symlink</h2>
 <ul><li><p>symlink OLDFILE,NEWFILE</p>
</li></ul> <p>Part of IO::Path in Perl 6. The only difference between Perl 5 and Perl 6 is that the argument order has changed. It's now <span class="code">link($original, $linked_file)</span>.</p>
 <a name="t2.3.146"></a><h2 id="_language_5to6-perlfunc.pod6-syscall">2.3.146 syscall</h2>
 <ul><li><p>syscall NUMBER, LIST</p>
</li></ul> <p>Not a builtin in Perl 6. Most likely out in a module somewhere, but it's currently unclear where.</p>
 <a name="t2.3.147"></a><h2 id="_language_5to6-perlfunc.pod6-sys*">2.3.147 sys*</h2>
 <ul><li><p>sysopen FILEHANDLE,FILENAME,MODE</p>
</li></ul> <ul><li><p>sysopen FILEHANDLE,FILENAME,MODE,PERMS</p>
</li></ul> <ul><li><p>sysread FILEHANDLE,SCALAR,LENGTH,OFFSET</p>
</li></ul> <ul><li><p>sysread FILEHANDLE,SCALAR,LENGTH</p>
</li></ul> <ul><li><p>sysseek FILEHANDLE,POSITION,WHENCE</p>
</li></ul> <p>As with the non-sys versions of these functions, are probably lurking in the <span class="code">IO</span> classes somewhere.</p>
 <a name="t2.3.148"></a><h2 id="_language_5to6-perlfunc.pod6-system">2.3.148 system</h2>
 <ul><li><p>system LIST</p>
</li></ul> <ul><li><p>system PROGRAM LIST</p>
</li></ul> <p>For this, you probably want (<a href="#_routine_run.pod6">run</a>) or (<a href="#_routine_shell.pod6">shell routine</a>).</p>
 <a name="t2.3.149"></a><h2 id="_language_5to6-perlfunc.pod6-syswrite">2.3.149 syswrite</h2>
 <ul><li><p>syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET</p>
</li></ul> <ul><li><p>syswrite FILEHANDLE,SCALAR,LENGTH</p>
</li></ul> <ul><li><p>syswrite FILEHANDLE,SCALAR</p>
</li></ul> <p>As with <span class="code">sysopen</span> and friends, this has moved into the <span class="code">IO</span> classes.</p>
 <a name="t2.3.150"></a><h2 id="_language_5to6-perlfunc.pod6-tell">2.3.150 tell</h2>
 <ul><li><p>tell FILEHANDLE</p>
</li></ul> <p>In <span class="code">IO::Handle</span>, but not yet documented, beyond a mention.</p>
 <a name="t2.3.151"></a><h2 id="_language_5to6-perlfunc.pod6-telldir">2.3.151 telldir</h2>
 <ul><li><p>telldir DIRHANDLE</p>
</li></ul> <p>Possibly in <span class="code">IO::Path</span>, but not yet documented.</p>
 <a name="t2.3.152"></a><h2 id="_language_5to6-perlfunc.pod6-tie">2.3.152 tie</h2>
 <ul><li><p>tie VARIABLE,CLASSNAME,LIST</p>
</li></ul> <ul><li><p>tied VARIABLE</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] S29 indicates that variable tying has been replaced by container types. Unfortunately, what this means in practical terms has not been obviously specified.</p>
 <a name="t2.3.153"></a><h2 id="_language_5to6-perlfunc.pod6-time">2.3.153 time</h2>
 <ul><li><p>time</p>
</li></ul> <p>"Returns an Int representing the current time." Although <i>how</i> it represents the current time isn't in the documentation currently, it appears to still be seconds since epoch, as in Perl 5.</p>
 <a name="t2.3.154"></a><h2 id="_language_5to6-perlfunc.pod6-times">2.3.154 times</h2>
 <ul><li><p>times</p>
</li></ul> <p>Not available in Perl 6.</p>
 <a name="t2.3.155"></a><h2 id="_language_5to6-perlfunc.pod6-tr///">2.3.155 tr///</h2>
 <ul><li><p>tr///</p>
</li></ul> <p>Works similarly to how it does in Perl 5. The one caveat is that ranges are specified differently. Instead of using a range "a-z", you would use "a..z", i. e. with Perl's range operator. In Perl 6, <span class="code">tr///</span> has a method version, which is better documented, called <span class="code">.trans</span>. <span class="code">.trans</span> uses a list of pairs, as follows: <span class="code">$x.trans(['a'..'c'] => ['A'..'C'], ['d'..'q'] => ['D'..'Q'], ['r'..'z'] => ['R'..'Z']); </span> A much more extensive description of the uses of <span class="code">.trans</span> can be found at <a href="https://design.perl6.org/S05.html#Transliteration">https://design.perl6.org/S05.html#Transliteration</a>. The <span class="code">y///</span> equivalent has been done away with.</p>
 <a name="t2.3.156"></a><h2 id="_language_5to6-perlfunc.pod6-truncate">2.3.156 truncate</h2>
 <ul><li><p>truncate FILEHANDLE,LENGTH</p>
</li></ul> <ul><li><p>truncate EXPR,LENGTH</p>
</li></ul> <p>Most likely somewhere in <span class="code">IO::Handle</span>, but not currently documented.</p>
 <a name="t2.3.157"></a><h2 id="_language_5to6-perlfunc.pod6-uc">2.3.157 uc</h2>
 <ul><li><p>uc EXPR</p>
</li></ul> <p>Works as a function and a method. <span class="code">uc("ha")</span> and <span class="code">"ha".uc</span> both return "HA".</p>
 <a name="t2.3.158"></a><h2 id="_language_5to6-perlfunc.pod6-ucfirst">2.3.158 ucfirst</h2>
 <ul><li><p>ucfirst EXPR</p>
</li></ul> <ul><li><p>ucfirst</p>
</li></ul> <p>Perl 6 has done away with <span class="code">ucfirst</span>. The title case function <span class="code">tc</span> probably does what you need here. <a href="#_routine_tc.pod6">tc</a> function.</p>
 <a name="t2.3.159"></a><h2 id="_language_5to6-perlfunc.pod6-umask">2.3.159 umask</h2>
 <ul><li><p>umask EXPR</p>
</li></ul> <p>Is an <span class="code">IO</span> method. <span class="code">IO.umask</span> returns the umask.</p>
 <a name="t2.3.160"></a><h2 id="_language_5to6-perlfunc.pod6-undef">2.3.160 undef</h2>
 <ul><li><p>undef EXPR</p>
</li></ul> <p>There is no <span class="code">undef</span> in Perl 6. You can't undefine a function, and the closest equivalent value is probably <span class="code">Nil</span>, but you'll likely have no use for that. If you were using something like <span class="code">(undef, $file, $line) = caller;</span>, you would just get the filename and line number directly in Perl 6 instead of discarding the first result of <span class="code">caller</span>. <span class="code">caller</span> has been replaced by <span class="code">callframe</span> in Perl 6, so the equivalent statement would be <span class="code">($file, $line) = callframe.annotations&lt;file line>;</span></p>
 <a name="t2.3.161"></a><h2 id="_language_5to6-perlfunc.pod6-unlink">2.3.161 unlink</h2>
 <ul><li><p>unlink LIST</p>
</li></ul> <p>Still available. Usable as a method: <span class="code">"filename".IO.unlink</span></p>
 <ul><li><p>unlink</p>
</li></ul> <p>The zero argument (implicit <span class="code">$_</span>) version of unlink is not available in Perl 6.</p>
 <a name="t2.3.162"></a><h2 id="_language_5to6-perlfunc.pod6-unpack">2.3.162 unpack</h2>
 <ul><li><p>unpack TEMPLATE,EXPR</p>
</li></ul> <ul><li><p>unpack TEMPLATE</p>
</li></ul> <p>Available in Perl 6. The template options are currently more restricted than they are in Perl 5. The current documented list can be found <a href="#_routine_unpack.pod6">here</a>.</p>
 <a name="t2.3.163"></a><h2 id="_language_5to6-perlfunc.pod6-unshift">2.3.163 unshift</h2>
 <ul><li><p>unshift ARRAY,LIST</p>
</li></ul> <ul><li><p>unshift EXPR,LIST</p>
</li></ul> <p>Available in Perl 6. Can be used as a method. <span class="code">unshift(@a, "blah")</span> is equivalent to <span class="code">@a.unshift("blah")</span>.</p>
 <a name="t2.3.164"></a><h2 id="_language_5to6-perlfunc.pod6-untie">2.3.164 untie</h2>
 <ul><li><p>untie VARIABLE</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] Functions for tying variables seem to be replaced in Perl 6 by container types, as mentioned in S29. This has become no clearer since I wrote the entry for <span class="code">tie</span>, above.</p>
 <a name="t2.3.165"></a><h2 id="_language_5to6-perlfunc.pod6-use">2.3.165 use</h2>
 <ul><li><p>use Module VERSION LIST</p>
</li></ul> <ul><li><p>use Module VERSION</p>
</li></ul> <ul><li><p>use Module LIST</p>
</li></ul> <ul><li><p>use Module</p>
</li></ul> <ul><li><p>use VERSION</p>
</li></ul> <p>Available in Perl 6, but, oddly, not yet documented. One assumes it works similarly, if not identically, to the way it does in Perl 5</p>
 <a name="t2.3.166"></a><h2 id="_language_5to6-perlfunc.pod6-utime">2.3.166 utime</h2>
 <ul><li><p>utime LIST</p>
</li></ul> <p>S32 says this is gone, and refers you to <span class="code">Path.times</span>. Unfortunately, there seems to be no sign of <span class="code">Path.times</span>. Perhaps there will be something in <span class="code">IO::Path</span>, but it is not currently evident.</p>
 <a name="t2.3.167"></a><h2 id="_language_5to6-perlfunc.pod6-values">2.3.167 values</h2>
 <ul><li><p>values HASH</p>
</li></ul> <ul><li><p>values ARRAY</p>
</li></ul> <ul><li><p>values EXPR</p>
</li></ul> <p>Available in Perl 6. Can also be used as a method. <span class="code">values %hash</span> is equivalent to <span class="code">%hash.values</span>.</p>
 <a name="t2.3.168"></a><h2 id="_language_5to6-perlfunc.pod6-vec">2.3.168 vec</h2>
 <ul><li><p>vec EXPR,OFFSET,BITS</p>
</li></ul> <p>S29 says "Should replace <span class="code">vec</span> with declared buffer/array of <span class="code">bit</span>, <span class="code">uint2</span>, <span class="code">uint4</span>, etc." It is unclear, however, that this has actually happened.</p>
 <a name="t2.3.169"></a><h2 id="_language_5to6-perlfunc.pod6-wait">2.3.169 wait</h2>
 <ul><li><p>wait</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] Unclear where this has gone. There's a <span class="code">wait</span> method in <span class="code">Supply</span>, and an <span class="code">await</span> method in both <span class="code">Channel</span> and <span class="code">Promise</span>. Which, if any or all, of these is a direct equivalent of Perl 5's <span class="code">wait</span> is unclear.</p>
 <a name="t2.3.170"></a><h2 id="_language_5to6-perlfunc.pod6-waitpid">2.3.170 waitpid</h2>
 <ul><li><p>waitpid PID,FLAGS</p>
</li></ul> <p>As with <span class="code">wait</span>, the disposition of this is unclear.</p>
 <a name="t2.3.171"></a><h2 id="_language_5to6-perlfunc.pod6-wantarray">2.3.171 wantarray</h2>
 <ul><li><p>wantarray</p>
</li></ul> <p>There is no <span class="code">wantarray</span> in Perl 6, because <a href="#_language_faq.pod6-Why_is_wantarray_or_want_gone?_Can_I_return_different_things_in_different_contexts?">reasons</a>.</p>
 <p>There are very easy ways to cover many of the use cases which wantarray filled.</p>
 <p>First, since Perl 6 does not need special reference syntax to contain a <span class="code">List</span> or <span class="code">Array</span> in a <span class="code">Scalar</span>, simply returning a list may be all that is needed:</p>
 <pre class="code">sub listofstuff {
    return 1, 2, 3;
}
my $a = listofstuff();
print $a;                      # prints "123"
print join("&amp;lt;", listofstuff()) # prints "1&amp;lt;2&amp;lt;3"</pre>
 <p>One of the most common use cases is to provide either an array of lines or elements, or a prettier string than would be produced by simply printing the array. One can mix in a custom <span class="code">.Str</span> method for this purpose:</p>
 <pre class="code">sub prettylist(*@origlist) {
    @origlist but role {
        method Str { self.join("&amp;lt;") }
    }
}
print prettylist(1, 2, 3);  # prints "1&amp;lt;2&amp;lt;3"
print join("&gt;", prettylist(3, 2, 1)); # prints "3&gt;2&gt;1"</pre>
 <p>In the above example, the returned list may be lazy, and the <span class="code">.Str</span> method is not called until stringification happens, so no extra work is done to generate something which is not asked for.</p>
 <p>Another use case is to create methods which are mutators when called in void context but produce copies during assignment. It is generally considered better form in Perl 6 not to do so, since users can quite easily turn any copy-producing method into a mutator using the <span class="code">.=</span> operator:</p>
 <pre class="code">my $a = "foo\n";
$a.ords.say; # says "(102 111 111 10)"
$a .= chomp;
$a.ords.say; # says "(102 111 111)"</pre>
 <p>However if you have your heart set on using the same function name for both operations, you can get most of the way there by mixing in a <span class="code">.sink</span> method, which will be called when the result finds itself in void context. There are some caveats however, so again, this is not advised:</p>
 <pre class="code">multi sub increment($b is rw) {
    ($b + 1) does role { method sink { $b++ } }
}
multi sub increment($b) {
    $b + 1
}
my $a = 1;
increment($a);
say $a;                 # says "2"
my $b = increment($a);
say $a, $b;             # says "2 3"
# ...users will just have to be aware that they should not accidentally
# sink a stored value later, though this requires some effort to
# actually do:
sub identity($c is rw) { $c };
$a = 1;
$b = increment($a);
identity($b);
$a.say;                  # says "2"</pre>
 <a name="t2.3.172"></a><h2 id="_language_5to6-perlfunc.pod6-warn">2.3.172 warn</h2>
 <ul><li><p>warn LIST</p>
</li></ul> <p><span class="code">warn</span> throws an exception. To simply print a message to <span class="code">$*ERR</span>, you would use the <span class="code">note</span> function. For more on exceptions, see <a href="#_language_exceptions.pod6">Exceptions</a>.</p>
 <a name="t2.3.173"></a><h2 id="_language_5to6-perlfunc.pod6-write">2.3.173 write</h2>
 <ul><li><p>write FILEHANDLE</p>
</li></ul> <ul><li><p>write EXPR</p>
</li></ul> <ul><li><p>write</p>
</li></ul> <p>Formats are gone from Perl 6, so this no longer works.</p>
 <a name="t2.3.174"></a><h2 id="_language_5to6-perlfunc.pod6-y///">2.3.174 y///</h2>
 <ul><li><p>y///</p>
</li></ul> <p>This synonym for <span class="code">tr///</span> is gone. For functionality, see the entry for <span class="code">tr///</span>.</p>
</div> <!-- /language/5to6-perlop.pod6 --><div class="pod-body"><a id="_language_5to6-perlop.pod6"></a><a name="t3"><h1 class="title">3 5to6-perlop</h1></a> <p class="subtitle">Perl 5 to Perl 6 guide - operators</p> <a name="t3.1"></a><h1 id="_language_5to6-perlop.pod6-DESCRIPTION">3.1 DESCRIPTION</h1>
 <p>A (hopefully) comprehensive list of Perl 5 operators with their Perl 6 equivalents with notes on variations between them where necessary.</p>
 <a name="t3.2"></a><h1 id="_language_5to6-perlop.pod6-NOTE">3.2 NOTE</h1>
 <p>I will <i>not</i> be explaining the operators in detail. This document is an attempt to guide you from the operators in Perl 5's perlop document to their equivalents in Perl 6. For full documentation on the Perl 6 equivalents, please see the Perl 6 documentation.</p>
 <a name="t3.2.1"></a><h2 id="_language_5to6-perlop.pod6-Operator_Precedence_and_Associativity">3.2.1 Operator Precedence and Associativity</h2>
 <p>The operator precedence table is somewhat different in Perl 6 than it is in Perl 5, so I will not detail it here. If you need to know the precedence and associativity of a given operator in Perl 6, refer to <a href="#_language_operators.pod6-Operator_Precedence">Operator Precedence</a>.</p>
 <a name="t3.2.2"></a><h2 id="_language_5to6-perlop.pod6-Terms_and_List_Operators">3.2.2 Terms and List Operators</h2>
 <p>The things listed in Perl 5's perlop document as unary and list operators in this section tend to be things that can also be thought of as functions, such as <span class="code">print</span> and <span class="code">chdir</span>. As such, you can find information about them in <a href="#_language_5to6-perlfunc.pod6">5to6-perlfunc.pod6</a>. Parentheses are still used for grouping.</p>
 <a name="t3.2.3"></a><h2 id="_language_5to6-perlop.pod6-The_Arrow_Operator">3.2.3 The Arrow Operator</h2>
 <p>As you typically will not be using references in Perl 6, the arrow is probably less useful as a dereferencing operator. If you do need to dereference something, however, the arrow is the dot. It is also the dot for method calls. So, Perl 5's <span class="code">$arrayref->[7] </span> becomes <span class="code">$arrayref.[7]</span> in Perl 6 and, similarly, <span class="code">$user->name </span> becomes <span class="code">$user.name</span>. The <span class="code">=> </span> arrow is used for constructing Pairs, see <a href="#_language_terms.pod6-Pair">Pair term documentation</a>.</p>
 <a name="t3.2.4"></a><h2 id="_language_5to6-perlop.pod6-Auto-increment_and_Auto-decrement">3.2.4 Auto-increment and Auto-decrement</h2>
 <p>Work as in Perl 5. The one possible caveat is that they function by calling the <span class="code">succ</span> method for <span class="code">++</span> and the <span class="code">pred</span> method for <span class="code">--</span>. For builtin numeric types, this is unlikely to do something unusual, but custom types can define their own <span class="code">succ</span> and <span class="code">pred</span> methods, so in those cases, you should probably take note of what <span class="code">++</span> and <span class="code">--</span> will <i>actually</i> do.</p>
 <a name="t3.2.5"></a><h2 id="_language_5to6-perlop.pod6-Exponentiation">3.2.5 Exponentiation</h2>
 <p>Works as you would expect. The caveat in Perl 5's perlop about <span class="code">**</span> binding more tightly than unary minus (i. e. "-2**4" evaluates as "-(2**4)" rather than "(-2)**4)") seems to hold true for Perl 6.</p>
 <a name="t3.2.6"></a><h2 id="_language_5to6-perlop.pod6-Symbolic_Unary_Operators">3.2.6 Symbolic Unary Operators</h2>
 <p>As in Perl 5, unary <span class="code">!</span> and <span class="code">-</span> do logical arithmetic negation, respectively. <span class="code">?^</span> is used for bitwise logical negation, which the documentation indicates is equivalent to <span class="code">!</span>. It may be relevant to note that these coerce their arguments to <span class="code">Bool</span> and <span class="code">Numeric</span>, respectively.</p>
 <p>Unary <span class="code">~</span> is the string context operator in Perl 6, so use prefix <span class="code">+^</span> for bitwise integer negation. Assumes two's complement.</p>
 <p><span class="code">+</span> <i>does</i> have an effect in Perl 6, coercing its argument to to the Numeric type.</p>
 <p>Unary &lt;\> is no more. If you really want to take a reference to an existing named variable, you can use item context, like so: <span class="code">$aref = item(@array)</span> You can get a reference to a named subroutine by using the <span class="code">&amp;</span> sigil: &lt;$sref = &amp;foo> Anonymous arrays, hashes, and subs return their references during creation.</p>
 <a name="t3.2.7"></a><h2 id="_language_5to6-perlop.pod6-Binding_Operators">3.2.7 Binding Operators</h2>
 <p><span class="code">=~</span> and <span class="code">!~</span> have been replaced by <span class="code">~~</span> and <span class="code">!~~</span>, respectively. Those of you who consider smart matching broken in Perl 5 will be happy to hear that it works much better in Perl 6, as the stronger typing means less guesswork.</p>
 <a name="t3.2.8"></a><h2 id="_language_5to6-perlop.pod6-Multiplicative_Operators">3.2.8 Multiplicative Operators</h2>
 <p>Binary <span class="code">*</span>, <span class="code">/</span>, and <span class="code">%</span> do multiplication, division, and modulo, respectively, as in Perl 5.</p>
 <p>Binary <span class="code">x</span> is slightly different in Perl 6, and has a companion. <span class="code">print '-' x 80;</span> gives you a string of 80 dashes, but for the Perl 5 behavior of <span class="code">@ones = (1) x 80;</span> giving you a list of 80 "1"s, you would use <span class="code">@ones = 1 xx 80;</span>.</p>
 <a name="t3.2.9"></a><h2 id="_language_5to6-perlop.pod6-Additive_Operators">3.2.9 Additive Operators</h2>
 <p>Binary <span class="code">+</span> and <span class="code">-</span> do addition and subtraction, respectively, as you would expect..</p>
 <p>As <span class="code">.</span> is the method call operator, so binary <span class="code">~</span> acts as the concatenation operator in Perl 6.</p>
 <a name="t3.2.10"></a><h2 id="_language_5to6-perlop.pod6-Shift_Operators">3.2.10 Shift Operators</h2>
 <p><span class="code">&lt;&lt; </span> and <span class="code">>> </span> have been replaced by <span class="code">+&lt; </span> and <span class="code">+> </span>.</p>
 <a name="t3.2.11"></a><h2 id="_language_5to6-perlop.pod6-Named_Unary_Operators">3.2.11 Named Unary Operators</h2>
 <p>As noted above, you'll find these in <a href="#_language_5to6-perlfunc.pod6">5to6-perlfunc.pod6</a>.</p>
 <a name="t3.2.12"></a><h2 id="_language_5to6-perlop.pod6-Relational_Operators">3.2.12 Relational Operators</h2>
 <p>These all work as in Perl 5.</p>
 <a name="t3.2.13"></a><h2 id="_language_5to6-perlop.pod6-Equality_Operators">3.2.13 Equality Operators</h2>
 <p><span class="code">==</span> and <span class="code">!=</span> both work as in Perl 5.</p>
 <p><span class="code">&lt;=> </span> and <span class="code">cmp</span> have different behavior in Perl 6. <span class="code">&lt;=> </span> does a numeric comparison, but returns &lt;Order::Less>, &lt;Order::Same>, or &lt;Order::More> instead of Perl 5's <span class="code">-1</span>, <span class="code">0</span>, or <span class="code">1</span>. To get the Perl 5 behavior (with the change that it returns the <span class="code">Order</span> objects, rather than integers) of <span class="code">cmp</span>, you would use the <span class="code">leg</span> operator.</p>
 <p><span class="code">cmp</span> does either <span class="code">&lt;=> </span> or <span class="code">leg</span>, depending on the existing type of its arguments.</p>
 <p><span class="code">~~</span> is the smart match operator as in Perl 5, but it's also <i>just</i> the match operator in Perl 6, as noted above. For how smart matching works in Perl 6, see <a href="https://design.perl6.org/S03.html#Smart_matching">https://design.perl6.org/S03.html#Smart_matching</a>.</p>
 <a name="t3.2.14"></a><h2 id="_language_5to6-perlop.pod6-Smartmatch_Operator">3.2.14 Smartmatch Operator</h2>
 <p>See the entry on <span class="code">~~</span> directly above.</p>
 <a name="t3.2.15"></a><h2 id="_language_5to6-perlop.pod6-Bitwise_And">3.2.15 Bitwise And</h2>
 <p>Binary <span class="code">&amp;</span> is <span class="code">+&amp;</span> in Perl 6.</p>
 <a name="t3.2.16"></a><h2 id="_language_5to6-perlop.pod6-Bitwise_Or_and_Exclusive_Or">3.2.16 Bitwise Or and Exclusive Or</h2>
 <p>Bitwise OR has changed from <span class="code">|</span> in Perl 5 to <span class="code">+|</span> in Perl 6. Similarly, bitwise XOR <span class="code">^</span> is <span class="code">+^</span></p>
 <a name="t3.2.17"></a><h2 id="_language_5to6-perlop.pod6-C-style_Logical_And">3.2.17 C-style Logical And</h2>
 <p>Unchanged.</p>
 <a name="t3.2.18"></a><h2 id="_language_5to6-perlop.pod6-C-style_Logical_Or">3.2.18 C-style Logical Or</h2>
 <p>Unchanged.</p>
 <a name="t3.2.19"></a><h2 id="_language_5to6-perlop.pod6-Logical_Defined-Or">3.2.19 Logical Defined-Or</h2>
 <p>Remains in Perl 6 as <span class="code">//</span>. Returns the first defined operand, or else the last operand. Also, there is a low precedence version, called <span class="code">orelse</span>.</p>
 <a name="t3.2.20"></a><h2 id="_language_5to6-perlop.pod6-Range_Operators">3.2.20 Range Operators</h2>
 <p>In list context, <span class="code">..</span> operates as the range operator and should not need to be changed. That said, there are exclusionary range operators that may be useful. These are:</p>
 <pre class="code">infix  ..^  Excludes endpoint. C&amp;lt;1..^5; # 1 2 3 4 &gt;
infix  ^..  Excludes startpoint. C&amp;lt;1^..5; # 2 3 4 5&gt;
infix  ^..^ Excludes both start- and endpoint. C&amp;lt;1^..^5; # 2 3 4&gt;
prefix ^    From 0, excludes endpoint. C&amp;lt;^5; # 0 1 2 3 4&gt;</pre>
 <p>In scalar context, <span class="code">..</span> and <span class="code">...</span> work as flip-flop operators in Perl 5, but are little-known, and probably even less used. Those operations have been taken over by <span class="code">ff</span> and <span class="code">fff</span> in Perl 6, but are not clearly documented at this time.</p>
 <a name="t3.2.21"></a><h2 id="_language_5to6-perlop.pod6-Conditional_Operator">3.2.21 Conditional Operator</h2>
 <p><span class="code">?:</span> has been replaced by <span class="code">?? !!</span>. I. e. where you would use <span class="code">$x = $ok ? $y : $z;</span> in Perl 5, you would use <span class="code">$x = $ok ?? $y !! $z;</span> in Perl 6.</p>
 <a name="t3.2.22"></a><h2 id="_language_5to6-perlop.pod6-Assignment_Operators">3.2.22 Assignment Operators</h2>
 <p>Although not fully documented, S03 indicates that the mathematical and logical assignment operators should work as you would expect. The one noticeable change is that <span class="code">.=</span> calls a mutating method on the object on the left, while <span class="code">~=</span> is the string concatenation assignment, as you might expect with the changes in <span class="code">.</span> and <span class="code">~</span>. Also, the bitwise assignment operators are likely not separated into numeric and string versions (<span class="code">&amp;=</span>, etc., vs. <span class="code">&amp;.=</span>, etc.), as that feature is currently experimental in Perl 5 itself - although, again, this is not specifically documented.</p>
 <a name="t3.2.23"></a><h2 id="_language_5to6-perlop.pod6-Comma_Operator">3.2.23 Comma Operator</h2>
 <p>The comma operator works mostly as expected, but technically it creates <a href="#_type_List.pod6">Lists</a>) or separates arguments in function calls. Also, there is a <span class="code">:</span> variant that turns function calls into method calls - see <a href="#_language_operators.pod6-infix_%3A">this page</a>.</p>
 <p>The <span class="code">=> </span> operator works similarly to the Perl 5 "fat comma" behavior in that it allows an unquoted identifier on its left side, but in Perl 6 constructs Pair objects, rather than just functioning as a separator. If you are trying to just literally translate a line of Perl 5 code to Perl 6, it should behave as expected.</p>
 <a name="t3.2.24"></a><h2 id="_language_5to6-perlop.pod6-List_Operators_(Rightward)">3.2.24 List Operators (Rightward)</h2>
 <p>Like the Named Unary Operators, you'll find these discussed in <a href="#_language_5to6-perlfunc.pod6">5to6-perlfunc.pod</a>.</p>
 <a name="t3.2.25"></a><h2 id="_language_5to6-perlop.pod6-Logical_Not">3.2.25 Logical Not</h2>
 <p>The lower precedence version of <span class="code">!</span>. As with <span class="code">!</span>, coerces its argument to <span class="code">Bool</span>.</p>
 <a name="t3.2.26"></a><h2 id="_language_5to6-perlop.pod6-Logical_And">3.2.26 Logical And</h2>
 <p>Lower precedence version of <span class="code">&amp;&amp;</span> as in Perl 5.</p>
 <a name="t3.2.27"></a><h2 id="_language_5to6-perlop.pod6-Logical_or_and_Exclusive_Or">3.2.27 Logical or and Exclusive Or</h2>
 <p><span class="code">or</span> is the low precedence version of <span class="code">||</span>. The documentation lists an <span class="code">xor</span>, but does not actually document it.</p>
 <p>Additionally, there is a low precedence version of <span class="code">//</span>, called <span class="code">orelse</span>.</p>
 <a name="t3.2.28"></a><h2 id="_language_5to6-perlop.pod6-Quote_and_Quote-like_Operators">3.2.28 Quote and Quote-like Operators</h2>
 <p>For all the gory details on quoting constructs, see <a href="#_language_quoting.pod6">quoting</a>.</p>
 <p>There is a quoting operator that allows absolute literal strings: <span class="code">Q</span> or <span class="code">｢…｣</span>, although the latter might be difficult to find on your keyboard, depending on your keyboard... Backslash escapes do <i>not</i> apply in <span class="code">Q</span> quoted strings. E. g. <span class="code">Q{This is still a closing curly brace → \}</span> renders "This is still a closing curly brace → \".</p>
 <p><span class="code">q</span> does what you expect, allowing backslash escapes. E. g. <span class="code">q{This is not a closing curly brace → \}, but this is → }</span> returning "This is not a closing curly brace → }, but this is →". As in Perl 5, you can get this behavior with single quotes.</p>
 <p><span class="code">qq</span> allows interpolation of variables. However, by default, only scalar variables are interpolated. To get other variables to interpolate, you need to put square brackets after them. E. g. <span class="code">@a = &lt;1 2 3>;say qq/@a[] example@example.com/; </span> results in "1 2 3 example@example.com". Hashes interpolate in a possibly unexpected manner: <span class="code">%a = 1 => 2, 3 => 4;say "%a[]"; </span> results in a space separating the pairs and tabs separating the key from the value in each pair (apparently). You can also interpolate Perl 6 code in strings using curly braces. For all the details, see <a href="#_language_quoting.pod6-Interpolation%3A_qq">Interpolation</a>.</p>
 <p><span class="code">qw</span> works as in Perl 5, and can also be rendered as <span class="code">&lt;...> </span>. E. g. <span class="code">qw/a b c/</span> is equivalent to <span class="code">&lt;a b c> </span>.</p>
 <p>There is also a version of <span class="code">qw</span> that interpolates, which is <span class="code">qqw</span>. So <span class="code">my $a = 42;say qqw/$a b c/;</span> gives you "42 b c".</p>
 <p>Shell quoting is available through <span class="code">qx</span>, but you should note that backticks do not do shell quoting as in Perl 5, and Perl variables are <i>not</i> interpolated in <span class="code">qx</span> strings. If you need to interpolate Perl variables in a shell command string, you can use <span class="code">qqx</span> instead.</p>
 <p>The <span class="code">qr</span> operator is gone from Perl 6.</p>
 <p><span class="code">tr///</span> is not well documented, but seems to work similarly to how it does in Perl 5. The one caveat is that ranges are specified differently. Instead of using a range "a-z", you would use "a..z", i. e. with Perl's range operator. <span class="code">tr///</span> has a method version, which is better documented, called <span class="code">.trans</span>. <span class="code">.trans</span> uses a list of pairs, as follows: <span class="code">$x.trans(['a'..'c'] => ['A'..'C'], ['d'..'q'] => ['D'..'Q'], ['r'..'z'] => ['R'..'Z']); </span> A much more extensive description of the uses of <span class="code">.trans</span> can be found at <a href="https://design.perl6.org/S05.html#Transliteration">https://design.perl6.org/S05.html#Transliteration</a>. The <span class="code">y///</span> equivalent has been done away with.</p>
 <p>Heredocs are specified differently in Perl 6. You use <span class="code">:to</span> with your quoting operator, e. g. <span class="code">q:to/END/;</span> would start a heredoc ending with "END". Similarly, you get escaping and interpolation based on your quoting operator, i. e. literals with <span class="code">Q</span>, backslash escapes with <span class="code">q</span>, and interpolation with <span class="code">qq</span>.</p>
 <a name="t3.2.29"></a><h2 id="_language_5to6-perlop.pod6-I/O_Operators">3.2.29 I/O Operators</h2>
 <p>The full details on Input/Output in Perl 6 can be found at <a href="#_language_io.pod6">io</a>.</p>
 <p>As <span class="code">&lt;...> </span> is the quote-words construct in Perl 6, <span class="code">&lt;> </span> is not used for reading lines from a file. You can do that by either making an <span class="code">IO</span> object from a file name or using an open filehandle and then, in either case, calling <span class="code">.lines</span> on it. I. e. either <span class="code">my @a = "filename".IO.lines;</span> or <span class="code">my $fh = open "filename", :r;my @a = $fh.lines;</span> (In the latter case, we are using <span class="code">:r</span> to specifically open the file for reading). To do this in an iterative manner, you can use a <span class="code">for</span> loop this way:</p>
 <pre class="code">for 'huge-csv'.IO.lines -&gt; $line { 
     # Do something with $line 
 } 
 
</pre>
 <p>Note the use of <span class="code">-> </span> there. That's part of the Block syntax, and in Perl 6 is needed for <span class="code">if</span>, <span class="code">for</span>, <span class="code">while</span>, etc.</p>
 <p>If you want to slurp the entire file into a scalar, you would - surprise! - use the <span class="code">.slurp</span> method. For instance, <span class="code">my $x = "filename".IO.slurp;</span> or <span class="code">my $fh = open "filename", :r;my $x = $fh.slurp;</span>.</p>
 <p>As noted in <a href="#_language_5to6-perlvar.pod6">5to6-perlvar.pod</a>, the <span class="code">ARGV</span> magic input filehandle has been replaced by <span class="code">$*ARGFILES</span>, and the <span class="code">@ARGV</span> array of command line arguments has been replaced by <span class="code">@*ARGS</span>.</p>
 <a name="t3.2.30"></a><h2 id="_language_5to6-perlop.pod6-No-ops">3.2.30 No-ops</h2>
 <p>Although it's not specifically documented, <span class="code">1 while foo();</span> appears to work in this sense.</p>
 <a name="t3.2.31"></a><h2 id="_language_5to6-perlop.pod6-Bitwise_String_Operators">3.2.31 Bitwise String Operators</h2>
 <p>Documented individually above, but to summarize...</p>
 <p>Bitwise integer negation is prefix <span class="code">+^</span>. Bitwise boolean negation is <span class="code">?^</span>.</p>
 <p>Bitwise and is <span class="code">+&amp;</span>.</p>
 <p>Bitwise integer or is <span class="code">+|</span>. Bitwise integer xor is infix <span class="code">+^</span>. Bitwise boolean or is <span class="code">?|</span>.</p>
 <p>Left shift and right shift are <span class="code">+&lt; </span> and <span class="code">+> </span>.</p>
</div> <!-- /language/5to6-perlsyn.pod6 --><div class="pod-body"><a id="_language_5to6-perlsyn.pod6"></a><a name="t4"><h1 class="title">4 5to6-perlsyn</h1></a> <p class="subtitle">Perl 5 to Perl 6 guide - syntax</p> <p>perlsyn - Perl syntax</p>
 <a name="t4.1"></a><h1 id="_language_5to6-perlsyn.pod6-DESCRIPTION">4.1 DESCRIPTION</h1>
 <p>A (hopefully) comprehensive description of the differences between Perl 5 and Perl 6 with regards to the syntax elements described in the perlsyn document.</p>
 <a name="t4.2"></a><h1 id="_language_5to6-perlsyn.pod6-NOTE">4.2 NOTE</h1>
 <p>I will <i>not</i> be explaining Perl 6 syntax in detail. This document is an attempt to guide you from how things work in Perl 5 to the equivalents in Perl 6. For full documentation on the Perl 6 syntax, please see the Perl 6 documentation.</p>
 <a name="t4.3"></a><h1 id="_language_5to6-perlsyn.pod6-Free_Form">4.3 Free Form</h1>
 <p>Perl 6 is still <i>largely</i> free form. However, there are a few instances where the presence or lack of whitespace is now significant. For instance, in Perl 5, you can omit a space following a keyword (e. g. <span class="code">while($x &lt; 5)</span> or <span class="code">my($x, $y)</span>). In Perl 6, that space is required, thus <span class="code">while ($x &lt; 5)</span> or <span class="code">my ($x, $y)</span>. In Perl 6, however, you can omit the parentheses altogether: <span class="code">while $x &lt; 5 </span>. This holds for <span class="code">if</span>, <span class="code">for</span>, etc.</p>
 <p>Oddly, in Perl 5, you can leave spaces between an array or hash and its subscript, and before a postfix operator. So <span class="code">$seen {$_} ++</span> is valid. No more. That would now have to be <span class="code">%seen{$_}++</span>.</p>
 <p>If it makes you feel better, you can use backslashes to "unspace" whitespace, so you can use whitespace where it would otherwise be forbidden.</p>
 <p>See <a href="#_language_5to6-nutshell.pod6-Whitespace">Whitespace</a> for details.</p>
 <a name="t4.3.1"></a><h2 id="_language_5to6-perlsyn.pod6-Declarations">4.3.1 Declarations</h2>
 <p>As noted in <a href="#_language_5to6-perlfunc.pod6">5to6-perlfunc.pod</a>, there is no <span class="code">undef</span> in Perl 6. A declared, but uninitialized scalar variable will evaluate to its type. In other words, <span class="code">my $x;say $x;</span> will give you "(Any)". <span class="code">my Int $y;say $y;</span> will give you "(Int)".</p>
 <a name="t4.3.2"></a><h2 id="_language_5to6-perlsyn.pod6-Comments">4.3.2 Comments</h2>
 <p><span class="code">#</span> starts a comment that runs to the end of the line as in Perl 5.</p>
 <p>Embedded comments start with a hash character and a backtick (<span class="code">#`</span>), followed by an opening bracketing character, and continue to the matching closing bracketing character. Like so:</p>
 <pre class="code">if #`( why would I ever write an inline comment here? ) True { 
     say "something stupid"; 
 } 
 
</pre>
 <p>As in Perl 5, you can use pod directives to create multiline comments, with <span class="code">=begin comment</span> before and <span class="code">=end comment</span> after the comment.</p>
 <a name="t4.3.3"></a><h2 id="_language_5to6-perlsyn.pod6-Truth_and_Falsehood">4.3.3 Truth and Falsehood</h2>
 <p>The one difference between Perl 5 truth and Perl 6 truth is that, unlike Perl 5, Perl 6 treats the string <span class="code">"0"</span> as true. Numeric <span class="code">0</span> is still false, and you can use prefix <span class="code">+</span> to coerce string <span class="code">"0"</span> to numeric to get it to be false. Perl 6, additionally has an actual Boolean type, so, in many cases, True and False may be available to you without having to worry about what values count as true and false.</p>
 <a name="t4.3.4"></a><h2 id="_language_5to6-perlsyn.pod6-Statement_Modifiers">4.3.4 Statement Modifiers</h2>
 <p>Mostly, statement modifiers still work, with a few exceptions.</p>
 <p>First, <span class="code">for</span> loops are exclusively what were known in Perl 5 as <span class="code">foreach</span> loops and <span class="code">for</span> is not used for C-style <span class="code">for</span> loops in Perl 6. To get that behavior, you want <span class="code">loop</span>. <span class="code">loop</span> cannot be used as a statement modifier.</p>
 <p>In Perl 6, you cannot use the form <span class="code">do {...} while $x</span>. You will want to replace <span class="code">do</span> in that form with <span class="code">repeat</span>. Similarly for <span class="code">do {...} until $x</span>.</p>
 <a name="t4.3.5"></a><h2 id="_language_5to6-perlsyn.pod6-Compound_Statements">4.3.5 Compound Statements</h2>
 <p>The big change from Perl 5 is that <span class="code">given</span> is not experimental or disabled by default in Perl 6. For the details on <span class="code">given</span> see <a href="#_language_control.pod6-given">this page</a>.</p>
 <a name="t4.3.6"></a><h2 id="_language_5to6-perlsyn.pod6-Loop_Control">4.3.6 Loop Control</h2>
 <p><span class="code">next</span>, <span class="code">last</span>, and <span class="code">redo</span> have not changed from Perl 5 to Perl 6.</p>
 <p><span class="code">continue</span>, however, does not exist in Perl 6. You would use a <span class="code">NEXT</span> block in the body of the loop.</p>
 <pre class="code"># Perl 5 
 my $str = ''; 
 for (1..5) { 
     next if $_ % 2 == 1; 
     $str .= $_; 
 } 
 continue { 
     $str .= ':' 
 } 
 
 # Perl 6 
 my $str = ''; 
 for 1..5 { 
     next if $_ % 2 == 1; 
     $str ~= $_; 
     NEXT { 
         $str ~= ':' 
     } 
 } 
 
</pre>
 <a name="t4.3.7"></a><h2 id="_language_5to6-perlsyn.pod6-For_Loops">4.3.7 For Loops</h2>
 <p>As noted above, C-style <span class="code">for</span> loops are not called <span class="code">for</span> loops in Perl 6. They are just <span class="code">loop</span> loops. To write an infinite loop, you do not need to use the C idiom of <span class="code">loop (;;) {...}</span>, but may just omit the spec completely: <span class="code">loop {...}</span></p>
 <a name="t4.3.8"></a><h2 id="_language_5to6-perlsyn.pod6-Foreach_Loops">4.3.8 Foreach Loops</h2>
 <p>In Perl 5, <span class="code">for</span>, in addition to being used for C-style <span class="code">for</span> loops, is a synonym for <span class="code">foreach</span>. In Perl 6, <span class="code">for</span> is just used for <span class="code">foreach</span> style loops.</p>
 <a name="t4.3.9"></a><h2 id="_language_5to6-perlsyn.pod6-Switch_Statements">4.3.9 Switch Statements</h2>
 <p>Perl 6 has actual switch statements, provided by <span class="code">given</span> with the individual cases handled by <span class="code">when</span> and <span class="code">default</span>. The basic syntax is:</p>
 <pre class="code">given EXPR { 
     when EXPR { ... } 
     when EXPR { ... } 
     default { ... } 
 } 
 
</pre>
 <p>The full details can be found <a href="#_language_control.pod6-given">here</a>.</p>
 <a name="t4.3.10"></a><h2 id="_language_5to6-perlsyn.pod6-Goto">4.3.10 Goto</h2>
 <p><span class="code">goto</span> <i>probably</i> works similarly in Perl 6 to the way it does in Perl 5. However, as of this writing, it does not seem to be functional. For what is planned for <span class="code">goto</span>, see <a href="https://design.perl6.org/S04.html#The_goto_statement">https://design.perl6.org/S04.html#The_goto_statement</a>.</p>
 <a name="t4.3.11"></a><h2 id="_language_5to6-perlsyn.pod6-The_Ellipsis_Statement">4.3.11 The Ellipsis Statement</h2>
 <p><span class="code">...</span> (along with <span class="code">!!!</span> and <span class="code">???</span>) are used to create stub declarations. This is a bit more complicated than the use of <span class="code">...</span> in Perl 5, so you'll probably want to look at <a href="https://design.perl6.org/S06.html#Stub_declarations">https://design.perl6.org/S06.html#Stub_declarations</a> for the gory details. That said, there doesn't seem to be an <i>obvious</i> reason why it shouldn't still fulfill the role it did in Perl 5, despite its role being expanded in Perl 6.</p>
 <a name="t4.3.12"></a><h2 id="_language_5to6-perlsyn.pod6-PODs:_Embedded_Documentation">4.3.12 PODs: Embedded Documentation</h2>
 <p>Pod has changed between Perl 5 and Perl 6. Probably the biggest difference is that you need to enclose your pod between <span class="code">=begin pod</span> and <span class="code">=end pod</span> directives. There are a few tweaks here and there as well. For instance, as I have discovered while writing these documents, the vertical bar ("|") is significant in <span class="code">X&lt;> </span> codes, and it's not clear how to get a literal "|" into them. Your best bet may be to use the Perl 6 interpreter to check your pod. You can do this by using the <span class="code">--doc</span> switch. E. g. <span class="code">perl6 --doc Whatever.pod</span>. This will output any problems to standard error. (Depending on how/where you've installed perl6, you may need to specify the location of <span class="code">Pod::To::Text</span>.) Details on Perl 6 style pod is at <a href="https://design.perl6.org/S26.html">https://design.perl6.org/S26.html</a>.</p>
</div> <!-- /language/5to6-perlvar.pod6 --><div class="pod-body"><a id="_language_5to6-perlvar.pod6"></a><a name="t5"><h1 class="title">5 5to6-perlvar</h1></a> <p class="subtitle">Perl 5 to Perl 6 guide - special variables</p> <a name="t5.1"></a><h1 id="_language_5to6-perlvar.pod6-DESCRIPTION">5.1 DESCRIPTION</h1>
 <p>A (hopefully) comprehensive list of Perl 5 Special Variables with their Perl 6 equivalents with notes on variations between them where necessary.</p>
 <a name="t5.2"></a><h1 id="_language_5to6-perlvar.pod6-NOTE">5.2 NOTE</h1>
 <p>I will <i>not</i> be explaining the full use of the Perl 6 variables. This document is an attempt to guide you from the Special Variables in Perl 5 to their equivalents in Perl 6. For full documentation on the Perl 6 special variables, please see the Perl 6 documentation for those variables.</p>
 <a name="t5.3"></a><h1 id="_language_5to6-perlvar.pod6-SPECIAL_VARIABLES">5.3 SPECIAL VARIABLES</h1>
 <a name="t5.3.1"></a><h2 id="_language_5to6-perlvar.pod6-General_Variables">5.3.1 General Variables</h2>
 <ul><li><p>$ARG</p>
</li></ul> <ul><li><p>$_</p>
</li></ul> <p>Thankfully, <span class="code">$_</span> is the general default variable as in Perl 5. The main difference in Perl 6 seems to be that you can now call methods on it. For instance, Perl 5's <span class="code">say $_</span> can be rendered in Perl 6 as <span class="code">$_.say</span>. Furthermore, as it is the default variable, you don't even need to use the variable name. The previous example can also be achieved by using <span class="code">.say</span>.</p>
 <ul><li><p>@ARG</p>
</li></ul> <ul><li><p>@_</p>
</li></ul> <p>As Perl 6 now has function signatures, your arguments can go there, rather than depending on <span class="code">@_</span> for them. In fact, if you use a function signature, use of <span class="code">@_</span> will spit at you telling it cannot override an existing signature.</p>
 <p>If, however, you do not use a function signature, <span class="code">@_</span> will contain the arguments you pass to the function as it did in Perl 5. Again, as with <span class="code">$_</span>, you can call methods on it. Unlike <span class="code">$_</span> you cannot assume <span class="code">@_</span> as the default variable for those methods to operate on. I. e. <span class="code">@_.shift</span> works, <span class="code">.shift</span> does not.</p>
 <ul><li><p>$LIST_SEPARATOR</p>
</li></ul> <ul><li><p>$"</p>
</li></ul> <p>Currently, there is no equivalent of the List Separator variable in Perl 6. Design document S28 says there isn't one, so you probably don't want to hold your breath.</p>
 <ul><li><p>$PROCESS_ID</p>
</li></ul> <ul><li><p>$PID</p>
</li></ul> <ul><li><p>$$</p>
</li></ul> <p><span class="code">$$</span> is replaced in Perl 6 by <span class="code">$*PID</span></p>
 <ul><li><p>$PROGRAM_NAME</p>
</li></ul> <ul><li><p>$0</p>
</li></ul> <p>You can access the program name in Perl 6 via <span class="code">$*PROGRAM-NAME</span>.</p>
 <p>Note: $0 in Perl 6 is the variable holding the first captured value from a match (i. e. capture variables now start from $0 rather than $1).</p>
 <ul><li><p>$REAL_GROUP_ID</p>
</li></ul> <ul><li><p>$GID</p>
</li></ul> <ul><li><p>$(</p>
</li></ul> <p>The real group id is provided by <span class="code">$*GROUP.Numeric</span> in Perl 6. <span class="code">$*GROUP.Str</span> returns the group name, rather than its number.</p>
 <ul><li><p>$EFFECTIVE_GROUP_ID</p>
</li></ul> <ul><li><p>$EGID</p>
</li></ul> <ul><li><p>$)</p>
</li></ul> <p>The effective group id does not appear to be currently provided by Perl 6.</p>
 <ul><li><p>$REAL_USER_ID</p>
</li></ul> <ul><li><p>$UID</p>
</li></ul> <ul><li><p>$&lt;</p>
</li></ul> <p>The real user id is provided by <span class="code">$*USER.Numeric</span> in Perl 6. <span class="code">$*USER.Str</span> returns the user name, rather than its number.</p>
 <ul><li><p>$EFFECTIVE_USER_ID</p>
</li></ul> <ul><li><p>$EUID</p>
</li></ul> <ul><li><p>$></p>
</li></ul> <p>The effective user id does not appear to be currently provided by Perl 6.</p>
 <ul><li><p>$SUBSCRIPT_SEPARATOR</p>
</li></ul> <ul><li><p>$SUBSEP</p>
</li></ul> <ul><li><p>$;</p>
</li></ul> <p>The subscript separator variable is not included in Perl 6. Frankly, if your Perl 5 code is using this, it's almost certainly really, really old.</p>
 <ul><li><p>$a</p>
</li></ul> <ul><li><p>$b</p>
</li></ul> <p><span class="code">$a</span> and <span class="code">$b</span> have no special meaning in Perl 6. <span class="code">sort()</span> does not use them for anything special. They're just regular old variables.</p>
 <p>This feature has been extended by having blocks with placeholder parameters which are more versatile. Placeholder variables are created with the <span class="code">^</span> twigil (e. g. <span class="code">$^z</span>. They can be used in a bare block or in a subroutine without an explicit parameter list. The arguments to the block are assigned to the placeholder variables in their Unicode order. I. e. even if the variables appear in the block in the order <span class="code">($^q, $^z, $^a)</span>, they will be <i>assigned</i> in the order <span class="code">($^a, $^q, $^z)</span>. Ergo:</p>
 <pre class="code">    sort { $^a cmp $^z }, 1, 5, 6, 4, 2, 3; 
     # (1 2 3 4 5 6) 
     sort { $^g cmp $^a }, 1, 5, 6, 4, 2, 3; 
     # (6 5 4 3 2 1) 
     for 1..9 { say $^c, $^a, $^b; last } 
     # 312 
 
</pre>
 <p>For more on placeholder variables, see <a href="#_language_variables.pod6-The_%5E_Twigil">this page</a></p>
 <ul><li><p>%ENV</p>
</li></ul> <p>%ENV has been replaced by %*ENV in Perl 6. Note that the keys of this hash may not be exactly the same between Perl 5 and Perl 6. As of this writing, the only difference seems to be that OLDPWD is missing from Perl 6's %ENV.</p>
 <ul><li><p>$OLD_PERL_VERSION</p>
</li></ul> <ul><li><p>$]</p>
</li></ul> <p>The version of perl is returned by <span class="code">$*PERL.version</span>. For the beta this was "v6.b" with <span class="code">$*PERL</span> containing "Perl 6 (6.b)".</p>
 <ul><li><p>$SYSTEM_FD_MAX</p>
</li></ul> <ul><li><p>$^F</p>
</li></ul> <p>Although the design documents (S28) indicate that this will likely become <span class="code">$*SYS_FD_MAX</span>, this has not yet been implemented.</p>
 <ul><li><p>@F</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] A bit confusing at this point. Design doc S28 indicates that <span class="code">@F</span> in Perl 5 is replaced by <span class="code">@_</span> in Perl 6, but it's unclear just how that works. On the other hand, it's currently something of a moot point, as the Perl 5 to Perl 6 Translation doc indicates that the <span class="code">-a</span> and <span class="code">-F</span> command-line switches are not yet implemented in rakudo.</p>
 <ul><li><p>@INC</p>
</li></ul> <p>No longer exists in Perl 6. Please use "use lib" to manipulate the module repositories to be searched. The closest thing to @INC is really $*REPO. But that works completely differently from @INC mostly because of the precompilation capabilities of Perl 6.</p>
 <pre class="code"># Print out a list of compunit repositories
.say for $*REPO.repo-chain;</pre>
 <ul><li><p>%INC</p>
</li></ul> <p>No longer exists in Perl 6. Because each Repository is responsible for remembering which modules have been loaded already. You can get a list of all loaded modules (compilation units) like so:</p>
 <pre class="code">use Test;
use MyModule;
say flat $*REPO.repo-chain.map(*.loaded); #-&gt; (MyModule Test)</pre>
 <ul><li><p>$INPLACE_EDIT</p>
</li></ul> <ul><li><p>$^I</p>
</li></ul> <p>S28 suggests $*INPLACE_EDIT, but it does not yet seem to exist.</p>
 <ul><li><p>$^M</p>
</li></ul> <p>S28 suggests $*EMERGENCY_MEMORY, but it does not yet seem to exist.</p>
 <ul><li><p>$OSNAME</p>
</li></ul> <ul><li><p>$^O</p>
</li></ul> <p>This is somewhat unclear. It probably depends on what you mean by "the name of the operating system" as S28 has three different suggestions, all of which give different answers. On my OS X machine at this time...</p>
 <pre class="code">say $*KERNEL; # gives "darwin (14.3.0)"
say $*DISTRO; # gives "macosx (10.10.3)"</pre>
 <p>Using <span class="code">.version</span> on either of those will give you just the version number. <span class="code">.name</span> gives the kernel or distro name. Those objects contain other information as well.</p>
 <p>S28 also lists <span class="code">$*VM</span> (which with my build of rakudo star currently gives "moar (2015.5.63.ge.7.a.473.c)"), but I'm unclear how the VM relates at all to the operating system.</p>
 <ul><li><p>%SIG</p>
</li></ul> <p>[NEEDS FURTHER RESEARCH] No equivalent variable. S28 indicates that this functionality is dealt with in Perl 6 by event filters and exception translation.</p>
 <ul><li><p>$BASETIME</p>
</li></ul> <ul><li><p>$^T</p>
</li></ul> <p>Replaced in Perl 6 by <span class="code">$*INITTIME</span>. Unlike in Perl 5, this is not in seconds since epoch, but an <span class="code">Instant</span> object, which is measured in atomic seconds, with fractions.</p>
 <ul><li><p>$PERL_VERSION</p>
</li></ul> <ul><li><p>$^V</p>
</li></ul> <p>As with <span class="code">$]</span> this has been replaced with <span class="code">$*PERL.version</span>.</p>
 <ul><li><p>${^WIN32_SLOPPY_STAT}</p>
</li></ul> <p>There does not seem to be any analog to this in Perl 6.</p>
 <ul><li><p>$EXECUTABLE_NAME</p>
</li></ul> <ul><li><p>$^X</p>
</li></ul> <p>This has been replaced by <span class="code">$*EXECUTABLE-NAME</span>. Confusingly, the Perl 6 Variables doc says "Favor $*EXECUTABLE because it is not guaranteed that the perl executable is in PATH." Confusingly because <span class="code">$*EXECUTABLE</span> is an <span class="code">IO</span> object, which does not seem to be what you would want here. <span class="code">$*EXECUTABLE.Str</span> would give the desired result, though.</p>
 <a name="t5.3.2"></a><h2 id="_language_5to6-perlvar.pod6-Variables_related_to_regular_expressions">5.3.2 Variables related to regular expressions</h2>
 <a name="t5.3.2.1"></a><h3 id="_language_5to6-perlvar.pod6-Performance_issues">5.3.2.1 Performance issues</h3>
 <p>As shown below, <span class="code">$`</span>, <span class="code">$&amp;</span>, and <span class="code">$'</span> are gone from Perl 6, primarily replaced by variations on <span class="code">$/</span> and, with their elimination, the associated performance issues in Perl 5 do not apply.</p>
 <ul><li><p>$&lt;<i>digits</i>> ($1, $2, ...)</p>
</li></ul> <p>These existing variables do the same thing in Perl 6 as they do in Perl 5, except that they now start at <span class="code">$0</span> rather than <span class="code">$1</span>. Furthermore, they are synonyms for indexed items in the match variable <span class="code">$/</span>. I. e. <span class="code">$0</span> is equivalent to <span class="code">$/[0]</span>, <span class="code">$1</span> is equivalent to <span class="code">$/[1]</span>, etc.</p>
 <ul><li><p>$MATCH</p>
</li></ul> <ul><li><p>$&amp;</p>
</li></ul> <p><span class="code">$/</span> now contains the match object, so the Perl 5 behavior of <span class="code">$&amp;</span> can be obtained by stringifying it, i. e. <span class="code">~$/</span>. <span class="code">$/.Str</span> also should work, but <span class="code">~$/</span> seems to be the consensus preference.</p>
 <ul><li><p>${^MATCH}</p>
</li></ul> <p>Since the former performance issues are done away with, this variable is not of use in Perl 6.</p>
 <ul><li><p>$PREMATCH</p>
</li></ul> <ul><li><p>$`</p>
</li></ul> <p>Replaced by <span class="code">$/.prematch</span>.</p>
 <ul><li><p>${^PREMATCH}</p>
</li></ul> <p>Since the former performance issues are done away with, this variable is not of use in Perl 6.</p>
 <ul><li><p>$POSTMATCH</p>
</li></ul> <ul><li><p>$'</p>
</li></ul> <p>Replaced by <span class="code">$/.postmatch</span>.</p>
 <ul><li><p>${^POSTMATCH}</p>
</li></ul> <p>Since the former performance issues are done away with, this variable is not of use in Perl 6.</p>
 <ul><li><p>$LAST_PAREN_MATCH</p>
</li></ul> <ul><li><p>$+</p>
</li></ul> <p>Does not exist in Perl 6, but you can get the same information using <span class="code">$/[*- 1].Str</span> (<span class="code">$/[*-1]</span> would be the match object, not the actual string).</p>
 <p>If you want to <i>understand</i> why that works, you can look at these documents:</p>
 <ul><li><p><a href="#_routine_%5b%20%5d.pod6-language_documentation_operators">[ ] routine</a></p>
</li></ul> <ul><li><p><a href="#_type_Whatever.pod6">Whatever</a></p>
</li></ul> <p>...and possibly</p>
 <ul><li><p><a href="https://design.perl6.org/S02.html#line_1126">https://design.perl6.org/S02.html#line_1126</a></p>
</li></ul> <p>...though the design documents are not always up to date.</p>
 <ul><li><p>$LAST_SUBMATCH_RESULT</p>
</li></ul> <ul><li><p>$^N</p>
</li></ul> <p>S28 suggests <span class="code">$*MOST_RECENT_CAPTURED_MATCH</span>, but there does not seem to be any implemented variable that matches <span class="code">$^N</span>.</p>
 <ul><li><p>@LAST_MATCH_END</p>
</li></ul> <ul><li><p>@+</p>
</li></ul> <p>As with most regular expression related variables, this functionality is, at least in part, moved to the <span class="code">$/</span> variable in Perl 6. Or, in this case, the numbered variables that alias to the indexes of it. The offset is found by using the <span class="code">.to</span> method. I. e. the first offset is <span class="code">$/[0].to</span>, which is synonymous with <span class="code">$0.to</span>. The value Perl 5 provides as <span class="code">$+[0]</span> is provided by <span class="code">$/.to</span>.</p>
 <ul><li><p>%LAST_PAREN_MATCH</p>
</li></ul> <ul><li><p>%+</p>
</li></ul> <p>Once again, we move over to <span class="code">$/</span>. The former <span class="code">$+{$match}</span> is <span class="code">$/{$match}</span>.</p>
 <ul><li><p>@LAST_MATCH_START</p>
</li></ul> <ul><li><p>@-</p>
</li></ul> <p>Similarly to <span class="code">@+</span> being replaced by using the <span class="code">.to</span> method, <span class="code">@-</span> is replaced by using the <span class="code">.from</span> method on <span class="code">$/</span> and its variations. The first offset is <span class="code">$/[0].from</span> or the equivalent <span class="code">$0.from</span>. Perl 5's <span class="code">$- [0]</span> is <span class="code">$/.from</span>.</p>
 <ul><li><p>%LAST_MATCH_START</p>
</li></ul> <ul><li><p>%-</p>
</li></ul> <p>Much like <span class="code">%+</span>, a use of <span class="code">%-{$match}</span> would be replaced with <span class="code">$/{$match}</span>.</p>
 <ul><li><p>$LAST_REGEXP_CODE_RESULT</p>
</li></ul> <ul><li><p>$^R</p>
</li></ul> <p>S28 suggests <span class="code">$*LAST_REGEXP_CODE_RESULT</span>, but no variable seems to actually exist yet.</p>
 <ul><li><p>${^RE_DEBUG_FLAGS}</p>
</li></ul> <p>No equivalent.</p>
 <ul><li><p>${^RE_TRIE_MAXBUF}</p>
</li></ul> <p>No equivalent.</p>
 <a name="t5.3.3"></a><h2 id="_language_5to6-perlvar.pod6-Variables_related_to_filehandles">5.3.3 Variables related to filehandles</h2>
 <ul><li><p>$ARGV</p>
</li></ul> <p>The name of the current file when reading lines can be obtained through <span class="code">$*ARGFILES.filename</span>.</p>
 <ul><li><p>@ARGV</p>
</li></ul> <p><span class="code">@*ARGS</span> contains the command line arguments.</p>
 <ul><li><p>ARGV</p>
</li></ul> <p>This has been replaced by <span class="code">$*ARGFILES</span>.</p>
 <ul><li><p>ARGVOUT</p>
</li></ul> <p>As the <span class="code">-i</span> command line switch has not yet been implemented, there is not yet an equivalent of <span class="code">ARGVOUT</span>.</p>
 <ul><li><p>$OUTPUT_FIELD_SEPARATOR</p>
</li></ul> <ul><li><p>$OFS</p>
</li></ul> <ul><li><p>$,</p>
</li></ul> <p>Currently no obvious equivalent.</p>
 <ul><li><p>$INPUT_LINE_NUMBER</p>
</li></ul> <ul><li><p>$NR</p>
</li></ul> <ul><li><p>$.</p>
</li></ul> <p>The current line number is returned by the <span class="code">.ins</span> method on the appropriate filehandle. E. g. <span class="code">$*IN.ins</span>.</p>
 <ul><li><p>$INPUT_RECORD_SEPARATOR</p>
</li></ul> <ul><li><p>$RS</p>
</li></ul> <ul><li><p>$/</p>
</li></ul> <p>This is accessed through the <span class="code">.nl-in</span> method on the filehandle. E. g. <span class="code">$*IN.nl-in</span>.</p>
 <ul><li><p>$OUTPUT_RECORD_SEPARATOR</p>
</li></ul> <ul><li><p>$ORS</p>
</li></ul> <ul><li><p>$\</p>
</li></ul> <p>This is accessed through the <span class="code">.nl-out</span> method on the filehandle. E. g. <span class="code">$*OUT.nl-out</span>.</p>
 <ul><li><p>$OUTPUT_AUTOFLUSH</p>
</li></ul> <ul><li><p>$|</p>
</li></ul> <p>Currently autoflush is not implemented in Perl 6.</p>
 <ul><li><p>${^LAST_FH}</p>
</li></ul> <p>Not implemented in Perl 6.</p>
 <a name="t5.3.3.1"></a><h3 id="_language_5to6-perlvar.pod6-Variables_related_to_formats">5.3.3.1 Variables related to formats</h3>
 <p>There are no built-in formats in Perl 6.</p>
 <a name="t5.3.4"></a><h2 id="_language_5to6-perlvar.pod6-Error_Variables">5.3.4 Error Variables</h2>
 <p>Because of how error variables have changed in Perl 6, I will not detail the changes individually.</p>
 <p>To quote the Perl 6 docs, "$! is the error variable." That's it. All the error variables appear to have been eaten by $!. As with the rest of Perl 6, it's likely an object that will return various things depending on how you use it. Sadly, at the moment, the documentation for it is terribly sparse. It will probably do what you intend, but I'm not guaranteeing anything. Hopefully there will be more information in the near future.</p>
 <a name="t5.3.5"></a><h2 id="_language_5to6-perlvar.pod6-Variables_related_to_the_interpreter_state">5.3.5 Variables related to the interpreter state</h2>
 <ul><li><p>$COMPILING</p>
</li></ul> <ul><li><p>$^C</p>
</li></ul> <ul><li><p>$^D</p>
</li></ul> <p>Currently no equivalents for either of these variables.</p>
 <ul><li><p>${^ENCODING}</p>
</li></ul> <p>Although deprecated in Perl 5, this may have some sort of equivalent in <span class="code">$?ENC</span>, but this is far from clear.</p>
 <ul><li><p>${^GLOBAL_PHASE}</p>
</li></ul> <p>No Perl 6 equivalent.</p>
 <ul><li><p>$^H</p>
</li></ul> <ul><li><p>%^H</p>
</li></ul> <ul><li><p>${^OPEN}</p>
</li></ul> <p>There may or may not be equivalents of these in Perl 6, but they're internal and you shouldn't be messing with them in the first place - certainly not if your understanding of Perl 6 requires you to read this document...</p>
 <ul><li><p>$PERLDB</p>
</li></ul> <ul><li><p>$^P</p>
</li></ul> <p>The chance of the Perl 6 debugger resembling the Perl 5 debugger is slim at best, and at this point there does not seem to be an equivalent of this variable.</p>
 <ul><li><p>${^TAINT}</p>
</li></ul> <p>S28 claims this variable is "pending". Not currently in Perl 6.</p>
 <ul><li><p>${^UNICODE}</p>
</li></ul> <ul><li><p>${^UTF8CACHE}</p>
</li></ul> <ul><li><p>${^UTF8LOCALE}</p>
</li></ul> <p>These Unicode-related variables do not appear to exist in Perl 6, but - maybe? - could have analogs in <span class="code">$?ENC</span> somewhere. This, however, is totally unconfirmed.</p>
 <a name="t5.3.6"></a><h2 id="_language_5to6-perlvar.pod6-Deprecated_and_removed_variables">5.3.6 Deprecated and removed variables</h2>
 <p>It should go without saying that, as these have been removed from Perl 5 already, there should be no need to tell you how to use them in Perl 6.</p>
</div> <!-- /language/about.pod6 --><div class="pod-body"><a id="_language_about.pod6"></a><a name="t6"><h1 class="title">6 About the Docs</h1></a> <p class="subtitle">Documentation for the Perl 6 Documentation Project</p> <p>This documentation is an attempt to document the Perl 6 programming language with the goals of being comprehensive, easy to use, easy to navigate, and useful to both newcomers and experienced Perl 6 programmers.</p>
 <p>An HTML version of the documentation is located online at <a href="https://docs.perl6.org">https://docs.perl6.org</a>.</p>
 <p>The official source for this documentation is located at <a href="https://github.com/perl6/doc">perl6/doc on GitHub</a>.</p>
 <a name="t6.1"></a><h1 id="_language_about.pod6-Structure">6.1 Structure</h1>
 <p>All of the documentation is written in Pod6 and kept in the <span class="code">lib/</span> directory, and the <span class="code">lib/Language/</span> and <span class="code">lib/Type/</span> sub-directories. These files are processed as collections of definitions or "documentables", which are then post-processed and linked together.</p>
 <a name="t6.2"></a><h1 id="_language_about.pod6-Generating_an_HTML_version">6.2 Generating an HTML version</h1>
 <p>Generating this documentation requires:</p>
 <ul><li><p>A recent version of the Rakudo Perl 6 compiler</p>
</li></ul> <ul><li><p>The Perl 6 modules Pod::To::HTML and URI::Escape (can be installed via <a href="https://github.com/tadzik/panda">panda</a>)</p>
</li></ul> <ul><li><p><b>Optional</b>: <a href="http://graphviz.org">GraphViz</a>, for creating graphs of the relationships between Perl 6 types</p>
</li></ul> <ul><li><p><b>Optional</b>: <a href="http://pygments.org">Pygments</a>, for doing syntax highlighting</p>
</li></ul> <p>Then, to generate the documentation into the <span class="code">html/</span> folder, run:</p>
 <pre class="code">perl6 htmlify.p6</pre>
 <p>Currently, to serve the generated documentation for your browser, Perl 5 with Mojolicious::Lite must be installed. Then run:</p>
 <pre class="code">perl app.pl daemon</pre>
 <a name="t6.3"></a><h1 id="_language_about.pod6-Contributing">6.3 Contributing</h1>
 <a name="t6.3.1"></a><h2 id="_language_about.pod6-Adding_definitions">6.3.1 Adding definitions</h2>
 <p>Documentables can be defined using an <span class="code">=headN</span> Pod directive, where <span class="code">N</span> is greater than zero (e.g., <span class="code">=head1</span>, <span class="code">=head2</span>, <span class="code">=head3</span>, …).</p>
 <p>All of the paragraphs and blocks following that directive, up until the next directive of the same level, will be considered part of the documentable. So, in:</p>
 <pre class="code">=head2  &lt;var class="replaceable"&gt;My Definition&lt;/var&gt;  
 
 Some paragraphs, followed by some code: 
 
     my Code $examples = "amazing"; 
 
 Mind === blown. 
 
 =head3 Minor details about  &lt;var class="replaceable"&gt;My Definition&lt;/var&gt;  
 
 It's fantastic. 
 
 =head2 And now, for something completely different 
 
 … 
 
</pre>
 <p>The documentable <var class="replaceable">My Definition</var> extends down to the <span class="code">=head2 And now…</span>.</p>
 <p>Documentables may contain other documentables. Class documentables, for example, often contain the methods the class implements.</p>
 <p>Definitions must be in one of the following forms to be recognized as the start of a documentable named, say, Z:</p>
 <ul><li><p><span class="code">X&lt;How to use the Z infix | infix,Z></span> (This a special case, which is always considered a definition)</p>
</li></ul> <ul><li><p><span class="code">The Z Infix</span></p>
</li></ul> <ul><li><p><span class="code">The C&lt;Z> Infix</span></p>
</li></ul> <ul><li><p><span class="code">Infix Z</span></p>
</li></ul> <ul><li><p><span class="code">Infix C&lt;Z></span></p>
</li></ul> <ul><li><p><span class="code">trait is cached</span> (A special case for the <a href="#_language_functions.pod6-Traits">trait</a> documentables)</p>
</li></ul></div> <!-- /language/classtut.pod6 --><div class="pod-body"><a id="_language_classtut.pod6"></a><a name="t7"><h1 class="title">7 Classes and Objects</h1></a> <p class="subtitle">A tutorial for creating and using classes in Perl 6</p> More descriptive title?
 <p>Perl 6 has a rich built in syntax for the definition and use of classes for object oriented programming, allowing for the definition of state (as <a href="#6-State">attributes</a>,) and behaviour (as <a href="#6-Methods">methods</a>,) in the objects of a class.</p>
 <p>A simple class is provided with a default constructor, that allows the setting of the attributes of the created object:</p>
 <pre class="code">class Point { 
     has Int $.x; 
     has Int $.y; 
 } 
 
 class Rectangle { 
     has Point $.lower; 
     has Point $.upper; 
 
     method area() returns Int { 
         ($!upper.x - $!lower.x) * ( $!upper.y - $!lower.y); 
     } 
 } 
 
 # Create a new Rectangle from two Points 
 my $r = Rectangle.new(lower =&gt; Point.new(x =&gt; 0, y =&gt; 0), upper =&gt; Point.new(x =&gt; 10, y =&gt; 10)); 
 
 say $r.area(); # -&gt; 100 
</pre>
 <p>You are free, though, to provide your own construction and build implementation. The following, more elaborate, example shows how a dependency handler might look in Perl 6. It showcases custom constructors, private and public attributes, methods and various aspects of signatures. It's not very much code, and yet the result is interesting and, at times, useful.</p>
 <pre class="code">class Task { 
     has      &amp;amp;!callback; 
     has Task @!dependencies; 
     has Bool $.done; 
 
     # Normally doesn't need to be written 
     # BUILD is the equivalent of a constructor in other languages 
     method new(&amp;amp;callback, *@dependencies) { 
         return self.bless(:&amp;amp;callback, :@dependencies); 
     } 
 
     submethod BUILD(:&amp;amp;!callback, :@!dependencies) { } 
 
     method add-dependency(Task $dependency) { 
         push @!dependencies, $dependency; 
     } 
 
     method perform() { 
         unless $!done { 
             .perform() for @!dependencies; 
             &amp;amp;!callback(); 
             $!done = True; 
         } 
     } 
 } 
 
 my $eat = 
     Task.new({ say 'eating dinner. NOM!' }, 
         Task.new({ say 'making dinner' }, 
             Task.new({ say 'buying food' }, 
                 Task.new({ say 'making some money' }), 
                 Task.new({ say 'going to the store' }) 
             ), 
             Task.new({ say 'cleaning kitchen' }) 
         ) 
     ); 
 
 $eat.perform(); 
</pre>
 <a name="t7.1"></a><h1 id="_language_classtut.pod6-Starting_with_class">7.1 Starting with class</h1>
 <p><span class="indexed"><a id="4" name="class"></a></span> <span class="indexed"><a id="5" name="classes"></a></span></p>
 <p><span class="indexed"><a id="6" name="state"></a></span> <span class="indexed"><a id="7" name="has"></a></span> <span class="indexed"><a id="8" name="classes has"></a></span> <span class="indexed"><a id="9" name="behavior"></a></span> <span class="indexed"><a id="10" name="classes behavior"></a></span></p>
 <p>Perl 6, like many other languages, uses the <span class="code">class</span> keyword to introduce a new class. The block that follows may contain arbitrary code, just as with any other block, but classes commonly contain state and behavior declarations. The example code includes attributes (state), introduced through the <span class="code">has</span> keyword, and behaviors introduced through the <span class="code">method</span> keyword.</p>
 <p><span class="indexed"><a id="11" name="type object"></a></span> <span class="indexed"><a id="12" name="defined"></a></span> <span class="indexed"><a id="13" name=".defined"></a></span></p>
 <p>Declaring a class creates a <i>type object</i> which, by default, is installed into the current package (just like a variable declared with <span class="code">our</span> scope). This type object is an "empty instance" of the class. You've already seen these in previous chapters. For example, types such as <span class="code">Int</span> and <span class="code">Str</span> refer to the type object of one of the Perl 6 built-in classes. The example above uses the class name <span class="code">Task</span> so that other code can refer to it later, such as to create class instances by calling the <span class="code">new</span> method.</p>
 <p>Type objects are <i>undefined</i>, in the sense that they return <span class="code">False</span> if you call the <span class="code">.defined</span> method on them. You can use this method to find out if a given object is a type object or not:</p>
 <pre class="code">my $obj = Int;
if $obj.defined {
    say "Ordinary, defined object";
} else {
    say "Type object";
}</pre>
 <a name="t7.2"></a><h1 id="_language_classtut.pod6-State">7.2 State</h1>
 <p><span class="indexed"><a id="14" name="attributes"></a></span> <span class="indexed"><a id="15" name="classes attributes"></a></span></p>
 <p><span class="indexed"><a id="16" name="encapsulation"></a></span> <span class="indexed"><a id="17" name="classes encapsulation"></a></span></p>
 <p>The first three lines inside the class block all declare attributes (called <i>fields</i> or <i>instance storage</i> in other languages). These are storage locations that every instance of a class will obtain. Just as a <span class="code">my</span> variable cannot be accessed from outside its declared scope, attributes are not accessible outside of the class. This <i>encapsulation</i> is one of the key principles of object oriented design.</p>
 <p>The first declaration specifies instance storage for a callback -- a bit of code to invoke in order to perform the task that an object represents:</p>
 <pre class="code">has &amp;amp;!callback;</pre>
 <p><span class="indexed"><a id="18" name="sigils &amp;"></a></span> <span class="indexed"><a id="19" name="twigils"></a></span> <span class="indexed"><a id="20" name="twigils !"></a></span></p>
 <p>The <span class="code">&amp;</span> sigil indicates that this attribute represents something invocable. The <span class="code">!</span> character is a <i>twigil</i>, or secondary sigil. A twigil forms part of the name of the variable. In this case, the <span class="code">!</span> twigil emphasizes that this attribute is private to the class.</p>
 <p>The second declaration also uses the private twigil:</p>
 <pre class="code">has Task @!dependencies;</pre>
 <p>However, this attribute represents an array of items, so it requires the <span class="code">@</span> sigil. These items each specify a task that must be completed before the present one can complete. Furthermore, the type declaration on this attribute indicates that the array may only hold instances of the <span class="code">Task</span> class (or some subclass of it).</p>
 <p>The third attribute represents the state of completion of a task:</p>
 <pre class="code">has Bool $.done;</pre>
 <p><span class="indexed"><a id="21" name="twigils ."></a></span> <span class="indexed"><a id="22" name="twigils accessors"></a></span> <span class="indexed"><a id="23" name="accessor methods"></a></span> <span class="indexed"><a id="24" name="classes accessors"></a></span></p>
 <p>This scalar attribute (with the <span class="code">$</span> sigil) has a type of <span class="code">Bool</span>. Instead of the <span class="code">!</span> twigil, the <span class="code">.</span> twigil is used. While Perl 6 does enforce encapsulation on attributes, it also saves you from writing accessor methods. Replacing the <span class="code">!</span> with a <span class="code">.</span> both declares the attribute <span class="code">$!done</span> and an accessor method named <span class="code">done</span>. It's as if you had written:</p>
 <pre class="code">has Bool $!done;
method done() { return $!done }</pre>
 <p>Note that this is not like declaring a public attribute, as some languages allow; you really get <i>both</i> a private storage location and a method, without having to write the method by hand. You are free instead to write your own accessor method, if at some future point you need to do something more complex than return the value.</p>
 <p>Note that using the <span class="code">.</span> twigil has created a method that will provide read-only access to the attribute. If instead the users of this object should be able to reset a task's completion state (perhaps to perform it again), you can change the attribute declaration:</p>
 <pre class="code">has Bool $.done is rw;</pre>
 <p><span class="indexed"><a id="25" name="traits is rw"></a></span></p>
 <p>The <span class="code">is rw</span> trait causes the generated accessor method to return something external code can modify to change the value of the attribute.</p>
 <p>You can also supply default values to attributes (which works equally for those with and without accessors):</p>
 <pre class="code">has Bool $.done = False;</pre>
 <p>The assignment is carried out at object build time. The right-hand side is evaluated at that time, and can even reference earlier attributes:</p>
 <pre class="code">has Task @!dependencies;
has $.ready = not @!dependencies;</pre>
 <a name="t7.3"></a><h1 id="_language_classtut.pod6-Static_fields?">7.3 Static fields?</h1>
 <p>Perl 6 has no <b>static</b> keyword. Nevertheless any class may declare anything that a module can, so making a scoped variable sounds like good idea.</p>
 <pre class="code">class Singleton { 
     my Singleton $instance; 
     method new {!!!} 
     submethod instance { 
         $instance = Singleton.bless unless $instance; 
         $instance; 
     } 
 } 
 
</pre>
 <p>Class attributes defined by <a href="#_syntax_my.pod6">my</a> or <a href="#_syntax_our.pod6">our</a> may also be initialized when being declared, however we are implementing the Singleton pattern here and the object must be created during its first use. It is not 100% possible to predict the moment when attribute initialization will be executed, because it can take place during compilation, runtime or both, especially when importing the class using the <a href="#_syntax_use.pod6">use</a> keyword.</p>
 <pre class="code">class HaveStaticAttr {
      my Foo $.foo = some_complicated_subroutine;
}</pre>
 <p>Class attributes may also be declared with a secondary sigil -- in a similar manner to object attributes -- that will generate read-only accessors if the attribute is to be public.</p>
 <a name="t7.4"></a><h1 id="_language_classtut.pod6-Methods">7.4 Methods</h1>
 <p><span class="indexed"><a id="26" name="methods"></a></span> <span class="indexed"><a id="27" name="classes methods"></a></span></p>
 <p>While attributes give objects state, methods give objects behaviors. Let's ignore the <span class="code">new</span> method temporarily; it's a special type of method. Consider the second method, <span class="code">add-dependency</span>, which adds a new task to a task's dependency list.</p>
 <pre class="code">method add-dependency(Task $dependency) {
    push @!dependencies, $dependency;
}</pre>
 <p><span class="indexed"><a id="28" name="invocant"></a></span></p>
 <p>In many ways, this looks a lot like a <span class="code">sub</span> declaration. However, there are two important differences. First, declaring this routine as a method adds it to the list of methods for the current class. Thus any instance of the <span class="code">Task</span> class can call this method with the <span class="code">.</span> method call operator. Second, a method places its invocant into the special variable <span class="code">self</span>.</p>
 <p>The method itself takes the passed parameter -- which must be an instance of the <span class="code">Task</span> class -- and <span class="code">push</span>es it onto the invocant's <span class="code">@!dependencies</span> attribute.</p>
 <p>The second method contains the main logic of the dependency handler:</p>
 <pre class="code">method perform() {
    unless $!done {
        .perform() for @!dependencies;
        &amp;amp;!callback();
        $!done = True;
    }
}</pre>
 <p>It takes no parameters, working instead with the object's attributes. First, it checks if the task has already completed by checking the <span class="code">$!done</span> attribute. If so, there's nothing to do.</p>
 <p><span class="indexed"><a id="29" name="operators ."></a></span></p>
 <p>Otherwise, the method performs all of the task's dependencies, using the <span class="code">for</span> construct to iterate over all of the items in the <span class="code">@!dependencies</span> attribute. This iteration places each item -- each a <span class="code">Task</span> object -- into the topic variable, <span class="code">$_</span>. Using the <span class="code">.</span> method call operator without specifying an explicit invocant uses the current topic as the invocant. Thus the iteration construct calls the <span class="code">.perform()</span> method on every <span class="code">Task</span> object in the <span class="code">@!dependencies</span> attribute of the current invocant.</p>
 <p>After all of the dependencies have completed, it's time to perform the current <span class="code">Task</span>'s task by invoking the <span class="code">&amp;!callback</span> attribute directly; this is the purpose of the parentheses. Finally, the method sets the <span class="code">$!done</span> attribute to <span class="code">True</span>, so that subsequent invocations of <span class="code">perform</span> on this object (if this <span class="code">Task</span> is a dependency of another <span class="code">Task</span>, for example) will not repeat the task.</p>
 <a name="t7.4.1"></a><h2 id="_language_classtut.pod6-Private_Methods">7.4.1 Private Methods</h2>
 <p>Analogous to attributes, methods can be private. Private methods are declared with a prefixed exclamation mark. They are called with <span class="code">self!</span> followed by the method's name. To call a private method of another class the calling class has to be trusted by the called class. A trust relationship is declared with <span class="code">trusts</span> and the class to be trusted must already be declared. Calling a private method of another class requires an instance of that class and the fully qualified name of the method. Trust also allows access to private attributes.</p>
 <pre class="code">class B {...}

class C {
    trusts B;
    has $!hidden = 'invisible';
    method !not-yours () { say 'hidden' }
    method yours-to-use () {
        say $!hidden;
        self!not-yours();
    }
}

class B {
    method i-am-trusted () {
        my C $c.=new;
        $c!C::not-yours();
    }
}

C.new.yours-to-use(); # the context of this call is GLOBAL, and not trusted by C
B.new.i-am-trusted();</pre>
 <p>Trust relationships are not subject to inheritance. To trust the global namespace, the pseudo package <span class="code">GLOBAL</span> can be used.</p>
 <a name="t7.5"></a><h1 id="_language_classtut.pod6-Constructors">7.5 Constructors</h1>
 <p><span class="indexed"><a id="30" name="constructors"></a></span></p>
 <p>Perl 6 is rather more liberal than many languages in the area of constructors. A constructor is anything that returns an instance of the class. Furthermore, constructors are ordinary methods. You inherit a default constructor named <span class="code">new</span> from the base class <span class="code">Mu</span>, but you are free to override <span class="code">new</span>, as this example does:</p>
 <pre class="code">method new(&amp;amp;callback, *@dependencies) {
    return self.bless(:&amp;amp;callback, :@dependencies);
}</pre>
 <p><span class="indexed"><a id="31" name="objects bless"></a></span> <span class="indexed"><a id="32" name="bless"></a></span></p>
 <p>The biggest difference between constructors in Perl 6 and constructors in languages such as C# and Java is that rather than setting up state on a somehow already magically created object, Perl 6 constructors actually create the object themselves. The easiest way to do this is by calling the <a href="#_routine_bless.pod6">bless</a> method, also inherited from <a href="#_type_Mu.pod6">Mu</a>. The <span class="code">bless</span> method expects a set of named parameters providing the initial values for each attribute.</p>
 <p>The example's constructor turns positional arguments into named arguments, so that the class can provide a nice constructor for its users. The first parameter is the callback (the thing which will execute the task). The rest of the parameters are dependent <span class="code">Task</span> instances. The constructor captures these into the <span class="code">@dependencies</span> slurpy array and passes them as named parameters to <span class="code">bless</span> (note that <span class="code">:&amp;callback</span> uses the name of the variable -- minus the sigil -- as the name of the parameter).</p>
 <p><span class="indexed"><a id="33" name="BUILD"></a></span></p>
 <p>Private attributes really are private. This means that <span class="code">bless</span> is not allowed to bind things to <span class="code">&amp;!callback</span> and <span class="code">@!dependencies</span> directly. To do this, we override the <span class="code">BUILD</span> submethod, which is called on the brand new object by <span class="code">bless</span>:</p>
 <pre class="code">submethod BUILD(:&amp;amp;!callback, :@!dependencies) { }</pre>
 <p>Since <span class="code">BUILD</span> runs in the context of the newly created <span class="code">Task</span> object, it is allowed to manipulate those private attributes. The trick here is that the private attributes (<span class="code">&amp;!callback</span> and <span class="code">@!dependencies</span>) are being used as the bind targets for <span class="code">BUILD</span>'s parameters. Zero-boilerplate initialization! See <a href="#_language_objects.pod6-Object_Construction">objects</a> for more information.</p>
 <p>The <span class="code">BUILD</span> method is responsible for initializing all attributes, it must handle default values too:</p>
 <pre class="code">has &amp;amp;!callback;
has @!dependencies;
has Bool ($.done, $.ready);
submethod BUILD(
        :&amp;amp;!callback,
        :@!dependencies,
        :$!done = False,
        :$!ready = not @!dependencies
    ) { }</pre>
 <p>See <a href="#_language_objects.pod6-Object_Construction">Object Construction</a> for more options to influence object construction and attribute initialization.</p>
 <a name="t7.6"></a><h1 id="_language_classtut.pod6-Consuming_our_class">7.6 Consuming our class</h1>
 <p>After creating a class, you can create instances of the class. Declaring a custom constructor provides a simple way of declaring tasks along with their dependencies. To create a single task with no dependencies, write:</p>
 <pre class="code">my $eat = Task.new({ say 'eating dinner. NOM!' });</pre>
 <p>An earlier section explained that declaring the class <span class="code">Task</span> installed a type object in the namespace. This type object is a kind of "empty instance" of the class, specifically an instance without any state. You can call methods on that instance, as long as they do not try to access any state; <span class="code">new</span> is an example, as it creates a new object rather than modifying or accessing an existing object.</p>
 <p>Unfortunately, dinner never magically happens. It has dependent tasks:</p>
 <pre class="code">my $eat =
    Task.new({ say 'eating dinner. NOM!' },
        Task.new({ say 'making dinner' },
            Task.new({ say 'buying food' },
                Task.new({ say 'making some money' }),
                Task.new({ say 'going to the store' })
            ),
            Task.new({ say 'cleaning kitchen' })
        )
    );</pre>
 <p>Notice how the custom constructor and sensible use of whitespace allows a layout which makes task dependencies clear.</p>
 <p>Finally, the <span class="code">perform</span> method call recursively calls the <span class="code">perform</span> method on the various other dependencies in order, giving the output:</p>
 <pre class="code">making some money
going to the store
buying food
cleaning kitchen
making dinner
eating dinner. NOM!</pre>
 <a name="t7.7"></a><h1 id="_language_classtut.pod6-Inheritance">7.7 Inheritance</h1>
 <p><span class="indexed"><a id="34" name="is (inheritance)"></a></span></p>
 <p>Object Oriented Programming provides the concept of inheritance as one of the mechanisms to allow for code reuse. Perl 6 supports the ability for one class to inherit from one or more classes. When a class inherits from another class it informs the method dispatcher to follow the inheritance chain to look for a method to dispatch. This happens both for standard methods defined via the method keyword and for methods generated through other means such as attribute accessors.</p>
 <pre class="code">class Employee { 
     has $.salary; 
 
     method pay() { 
         say "Here is \$$.salary"; 
     } 
 } 
 
 class Programmer is Employee { 
     has @.known_languages is rw; 
     has $.favorite_editor; 
 
     method code_to_solve( $problem ) { 
         say "Solving $problem using $.favorite_editor in " 
         ~ $.known_languages[0] ~ '.'; 
     } 
 } 
</pre>
 <p>Now any object of type Programmer can make use of the methods and accessors defined in the Employee class as though they were from the Programmer class.</p>
 <pre class="code">my $programmer = Programmer.new( 
     salary =&gt; 100_000, 
     known_languages =&gt; &amp;lt;Perl5 Perl6 Erlang C++&gt;, 
     favorite_editor =&gt; 'vim' 
 ); 
 
 $programmer.code_to_solve('halting problem'); 
 $programmer.pay(); 
</pre>
 <a name="t7.7.1"></a><h2 id="_language_classtut.pod6-Overriding_inherited_methods">7.7.1 Overriding inherited methods</h2>
 <p>Of course, classes can override methods and attributes defined by parent classes by defining their own. The example below demonstrates the <span class="code">Baker</span> class overriding the <span class="code">Cook</span>'s <span class="code">cook</span> method.</p>
 <pre class="code">class Cook is Employee { 
     has @.utensils  is rw; 
     has @.cookbooks is rw; 
 
     method cook( $food ) { 
         say "Cooking $food"; 
     } 
 
     method clean_utensils { 
         say "Cleaning $_" for @.utensils; 
     } 
 } 
 
 class Baker is Cook { 
     method cook( $confection ) { 
         say "Baking a tasty $confection"; 
     } 
 } 
 
 my $cook = Cook.new( 
     utensils =&gt; &amp;lt;spoon ladle knife pan&gt;, 
     cookbooks =&gt; 'The Joy of Cooking', 
     salary =&gt; 40000); 
 
 $cook.cook( 'pizza' ); # Cooking pizza 
 
 my $baker = Baker.new( 
     utensils =&gt; 'self cleaning oven', 
     cookbooks =&gt; "The Baker's Apprentice", 
     salary =&gt; 50000); 
 
 $baker.cook('brioche'); # Baking a tasty brioche 
</pre>
 <p>Because the dispatcher will see the <span class="code">cook</span> method on <span class="code">Baker</span> before it moves up to the parent class the <span class="code">Baker</span>'s <span class="code">cook</span> method will be called.</p>
 <p>As a side note, you might have wondered how passing strings to an array attribute worked. Array assignment is coercive, so the assignment turns the new value into an array. This mechanism is also used for initializing attributes.</p>
 <a name="t7.7.2"></a><h2 id="_language_classtut.pod6-Multiple_inheritance">7.7.2 Multiple inheritance</h2>
 <p>As mentioned before, a class can inherit from multiple classes. When a class inherits from multiple classes the dispatcher knows to look at both classes when looking up a method to search for. Perl 6 uses the C3 algorithm to linearize multiple inheritance hierarchies, which is a significant improvement over Perl 5's default approach (depth-first search) to handling multiple inheritance.</p>
 <pre class="code">class GeekCook is Programmer is Cook { 
     method new( *%params ) { 
         push( %params&amp;lt;cookbooks&gt;, "Cooking for Geeks" ); 
         return self.bless(|%params); 
     } 
 } 
 
 my $geek = GeekCook.new( 
     books           =&gt; 'Learning Perl 6', 
     utensils        =&gt; ('stainless steel pot', 'knife', 'calibrated oven'), 
     favorite_editor =&gt; 'MacVim', 
     known_languages =&gt; &amp;lt;Perl6&gt; 
 ); 
 
 $geek.cook('pizza'); 
 $geek.code_to_solve('P =? NP'); 
</pre>
 <p>Now all the methods made available to the Programmer and the Cook classes are available from the GeekCook class.</p>
 <p>While multiple inheritance is a useful concept to know and occasionally use, it is important to understand that there are more useful OOP concepts. When reaching for multiple inheritance it is good practice to consider whether the design wouldn't be better realized by using roles, which are generally safer because they force the class author to explicitly resolve conflicting method names. For more information on roles see <a href="#_language_objects.pod6-Roles">Roles</a>.</p>
 <a name="t7.7.3"></a><h2 id="_language_classtut.pod6-The_also_declarator">7.7.3 The <a name="35"></a> <span class="code">also</span>  declarator</h2>
 <p>Classes to be inherited from can be listed in the class declaration body by prefixing the <span class="code">is</span> trait with <span class="code">also</span>. This also works for the role composition trait <span class="code">does</span>.</p>
 <pre class="code">class GeekCook {
    also is Programmer;
    also is Cook;
    # ...
}

role A {};
role B {};
class C { also does A; also does B }</pre>
 <a name="t7.8"></a><h1 id="_language_classtut.pod6-Introspection">7.8 Introspection</h1>
 <p>Introspection is the process of gathering information about some objects in your program, not by reading the source code, but by querying the object (or a controlling object) for some properties, such as its type.</p>
 <p>Given an object <span class="code">$o</span>, and the class definitions from the previous sections, we can ask it a few questions:</p>
 <pre class="code">if $o ~~ Employee { say "It's an employee" };
if $o ~~ GeekCook { say "It's a geeky cook" };
say $o.WHAT;
say $o.perl;
say $o.^methods(:local).join(', ');
say $o.^name;</pre>
 <p>The output can look like this:</p>
 <pre class="code">It's an employee
(Programmer)
Programmer.new(known_languages =&gt; ["Perl", "Python", "Pascal"],
        favorite_editor =&gt; "gvim", salary =&gt; "too small")
code_to_solve, known_languages, favorite_editor
Programmer</pre>
 <p>The first two tests each smart-match against a class name. If the object is of that class, or of an inheriting class, it returns true. So the object in question is of class <span class="code">Employee</span> or one that inherits from it, but not <span class="code">GeekCook</span>.</p>
 <p>The <span class="code">.WHAT</span> method returns the type object associated with the object <span class="code">$o</span>, which tells us the exact type of <span class="code">$o</span>: in this case <span class="code">Programmer</span>.</p>
 <p><span class="code">$o.perl</span> returns a string that can be executed as Perl code, and reproduces the original object <span class="code">$o</span>. While this does not work perfectly in all cases<div class="marginale">For example closures cannot easily be reproduced this way; if you don't know what a closure is don't worry. Also current implementations have problems with dumping cyclic data structures this way, but they are expected to be handled correctly by  <span class="code">.perl</span>  at some point.</div>, it is very useful for debugging simple objects.</p>
 <p><span class="code">$o.^methods(:local)</span> produces a list of <a href="#_type_Method.pod6">Method</a>s that can be called on <span class="code">$o</span>. The <span class="code">:local</span> named argument limits the returned methods to those defined in the <span class="code">Employee</span> class and excludes the inherited methods.</p>
 <p>The syntax of calling a method with <span class="code">.^</span> instead of a single dot means that it is actually a method call on its <i>meta class</i>, which is a class managing the properties of the <span class="code">Employee</span> class -- or any other class you are interested in. This meta class enables other ways of introspection too:</p>
 <pre class="code">say $o.^attributes.join(', ');
say $o.^parents.map({ $_.^name }).join(', ');</pre>
 <p>Finally <span class="code">$o.^name</span> calls the <span class="code">name</span> method on the meta object, which unsurprisingly returns the class name.</p>
 <p>Introspection is very useful for debugging, and for learning the language and new libraries. When a function or method returns an object you don't know about, finding its type with <span class="code">.WHAT</span>, seeing a construction recipe for it with <span class="code">.perl</span>, and so on, you'll get a good idea of what its return value is. With <span class="code">.^methods</span> you can learn what you can do with the class.</p>
 <p>But there are other applications too: a routine that serializes objects to a bunch of bytes needs to know the attributes of that object, which it can find out via introspection.</p>
</div> <!-- /language/concurrency.pod6 --><div class="pod-body"><a id="_language_concurrency.pod6"></a><a name="t8"><h1 class="title">8 Concurrency</h1></a> <p class="subtitle">Concurrency and Asynchronous Programming</p> <p>In common with most modern programming languages, Perl 6 is designed to <a href="https://en.wikipedia.org/wiki/Concurrent_computing">support concurrency</a> (allowing more than one thing to happen at the same time) and asynchronous programming (sometimes called event driven or reactive programming - that is an event or change in some part of a program may lead to an event or change in some other part of the program asynchronously to the program flow).</p>
 <p>The aim of the Perl concurrency design is to provide a high-level, composable, consistent interface, regardless of how a virtual machine may implement it for a particular operating system, through layers of facilities as described below.</p>
 I'm not quite clear which specific features should be included below

hyper-operators, autothreading junctions?

 <p>Additionally, certain Perl features may implicitly operate in an asynchronous fashion, so in order to ensure predictable interoperation with these features, user code should, where possible, avoid the lower level concurrency APIs (i.e. <a href="#_type_Thread.pod6">Thread</a> and <a href="#_type_Scheduler.pod6">Scheduler</a> ) and use the higher-level interfaces.</p>
 <a name="t8.1"></a><h1 id="_language_concurrency.pod6-High-level_APIs">8.1 High-level APIs</h1>
 <a name="t8.1.1"></a><h2 id="_language_concurrency.pod6-Promises">8.1.1 Promises</h2>
 <p>A <a href="#_type_Promise.pod6">Promise</a> (also called <i>future</i> in other programming environments) encapsulates the result of a computation that may not have completed or even started at the time the promise is obtained. It provides much of the functionality that user code needs to operate in a concurrent or asynchronous manner.</p>
 <pre class="code">my $p1 = Promise.new; 
 say $p1.status;         # Planned; 
 $p1.keep('result'); 
 say $p1.status;         # Kept 
 say $p1.result;         # result 
 
 my $p2 = Promise.new; 
 $p2.break('oh no'); 
 say $p2.status;         # Broken 
 say $p2.result;         # dies with "oh no" 
</pre>
 <p>Promises gain much of their power by being composable, for example by chaining:</p>
 <pre class="code">my $promise1 = Promise.new();
my $promise2 = $promise1.then(
    -&gt; $v { say $v.result; "Second Result"}
);
$promise1.keep("First Result");
say $promise2.result;   # First Result \n Second Result</pre>
 <p>Here the <a href="#_type_Promise.pod6-method_then">then</a> method schedules code to be executed when the first <a href="#_type_Promise.pod6">Promise</a> is kept or broken, itself returning a new <a href="#_type_Promise.pod6">Promise</a> which will be kept with the result of the code when it is executed (or broken if the code fails.) <span class="code">keep</span> changes the status of the promise to <span class="code">Kept</span> setting the result to the positional argument. <span class="code">result</span> blocks the current thread of execution until the promise is kept or broken, if it was kept then it will return the result (that is the value passed to <span class="code">keep</span>, ) otherwise it will throw an exception based on the value passed to <span class="code">break</span>. The latter behaviour is illustrated with:</p>
 <pre class="code">my $promise1 = Promise.new();
my $promise2 = $promise1.then(-&gt; $v { say "Handled but : "; say $v.result});
$promise1.break("First Result");
try $promise2.result;
say $promise2.cause;        # Handled but : \n First Result</pre>
 <p>Here the <span class="code">break</span> will cause the code block of the <span class="code">then</span> to throw an exception when it calls the <span class="code">result</span> method on the original promise that was passed as an argument, which will subsequently cause the second promise to be broken, raising an exception in turn when its result is taken. The actual <a href="#_type_Exception.pod6">Exception</a> object will then be available from <span class="code">cause</span>. If the promise had not been broken <span class="code">cause</span> would raise a <a href="#_type_X::Promise::CauseOnlyValidOnBroken.pod6">X::Promise::CauseOnlyValidOnBroken</a> exception.</p>
 <p>A <a href="#_type_Promise.pod6">Promise</a> can also be scheduled to be automatically kept at a future time:</p>
 <pre class="code">my $promise1 = Promise.in(5);
my $promise2 = $promise1.then(-&gt; $v { say $v.status; 'Second Result' });
say $promise2.result;</pre>
 <p>The <a href="#_type_Promise.pod6-method_in">method in</a> creates a new promise and schedules a new task to call <span class="code">keep</span> on it no earlier than the supplied number of seconds, returning the new <a href="#_type_Promise.pod6">Promise</a> object.</p>
 <p>A very frequent use of promises is to run a piece of code, and keep the promise once it returns successfully, or break it when the code dies. The <a href="#_type_Promise.pod6-method_start">start method</a> provides a shortcut for that:</p>
 <pre class="code">my $promise = Promise.start(
    { my $i = 0; for 1 .. 10 { $i += $_ }; $i}
);
say $promise.result;    # 55</pre>
 <p>Here the <span class="code">result</span> of the promise returned is the value returned from the code. Similarly if the code fails (and the promise is thus broken), then <span class="code">cause</span> will be the <a href="#_type_Exception.pod6">Exception</a> object that was thrown:</p>
 <pre class="code">my $promise = Promise.start({ die "Broken Promise" });
try $promise.result;
say $promise.cause;</pre>
 <p>This is considered to be such a commonly required pattern that it is also provided as subroutines:</p>
 <pre class="code">my $promise = start {
    my $i = 0;
    for 1 .. 10 {
        $i += $_
    }
    $i
}
my $result = await $promise;
say $result;</pre>
 <p><span class="code">await</span> is almost equivalent to calling <span class="code">result</span> on the promise object returned by <span class="code">start</span> but it will also take a list of promises and return the result of each:</p>
 <pre class="code">my $p1 = start {
    my $i = 0;
    for 1 .. 10 {
        $i += $_
    }
    $i
};
my $p2 = start {
    my $i = 0;
    for 1 .. 10 {
        $i -= $_
    }
    $i
};
my @result = await $p1, $p2;
say @result;            # 55 -55</pre>
 <p>In addition to <span class="code">await</span>, two class methods combine several <a href="#_type_Promise.pod6">Promise</a> objects into a new promise: <span class="code">allof</span> returns a promise that is kept when all the original promises are kept or broken:</p>
 <pre class="code">my $promise = Promise.allof(
    Promise.in(2),
    Promise.in(3)
);

await $promise;
say "All done"; # Should be not much more than three seconds later</pre>
 <p>And <span class="code">anyof</span> returns a new promise that will be kept when any of the original promises is kept or broken:</p>
 <pre class="code">my $promise = Promise.anyof(
    Promise.in(3),
    Promise.in(8600)
);

await $promise;
say "All done"; # Should be about 3 seconds later</pre>
 <p>Unlike <span class="code">await</span> however the results of the original kept promises are not available without referring to the original, so these are more useful when the completion or otherwise of the tasks is more important to the consumer than the actual results, or when the results have been collected by other means. You may, for example, want to create a dependent Promise that will examine each of the original promises:</p>
 <pre class="code">my @promises;
for 1..5 -&gt; $t {
    push @promises, start {
        sleep $t;
        Bool.pick;
    };
}
say await Promise.allof(@promises).then({ so all(@promises&gt;&gt;.result) });</pre>
 <p>Which will give True if all of the promises were kept with True, False otherwise.</p>
 <p>If you are creating a promise that you intend to keep or break yourself then you probably don't want any code that might receive the promise to inadvertently (or otherwise,) keep or break the promise before you do. For this purpose there is the <a href="#_type_Promise.pod6-method_vow">method vow</a>, which returns a <a href="#_type_Vow.pod6">Vow</a> object which becomes the only mechanism by which the promise can be kept or broken. If an attempt to keep or break the Promise is made directly then the exception <a href="#_type_X::Promise::Vowed.pod6">X::Promise::Vowed</a> will be thrown, as long as the vow object is kept private, the status of the promise is safe:</p>
 <pre class="code">sub get_promise {
    my $promise = Promise.new;
    my $vow = $promise.vow;
    Promise.in(10).then({$vow.keep});
    $promise;
}

my $promise = get_promise();

# Will throw an exception
# "Access denied to keep/break this Promise; already vowed"
$promise.keep;</pre>
 <p>The methods that return a promise that will be kept or broken automatically such as <span class="code">in</span> or <span class="code">start</span> will do this, so it is not necessary to do it for these.</p>
 <a name="t8.1.2"></a><h2 id="_language_concurrency.pod6-Supplies">8.1.2 Supplies</h2>
 <p>A <a href="#_type_Supply.pod6">Supply</a> is an asynchronous data streaming mechanism that can be consumed by one or more consumers simultaneously in a manner similar to "events" in other programming languages and can be seen as enabling "Event Driven" or reactive designs.</p>
 <p>At its simplest, a <a href="#_type_Supply.pod6">Supply</a> is a message stream that can have multiple subscribers created with the method <span class="code">tap</span> on to which data items can be placed with <span class="code">emit</span>.</p>
 <p>The <a href="#_type_Supply.pod6">Supply</a> can either be <span class="code">live</span> or <span class="code">on-demand</span>. A <span class="code">live</span> supply is like a TV broadcast: those who tune in don't get previously emitted values. An <span class="code">on-demand</span> broadcast is like Netflix: everyone who starts streaming a movie (taps a supply), always starts it from the beginning (gets all the values), regardless of how many people are watching it right now. Note that no history is kept for <span class="code">on-demand</span> supplies, instead, the <span class="code">supply</span> block is run for each tap of the supply.</p>
 <p>A <span class="code">live</span> <a href="#_type_Supply.pod6">Supply</a> is created by the <a href="#_type_Supplier.pod6">Supplier</a> factory, each emitted value is passed to all the active tappers as they are added:</p>
 <pre class="code">my $supplier = Supplier.new;
my $supply   = $supplier.Supply;

$supply.tap( -&gt; $v { say $v });

for 1 .. 10 {
    $supplier.emit($_);
}</pre>
 <p>Note that the <span class="code">tap</span> is called on a <a href="#_type_Supply.pod6">Supply</a> object created by the <a href="#_type_Supplier.pod6">Supplier</a> and new values are emitted on the <a href="#_type_Supplier.pod6">Supplier</a>.</p>
 <p>Or alternatively as an <span class="code">on-demand</span> <a href="#_type_Supply.pod6">Supply</a> created by the <span class="code">supply</span> keyword:</p>
 <pre class="code">my $supply = supply {
    for 1 .. 10 {
        emit($_);
    }
}
$supply.tap( -&gt; $v { say $v });</pre>
 <p>In this case the code in the supply block is executed every time the <a href="#_type_Supply.pod6">Supply</a> returned by <span class="code">supply</span> is tapped, as demonstrated by:</p>
 <pre class="code">my $supply = supply {
    for 1 .. 10 {
        emit($_);
    }
}
$supply.tap( -&gt; $v { say "First : $v" });
$supply.tap( -&gt; $v { say "Second : $v" });</pre>
 <p>The <span class="code">tap</span> method returns a <a href="#_type_Tap.pod6">Tap</a> object which can be used to obtain information about the tap and also to turn it off when we are no longer interested in the events:</p>
 <pre class="code">my $supplier = Supplier.new;
my $supply   = $supplier.Supply;

my $tap = $supply.tap( -&gt; $v { say $v });

$supplier.emit("OK");
$tap.close;
$supplier.emit("Won't trigger the tap");</pre>
 <p>Calling <span class="code">done</span> on the supply object calls the <span class="code">done</span> callback that may be specified for any taps, but does not prevent any further events being emitted to the stream, or taps receiving them.</p>
 <p>The method <span class="code">interval</span> returns a new <span class="code">on-demand</span> supply which periodically emits a new event at the specified interval. The data that is emitted is an integer starting at 0 that is incremented for each event. The following code outputs 0 .. 5 :</p>
 <pre class="code">my $supply = Supply.interval(2);
$supply.tap(-&gt; $v { say $v });
sleep 10;</pre>
 <p>This could also be written using the <span class="indexed"><a id="36" name=""> <span class="code">react</span> </a></span> keyword:</p>
 <pre class="code">react {
    whenever Supply.interval(2) -&gt; $v {
        say $v;
        done() if $v == 4;
    }
}</pre>
 <p>Here the <span class="indexed"><a id="37" name=""> <span class="code">whenever</span> </a></span> keyword creates a tap on the <a href="#_type_Supply.pod6">Supply</a> from the provided block. The <span class="code">react</span> block is exited when <span class="code">done()</span> is called in one of the taps.</p>
 <p>A second argument can be supplied to <span class="code">interval</span> which specifies a delay in seconds before the first event is fired. Each tap of a supply created by <span class="code">interval</span> has its own sequence starting from 0, as illustrated by the following:</p>
 <pre class="code">my $supply = Supply.interval(2);
$supply.tap(-&gt; $v { say "First $v" });
sleep 6;
$supply.tap(-&gt; $v { say "Second $v"});
sleep 10;</pre>
 <p>An <span class="code">on-demand</span> <a href="#_type_Supply.pod6">Supply</a> can also be created from a list of values that will be emitted in turn, thus the first <span class="code">on-demand</span> example could be written as:</p>
 <pre class="code">react {
    whenever Supply.from-list(1..10) -&gt; $v {
        say $v;
    }
}</pre>
 <p>An existing supply object can be filtered or transformed, using the methods <span class="code">grep</span> and <span class="code">map</span> respectively, to create a new supply in a manner like the similarly named list methods: <span class="code">grep</span> returns a supply such that only those events emitted on the source stream for which the <span class="code">grep</span> condition is true is emitted on the second supply:</p>
 <pre class="code">my $supplier = Supplier.new;
my $supply = $supplier.Supply;
$supply.tap(-&gt; $v { say "Original : $v" });
my $odd_supply = $supply.grep({ $_ % 2 });
$odd_supply.tap(-&gt; $v { say "Odd : $v" });
my $even_supply = $supply.grep({ not $_ % 2 });
$even_supply.tap(-&gt; $v { say "Even : $v" });
for 0 .. 10 {
    $supplier.emit($_);
}</pre>
 <p><span class="code">map</span> returns a new supply such that for each item emitted to the original supply a new item which is the result of the expression passed to the <span class="code">map</span> is emitted:</p>
 <pre class="code">my $supplier = Supplier.new;
my $supply = $supplier.Supply;
$supply.tap(-&gt; $v { say "Original : $v" });
my $half_supply = $supply.map({ $_ / 2 });
$half_supply.tap(-&gt; $v { say "Half : $v" });
for 0 .. 10 {
    $supplier.emit($_);
}</pre>
 <p>If you need to have an action that runs when the supply finishes, you can do so by setting the <span class="code">done</span> and <span class="code">quit</span> options in the call to <span class="code">tap</span>:</p>
 <pre class="code">$supply.tap: { ... },
    done =&gt; { say 'Job is done.' },
    quit =&gt; {
        when X::MyApp::Error { say "App Error: ", $_.message }
    };</pre>
 <p>The <span class="code">quit</span> block works very similar to a <span class="code">CATCH</span>. If the exception is marked as seen by a <span class="code">when</span> or <span class="code">default</span> block, the exception is caught and handled. Otherwise, the exception continues to up the call tree (i.e., the same behavior as when <span class="code">quit</span> is not set).</p>
 <p>If you are using the <span class="code">react</span> or <span class="code">supply</span> block syntax with <span class="code">whenever</span>, you can add phasers within your <span class="code">whenever</span> blocks to handle the <span class="code">done</span> and <span class="code">quit</span> messages from the tapped supply:</p>
 <pre class="code">react {
    whenever $supply {
        ...; # your usual supply tap code here
        LAST { say 'Job is done.' }
        QUIT { when X::MyApp::Error { say "App Error: ", $_.message } }
    }
}</pre>
 <p>The behavior here is the same as setting <span class="code">done</span> and <span class="code">quit</span> on <span class="code">tap</span>.</p>
 <a name="t8.1.3"></a><h2 id="_language_concurrency.pod6-Channels">8.1.3 Channels</h2>
 <p>A <a href="#_type_Channel.pod6">Channel</a> is a thread-safe queue that can have multiple readers and writers that could be considered to be similar in operation to a "fifo" or named pipe except it does not enable inter-process communication. It should be noted that, being a true queue, each value sent to the <a href="#_type_Channel.pod6">Channel</a> will only be available to a single reader on a first read, first served basis: if you want multiple readers to be able to receive every item sent you probably want to consider a <a href="#_type_Supply.pod6">Supply</a>.</p>
 <p>An item is queued onto the <a href="#_type_Channel.pod6">Channel</a> with the <a href="#_type_Channel.pod6-method_send">method send</a>, and the <a href="#_type_Channel.pod6-method_receive">method receive</a> removes an item from the queue and returns it, blocking until a new item is sent if the queue is empty:</p>
 <pre class="code">my $channel = Channel.new;
$channel.send('Channel One');
say $channel.receive;  # 'Channel One'</pre>
 <p>If the channel has been closed with the <a href="#_type_Channel.pod6-method_close">method close</a> then any <span class="code">send</span> will cause the exception <a href="#_type_X::Channel::SendOnClosed.pod6">X::Channel::SendOnClosed</a> to be thrown, and a <span class="code">receive</span> will throw a <a href="#_type_X::Channel::ReceiveOnClosed.pod6">X::Channel::ReceiveOnClosed</a> if there are no more items on the queue.</p>
 <p>The <a href="#_type_Channel.pod6-method_list">method list</a> returns all the items on the <a href="#_type_Channel.pod6">Channel</a> and will block until further items are queued unless the channel is closed:</p>
 <pre class="code">my $channel = Channel.new;
await (^10).map: -&gt; $r {
    start {
        sleep $r;
        $channel.send($r);
    }
}
$channel.close;
for $channel.list -&gt; $r {
    say $r;
}</pre>
 <p>There is also the non-blocking <a href="#_type_Channel.pod6-method_poll">method poll</a> which returns an available item from the channel or <a href="#_type_Nil.pod6">Nil</a> if there is no item or the channel is closed, this does of course mean that the channel must be checked to determine whether it is closed:</p>
 <pre class="code">my $c = Channel.new;

start {
    my $closed = $c.closed;
    loop {
        if $c.poll -&gt; $item {
            say $item;
        }
        elsif $closed {
            last;
        }
    }
}

await (^10).map: -&gt; $r {
    start {
        sleep $r;
        $c.send($r);
    }
}
$c.close;</pre>
 <p>The <a href="#_type_Channel.pod6-method_closed">method closed</a> returns a <a href="#_type_Promise.pod6">Promise</a> that will be kept (and consequently will evaluate to True in a boolean context,) when the channel is closed.</p>
 <p>Channels can be used in place of the <a href="#_type_Supply.pod6">Supply</a> in the <span class="code">whenever</span> of a <span class="code">react</span> block described earlier:</p>
 <pre class="code">my $channel = Channel.new;
my $p = start {
    react {
        whenever $channel {
            say $_;
        }
    }
}

await (^10).map: -&gt; $r {
    start {
        sleep $r;
        $channel.send($r);
    }
}

$channel.close;
await $p;</pre>
 <p>It is also possible to obtain a <a href="#_type_Channel.pod6">Channel</a> from a <a href="#_type_Supply.pod6">Supply</a> using the <a href="#_type_Supply.pod6-method_Channel">Supply method</a> which returns a <a href="#_type_Channel.pod6">Channel</a> which is fed by a <span class="code">tap</span> on the <a href="#_type_Supply.pod6">Supply</a>:</p>
 <pre class="code">my $supplier = Supplier.new;
my $supply   = $supplier.Supply;
my $channel = $supply.Channel;

my $p = start {
    react  {
        whenever $channel -&gt; $item {
            say "via Channel: $item";
        }
    }
}

await (^10).map: -&gt; $r {
    start {
        sleep $r;
        $supplier.emit($r);
    }
}

$supplier.done;
await $p;</pre>
 <p><span class="code">Channel</span> will return a different <a href="#_type_Channel.pod6">Channel</a> fed with the same data each time it is called. This could be used, for instance, to fan-out a <a href="#_type_Supply.pod6">Supply</a> to one or more <a href="#_type_Channel.pod6">Channel</a>s to provide for different interfaces in a program.</p>
 <a name="t8.1.4"></a><h2 id="_language_concurrency.pod6-Proc::Async">8.1.4 Proc::Async</h2>
 <p><a href="#_type_Proc::Async.pod6">Proc::Async</a> builds on the facilities described to run and interact with an external program asynchronously:</p>
 <pre class="code">my $proc = Proc::Async.new('echo', 'foo', 'bar');

$proc.stdout.tap(-&gt; $v { print "Output: $v" });
$proc.stderr.tap(-&gt; $v { print "Error:  $v" });

say "Starting...";
my $promise = $proc.start;

await $promise;
say "Done.";

# Output:
# Starting...
# Output: foo bar
# Done.</pre>
 <p>The path to the command as well as any arguments to the command are supplied to the constructor. The command will not be executed until <a href="#_type_Proc::Async.pod6-method_start">start</a> is called, which will return a <a href="#_type_Promise.pod6">Promise</a> that will be kept when the program exits. The standard output and standard error of the program are available as <a href="#_type_Supply.pod6">Supply</a> objects from the methods <a href="#_type_Proc::Async.pod6-method_stdout">stdout</a> and <a href="#_type_Proc::Async.pod6-method_stderr">stderr</a> respectively which can be tapped as required.</p>
 <p>If you want to write to the standard input of the program you can supply the <span class="code">:w</span> adverb to the constructor and use the methods <a href="#_type_Proc::Async.pod6-method_write">write</a>, <a href="#_type_Proc::Async.pod6-method_print">print</a> or <a href="#_type_Proc::Async.pod6-method_say">say</a> to write to the opened pipe once the program has been started:</p>
 <pre class="code">my $proc = Proc::Async.new(:w, 'grep', 'foo');

$proc.stdout.tap(-&gt; $v { print "Output: $v" });

say "Starting...";
my $promise = $proc.start;

$proc.say("this line has foo");
$proc.say("this one doesn't");

$proc.close-stdin;
await $promise;
say "Done.";

# Output:
# Starting...
# Output: this line has foo
# Done.</pre>
 <p>Some programs (such as <span class="code">grep</span> without a file argument in this example, ) won't exit until their standard input is closed so <a href="#_type_Proc::Async.pod6-method_close-stdin">close-stdin</a> can be called when you are finished writing to allow the <a href="#_type_Promise.pod6">Promise</a> returned by <span class="code">start</span> to be kept.</p>
 <a name="t8.2"></a><h1 id="_language_concurrency.pod6-Low-level_APIs">8.2 Low-level APIs</h1>
 <a name="t8.2.1"></a><h2 id="_language_concurrency.pod6-Threads">8.2.1 Threads</h2>
 <p>The lowest level interface for concurrency is provided by <a href="#_type_Thread.pod6">Thread</a>. A thread can be thought of as a piece of code that may eventually be run on a processor, the arrangement for which is made almost entirely by the virtual machine and/or operating system. Threads should be considered, for all intents, largely un-managed and their direct use should be avoided in user code.</p>
 <p>A thread can either be created and then actually run later:</p>
 <pre class="code">my $thread = Thread.new(code =&gt; { for  1 .. 10  -&gt; $v { say $v }});
# ...
$thread.run;</pre>
 <p>Or can be created and run at a single invocation:</p>
 <pre class="code">my $thread = Thread.start({ for  1 .. 10  -&gt; $v { say $v }});</pre>
 <p>In both cases the completion of the code encapsulated by the <a href="#_type_Thread.pod6">Thread</a> object can be waited on with the <span class="code">finish</span> method which will block until the thread completes:</p>
 <pre class="code">$thread.finish;</pre>
 <p>Beyond that there are no further facilities for synchronization or resource sharing which is largely why it should be emphasised that threads are unlikely to be useful directly in user code.</p>
 <a name="t8.2.2"></a><h2 id="_language_concurrency.pod6-Schedulers">8.2.2 Schedulers</h2>
 <p>The next level of the concurrency API is supplied by classes that implement the interface defined by the role <a href="#_type_Scheduler.pod6">Scheduler</a>. The intent of the scheduler interface is to provide a mechanism to determine which resources to use to run a particular task and when to run it. The majority of the higher level concurrency APIs are built upon a scheduler and it may not be necessary for user code to use them at all, although some methods such as those found in <a href="#_type_Proc::Async.pod6">Proc::Async</a>, <a href="#_type_Promise.pod6">Promise</a> and <a href="#_type_Supply.pod6">Supply</a> allow you to explicitly supply a scheduler.</p>
 <p>The current default global scheduler is available in the variable <span class="code">$*SCHEDULER</span>.</p>
 <p>The primary interface of a scheduler (indeed the only method required by the <a href="#_type_Scheduler.pod6">Scheduler</a> interface) is the <span class="code">cue</span> method:</p>
 <pre class="code">method cue(:&amp;amp;code, Instant :$at, :$in, :$every, :$times = 1; :&amp;amp;catch)</pre>
 <p>This will schedule the <a href="#_type_Callable.pod6">Callable</a> in <span class="code">&amp;code</span> to be executed in the manner determined by the adverbs (as documented in <a href="#_type_Scheduler.pod6">Scheduler</a>) using the execution scheme as implemented by the scheduler. For example:</p>
 <pre class="code">my $i = 0;
my $cancellation = $*SCHEDULER.cue({ say $i++}, every =&gt; 2 );
sleep 20;</pre>
 <p>Assuming that the <span class="code">$*SCHEDULER</span> hasn't been changed from the default, will print the numbers 0 to 10 approximately (i.e with operating system scheduling tolerances) every two seconds. In this case the code will be scheduled to run until the program ends normally, however the method returns a <a href="#_type_Cancellation.pod6">Cancellation</a> object which can be used to cancel the scheduled execution before normal completion:</p>
 <pre class="code">my $i = 0;
my $cancellation = $*SCHEDULER.cue({ say $i++}, every =&gt; 2 );
sleep 10;
$cancellation.cancel;
sleep 10;</pre>
 <p>should only output 0 to 5,</p>
 <p>Despite the apparent advantage the <a href="#_type_Scheduler.pod6">Scheduler</a> interface provides over that of <a href="#_type_Thread.pod6">Thread</a> all of functionality is available through higher level interfaces and it shouldn't be necessary to use a scheduler directly, except perhaps in the cases mentioned above where a scheduler can be supplied explicitly to certain methods.</p>
 <p>A library may wish to provide an alternative scheduler implementation if it has special requirements, for instance a UI library may want all code to be run within a single UI thread, or some custom priority mechanism may be required, however the implementations provided as standard and described below should suffice for most user code.</p>
 <a name="t8.2.2.1"></a><h3 id="_language_concurrency.pod6-ThreadPoolScheduler">8.2.2.1 ThreadPoolScheduler</h3>
 <p>The <a href="#_type_ThreadPoolScheduler.pod6">ThreadPoolScheduler</a> is the default scheduler, it maintains a pool of threads that are allocated on demand, creating new ones as necessary up to maximum number given as a parameter when the scheduler object was created (the default is 16.) If the maximum is exceeded then <span class="code">cue</span> may queue the code until such time as a thread becomes available.</p>
 <p>Rakudo allows the maximum number of threads allowed in the default scheduler to be set by the environment variable <span class="code">RAKUDO_MAX_THREADS</span> at the time the program is started.</p>
 <a name="t8.2.2.2"></a><h3 id="_language_concurrency.pod6-CurrentThreadScheduler">8.2.2.2 CurrentThreadScheduler</h3>
 <p>The <a href="#_type_CurrentThreadScheduler.pod6">CurrentThreadScheduler</a> is a very simple scheduler that will always schedule code to be run straight away on the current thread. The implication is that <span class="code">cue</span> on this scheduler will block until the code finishes execution, limiting its utility to certain special cases such as testing.</p>
 <a name="t8.2.3"></a><h2 id="_language_concurrency.pod6-Locks">8.2.3 Locks</h2>
 <p>The class <a href="#_type_Lock.pod6">Lock</a> provides the low level mechanism that protects shared data in a concurrent environment and is thus key to supporting thread-safety in the high level API, this is sometimes known as a "Mutex" in other programming languages. Because the higher level classes (<a href="#_type_Promise.pod6">Promise</a>, <a href="#_type_Supply.pod6">Supply</a> and <a href="#_type_Channel.pod6">Channel</a>,) use a <a href="#_type_Lock.pod6">Lock</a> where required it is unlikely that user code will need to use a <a href="#_type_Lock.pod6">Lock</a> directly.</p>
 <p>The primary interface to <a href="#_type_Lock.pod6">Lock</a> is the method <a href="#_type_Lock.pod6-method_protect">protect</a> which ensures that a block of code (commonly called a "critical section",) is only executed in one thread at a time:</p>
 <pre class="code">my $lock = Lock.new;

my $a = 0;

await (^10).map: {
    start {
            $lock.protect({
                my $r = rand;
                sleep $r;
                $a++;
            });
    }
}

say $a; # 10</pre>
 <p><span class="code">protect</span> returns whatever the code block returns.</p>
 <p>Because <span class="code">protect</span> will block any threads that are waiting to execute the critical section the code should be as quick as possible.</p>
 <a name="t8.3"></a><h1 id="_language_concurrency.pod6-Safety_Concerns">8.3 Safety Concerns</h1>
 <p>Some shared data concurrency issues are less obvious than others. For a good general write-up on this subject see this <a href="https://6guts.wordpress.com/2014/04/17/racing-to-writeness-to-wrongness-leads/">blog post</a>.</p>
 <p>One particular issue of note is when container autovivification or extension takes place. When an <a href="#_type_Array.pod6">Array</a> or a <a href="#_type_Hash.pod6">Hash</a> entry is initially assigned the underlying structure is altered and that operation is not async safe. For example, in this code:</p>
 <pre class="code">my @array;
my $slot := @array[20];
$slot = 'foo';</pre>
 <p>The third line is the critical section as that is when the array is extended. The simplest fix is to use a &lt;Lock> to protect the critical section . A possibly better fix would be to refactor the code so that sharing a container is not necessary.</p>
</div> <!-- /language/containers.pod6 --><div class="pod-body"><a id="_language_containers.pod6"></a><a name="t9"><h1 class="title">9 Containers</h1></a> <p class="subtitle">A low-level explanation of Perl 6 containers</p> <p>This article started as a conversation on IRC explaining the difference between the <span class="code">Array</span> and the <span class="code">List</span> type in Perl 6. It explains the levels of indirection involved in dealing with variables and container elements.</p>
 <a name="t9.1"></a><h1 id="_language_containers.pod6-What_is_a_variable?">9.1 What is a variable?</h1>
 <p>Some people like to say "everything is an object", but in fact a variable is not a user-exposed object in Perl 6.</p>
 <p>When the compiler encounters a variable declaration like <span class="code">my $x</span>, it registers it in some internal symbol table. This internal symbol table is used to detect undeclared variables and to tie the code generation for the variable to the correct scope.</p>
 <p>At run time, a variable appears as an entry in a <i>lexical pad</i>, or <i>lexpad</i> for short. This is a per-scope data structure that stores a pointer for each variable.</p>
 <p>In the case of <span class="code">my $x</span>, the lexpad entry for the variable <span class="code">$x</span> is a pointer to an object of type <span class="code">Scalar</span>, usually just called <i>the container</i>.</p>
 <a name="t9.2"></a><h1 id="_language_containers.pod6-Scalar_containers">9.2 Scalar containers</h1>
 <p>Although objects of type <span class="code">Scalar</span> are everywhere in Perl 6, you rarely see them directly as objects, because most operations <i>decontainerize</i>, which means they act on the <span class="code">Scalar</span> container's contents instead of the container itself.</p>
 <p>In code like</p>
 <pre class="code">my $x = 42;
say $x;</pre>
 <p>the assignment <span class="code">$x = 42</span> stores a pointer to the <span class="code">Int</span> object 42 in the scalar container to which the lexpad entry for <span class="code">$x</span> points.</p>
 <p>The assignment operator asks the container on the left to store the value on its right. What exactly that means is up to the container type. For <span class="code">Scalar</span> it means "replace the previously stored value with the new one".</p>
 <p>Note that subroutine signatures allow passing around of containers:</p>
 <pre class="code">sub f($a is rw) {
    $a = 23;
}
my $x = 42;
f($x);
say $x;         # 23</pre>
 <p>Inside the subroutine, the lexpad entry for <span class="code">$a</span> points to the same container that <span class="code">$x</span> points to outside the subroutine. Which is why assignment to <span class="code">$a</span> also modifies the contents of <span class="code">$x</span>.</p>
 <p>Likewise a routine can return a container if it is marked as <span class="code">is rw</span>:</p>
 <pre class="code">my $x = 23;
sub f() is rw { $x };
f() = 42;
say $x;         # 42</pre>
 <p>For explicit returns, <span class="code">return-rw</span> instead of <span class="code">return</span> must be used.</p>
 <p>Returning a container is how <span class="code">is rw</span> attribute accessors work. So</p>
 <pre class="code">class A {
    has $.attr is rw;
}</pre>
 <p>is equivalent to</p>
 <pre class="code">class A {
    has $!attr;
    method attr() is rw { $!attr }
}</pre>
 <p>Scalar containers are transparent to type checks and most kinds of read-only accesses. A <span class="code">.VAR</span> makes them visible:</p>
 <pre class="code">my $x = 42;
say $x.^name;       # Int
say $x.VAR.^name;   # Scalar</pre>
 <p>And <span class="code">is rw</span> on a parameter requires the presence of a writable Scalar container:</p>
 <pre class="code">sub f($x is rw) { say $x };
f 42;   # Parameter '$x' expected a writable container, but got Int value</pre>
 <a name="t9.3"></a><h1 id="_language_containers.pod6-Binding">9.3 Binding</h1>
 <p>Next to assignment, Perl 6 also supports <i>binding</i> with the <span class="code">:=</span> operator. When binding a value or a container to a variable, the lexpad entry of the variable is modified (and not just the container it points to). If you write</p>
 <pre class="code">my $x := 42;</pre>
 <p>then the lexpad entry for <span class="code">$x</span> directly points to the <span class="code">Int</span> 42. Which means that you cannot assign to it anymore:</p>
 <pre class="code">$ perl6 -e 'my $x := 42; $x = 23'
Cannot modify an immutable value
   in block  at -e:1</pre>
 <p>You can also bind variables to other variables:</p>
 <pre class="code">my $a = 0;
my $b = 0;
$a := $b;
$b = 42;
say $a;         # 42</pre>
 <p>Here, after the initial binding, the lexpad entries for <span class="code">$a</span> and <span class="code">$b</span> both point to the same scalar container, so assigning to one variable also changes the contents of the other.</p>
 <p>You've seen this situation before: it is exactly what happened with the signature parameter marked as <span class="code">is rw</span>.</p>
 <p>Sigilless variables also bind by default and so do parameters with the trait <span class="code">is raw</span>.</p>
 <pre class="code">my $a = 42;
my \b = $a;
b++;
say $a;         # 43

sub f($c is raw) { $c++ }
f($a);
say $a;         # 44</pre>
 <a name="t9.4"></a><h1 id="_language_containers.pod6-Scalar_containers_and_listy_things">9.4 Scalar containers and listy things</h1>
 <p>There are a number of positional container types with slightly different semantics in Perl 6. The most basic one is <a href="#_type_List.pod6">List</a> It is created by the comma operator.</p>
 <pre class="code">say (1, 2, 3).^name;    # List</pre>
 <p>A list is immutable, which means you cannot change the number of elements in a list. But if one of the elements happens to be a scalar container, you can still assign to it:</p>
 <pre class="code">my $x = 42;
($x, 1, 2)[0] = 23;
say $x;                 # 23
($x, 1, 2)[1] = 23;     # Error: Cannot modify an immutable value</pre>
 <p>So the list doesn't care about whether its elements are values or containers, they just store and retrieve whatever was given to them.</p>
 <p>Lists can also be lazy, so elements at the end are generated on demand from an iterator.</p>
 <p>An <span class="code">Array</span> is just like a list, except that it forces all its elements to be containers, which means that you can always assign to elements:</p>
 <pre class="code">my @a = 1, 2, 3;
@a[0] = 42;
say @a;         # 42 2 3</pre>
 <p><span class="code">@a</span> actually stores three scalar containers. <span class="code">@a[0]</span> returns one of them, and the assignment operator replaces the integer value stored in that container with the new one, <span class="code">42</span>.</p>
 <p>An <a href="#_type_Array.pod6">Array</a> also has methods that can change the number of elements, notably <span class="code">push</span>, <span class="code">pop</span>, <span class="code">shift</span>, <span class="code">unshift</span> and <span class="code">splice</span>.</p>
 <a name="t9.5"></a><h1 id="_language_containers.pod6-Assigning_and_binding_to_array_variables">9.5 Assigning and binding to array variables</h1>
 <p>Assigning to a scalar variable and to an array variable both do basically the same thing: discard the old value(s), and enter some new value(s).</p>
 <p>Nevertheless, it's easy to observe how different they are:</p>
 <pre class="code">my $x = 42; say $x.^name;   # Int
my @a = 42; say @a.^name;   # Array</pre>
 <p>This is because the <span class="code">Scalar</span> container type hides itself well, but <span class="code">Array</span> makes no such effort. Also assignment to an array variable is coercive, so you can assign a non-array value to an array variable.</p>
 <p>To place a non-<span class="code">Array</span> into an array variable, binding works:</p>
 <pre class="code">my @a := (1, 2, 3);
say @a.WHAT;                # (List)</pre>
 <a name="t9.6"></a><h1 id="_language_containers.pod6-Binding_to_array_elements">9.6 Binding to array elements</h1>
 <p>As a curious side note, Perl 6 supports binding to array elements:</p>
 <pre class="code">my @a = (1, 2, 3);
@a[0] := my $x;
$x = 42;
say @a;                     # 42 2 3</pre>
 <p>If you've read and understood the previous explanations, it is now time to wonder how this can possibly work. After all, binding to a variable requires a lexpad entry for that variable, and while there is one for an array, there aren't lexpad entries for each array element (you cannot expand the lexpad at run time).</p>
 <p>The answer is that binding to array elements is recognized at the syntax level and instead of emitting code for a normal binding operation, a special method (called <span class="code">BIND-KEY</span>) is called on the array. This method handles binding to array elements.</p>
 <p>Note that, while supported, one should generally avoid directly binding uncontainerized things into array elements. Doing so may produce counter-intuitive results when the array is used later.</p>
 <pre class="code">my @a = (1, 2, 3);
@a[0] := 42;         # This is not recommended, use assignment instead.
my $b := 42;
@a[1] := $b;         # Nor is this.
@a[2] = $b;          # ...but this is fine.
@a[1, 2] := 1, 2;    # This is not allowed and will fail.</pre>
 <p>Operations that mix Lists and Arrays generally protect against such a thing happening accidentally.</p>
 <a name="t9.7"></a><h1 id="_language_containers.pod6-Flattening,_items_and_containers">9.7 Flattening, items and containers</h1>
 <p>The <span class="code">%</span> and <span class="code">@</span> sigils in Perl 6 generally indicate multiple values to an iteration construct, whereas the <span class="code">$</span> sigil indicates only one value.</p>
 <pre class="code">my @a = 1, 2, 3;
for @a { };         # 3 iterations
my $a = (1, 2, 3);
for $a { };         # 1 iteration</pre>
 <p>Contrary to earlier versions of Perl 6, and to Perl 5, <span class="code">@</span>-sigiled variables do not flatten in list context:</p>
 <pre class="code">my @a = 1, 2, 3;
my @b = @a, 4, 5;
say @b.elems;               # 3</pre>
 <p>There are operations that flatten out sublists that are not inside a scalar container: slurpy parameters (<span class="code">*@a</span>) and explicit calls to <span class="code">flat</span>:</p>
 <pre class="code">my @a = 1, 2, 3;
say (flat @a, 4, 5).elems;  # 5

sub f(*@x) { @x.elems };
say f @a, 4, 5;             # 5</pre>
 <p>As hinted above, scalar containers prevent that flattening:</p>
 <pre class="code">sub f(*@x) { @x.elems };
say f $@a, 4, 5;            # 3</pre>
 <p>The <span class="code">@</span> character can also be used as a prefix to remove a scalar container:</p>
 <pre class="code">my $x = (1, 2, 3);
.say for @$x;               # 3 iterations</pre>
 <p>Methods generally don't care whether their invocant is in a scalar, so</p>
 <pre class="code">my $x = (1, 2, 3);
$x.map(*.say);              # 3 iterations</pre>
 <p>maps over a list of three elements, not of one.</p>
 <a name="t9.8"></a><h1 id="_language_containers.pod6-Custom_containers">9.8 Custom containers</h1>
 <p>To provide custom containers Perl 6 provides the class <span class="code">Proxy</span>. It takes two methods that are called when values are stored or fetched from the container. Type checks are not done by the container itself and other restrictions like readonlyness can be broken. The returned value must therefore be of the same type as the type of the variable it is bound to. We can use type captures to work with types in Perl 6.</p>
 <pre class="code">sub lucky(::T $type) {
    my T $c-value; # closure variable
    return Proxy.new(
        FETCH =&gt; method () { $c-value },
        STORE =&gt; method (T $new-value) {
            X::OutOfRange.new(what =&gt; 'number', got =&gt; '13', range =&gt; '-Inf..12, 14..Inf').throw
                if $new-value == 13;
            $c-value = $new-value;
        }
    );
}

my Int $a := lucky(Int);
say $a = 12;
say $a = 'FOO'; # X::TypeCheck::Binding
say $a = 13; # X::OutOfRange</pre>
</div> <!-- /language/contributors.pod6 --><div class="pod-body"><a id="_language_contributors.pod6"></a><a name="t10"><h1 class="title">10 Contributors</h1></a> <p class="subtitle">List of contributors to Perl 6 over the years</p> <p>The following people contributed to the development of Perl 6, as could be determined from the logs of all the various projects that make up Perl 6. If you think you are missing from this list, or for any reason would not like to appear on this list, or need a correction, please submit a <a href="#_language_glossary.pod6-Pull_Request">Pull Request</a> with the required change(s).</p>
 <a name="t10.1"></a><h1 id="_language_contributors.pod6-A">10.1 A</h1>
 <pre class="code">Gisle Aas
abcxyzp
Chuck Adams
Colin Paul Adams
Rod Adams
C.J. Adams-Collier
David H. Adler
Chirag Agrawal
Amir E. Aharoni
Bilal Akhtar
Julian Albo
Alekssasho
alexghacker
Paco Alguacil
Brandon S Allbery
Geir Amdal
Markus Amsler
Paul C. Anagnostopoulos
Nikolay Ananiev
anatolyv
andras
Saleem Ansari
Joji Antony
Tomoki Aonuma
Syed Uzair Aqeel
arathorn
Arcterus
Kodi Arfer
Daniel Arbelo Arrocha
ash
Ted Ashton
Arnaud Assad
atroxaper
Ori Avtalion אורי אבטליון
Auzon</pre>
 <a name="t10.2"></a><h1 id="_language_contributors.pod6-B">10.2 B</h1>
 <pre class="code">Greg Bacon
Ivan Baidakou
Alex Balhatchet
Szabó
Balázs
Amir Livine Bar-On עמיר ליבנה בר-און
Luca Barbato
Mattia Barbon
Ann Barcomb
Christian Bartolomäus
Alex "Skud" Bayley
bcmb
Jody Belka
Shachaf Ben-Kiki
Andrei Benea
benedikth
Zev Benjamin
benmorrow
Kevan Benson
Martin Berends
Anton Berezin
Arthur Bergman
Anders Nor Berle
bestian
Peter Bevan
Mark Biggar
Carlin Bingham
Ævar Arnfjörð Bjarmason
J. David Blackstone
Ronald Blaschke
Ingo Blechschmidt
bloonix
blwood
Kristof Bogaerts
Dan Bolser
Конрад Боровски
Christopher Bottoms
Gonéri Le Bouder
Jos Boumans
Brad Bowman
Matt Boyle
bpetering
H.Merijn Brand
Terrence Brannon
Gwern Branwen
Stig Brautaset
Herbert "lichtkind" Breunung
bri
brian_d_foy
Fernando Brito
Geoffrey Broadwell
Leon Brocard
Benjamin Brodfuehrer
Samuel Bronson
Dan Brook
Nathan C. Brown
Roger Browne
Philippe Bruhat (BooK)
David Brunton
Corwin Brust
Klaus Brüssel
Lucas Buchala
buchetc
Christoph Buchetmann
Norbert Buchmuller
Buddha Buck
Alexandre Buisse
Tim Bunce
Bryan Burgers
Sean M. Burke
Matthew Byng-Maddick
András Bártházi
Jürgen Bömmels</pre>
 <a name="t10.3"></a><h1 id="_language_contributors.pod6-C">10.3 C</h1>
 <pre class="code">Caelum
Aldo Calpini
Edward Cant
David Cantrell
Carlin
Michael Cartmell
Hezekiah Carty
Nuno 'smash' Carvalho
Marcelo Serra Castilhos
Piers Cawley
cdavaz
cdpruden
Gianni Ceccarelli
cfourier
Marc Chantreux
Mitchell N Charity
Oliver Charles
Vasily Chekalkin
Yuan-Chen Cheng 鄭原真
Daniel Chetlin
Hsin-Chan Chien 簡信昌
N. Hao Ching
Joshua Choi
Elizabeth Cholet
David Christensen
chuck
cjeris
Nicholas Clark
Steve Clark
Jeff Clites
cmarcelo
cmeyer
Paul Cochrane
Daniel Colascione
Jason Cole
Will "Coke" Coleda
Sylvain Colinet
cono
Tim Conrow
Géraud Continsouzas
Damian Conway
Neil Conway
Stuart Cook
David Corbin
Deven T. Corzine
cosmicnet
Timothy Covell
Beau E. Cox
Simon Cozens
Philip Crow
cspenser
Franck Cuny
Tyler Curtis
David Czech</pre>
 <a name="t10.4"></a><h1 id="_language_contributors.pod6-D">10.4 D</h1>
 <pre class="code">Daenyth
Dagur
Ritz Daniel
darkwolf
Chris Davaz
David Warring
Justin DeVuyst
Daniel Dehennin
Akim Demaille
Detonite
Lars "daxim" Dieckow 迪拉斯
Matt Diephouse
Bob Diertens
Wendy "woolfy" van Dijk
Jeffrey Dik
John M. Dlugosz
dimid
diotalevi
Hans van Dok
Chris Dolan
Mark Dominus
Bryan Donlan
Andy Dougherty
Dave Doyle
drKreso
dr_df0
dudley
Jonathan Scott Duff
dug
Lee Duhem
Darren Duncan</pre>
 <a name="t10.5"></a><h1 id="_language_contributors.pod6-E">10.5 E</h1>
 <pre class="code">Andrew Egeler
Havard Eidnes
Nelson Elhage
Ran Eliam
Fitz Elliott
Alex Elsayed
Jay Emerson
Aankhola Encorporated
ennio
Enveigler
Jon Ericson
Shae Matijs Erisson
Eryq
Mike Eve
Pat Eyler</pre>
 <a name="t10.6"></a><h1 id="_language_contributors.pod6-F">10.6 F</h1>
 <pre class="code">Aaron Faanes
Kevin Falcone
David Farrell
Angel Faus
Jason Felds
Paul Fenwick
Jose Rodrigo Fernandez
Nelson Ferraz
Adriano Ferreira
João Fernando Ferreira
Chris Fields
Caio Marcelo de Oliveira Filho
Steve Fink
Shlomi "rindolf" Fish שלומי פיש
Mark Leighton Fisher
Scott Fitzenrider
Dudley Flanders
Richard Foley
Vincent Foley
Julian Fondren
Ruben Fonseca
David Formosa
Karl Forner
Solomon Foster
Chaddaï Fouché
Lloyd Fournier
Michael Fowler
Matt Fowles
franck
Austin Frank
Carl Franks
Kent Fredric
Chaim Frenkel
Piotr Fusik</pre>
 <a name="t10.7"></a><h1 id="_language_contributors.pod6-G">10.7 G</h1>
 <pre class="code">gabriele
John Gabriele
Christoph Gärtner
Martin von Gagern
Felix Gallo
Salvador Ortiz Garcia
Rafaël Garcia-Suarez
Joshua Gatcomb
Jerry Gay
gcomnz
Jonathan Gentle
iVAN Georgiev
Brian Gernhardt
Bram Geron
Alessandro Ghedini
Imran Ghory
Peter Gibbs
Tanton Gibbs
Brad Gilbert (b2gills)
Karl Glazebrook
Nick Glencross
Mark Glines
Flávio S. Glock
Jason Gloudon
Simon Glover
gnuvince
Garrett Goebel
Jeffrey Goff
Mikhael Goikhman
Benjamin Goldberg
Arcady Goldmints-Orlov
Dimitry Golubovsky
Gerard Goossen
Goplat
Alex Gough
Léo Grange
Chad "Exodist" Granum
Kenneth A Graves
Bruce Gray
Nathan Gray
Mark Grimes
Lucien Grondin
Rolf Grossmann
David Grove
Marcel Grünauer
Daniel Grunblatt
Uri Guttman
gwern</pre>
 <a name="t10.8"></a><h1 id="_language_contributors.pod6-H">10.8 H</h1>
 <pre class="code">Swaroop C H
Richard Hainsworth
Roger Hale
John "ab5tract" Haltiwanger
Nigel Hamilton
Eric Hanchrow
Sterling Hanenkamp
Ask Bjørn Hansen
Christian "chansen" Hansen
Eirik Berg Hanssen
Samuel Harrington
Trey Harris
John Harrison
Carsten Hartenfels
Richard Hartmann
Kyle Hasselbacher
Austin Hastings
Carl Hayter
Florian Helmberger
Gordon Henriksen
Felix Herrmann
Peter Heslin
Fred Heutte
Jarkko Hietaniemi
Michael H. Hind
Joshua Hoblitt
Zack Hobson
Eric Hodges
Rob Hoelz
Masahiro Honma
Lyle Hopkins
JD Horelick
Jeff Horwitz
Chris Hostetter
Laurens Van Houtven
Jeremy Howard
Yiyi Hu 鹄驿懿
Benedikt Huber
Brad Hughes
Sterling Hughes
Tom Hughes
Tristan Hume
Donald Hunter
Douglas Hunter
Juan Francisco Cantero Hurtado
Kay-Uwe 'kiwi' Hüll</pre>
 <a name="t10.9"></a><h1 id="_language_contributors.pod6-I">10.9 I</h1>
 <pre class="code">Alin Iacob
Ibotty
ibrown
ihrd
Roland Illing
Jan Ingvoldstad
Joshua Isom
isop
Ivan_A_Frey
ivanoff</pre>
 <a name="t10.10"></a><h1 id="_language_contributors.pod6-J">10.10 J</h1>
 <pre class="code">Akash Manohar J
jafelds
Robert G. Jakabosky
jamesrom
S. A. Janet
jani
Heiko Jansen
Stuart Jansen
Jarrod
Jedai
Chris Jepeway
Chris Jeris
Dagur Valberg Johannsson
Erik Johansen
Paul Johnson
johnspurr
Isaac Jones
Norman Nunley Jr
Yoshikuni Jujo
Brian S. Julin
Josh Juran
Michal Jurosz</pre>
 <a name="t10.11"></a><h1 id="_language_contributors.pod6-K">10.11 K</h1>
 <pre class="code">David Koenig
Prakash Kailasa
Shoichi Kaji
Daniel Kang
Isis Kang
Chia-Liang Kao 高嘉良
Dmitry Karasik
Luben Karavelov
Amir Karger
Offer Kaye
Bruce Keeler
James E Keenan
Cole Keirsey
Adam Kennedy
Matt Kennedy
Shane Kerr
khairul
Mikhail Khorkov
Krzysztof Kielak
Andres Kievsky
Daehyub Kim
Rob Kinyon
Oleg Kiselyov
Oolley kj
Martin Kjeldsen
Thomas "domm" Klausner
Zohar "lumi" Kelrich זהר קלריך/卡卓哈
Damian Miles Knopp
Dan Kogai 小飼弾
Yuval "nothingmuch" Kogman יובל קוג'מן
Tomasz Konojacki
Vadim Konovalov
Nick Kostirya
Matt Kraai
Thomas Kratz
Adrian Kreher
John van Krieken
Matthias Krull
Bradley M. Kuhn
Bob Kuo
Colin Kuskie
Kamil Kułaga</pre>
 <a name="t10.12"></a><h1 id="_language_contributors.pod6-L">10.12 L</h1>
 <pre class="code">Sage LaTorra
Brent Laabs
laben
Johannes Laire
Markus Laire
Fayland Lam 林道
Mike Lambert
lanny
Leo Lapworth
last.of.the.careless.men
Bart Lateur
Jia-Hong Lee
Lola Lee
Jonathan Leffler
Tobias Leich
lembark
Mark Lentczner
Moritz A Lenz
Jean-Louis Leroy
Andy Lester
Jonathan "Duke" Leto
Vladimir Lettiev
Mike Li 李曉光
Stefan Lidman
Yung-Chung Lin 林永忠
Glenn Linderman
Vladimir Lipsky
Zach Lipton
Stevan Little
Kang-Min Liu 劉康民
Skip Livingston
David M. Lloyd
Daniel Lo
Peter Lobsinger
Andres Löh
Nick Logan
Eric Lubow
Nolan Lum
Peter Lunicks
LylePerl
Ian Lynagh
lysdexsik</pre>
 <a name="t10.13"></a><h1 id="_language_contributors.pod6-M">10.13 M</h1>
 <pre class="code">Kiran Kumar M.
Jerry MacClure
Noel Maddy
Christopher J. Madsen
Abhijit A. Mahabal
Max Maischein
Peter Makholm
Ujwal Reddy Malipeddi
malon
Christopher Malon
Dagfinn Ilmari Mannsåker
Michael Maraist
Roie Marianer רועי מריאנר
markmont
Simon Marlow
martin
Paolo Martini
Ilya Martynov
Jaume Martí
James Mastros
Michael J. Mathews
Vyacheslav Matjukhin
Tokuhiro Matsuno
mattc
Mike Mattie
Elizabeth "lizmat" Mattijsen
Вячеслав Матюхин
Markus Mayr
Josh McAdams
Martin McCarthy
Mark McConnell
Steven McDougall
John McNamara
Scott McWhirter
mdinger
Olivier "dolmen" Mengué
Kevin Metcalf
Patrick R. Michaud
mimir
mjreed
Tom Moertel
Michael Mol
Paolo Molaro
Shawn M Moore
Brandon Michael Moore
Alexander Moquin
Ion Alexandru Morega
Dino Morelli
Kolia Morev
Zach Morgan
mr_ank
Alex Munroe
muraiki
Paweł Murias
mvuets
Steve Mynott
mzedeler
Carl Mäsak</pre>
 <a name="t10.14"></a><h1 id="_language_contributors.pod6-N">10.14 N</h1>
 <pre class="code">naesten
Tim Nelson
Ailin Nemui
Ingy döt Net 應吉大聶
David Nicol
Faye Niemeyer
Nigelsandever
Karl Rune Nilsen
Salve J. Nilsen
Per Christian Nodtvedt
Ben Noordhuis
Paweł Nowak
Norman Nunley</pre>
 <a name="t10.15"></a><h1 id="_language_contributors.pod6-O">10.15 O</h1>
 <pre class="code">Tony O'Dell
יהושע "שי" אוחיון
Clayton O'Neill
Stefan O'Rear
Sean O'Rourke
Matt Oates
Tony Olekshy
Martin Olsen
Dmitriy Olshevskiy
Dave Olszewski
Nelo Onyiah
William Orr
Jon Orwant
Andrei Osipov
Christoph Otto</pre>
 <a name="t10.16"></a><h1 id="_language_contributors.pod6-P">10.16 P</h1>
 <pre class="code">Pawel Pabian
Walter Pallestrong
Luke Palmer
Bartłomiej Palmowski
Pancake
Paolo
Marton Papp
Andrew Parker
Roman M. Parparov
Anthony Parsons
Mike Pastore
Nova Patch
Timo Paulssen
Tony Payne
Stéphane "cognominal" Payrard
Slava Pechenin
Gael Pegliasco
Stéphane Peiry
Felipe Pena
Nayden Pendov
Wenzel P. P. Peppmeyer
François Perrad
Markus Peter
Ben Petering
Steve Peters
Tim Peterson
Ronny Pfannschmidt
Clinton A. Pierce
Jerrad Pierce
Thilo Planz
plunix
pmakholm
Curtis 'Ovid' Poe
Gerd Pokorra
Peter Polacik
Flavio Poletti
Kevin Polulak
John Porter
Ryan W. Porter
Stephen P. Potter
Philip Potter
Adam Preble
premshree
Klāvs Priedītis
Adam Prime
Richard Proctor
Christopher Pruden
Kevin Puetz
Gregor N. Purdy
purl</pre>
 <a name="t10.17"></a><h1 id="_language_contributors.pod6-Q">10.17 Q</h1>
 <pre class="code">Hongwen Qiu
Jerome Quelin
quester</pre>
 <a name="t10.18"></a><h1 id="_language_contributors.pod6-R">10.18 R</h1>
 <pre class="code">Gerhard R.
Peter Rabbitson
Florian Ragwitz
raiph
Matt Rajca
Marcus Ramberg
Claudio Ramirez
Prog Rammer
Allison Randal
David Ranvig
Lars Balker Rasmussen
Curtis Rawls
raydiak
Robin Redeker
Ted Reed
Jens Rehsack
Charles Reiss
Gabriele Renzi
Kenneth C. Rich
Jason Richmond
Ryan Richter
Sebastian Riedel
Dennis Rieks
Jens Rieks
Lanny Ripple
John Rizzo
rkhill
Andrew Robbins
Amos Robinson
Jonathan Rockway
Stefano Rodighiero
Andrew Rodland
Lindolfo Rodrigues
Bob Rogers
Dave Rolsky
David Romano
ron
Eric J. Roode
Garret Rooney
Garrett Rooney
David Ross
Andreas Rottmann
Brent Royal-Gordon
Shmarya Rubenstein
Sam Ruby
Simon Ruderich
Daniel Ruoso
Jake Russo
ruz
Joseph Ryan
Gilbert Röhrbein</pre>
 <a name="t10.19"></a><h1 id="_language_contributors.pod6-S">10.19 S</h1>
 <pre class="code">Sam S
s1n
sahadev
Patrick Abi Salloum
salty_horse
Chip Salzenberg
Shrivatsan Sampathkumar
Igor Rafael Sanchez-Puls
Hugo van der Sanden
Thomas Sandlaß
Yun SangHo
sanug
Siddhant Saraf
Sasho
Andrew Savige
John Saylor
Matt Schallert
Bernhard Schmalhofer
Arthur Axel Schmidt
Ronald Schmidt
Michael Schroeder
Steven Schubiger
Steve "thundergnat" Schulze
Andreas Schwab
Randal L. Schwartz
Pepe Schwarz
Frederik Schwarzer
Calvin Schwenzfeier
Michael G. Schwern
Steffen Schwigon
Tom Scola
Ariel Scolnicov
Michael Scott
Peter Scott
Rick Scott
Stefan Seifert
Austin Seipp
Mark Senn
Filip Sergot
Seth Gold (Sgeo)
William Shallum
Kris Shannon
shenyute
Aaron Sherman
Mark Shoulson
Ryan Siemens
Ricardo Signes
Hinrik Örn Sigurðsson
Jonathan Sillito
Miroslav Silovic
Steve Simmons
Alberto Manuel Brandao Simoes
John Siracusa
Arne Skjærholt
Barrie Slaymaker
Radek Slupik
Mike Small
Benjamin Smith
Melvin Smith
Tim Smith
Adrian White aka
snarkyboojum
Richard Soderberg
SolidState
Vishal Soni
Syloke Soong
Shawn Sorichetti
Tadeusz Sośnierz
sue spence
Cory Spencer
Robert Spier
Michael Stapelberg
Edwin Steiner
stephenpollei
Michael Stevens
Don Stewart
Radu Stoica
Klaas-Jan Stol
Alek Storm
David Storrs
Mark Stosberg
Jonathan Stowe
Cosimo Streppone
Jonathan Strickland
Pascal Stumpf
Su-Shee
Sue
Laye Suen
Dan Sugalski
Mark Summerfield
Simon Sun
Cheng-Lung Sung 宋政隆
Sunnavy
Samuel Sutch
svatsan
svn
Andrew Sweger
sygi
Sebastian Sylvan
Gábor Szabó
Bálint Szilakszi
Marek Šuppa</pre>
 <a name="t10.20"></a><h1 id="_language_contributors.pod6-T">10.20 T</h1>
 <pre class="code">TOGoS
Arvindh Rajesh Tamilmani
Audrey Tang 唐鳳
Bestian Tang 唐宗浩
Adrian Taylor
Jesse Taylor
Philip Taylor
Kevin Tew
the_dormant
Marcus Thiesen
Adam Thomason
Richard Tibbetts
Carey Tilden
Marcel Timmerman
Leon Timmermans
tkob
John Tobey
Frank Tobin
Bennett Todd
Graham Todd
Leopold Tötsch
Daniel Toma
Nathan Torkington
Timothy Totten
Itsuki Toyota
John J. Trammell
Matt S. Trout
Nat Tuck
Adam Turoff
Ben Tyler</pre>
 <a name="t10.21"></a><h1 id="_language_contributors.pod6-U">10.21 U</h1>
 <pre class="code">ujwal
Bernd Ulmann
Reini Urban
parrot user
uzair</pre>
 <a name="t10.22"></a><h1 id="_language_contributors.pod6-V">10.22 V</h1>
 <pre class="code">VZ
Ilmari Vacklin
vamped
Wim Vanderbauwhede
vendethiel
David Vergin
Ted Vessenes
Sam Vilain
Cédric Vincent
Jesse Vincent
Jos Visser
John van Vlaanderen
vmax
Jeremy Voorhis
Martin Vorländer
Johan Vromans
Maxim Vuets</pre>
 <a name="t10.23"></a><h1 id="_language_contributors.pod6-W">10.23 W</h1>
 <pre class="code">Juerd Waalboer
Mariano Wahlmann
Kevin Walker
Gloria Wall
Larry Wall
Lewis Wall
Michal J Wallace
John Paul Wallington
walter
Matthew Walton
Ting Wang
Xinyuan Wang
Andy Wardley
Bryan C. Warnock
wayland
Stephen Weeks
Zhen-Bang Wei
Nick Wellnhofer
Shu-Chun Weng
Danny Werner
Brian Wheeler
David E. Wheeler
Dave Whipp
Adrian White
Andrew Whitworth
Bart Wiegmans
Nathan Wiger
Brock Wilcox
Edwin Wiles
Bob Wilkinson
Chris 'BinGOs' Williams
Greg Williams
Josh Wilmes
Matthew Wilson
Ashley Winters
Brian Wisti
Dave Woldrich
Helmut Wollmersdorfer
Kevin J. Woolley
Jonathan Worthington
Kuang-Che Wu 吳光哲</pre>
 <a name="t10.24"></a><h1 id="_language_contributors.pod6-X">10.24 X</h1>
 <pre class="code">xenu
Liang-Qi Xie 謝良奇
Xtreak</pre>
 <a name="t10.25"></a><h1 id="_language_contributors.pod6-Y">10.25 Y</h1>
 <pre class="code">Gaal Yahas גל יחס
Thomas Yandell
Alvis Yardley
Thomas Yeh 葉志宏
Natan Yellin
yiyihu
Matt Youell
Tony Young
Shen Yu-Teh</pre>
 <a name="t10.26"></a><h1 id="_language_contributors.pod6-Z">10.26 Z</h1>
 <pre class="code">Ilya Zakharevich
Ruslan Zakirov
Ahmad M. Zawawi
Michael A. D. Zedeler
zengargoyle
zeriod
Agent Zhang 章亦春
Jimmy Zhuo
Ziggy6
Rob Zinkov
Zoffix Znet</pre>
</div> <!-- /language/control.pod6 --><div class="pod-body"><a id="_language_control.pod6"></a><a name="t11"><h1 class="title">11 Control Flow</h1></a> <p class="subtitle">Statements used to control the flow of execution</p> <a name="t11.1"></a><h1 id="_language_control.pod6-statements">11.1 <a name="38"></a>statements</h1>
 <p>Perl 6 programs consists of one or more statements. Simple statements are separated by semicolons. The following program will say "Hello" and then say "World" on the next line.</p>
 <pre class="code">say "Hello";
say "World";</pre>
 <p>In most places where spaces appear in a statement, and before the semicolon, it may be split up over many lines. Also, multiple statements may appear on the same line. It would be awkward, but the above could also be written as:</p>
 <pre class="code">say
"Hello"; say "World";</pre>
 <a name="t11.2"></a><h1 id="_language_control.pod6-blocks">11.2 <a name="39"></a>blocks</h1>
 <p>Like many languages, Perl 6 uses <span class="code">blocks</span> enclosed by <span class="code">{</span> and <span class="code">}</span> to turn multiple statements into a single statement. It is ok to skip the semicolon between the last statement in a block and the closing <span class="code">}</span>.</p>
 <pre class="code">{ say "Hello"; say "World" }</pre>
 <p>When a block stands alone as a statement, it will be entered immediately after the previous statement finishes, and the statements inside it will be executed.</p>
 <pre class="code">say 1;                    # says "1"
{ say 2; say 3 };         # says "2" then says "3"
say 4;                    # says "4"</pre>
 <p>Unless it stands alone as a statement, a block simply creates a closure. The statements inside are not executed immediately. Closures are another topic and how they are used is explained <a href="#_language_functions.pod6-Blocks_and_Lambdas">elsewhere</a>. For now it is just important to understand when blocks run and when they do not:</p>
 <pre class="code">say "We get here"; { say "then here." }; { say "not here"; 0; } or die;</pre>
 <p>In the above example, after running the first statement, the first block stands alone as a second statement, so we run the statement inside it. The second block does not stand alone as a statement, so instead, it makes an object of type <span class="code">Block</span> but does not run it. Object instances are usually considered to be true, so the code does not die, even though that block would evaluate to 0, were it to be executed. The example does not say what to do with the <span class="code">Block</span> object, so it just gets thrown away.</p>
 <p>Most of the flow control constructs covered below are just ways to tell perl6 when, how, and how many times, to enter blocks like that second block.</p>
 <p>Before we go into those, an important side-note on syntax: If there is nothing (or nothing but comments) on a line after a closing curly brace where you would normally put semicolon, then you do not need the semicolon:</p>
 <pre class="code"># All three of these lines can appear as a group, as is, in a program
{ 42.say }                #-&gt; says "42"
{ 43.say }                #-&gt; says "43"
{ 42.say }; { 43.say }    #-&gt; says "42" then says "43"</pre>
 <p>...but:</p>
 <pre class="code">{ 42.say }  { 43.say }    #-&gt; Syntax error
{ 42.say; } { 43.say }    #-&gt; Also a syntax error, of course</pre>
 <p>So, be careful when you backspace in a line-wrapping editor:</p>
 <pre class="code">{ "Without semicolons line-wrapping can be a bit treacherous.".say } \
{ 43.say } #-&gt; Syntax error</pre>
 <p>You have to watch out for this in most languages anyway to prevent things from getting accidentally commented out. Many of the examples below may have unnecessary semicolons for clarity.</p>
 <a name="t11.3"></a><h1 id="_language_control.pod6-do">11.3 <a name="40"></a>do</h1>
 <p>The simplest way to run a block where it cannot be a stand-alone statement is by writing <span class="code">do</span> before it:</p>
 <pre class="code"># This dies half of the time
do { say "Heads I win, tails I die."; Bool.pick } or die; say "I win.";</pre>
 <p>Note that you need a space between the do and the block.</p>
 <p>The whole <span class="code">do {...}</span> evaluates to the final value of the block. The block will be run when that value is needed in order to evaluate the rest of the expression. So:</p>
 <pre class="code">False and do { 42.say };</pre>
 <p>...will not say 42. However, the block is only evaluated once each time the expression it is contained in is evaluated:</p>
 <pre class="code"># This says "(..1 ..2 ..3)" not "(..1 ...2 ....3)"
my $f = "."; say do { $f ~= "." } X~ 1, 2, 3;</pre>
 <p>In other words, it follows the same reification rules as everything else.</p>
 <p>Technically, <span class="code">do</span> is a loop which runs exactly one iteration.</p>
 <p>A <span class="code">do</span> may also be used on a bare statement (without curly braces) but this is mainly just useful for avoiding the syntactical need to parenthesize a statement if it is the last thing in an expression:</p>
 <pre class="code">3, do if 1 { 2 }  ; #-&gt; 3, 2
3,   (if 1 { 2 }) ; #-&gt; 3, 2
3,    if 1 { 2 }  ; # Syntax error</pre>
 <p>...which brings us to <span class="code">if</span>.</p>
 <a name="t11.4"></a><h1 id="_language_control.pod6-if">11.4 <a name="41"></a>if</h1>
 <p>To conditionally run a block of code, use an <span class="code">if</span> followed by a condition. The condition, an expression, will be evaluated immediately after the statement before the <span class="code">if</span> finishes. The block attached to the condition will only be evaluated if the condition means True when coerced to <span class="code">Bool</span>. Unlike some languages the condition does not have to be parenthesized, instead the <span class="code">{</span> and <span class="code">}</span> around the block are mandatory:</p>
 <pre class="code">if 1 { "1 is true".say }  ; # says "1 is true"
if 1   "1 is true".say    ; # syntax error, missing block
if 0 { "0 is true".say }  ; # does not say anything, because 0 is false
if 42.say and 0 { 43.say }; # says "42" but does not say "43"</pre>
 <p>There is also a form of <span class="code">if</span> called a "statement modifier" form. In this case, the if and then the condition come after the code you want to run conditionally. Do note that the condition is still always evaluated first:</p>
 <pre class="code">43.say if 42.say and 0;     # says "42" but does not say "43"
43.say if 42.say and 1;     # says "42" and then says "43"
say "It is easier to read code when 'if's are kept on left of screen"
    if True;                # says the above, because it is true
{ 43.say } if True;         # says "43" as well</pre>
 <p>The statement modifier form is probably best used sparingly.</p>
 <p>The <span class="code">if</span> statement itself will either <a href="#_type_Slip.pod6">slip</a> us an empty list, if it does not run the block, or it will return the value which the block produces:</p>
 <pre class="code">my $d = 0; say (1, (if 0 { $d += 42; 2; }), 3, $d); # says "(1 3 0)"
my $c = 0; say (1, (if 1 { $c += 42; 2; }), 3, $c); # says "(1 2 3 42)"
say (1, (if 1 { 2, 2 }), 3);         # does not slip, says "(1 (2 2) 3)"</pre>
 <p>For the statement modifier it is the same, except you have the value of the statement instead of a block:</p>
 <pre class="code">say (1, (42 if True) , 2); # says "(1 42 2)"
say (1, (42 if False), 2); # says "(1 2)"
say (1,  42 if False , 2); # says "(1 42)" because "if False, 2" is true</pre>
 <p>The <span class="code">if</span> does not change the topic (<span class="code">$_</span>) by default. In order to access the value which the conditional expression produced, you have to ask for it more strongly:</p>
 <pre class="code">$_ = 1; if 42 { $_.say }                ; # says "1"
$_ = 1; if 42 -&gt; $_ { $_.say }          ; # says "42"
$_ = 1; if 42 -&gt; $a { $_.say;  $a.say } ; # says "1" then says "42"
$_ = 1; if 42       { $_.say; $^a.say } ; # says "1" then says "42"</pre>
 <a name="t11.4.1"></a><h2 id="_language_control.pod6-else/elsif">11.4.1 <a name="44"></a>else/elsif</h2>
 <p>A compound conditional may be produced by following an <span class="code">if</span> conditional with <span class="code">else</span> to provide an alternative block to run when the conditional expression is false:</p>
 <pre class="code">if 0 { say "no" } else { say "yes" }   ; # says "yes"
if 0 { say "no" } else{ say "yes" }    ; # syntax error, space is required</pre>
 <p>The <span class="code">else</span> cannot be separated from the conditional statement by a semicolon, but as a special case, it is OK to have a newline.</p>
 <pre class="code">if 0 { say "no" }; else { say "yes" }  ; # syntax error
if 0 { say "no" }
else { say "yes" }                     ; # says "yes"</pre>
 <p>Additional conditions may be sandwiched between the <span class="code">if</span> and the <span class="code">else</span> using <span class="code">elsif</span>. An extra condition will only be evaluated if all the conditions before it were false, and only the block next to the first true condition will be run. You can end with an <span class="code">elsif</span> instead of an <span class="code">else</span> if you want.</p>
 <pre class="code">if 0 { say "no" } elsif False { say "NO" } else { say "yes" } # says "yes"
if 0 { say "no" } elsif True { say "YES" } else { say "yes" } # says "YES"

if 0 { say "no" } elsif False { say "NO" } # does not say anything

sub right { "Right!".say; True }
sub wrong { "Wrong!".say; False }
if wrong() { say "no" } elsif right() { say "yes" } else { say "maybe" }
# The above says "Wrong!" then says "Right!" then says "yes"</pre>
 <p>You cannot use the statement modifier form with <span class="code">else</span> or <span class="code">elsif</span>:</p>
 <pre class="code">42.say if 0 else { 43.say }            # syntax error</pre>
 <p>All the same rules for semicolons and newlines apply, consistently</p>
 <pre class="code">if 0 { say 0 }; elsif 1 { say 1 }  else { say "how?" } ; # syntax error
if 0 { say 0 }  elsif 1 { say 1 }; else { say "how?" } ; # syntax error
if 0 { say 0 }  elsif 1 { say 1 }  else { say "how?" } ; # says "1"

if 0 { say 0 } elsif 1 { say 1 }
else { say "how?" }                                    ; # says "1"

if 0 { say 0 }
elsif 1 { say 1 } else { say "how?" }                  ; # says "1"

if        0 { say "no" }
elsif False { say "NO" }
else        { say "yes" }                              ; # says "yes"</pre>
 <p>The whole thing either <a href="#_type_Slip.pod6">slips</a> us an empty list (if no blocks were run) or returns the value produced by the block that did run:</p>
 <pre class="code">my $d = 0; say (1,
                (if 0 { $d += 42; "two"; } elsif False { $d += 43; 2; }),
                3, $d); # says "(1 3 0)"
my $c = 0; say (1,
                (if 0 { $c += 42; "two"; } else { $c += 43; 2; }),
                3, $c); # says "(1 2 3 43)"</pre>
 <p>It's possible to obtain the value of the previous expression inside an <span class="code">else</span>, which could be from <span class="code">if</span> or the last <span class="code">elsif</span> if any are present:</p>
 <pre class="code">$_ = 1; if 0     { } else -&gt; $a { "$_ $a".say } ; # says "1 0"
$_ = 1; if False { } else -&gt; $a { "$_ $a".say } ; # says "1 False"

if False { } elsif 0 { } else -&gt; $a { $a.say }  ; # says "0"</pre>
 <a name="t11.4.2"></a><h2 id="_language_control.pod6-unless">11.4.2 <a name="45"></a>unless</h2>
 <p>When you get sick of typing "if not (X)" you may use <span class="code">unless</span> to invert the sense of a conditional statement. You cannot use <span class="code">else</span> or <span class="code">elsif</span> with <span class="code">unless</span> because that ends up getting confusing. Other than those two differences <span class="code">unless</span> works the same as <a href="#10-if">#if</a>:</p>
 <pre class="code">unless 1 { "1 is false".say }  ; # does not say anything, since 1 is true
unless 1   "1 is false".say    ; # syntax error, missing block
unless 0 { "0 is false".say }  ; # says "0 is false"

unless 42.say and 1 { 43.say } ; # says "42" but does not say "43"
43.say unless 42.say and 0;      # says "42" and then says "43"
43.say unless 42.say and 1;      # says "42" but does not say "43"

$_ = 1; unless 0 { $_.say }           ; # says "1"
$_ = 1; unless 0 -&gt; $_ { $_.say }     ; # says "0"
$_ = 1; unless False -&gt; $a { $a.say } ; # says "False"

my $c = 0; say (1, (unless 0 { $c += 42; 2; }), 3, $c); # says "(1 2 3 42)"
my $d = 0; say (1, (unless 1 { $d += 42; 2; }), 3, $d); # says "(1 3 0)"</pre>
 <a name="t11.4.3"></a><h2 id="_language_control.pod6-with,_orwith,_without">11.4.3 <a name="46"></a>with, orwith, without</h2>
 <p>The <span class="code">with</span> statement is like <span class="code">if</span> but tests for definedness rather than truth. In addition, it topicalizes on the condition, much like <span class="code">given</span>:</p>
 <pre class="code">with "abc".index("a") { .say }      # prints 0</pre>
 <p>Instead of <span class="code">elsif</span>, <span class="code">orwith</span> may be used to chain definedness tests:</p>
 <pre class="code"># The below code says "Found a at 0"
my $s = "abc";
with   $s.index("a") { say "Found a at $_" }
orwith $s.index("b") { say "Found b at $_" }
orwith $s.index("c") { say "Found c at $_" }
else                 { say "Didn't find a, b or c" }</pre>
 <p>You may intermix <span class="code">if</span>-based and <span class="code">with</span>-based clauses.</p>
 <pre class="code"># This says "Yes"
if 0 { say "No" } orwith Nil { say "No" } orwith 0 { say "Yes" };</pre>
 <p>As with <span class="code">unless</span>, you may use <span class="code">without</span> to check for undefinedness, but you may not add an <span class="code">else</span> clause:</p>
 <pre class="code">without $answer { fail "Got: $_" }</pre>
 <p>There are also <span class="code">with</span> and <span class="code">without</span> statement modifiers:</p>
 <pre class="code">return 42 with $answer;
.throw without $answer;</pre>
 <a name="t11.5"></a><h1 id="_language_control.pod6-for">11.5 <a name="47"></a>for</h1>
 <p>The <span class="code">for</span> loop iterates over a list, running the statements inside a block once on each iteration. If the block takes parameters, the elements of the list are provided as arguments.</p>
 <pre class="code">for @foo { $_.print } # prints each value contained in @foo 
 for @foo { .print }   # same thing, because .print implies a $_ argument 
 for @foo { 42.print } # prints 42 as many times as @foo has elements 
 
</pre>
 <p>Pointy block syntax or a <a href="#_language_variables.pod6-The_^_Twigil">placeholder</a> may be used to name the parameter, of course.</p>
 <pre class="code">for @foo -&gt; $item { print $item } 
 for @foo { print $^item }            # same thing 
 
</pre>
 <p>Multiple parameters can be declared, in which case the iterator takes as many elements from the list as needed before running the block.</p>
 <pre class="code">for @foo.kv -&gt; $idx, $val { say "$idx: $val" } 
 for %hash.kv -&gt; $key, $val { say "$key =&gt; $val" } 
 for 1, 1.1, 2, 2.1 { say "$^x &amp;lt; $^y" }  # says "1 &amp;lt; 1.1" then says "2 &amp;lt; 2.1" 
 
</pre>
 <p>A <span class="code">for</span> may be used on lazy lists -- it will only take elements from the list when they are needed, so to read a file line by line, you could use:</p>
 <pre class="code">for $*IN.lines -&gt; $line {...} 
 
</pre>
 <p>Iteration variables are always lexical, so you don't need to use <span class="code">my</span> to give them the appropriate scope. Also, they are read-only aliases. If you need them to be read-write, use <span class="code">&lt;-></span> instead of <span class="code">-></span>. If you need to make <span class="code">$_</span> read-write in a for loop, do so explicitly.</p>
 <pre class="code">for @cars &amp;lt;-&gt; $_ {...} 
 
</pre>
 <p>A for loop can produce a <span class="code">List</span> of the values produced by each run of the attached block. To capture these values, put the for loop in parenthesis or assign them to an array:</p>
 <pre class="code">(for 1, 2, 3 { $_ * 2 }).say;              # says "(2 4 6)" 
 my @a = do for 1, 2, 3 { $_ * 2 }; @a.say; # says "[2 4 6]" 
 my @a = (for 1, 2, 3 { $_ * 2 }); @a.say;  # same thing 
 
</pre>
 <a name="t11.6"></a><h1 id="_language_control.pod6-gather/take">11.6 <a name="48"></a>gather/take</h1>
 <p><span class="indexed"><a id="49" name="lazy list gather"></a></span><span class="indexed"><a id="50" name="lazy list take"></a></span></p>
 <p><span class="code">gather</span> is a statement or block prefix that returns a <a href="#_type_Seq.pod6">sequence</a> of values. The values come from calls to <span class="code">take</span> in the dynamic scope of the <span class="code">gather</span> block.</p>
 <pre class="code">my @a = gather {
    take 1;
    take 5;
    take 42;
}
say join ', ', @a;          # 1, 5, 42</pre>
 <p><span class="code">gather/take</span> generates values lazily, so the <span class="code">gather</span> block generally runs only until it hits the first <span class="code">take</span>. Code after the first <span class="code">take</span> is executed as soon as the next value is consumed from the returned sequence.</p>
 <p>For example</p>
 <pre class="code">my \vals = gather {
    take 1;
    say "Produced a value";
    take 2;
}
say vals[0];
say 'between consumption of two values';
say vals[1];</pre>
 <p>produces this output:</p>
 <pre class="code">1
between consumption of two values
Produced a value
2</pre>
 <p><span class="code">gather/take</span> is scoped dynamically, so you can call <span class="code">take</span> from subs or methods that are called from within <span class="code">gather</span>:</p>
 <pre class="code">sub weird(@elems, :$direction = 'forward') {
    my %direction = (
        forward  =&gt; sub { take $_ for @elems },
        backward =&gt; sub { take $_ for @elems.reverse },
        random   =&gt; sub { take $_ for @elems.pick(*) },
    );
    return gather %direction{$direction}();
}

say weird(&amp;lt;a b c&gt;, :direction&amp;lt;backward&gt; );          # (c b a)</pre>
 <a name="t11.7"></a><h1 id="_language_control.pod6-given">11.7 <a name="51"></a>given</h1>
 <p>The <span class="code">given</span> statement is Perl 6's topicalizing keyword in a similar way that <span class="code">switch</span> topicalizes in languages such as C. In other words, <span class="code">given</span> sets <span class="code">$_</span> inside the following block. The keywords for individual cases are <span class="code">when</span> and <span class="code">default</span>. The usual idiom looks like this:</p>
 <pre class="code">given EXPR {
    when EXPR { ... }
    when EXPR { ... }
    default { ... }
}</pre>
 <p>The <span class="code">given</span> statement is often used alone:</p>
 <pre class="code">given EXPR { .say; .Numeric; }</pre>
 <p>This is a lot more understandable than:</p>
 <pre class="code">{ .say; .Numeric; }(EXPR)</pre>
 <a name="t11.7.1"></a><h2 id="_language_control.pod6-default_and_when">11.7.1 <a name="52"></a>default and when</h2>
 <p>A block containing a <span class="code">default</span> statement will be left immediately when the sub-block after the <span class="code">default</span> statement is left. It is as though the rest of the statements in the block are skipped.</p>
 <pre class="code">given 42 {
    "This says".say;
    $_ == 42 and ( default { "This says, too".say; 43; } );
    "This never says".say;
}
# The above block evaluates to 43</pre>
 <p>A <span class="code">when</span> statement will also do this (but a <span class="code">when</span> statement modifier will <i>not</i>.)</p>
 <p>In addition, <span class="code">when</span> statements <span class="code">smartmatch</span> the topic (<span class="code">$_</span>) against a supplied expression such that it is possible to check against values, regular expressions, and types when specifying a match.</p>
 <pre class="code">for 42, 43, "foo", 44 {
    when Int { .say }
    default  { say "Not an Int" }
}
#-&gt; 42 43 Not an Int 44</pre>
 <p>In this form, the <span class="code">given</span>/<span class="code">when</span> construct acts much like a set of <span class="code">if</span>/<span class="code">elsif</span>/<span class="code">else</span> statements. Be careful with the order of the <span class="code">when</span> statements. The following code says <span class="code">"Int"</span> not <span class="code">42</span>.</p>
 <pre class="code">given 42 {
    when Int { say "Int" }
    when 42  { say 42 }
    default  { say "huh?" }
}
#-&gt; Int</pre>
 <p>When a <span class="code">when</span> statement or <span class="code">default</span> statement causes the outer block to return, nesting <span class="code">when</span> or <span class="code">default</span> blocks do not count as the outer block, so you can nest these statements and still be in the same "switch" just so long as you do not open a new block:</p>
 <pre class="code">given 42 {
    when Int {
      when 42  { say 42 }
      say "Int"
    }
    default  { say "huh?" }
}
#-&gt; 42</pre>
 <p><span class="code">when</span> statements can smart match against <a href="#_language_syntax.pod6-Signature_literals">Signatures</a>.</p>
 <a name="t11.7.2"></a><h2 id="_language_control.pod6-proceed_and_succeed">11.7.2 <a name="53"></a>proceed and succeed</h2>
 <p>Both <span class="code">proceed</span> and <span class="code">succeed</span> are meant to be used only from inside <span class="code">when</span> or <span class="code">default</span> blocks.</p>
 <p>The <span class="code">proceed</span> statement will immediately leave the <span class="code">when</span> or <span class="code">default</span> block, skipping the rest of the statements, and resuming after the block. This prevents the <span class="code">when</span> or <span class="code">default</span> from exiting the outer block.</p>
 <pre class="code">default {
    proceed;
    "This never says".say
}
"This says".say;</pre>
 <p>This is most often used to enter multiple <span class="code">when</span> blocks. <span class="code">proceed</span> will resume matching after a successful match, like so:</p>
 <pre class="code">given 42 {
    when Int   { say "Int"; proceed }
    when 42    { say 42 }
    when 40..* { say "greater than 40" }
    default    { say "huh?" }
}
# -&gt; Int
# -&gt; 42</pre>
 <p>Note that the <span class="code">when 40..*</span> match didn't occur. For this to match such cases as well, one would need a proceed in the <span class="code">when 42</span> block.</p>
 <p>This is not like a <span class="code">C</span> <span class="code">switch</span> statement, because the <span class="code">proceed</span> does not merely enter the directly following block, it attempts to match the <span class="code">given</span> value once more, consider this code:</p>
 <pre class="code">given 42 {
    when Int { "Int".say; proceed }
    when 43  { 43.say }
    when 42  { 42.say }
    default  { "got change for an existential answer?".say }
}
#-&gt; Int
#-&gt; 42</pre>
 <p>...which matches the <span class="code">Int</span>, skips <span class="code">43</span> since the value doesn't match, matches <span class="code">42</span> since this is the next positive match, but doesn't enter the <span class="code">default</span> block since the <span class="code">when 42</span> block doesn't contain a <span class="code">proceed</span>.</p>
 <p>By contrast, the <span class="code">succeed</span> keyword shortcircuits execution and exits the entire <span class="code">given</span> block at that point. It may also take an argument to specify a final value for the block.</p>
 <pre class="code">given 42 {
    when Int {
        say "Int";
        succeed "Found";
        say "never this!";
    }
    when 42 { say 42 }
    default { say "dunno?" }
}
#-&gt; Int</pre>
 <p>If you are not inside a when or default block, it is an error to try to use <span class="code">proceed</span> or <span class="code">succeed</span>. Also remember, the <span class="code">when</span> statement modifier form does not cause any blocks to be left, and any <span class="code">succeed</span> or <span class="code">proceed</span> in such a statement applies to the surrounding clause, if there is one:</p>
 <pre class="code">given 42 {
    { say "This says" } when Int;
    "This says too".say;
    when * &gt; 41 {
       { "And this says".say; proceed } when * &gt; 41;
       "This never says".say;
    }
    "This also says".say;
}</pre>
 <a name="t11.7.3"></a><h2 id="_language_control.pod6-given_as_a_statement">11.7.3 <a name="54"></a>given as a statement</h2>
 <p><span class="code">given</span> can follow a statement to set the topic in the statement it follows.</p>
 <pre class="code">.say given "foo";
# OUTPUT«foo␤»

printf "%s %02i.%02i.%i",
        &amp;lt;Mo Tu We Th Fr Sa Su&gt;[.day-of-week],
        .day,
        .month,
        .year
    given DateTime.now;
# OUTPUT«Sa 03.06.2016»</pre>
 <a name="t11.8"></a><h1 id="_language_control.pod6-loop">11.8 <a name="55"></a>loop</h1>
 <p>The <span class="code">loop</span> statement is the C-style <span class="code">for</span> loop in disguise:</p>
 <pre class="code">loop (my $i = 0; $i &amp;lt; 10; $i++) {
    ...
}</pre>
 <p>As in C, the parentheses are required if you supply the 3-part spec; however, the 3-part loop spec may be entirely omitted to write an infinite loop. That is,</p>
 <pre class="code">loop {...}</pre>
 <p>is equivalent to the C-ish idiom:</p>
 <pre class="code">loop (;;) {...}</pre>
 <p>The <span class="code">loop</span> statement may be used to produce values from the result of each run of the attached block if it appears in lists:</p>
 <pre class="code">(loop ( my $i = 0; $i++ &amp;lt; 3;) { $i * 2 }).say;               #-&gt; "(2 4 6)"
my @a = (loop ( my $i = 0; $i++ &amp;lt; 3;) { $i * 2 }); @a.say;   #-&gt; "[2 4 6]"
my @a = do loop ( my $i = 0; $i++ &amp;lt; 3;) { $i * 2 }); @a.say; # same thing</pre>
 <p>Unlike a <span class="code">for</span> loop, one should not rely on whether returned values are produced lazily, for now. It would probably be best to use <span class="code">eager</span> to guarantee that a loop whose return value may be used actually runs:</p>
 <pre class="code">sub heads-in-a-row {
    (eager loop (; 2.rand &amp;lt; 1;) { "heads".say })
}</pre>
 <a name="t11.9"></a><h1 id="_language_control.pod6-while,_until">11.9 <a name="56"></a>while, until</h1>
 <p>The <span class="code">while</span> statement executes the block as long as its condition is true. So</p>
 <pre class="code">my $x = 1; 
 while $x &amp;lt; 4 { 
 print $x++; 
 } 
 print "\n"; 
 
</pre>
 <p>produces</p>
 <pre class="code">123 
 
</pre>
 <p>Similarly, the <span class="code">until</span> statement executes the block as long as the expression is false.</p>
 <pre class="code">my $x = 1; 
 until $x &gt; 3 { 
 print $x++; 
 } 
 print "\n"; 
 
</pre>
 <p>again produces</p>
 <pre class="code">123 
 
</pre>
 <p>The condition for <span class="code">while</span> or <span class="code">until</span> can be parenthesized, but there must be a space between the keyword and the opening parenthesis of the condition.</p>
 <p>Both <span class="code">while</span> and <span class="code">until</span> can be used as statement modifiers. E. g.</p>
 <pre class="code">$x++ while $x &amp;lt; 12 
 
</pre>
 <p>Also see <span class="code">repeat/while</span> and <span class="code">repeat/until</span> below.</p>
 <p>All these forms may produce a return value the same way <span class="code">loop</span> does.</p>
 <a name="t11.10"></a><h1 id="_language_control.pod6-repeat/while,_repeat/until">11.10 <a name="57"></a>repeat/while, repeat/until</h1>
 <p>Executes the block <i>at least once</i> and, if the condition allows, repeats that execution.</p>
 <pre class="code">repeat {
    # Execute this block. Then, execute it again and again, until $x &gt;= 10
} while $x &amp;lt; 10;

repeat {
    # Execute this block. Then, execute it again and again, while $x &amp;lt; 10
} until $x &gt;= 10;</pre>
 <p>All these forms may produce a return value the same way <span class="code">loop</span> does.</p>
 <a name="t11.11"></a><h1 id="_language_control.pod6-return">11.11 <a name="58"></a>return</h1>
 <p>The routine <span class="code">return</span> will stop execution of a subroutine or method, run all relevant <a href="#_language_phasers.pod6-Block_Phasers">phasers</a> and provide the given return value to the caller. The default return value is <span class="code">Nil</span>. If a return <a href="#_type_Signature.pod6-Constraining_Return_Types">type constraint</a> is provided it will be checked unless the return value is <span class="code">Nil</span>. A control exception is raised and can be caught with <a href="#_language_phasers.pod6-CONTROL">CONTROL</a>.</p>
 TODO add link to section in /language/function that shows how return values are produces/handled
 <a name="t11.12"></a><h1 id="_language_control.pod6-return-rw">11.12 <a name="59"></a>return-rw</h1>
 <p>The routine <span class="code">return</span> will return values, not containers. Those are immutable and will lead to runtime errors when attempted to be mutated.</p>
 <pre class="code">sub s(){ my $a = 41; return $a };
say ++s();
CATCH { dd $_ };
# OUTPUT«X::Multi::NoMatch.new(dispatcher …</pre>
 <p>To return a mutable container, use <span class="code">return-rw</span>.</p>
 <pre class="code">sub s(){ my $a = 41; return-rw $a };
say ++s();
# OUTPUT«42␤»</pre>
 <p>The same rules as for <span class="code">return</span> reguarding phasers and control exceptions apply.</p>
 <a name="t11.13"></a><h1 id="_language_control.pod6-fail">11.13 <a name="60"></a>fail</h1>
 <p>Leaves the current routine and returns the provided <a href="#_type_Exception.pod6">Exception</a> or <span class="code">Str</span> wrapped inside a <a href="#_type_Failure.pod6">Failure</a>, after all relevant <a href="#_language_phasers.pod6-Block_Phasers">phasers</a> are executed.</p>
 <pre class="code">sub f { fail "WELP!" };
dd f;
# OUTPUT«Failure.new(exception =&gt; X::AdHoc.new(payload =&gt; "wut?"),
# backtrace =&gt; Backtrace.new)␤»</pre>
 <a name="t11.14"></a><h1 id="_language_control.pod6-once">11.14 <a name="61"></a>once</h1>
 <p>A block prefix with <span class="code">once</span> will be executed exactly once, even if placed inside a loop or a recursive routine.</p>
 <pre class="code">my $guard = 3;
loop {
    last if $guard-- &amp;lt;= 0;
    once { put 'once' };
    print 'many'
} # OUTPUT«once␤manymanymany»</pre>
 <p>This works per "clone" of the containing code object, so:</p>
 <pre class="code">({ once 42.say } xx 3).map: {$_(), $_()}; # says 42 thrice</pre>
 <p>Note that this is <b>not</b> a thread-safe construct when the same clone of the same block is run by multiple threads. Also remember that methods only have one clone per class, not per object.</p>
 <a name="t11.15"></a><h1 id="_language_control.pod6-quietly">11.15 <a name="62"></a>quietly</h1>
 <p>A <span class="code">quietly</span> block will suppress warnings.</p>
 <pre class="code">quietly { warn 'kaput!' };
warn 'still kaput!';
OUTPUT«still kaput! [...]␤»</pre>
 <a name="t11.16"></a><h1 id="_language_control.pod6-LABELs">11.16 LABELs</h1>
 <p><span class="code">while</span>, <span class="code">until</span>, and <span class="code">for</span> loops can all take a label, which can be used to identify them for <span class="code">next</span>, <span class="code">last</span>, and <span class="code">redo</span>. Nested loops are supported, for instance:</p>
 <pre class="code">OUTAHERE: while True {
    for lines() -&gt; $line {
        last OUTAHERE if $line ~~ /^$/;
    }
}</pre>
 <a name="t11.17"></a><h1 id="_language_control.pod6-next">11.17 <a name="63"></a>next</h1>
 <p>The <span class="code">next</span> command starts the next iteration of the loop. So the code</p>
 <pre class="code">my @x = 1, 2, 3, 4, 5; 
 for @x -&gt; $x { 
     next if $x == 3; 
     print $x; 
 } 
 
</pre>
 <p>prints "1245".</p>
 <a name="t11.18"></a><h1 id="_language_control.pod6-last">11.18 <a name="64"></a>last</h1>
 <p>The <span class="code">last</span> command immediately exits the loop in question.</p>
 <pre class="code">my @x = 1, 2, 3, 4, 5; 
 for @x -&gt; $x { 
     last if $x == 3; 
     print $x; 
 } 
 
</pre>
 <p>prints "12".</p>
 <a name="t11.19"></a><h1 id="_language_control.pod6-redo">11.19 <a name="65"></a>redo</h1>
 <p>The <span class="code">redo</span> command restarts the loop block without evaluating the conditional again.</p>
 <pre class="code">{ 
     my $x = prompt("Enter a number"); 
     redo unless is_a_number($x) 
 } 
 
</pre>
 <a name="t11.20"></a><h1 id="_language_control.pod6-samewith">11.20 <a name="66"></a>samewith</h1>
 <p>The <span class="code">samewith</span> allows one to call a multisub of the same name as the current sub.</p>
 <pre class="code">multi indent-say ( 'test' ) 
 { 
     samewith 'ABCD'; 
 } 
 
 multi indent-say ( Str $string ) 
 { 
     say "\t$string"; 
 } 
 
</pre>
</div> <!-- /language/exceptions.pod6 --><div class="pod-body"><a id="_language_exceptions.pod6"></a><a name="t12"><h1 class="title">12 Exceptions</h1></a> <p class="subtitle">Using exceptions in Perl 6</p> <p>Exceptions in Perl 6 are a special kind of object used to signify when something has gone wrong, for instance, unexpected data was received, a network connection is no longer available, or a file is missing which was expected to exist.</p>
 <p>All built-in exceptions inherit from <a href="#_type_Exception.pod6">Exception</a>, which provides some basic behavior, such as storing a backtrace and providing an interface for the backtrace printer.</p>
 <a name="t12.1"></a><h1 id="_language_exceptions.pod6-Ad-hoc_exceptions">12.1 Ad-hoc exceptions</h1>
 <p>Ad-hoc exceptions work just like in traditional Perl 5, one can simply use <span class="code">die</span> with a message as to what went wrong:</p>
 <pre class="code">die "oops, something went wrong";
#!&gt; oops, something went wrong in block &amp;lt;unit&gt; at /tmp/0IeSX_XSWO:1</pre>
 <a name="t12.2"></a><h1 id="_language_exceptions.pod6-Typed_exceptions">12.2 Typed exceptions</h1>
 <p>Typed exceptions provide more information about the kind of error that occurred within the exception object itself. For instance, if while executing <span class="code">.zombie copy</span> on an object the path <span class="code">foo/bar</span> is unavailable (and was expected to be available), then one could raise an <a href="#_type_X::IO::DoesNotExist.pod6">X::IO::DoesNotExist</a> exception like so:</p>
 <pre class="code">die X::IO::DoesNotExist.new(:path("foo/bar"), :trying("zombie copy"))
#!&gt; Failed to find 'foo/bar' while trying to do '.zombie copy'
#!&gt; in block &amp;lt;unit&gt; at /tmp/BgTfZOotgc:1</pre>
 <p>Note how the object has provided the backtrace with information about what went wrong so that hopefully the user of the code can find and correct the issue more easily.</p>
 <a name="t12.3"></a><h1 id="_language_exceptions.pod6-Catching_exceptions">12.3 Catching exceptions</h1>
 <p>It is possible to handle exceptional circumstances by supplying a <span class="code">CATCH</span> block:</p>
 <pre class="code">die X::IO::DoesNotExist.new(:path("foo/bar"), :trying("zombie copy"));
CATCH {
    when X::IO { say "some kind of IO exception was caught!" }
}
#!&gt; some kind of IO exception was caught!</pre>
 <p>Here, we are saying that if any exception of type <span class="code">X::IO</span> occurs, then the message <span class="code">some kind of IO exception was caught!</span> will be displayed.</p>
 <p>A <span class="indexed"><a id="42" name="CATCH"> <span class="code">CATCH</span> </a></span> block uses smart matching similarly to how <span class="code">given/when</span> smart matches on options, thus it is possible to catch various categories of exceptions and handle them appropriately inside a <span class="code">when</span> block.</p>
 <p>To handle all exceptions use a <span class="code">default</span> statement.</p>
 <pre class="code">CATCH {
     default {
         say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }
     }
}</pre>
 <a name="t12.4"></a><h1 id="_language_exceptions.pod6-try_blocks">12.4 <a name="43"></a> <span class="code">try</span>  blocks</h1>
 <p>To contain an exception use a <span class="code">try</span> block. Any exception that is thrown in such a block will be caught by the implicit <span class="code">CATCH</span> block or a <span class="code">CATCH</span> block provided by the user. In the latter case, any exception not handled will be rethrown.</p>
 <pre class="code">class E is Exception { method message() { "Just stop already!" } }

try {
    E.throw.new; # this will be local

    say "This won't be said.";
}

say "I'm alive!";

try {
    CATCH {
        when X::AdHoc { .Str.say; .resume }
    }

    die "No, I expect you to DIE Mr. Bond!";

    say "I'm immortal.";

    E.new.throw;

    say "No, you don't!";
}</pre>
 <p>Output:</p>
 <pre class="code">I'm alive!
No, I expect you to DIE Mr. Bond!
I'm immortal.
Just stop already!
  in block &amp;lt;unit&gt; at exception.p6 line 21</pre>
 <p>A <span class="code">try</span>-block is a normal block and as such treats it's last statement as the return value of itself. We can therefore use it as a RHS.</p>
 <pre class="code">say try { +"99999" } // "oh no"
say try { +"hello" } // "oh no"
# OUTPUT«99999␤oh no␤»</pre>
 <a name="t12.5"></a><h1 id="_language_exceptions.pod6-Throwing_exceptions">12.5 Throwing exceptions</h1>
 <p>One can also explicitly throw exceptions via the <span class="code">.throw</span> method on an <span class="code">Exception</span> object.</p>
 <p>This example throws an <span class="code">AdHoc</span> exception, catches it and allows the code to continue from the point of the exception by calling the <span class="code">.resume</span> method.</p>
 <pre class="code">{
    X::AdHoc.new(:payload&amp;lt;foo&gt;).throw;
    "OHAI".say;
    CATCH {
        when X::AdHoc { .resume }
    }
}
"OBAI".say;
#-&gt; OHAI
#-&gt; OBAI</pre>
 <p>If the <span class="code">CATCH</span> block doesn't match the exception thrown, then the exception's payload is passed on to the backtrace printing mechanism.</p>
 <pre class="code">{
    X::AdHoc.new(:payload&amp;lt;foo&gt;).throw;
    "OHAI".say;
    CATCH {  }
}
"OBAI".say;
#!&gt; foo
#!&gt; in block &amp;lt;unit&gt; at /tmp/FbtB60dxVO:1</pre>
 <p>This example doesn't resume from the point of the exception, however it continues after the enclosing block, since the exception was caught, and control continues after the <span class="code">CATCH</span> block.</p>
 <pre class="code">{
    X::AdHoc.new(:payload&amp;lt;foo&gt;).throw;
    "OHAI".say;
    CATCH {
        when X::AdHoc { }
    }
}
"OBAI".say;
#-&gt; OBAI</pre>
 <p><span class="code">throw</span> can be viewed as the method form of <span class="code">die</span>, just that in this particular case, the sub and method forms of the routine have different names.</p>
 <a name="t12.6"></a><h1 id="_language_exceptions.pod6-Resuming_of_Exceptions">12.6 Resuming of Exceptions</h1>
 <p>Exceptions interrupt control flow and divert it away from the statement following the statement that threw it. Any exception handled by the user can be resumed and control flow will continue with the statement following the statement that threw the exception. To do so call the method <span class="code">.resume</span> on the exception object.</p>
 <pre class="code">CATCH { when X::AdHoc { .resume } } # this is step 2

die "We leave control after this."; # this is step 1

say "We have continued with control flow."; # this is step 3</pre>
 <a name="t12.7"></a><h1 id="_language_exceptions.pod6-Uncaught_Exceptions">12.7 Uncaught Exceptions</h1>
 <p>If an exception is thrown and not caught, it causes the program to exit with a non-zero status code, and typically prints a message to the standard error stream of the program. This message is obtained by calling the <span class="code">gist</span> method on the exception object. You can use this to suppress the default behavior of printing a backtrace along with the message:</p>
 <pre class="code">class X::WithoutLineNumber is X::AdHoc {
    multi method gist(X::WithoutLineNumber:D:) {
            $.payload
    }
}
die X::WithoutLineNumber.new(payload =&gt; "message")
    # prints "message\n" to $*ERR and exits, no backtrace</pre>
</div> <!-- /language/faq.pod6 --><div class="pod-body"><a id="_language_faq.pod6"></a><a name="t13"><h1 class="title">13 FAQ</h1></a> <p class="subtitle">Frequently Asked Questions about Perl 6</p> <a name="t13.1"></a><h1 id="_language_faq.pod6-General">13.1 General</h1>
 <a name="t13.1.1"></a><h2 id="_language_faq.pod6-What's_the_difference_between_Rakudo_and_Perl_6?">13.1.1 What's the difference between Rakudo and Perl 6?</h2>
 <p><a href="http://rakudo.org/">Rakudo</a> is an implementation of Perl 6. It's currently the most developed, but there have been other implementations in the past and should be others in the future. Perl 6 is the definition of the language. Many times the two names will be used loosely and interchangeably.</p>
 <a name="t13.1.2"></a><h2 id="_language_faq.pod6-Is_there_going_to_be_a_Perl_6_version_6.0.0?">13.1.2 Is there going to be a Perl 6 version 6.0.0?</h2>
 <p>The version of the first stable language version is called v6.c, not 6.0.0. The different naming scheme makes it unlikely that there'll ever be a release of the language with the exact version 6.0.0.</p>
 <p>It was first implemented by the Rakudo Perl 6 compiler version 2015.12 and is likely to be supported by subsequent releases for the foreseeable future by use of the 'use 6.c' pragma..</p>
 <a name="t13.1.3"></a><h2 id="_language_faq.pod6-As_a_Perl_6_beginner_what_should_I_install?">13.1.3 As a Perl 6 beginner what should I install?</h2>
 <p>Linux or Mac users probably want to download Rakudo Star and install via compilation (a simple process) the MoarVM based version available from <a href="http://rakudo.org/downloads/star/">http://rakudo.org/downloads/star/</a>.</p>
 <p>Compilation needs a C compiler and Perl 5 installed.</p>
 <p>Or there is an official rakudo star docker image at <a href="https://hub.docker.com/_/rakudo-star/">https://hub.docker.com/_/rakudo-star/</a></p>
 <p>If you are a Windows 32 or 64 bit user then Rakudo Star binaries are also available at the rakudo site. You will need Windows Git to use panda.</p>
 <p>To use panda (see below) to install library modules you will need git and Perl 5's Test::Harness.</p>
 <p>There should be Linux and Mac binaries available shortly from vendors and third parties. Although vendor versions may be outdated.</p>
 <a name="t13.1.4"></a><h2 id="_language_faq.pod6-As_an_intermediate_to_advanced_user_I_want_to_track_Rakudo_development.">13.1.4 As an intermediate to advanced user I want to track Rakudo development.</h2>
 <p>Install <a href="https://github.com/tadzik/rakudobrew">rakudobrew</a> which resembles Perl 5's perlbrew and the equivalent Python and Ruby tools.</p>
 <a name="t13.1.5"></a><h2 id="_language_faq.pod6-Where_can_I_find_good_documentation_on_Perl_6?">13.1.5 Where can I find good documentation on Perl 6?</h2>
 <p>The most reliable information is to be found either under the perl6.org domains or directly linked from it.</p>
 <p><a href="https://www.perl6.org/documentation/">https://www.perl6.org/documentation/</a> with <a href="https://docs.perl6.org/">https://docs.perl6.org/</a> as the canonical technical reference.</p>
 <p>There is much good recent material on YouTube but be careful to check any dates on webpages since much of the Perl 6 information on random websites found by Google is often outdated.</p>
 <p>You could also try searching the Freenode #perl6 IRC channel log via <a href="https://www.google.co.uk/search?q=site:irclog.perlgeek.de+inurl:perl6">Google</a></p>
 <a name="t13.1.6"></a><h2 id="_language_faq.pod6-What_is_the_Perl_6_spec?">13.1.6 What is the Perl 6 spec?</h2>
 <p>The "spec" refers to the official test suite for Perl 6. It's called roast and <a href="https://github.com/perl6/roast">hosted on github</a>. It is the measure of how complete a Perl 6 implementation is.</p>
 <a name="t13.1.7"></a><h2 id="_language_faq.pod6-Is_there_a_glossary_of_Perl_6_related_terms?">13.1.7 Is there a glossary of Perl 6 related terms?</h2>
 <p>Yes, see <a href="#_language_glossary.pod6">glossary</a>.</p>
 <a name="t13.1.8"></a><h2 id="_language_faq.pod6-I'm_a_Perl_5_programmer._Where_is_a_list_of_differences_between_Perl_5_and_6?">13.1.8 I'm a Perl 5 programmer. Where is a list of differences between Perl 5 and 6?</h2>
 <p>See the pod with the 5to6- prefix under <a href="https://docs.perl6.org/language.html">https://docs.perl6.org/language.html</a></p>
 <a name="t13.2"></a><h1 id="_language_faq.pod6-Modules">13.2 Modules</h1>
 <a name="t13.2.1"></a><h2 id="_language_faq.pod6-Is_there_a_CPAN_for_Perl_6?">13.2.1 Is there a CPAN for Perl 6?</h2>
 <p>There isn't yet a module repository for Perl 6 as sophisticated as CPAN. But <a href="https://modules.perl6.org/">modules.perl6.org</a> has a list of known Perl 6 modules called the "ecosystem" hosted on github, and <a href="https://github.com/tadzik/panda/">panda</a> can install those that work with <a href="http://rakudo.org/">rakudo</a>.</p>
 <p>Support for installing Perl 6 modules from the Perl 5 CPAN is on its way.</p>
 <a name="t13.2.2"></a><h2 id="_language_faq.pod6-Can_I_use_Perl_5_modules_from_Perl_6?">13.2.2 Can I use Perl 5 modules from Perl 6?</h2>
 <p>Yes, with <a href="https://github.com/niner/Inline-Perl5/">Inline::Perl5</a>, which works well with most Perl 5 modules. It can even run Perl 5 Catalyst and DBI.</p>
 <a name="t13.2.3"></a><h2 id="_language_faq.pod6-Can_I_use_C_and_C++_from_Perl_6?">13.2.3 Can I use C and C++ from Perl 6?</h2>
 <p><a href="https://docs.perl6.org/language/nativecall">Nativecall</a> makes this particularly easy.</p>
 <a name="t13.2.4"></a><h2 id="_language_faq.pod6-Nativecall_can't_find_libfoo.so_and_I_only_have_libfoo.so.1.2!">13.2.4 Nativecall can't find libfoo.so and I only have libfoo.so.1.2!</h2>
 <p>This is commonly seen on Debian-like systems. You need to install "libfoo-dev" to set a sym link for the missing file.</p>
 <a name="t13.2.5"></a><h2 id="_language_faq.pod6-Where_have_all_the_traditional_UNIX_library_functions_gone?">13.2.5 Where have all the traditional UNIX library functions gone?</h2>
 <p>It's very easy to use Nativecall to access them.</p>
 <p>A ecosystem module <a href="https://github.com/cspencer/perl6-posix">POSIX</a> is also available.</p>
 <a name="t13.2.6"></a><h2 id="_language_faq.pod6-Does_Rakudo_have_a_core_standard_library?">13.2.6 Does Rakudo have a core standard library?</h2>
 <p>Rakudo is a compiler release with minimal batteries included (Test and Nativecall etc.) rather like the linux kernel itself.</p>
 <p>Rakudo Star is a distribution of rakudo which ships with some useful modules and many more can be installed from the ecosystem.</p>
 <a name="t13.2.7"></a><h2 id="_language_faq.pod6-Is_there_something_like_B::Deparse/how_can_I_get_hold_of_the_AST?">13.2.7 Is there something like B::Deparse/how can I get hold of the AST?</h2>
 <p>Use <span class="code">perl6 --target=ast -e 'very-short-example()'</span> to get hold of the AST of a compilation unit.</p>
 <a name="t13.3"></a><h1 id="_language_faq.pod6-Language_Features">13.3 Language Features</h1>
 <a name="t13.3.1"></a><h2 id="_language_faq.pod6-How_can_I_dump_Perl_6_data_structures_(like_Perl_5_Data::Dumper_and_similar)?">13.3.1 How can I dump Perl 6 data structures (like Perl 5 Data::Dumper and similar)?</h2>
 <p>Examples:</p>
 <pre class="code">my $foo="bar"
dd $foo # Str $foo = "bar"
say :$foo.perl # :foo("bar")
say :$foo.gist # foo =&gt; bar</pre>
 <p>There are also modules in the ecosystem to do this, like <a href="https://github.com/tony-o/perl6-data-dump/">Data::Dump</a>, which uses color.</p>
 <a name="t13.3.2"></a><h2 id="_language_faq.pod6-How_can_I_get_command_line_history_in_the_Perl_6_prompt_(REPL)?">13.3.2 How can I get command line history in the Perl 6 prompt (REPL)?</h2>
 <p>Install <a href="https://github.com/hoelzro/p6-linenoise/">Linenoise</a> from the ecosystem.</p>
 <p>An alternative on UNIX like systems is to install rlwrap. This can be done on Debian-ish systems by "apt-get install rlwrap".</p>
 <a name="t13.3.3"></a><h2 id="_language_faq.pod6-Why_is_the_Rakudo_compiler_sometimes_more_apologetic?">13.3.3 Why is the Rakudo compiler sometimes more apologetic?</h2>
 <p>If SORRY! is present in the output the error is a compile time error otherwise it's runtime.</p>
 <p>Example:</p>
 <pre class="code">say 1/0 # Attempt to divide 1 by zero using div

sub foo( Int $a, Int $b ) {...}
foo(1) # ===SORRY!=== Error while compiling ...</pre>
 <a name="t13.3.4"></a><h2 id="_language_faq.pod6-What_is_(Any)?">13.3.4 What is <span class="code">(Any)</span>?</h2>
 <p><a href="#_type_Any.pod6">Any</a> is a top level class used as a default superclass for new classes. It is often seen in a context where a variable has been defined but not assigned where it loosely resembles the undef or null values in other languages.</p>
 <p>Example:</p>
 <pre class="code">my $foo
say $foo # (Any) note the parens indicate type object
say $foo.^name # Any</pre>
 <p>(Any) shouldn't be used to check for definedness. In Perl 6, definedness is a property of an object. Usually instances are defined and type objects are undefined.</p>
 <pre class="code">say 1.defined # True
say (Any).defined # False</pre>
 <a name="t13.3.5"></a><h2 id="_language_faq.pod6-What_is_so?">13.3.5 What is <span class="code">so</span>?</h2>
 <p><span class="code">so</span> is a loose precedence operator that coerces to <a href="#_type_Bool.pod6">Bool</a>.</p>
 <p>It has the same semantics as the <span class="code">?</span> prefix operator, just like <span class="code">and</span> is the low-precedence version of <span class="code">&amp;&amp;</span>.</p>
 <p>Example usage:</p>
 <pre class="code">say so 1|2 == 2;    # Bool::True</pre>
 <p>In this example, the result of the comparison (which is a <a href="#_type_Junction.pod6">Junction</a>), is converted to Bool before being printed.</p>
 <a name="t13.3.6"></a><h2 id="_language_faq.pod6-What_are_those_:D_and_:U_things_in_signatures?">13.3.6 What are those <span class="code">:D</span> and <span class="code">:U</span> things in signatures?</h2>
 <p>In Perl 6, classes and other types are objects, and pass type checks of their own type.</p>
 <p>For example if you declare a variable</p>
 <pre class="code">my Int $x = 42;</pre>
 <p>then not only can you assign integers (that is, instances of class Int) to it, but the <span class="code">Int</span> type object itself:</p>
 <pre class="code">$x = Int</pre>
 <p>If you want to exclude type objects, you can append the <span class="code">:D</span> type smiley, which stands for "definite":</p>
 <pre class="code">my Int:D $x = 42;
$x = Int;   # dies with:
            # Type check failed in assignment to $x;
            # expected Int:D but got Int</pre>
 <p>Likewise <span class="code">:U</span> constrains to undefined values, that is, type objects.</p>
 <p>To explicitly allow either type objects or instances, you can use <span class="code">:_</span>.</p>
 <a name="t13.3.7"></a><h2 id="_language_faq.pod6-What_is_the_-->__thing_in_the_signature?">13.3.7 What is the <span class="code">--> </span> thing in the signature?</h2>
 <p><span class="code">--> </span> is a return constraint, either a type or a definite value.</p>
 <p>Example of a type constraint:</p>
 <pre class="code">sub divide-to-int( Int $a, Int $b --&gt; Int ) {
        return ($a / $b).narrow;
}

divide-to-int(3, 2)
# Type check failed for return value; expected Int but got Rat</pre>
 <p>Example of a definite return value:</p>
 <pre class="code">sub discard-random-number( --&gt; 42 ) { rand }
say discard-random-number
# 42</pre>
 <p>In this case the final value is thrown away because the return value is already specified.</p>
 <a name="t13.3.8"></a><h2 id="_language_faq.pod6-How_can_I_extract_the_values_from_a_Junction?">13.3.8 How can I extract the values from a Junction?</h2>
 <p>If you want to extract the values (eigenstates) from a <a href="#_type_Junction.pod6">Junction</a>, you are probably doing something wrong, and should be using a <a href="#_type_Set.pod6">Set</a> instead.</p>
 <p>Junctions are meant as matchers, not for doing algebra with them.</p>
 <p>If you want to do it anyway, you can abuse autothreading for that:</p>
 <pre class="code">sub eigenstates(Mu $j) {
    my @states;
    -&gt; Any $s { @states.push: $s }.($j);
    @states;
}

say eigenstates(1|2|3).join(', ');
# prints 1, 2, 3 or a permutation thereof</pre>
 <a name="t13.3.9"></a><h2 id="_language_faq.pod6-If_Str_is_immutable,_how_does_s///_work?_if_Int_is_immutable,_how_does_$i++_work?">13.3.9 If Str is immutable, how does <span class="code">s///</span> work? if Int is immutable, how does <span class="code">$i++</span> work?</h2>
 <p>In Perl 6, values of many basic types are immutable, but the variables holding them are not. The <span class="code">s///</span> operator works on a variable, into which it puts a newly created string object. Likewise <span class="code">$i++</span> works on the <span class="code">$i</span> variable, not just on the value in it.</p>
 <p>See the documentation on <a href="#_language_containers.pod6">containers</a> for more information.</p>
 <a name="t13.3.10"></a><h2 id="_language_faq.pod6-What's_up_with_array_references_and_automatic_dereferencing?_Do_I_still_need_the_@_sigil?">13.3.10 What's up with array references and automatic dereferencing? Do I still need the <span class="code">@</span> sigil?</h2>
 <p>In Perl 6, nearly everything is a reference, so talking about taking references doesn't make much sense. Unlike Perl 5, scalar variables can also contain arrays directly:</p>
 <pre class="code">my @a = 1, 2, 3;
say @a;                 # "1 2 3\n"
say @a.WHAT;            # (Array)

my $scalar = @a;
say $scalar;            # "1 2 3\n"
say $scalar.WHAT;       # (Array)</pre>
 <p>The big difference is that arrays inside a scalar act as one value in list context, whereas arrays will be happily iterated over.</p>
 <pre class="code">my @a = 1, 2, 3;
my $s = @a;

for @a { ... }          # loop body executed 3 times
for $s { ... }          # loop body executed only once

my @flat = flat @a, @a;
say @flat.elems;        # 6

my @nested = flat $s, $s;
say @nested.elems;      # 2</pre>
 <p>You can force flattening with <span class="code">@( ... )</span> or by calling the <span class="code">.list</span> method on an expression, and item context (not flattening) with <span class="code">$( ... )</span> or by calling the <span class="code">.item</span> method on an expression.</p>
 <a name="t13.3.11"></a><h2 id="_language_faq.pod6-Why_sigils?_Couldn't_you_do_without_them?">13.3.11 Why sigils? Couldn't you do without them?</h2>
 <p>There are several reasons:</p>
 <ul><li><p>they make it easy to interpolate variables into strings</p>
</li></ul> <ul><li><p>they form micro-namespaces for different variables and twigils, thus avoiding name clashes</p>
</li></ul> <ul><li><p>they allow easy single/plural distinction</p>
</li></ul> <ul><li><p>they work like natural languages that use mandatory noun markers, so our brains are built to handle it</p>
</li></ul> <ul><li><p>they aren't mandatory, since you can declare sigilless names (if you don't mind the ambiguity)</p>
</li></ul> <a name="t13.3.12"></a><h2 id="_language_faq.pod6-&quot;Type_Str_does_not_support_associative_indexing.&quot;">13.3.12 "Type Str does not support associative indexing."</h2>
 <p>You likely tried to mix string interpolation and HTML.</p>
 <pre class="code">my $foo = "abc";
say "$foo&amp;lt;html-tag&gt;";</pre>
 <p>Perl 6 thinks <span class="code">$foo</span> to be a Hash and <span class="code">&lt;html-tag></span> to be a string literal hash key. Use a closure to help it to understand you.</p>
 <pre class="code">my $foo = "abc";
say "{$foo}&amp;lt;html-tag&gt;";</pre>
 <a name="t13.3.13"></a><h2 id="_language_faq.pod6-Does_Perl_6_have_coroutines?_What_about_yield?">13.3.13 Does Perl 6 have coroutines? What about <span class="code">yield</span>?</h2>
 <p>Perl 6 has no <span class="code">yield</span> statement like python does, but it does offer similar functionality through lazy lists. There are two popular ways to write routines that return lazy lists:</p>
 <pre class="code"># first method, gather/take
my @values = gather while have_data() {
    # do some computations
    take some_data();
    # do more computations
}

# second method, use .map or similar method
# on a lazy list
my @squares = (1..*).map(-&gt; \x { x² });</pre>
 <a name="t13.3.14"></a><h2 id="_language_faq.pod6-Why_can't_I_initialize_private_attributes_from_the_new_method,_and_how_can_I_fix_this?">13.3.14 Why can't I initialize private attributes from the new method, and how can I fix this?</h2>
 <p>Code like</p>
 <pre class="code">class A {
    has $!x;
    method show-x {
        say $!x;
    }
}
A.new(x =&gt; 5).show-x;</pre>
 <p>does not print 5. Private attributes are <i>private</i>, which means invisible to the outside. If the default constructor could initialize them, they would leak into the public API.</p>
 <p>If you still want it to work, you can add a <span class="code">submethod BUILD</span> that initializes them:</p>
 <pre class="code">class B {
    has $!x;
    submethod BUILD(:$!x) { }
    method show-x {
        say $!x;
    }
}
A.new(x =&gt; 5).show-x;</pre>
 <p><span class="code">BUILD</span> is called by the default constructor (indirectly, see <a href="#_language_objects.pod6-Object_Construction">Object Construction</a> for more details) with all the named arguments that the user passes to the constructor. <span class="code">:$!x</span> is a named parameter with name <span class="code">x</span>, and when called with a named argument of name <span class="code">x</span>, its value is bound to the attribute <span class="code">$!x</span>.</p>
 <p>But don't do that. If the name is public, there is no downside to declaring it that way with <span class="code">$.x</span> since the external view is readonly by default, and you can still access it internally with <span class="code">$!x</span>.</p>
 <a name="t13.3.15"></a><h2 id="_language_faq.pod6-How_and_why_do_say,_put_and_print_differ?">13.3.15 How and why do <span class="code">say</span>, <span class="code">put</span> and <span class="code">print</span> differ?</h2>
 <p>The most obvious difference is that <span class="code">say</span> and <span class="code">put</span> append a newline at the end of the output, and <span class="code">print</span> does not.</p>
 <p>But there is another difference: <span class="code">print</span> and <span class="code">put</span> converts its arguments to a string by calling the <span class="code">Str</span> method on each item passed to, <span class="code">say</span> uses the <span class="code">gist</span> method instead. The former is meant for computers, the latter for human interpretation.</p>
 <p>Or phrased differently, <span class="code">$obj.Str</span> gives a string representation, <span class="code">$obj.gist</span> a short summary of that object suitable for fast recognition by the programmer, and <span class="code">$obj.perl</span> gives a Perlish representation.</p>
 <p>Example: type objects, also known as "undefined values", stringify to an empty string and warn, whereas the <span class="code">gist</span> method returns the name of the type, followed by an empty pair of parenthesis (to indicate there's nothing in that value except the type).</p>
 <pre class="code">my Date $x;     # $x now contains the Date type object
print $x;       # empty string plus warning
say $x;         # (Date)\n</pre>
 <p>So <span class="code">say</span> is optimized for debugging and display to people, <span class="code">print</span> and <span class="code">put</span> is more suitable for producing output for other programs to consume.</p>
 <p><span class="code">put</span> is thus sort of a hybrid between <span class="code">print</span> and <span class="code">say</span>; like <span class="code">print</span>, its output is suitable for other programs, and like <span class="code">say</span>, it adds a newline at the end of the output.</p>
 <a name="t13.3.16"></a><h2 id="_language_faq.pod6-What's_the_difference_between_token_and_rule_?">13.3.16 What's the difference between <span class="code">token</span> and <span class="code">rule</span> ?</h2>
 <p><span class="code">regex</span>, <span class="code">token</span> and <span class="code">rule</span> all three introduce regexes, but with slightly different semantics.</p>
 <p><span class="code">token</span> implies the <span class="code">:ratchet</span> or <span class="code">:r</span> modifier, which prevents the rule from backtracking.</p>
 <p><span class="code">rule</span> implies both the <span class="code">:ratchet</span> and <span class="code">:sigspace</span> (short <span class="code">:s</span>) modifier, which means a rule doesn't backtrace, and it treats whitespace in the text of the regex as <span class="code">&lt;.ws></span> calls (ie matches whitespace, which is optional except between two word characters). Whitespace at the start of the regex and at the start of each branch of an alternation is ignored.</p>
 <p><span class="code">regex</span> declares a plain regex without any implied modifiers.</p>
 <a name="t13.3.17"></a><h2 id="_language_faq.pod6-What's_the_difference_between_die_and_fail?">13.3.17 What's the difference between <span class="code">die</span> and <span class="code">fail</span>?</h2>
 <p><span class="code">die</span> throws an exception.</p>
 <p><span class="code">fail</span> returns a <span class="code">Failure</span> object. (If the caller has declared <span class="code">use fatal;</span> in the calling lexical scope, <span class="code">fail</span> throws an exception instead of returning.)</p>
 <p>A <span class="code">Failure</span> is an "unthrown" or "lazy" exception. It is an object that contains the exception, and throws the exception if you try to use the <span class="code">Failure</span> as an ordinary object, or ignore it in sink context.</p>
 <p>A <span class="code">Failure</span> returns <span class="code">False</span> from a <span class="code">defined</span> check, and you can extract the exception with the <span class="code">exception</span> method.</p>
 <a name="t13.3.18"></a><h2 id="_language_faq.pod6-Why_is_wantarray_or_want_gone?_Can_I_return_different_things_in_different_contexts?">13.3.18 Why is <span class="code">wantarray</span> or <span class="code">want</span> gone? Can I return different things in different contexts?</h2>
 <p>Perl 5 has the <a href="#_language_5to6-perlfunc.pod6-wantarray"> <span class="code">wantarray</span> </a> function that tells you whether it is called in void, scalar or list context. Perl 6 has no equivalent construct, because context does not flow inwards, i.e. a routine would need time travel to know which context it is called in because context is lazy, known only when the results are used later.</p>
 <p>For example, Perl 6 has multiple dispatch, so in a code example like</p>
 <pre class="code">multi w(Int $x) { say 'Int' }
multi w(Str $x) { say 'Str' }
w(f());</pre>
 <p>there is no way to determine if the caller of sub <span class="code">f</span> wants a string or an integer, because it is not yet known what the caller is. In general this requires solving the halting problem, which even Perl 6 compiler writers have trouble with.</p>
 <p>One way to achieve context sensitivity in Perl 6 is to return an object that knows how to respond to method calls that are typical for a context. In Perl 6 this is actually a <a href="#_language_5to6-perlfunc.pod6-wantarray">lot easier</a> than it may sound, and other features of the language either mitigate the need to do so in the first place, or make it possible to cover most of the use cases of wantarray.</p>
 <p>For example regex matches return <a href="#_type_Match.pod6">Match objects that know how to respond to list indexing, hash indexing, and that can turn into the matched string</a>.</p>
 <a name="t13.3.19"></a><h2 id="_language_faq.pod6-What's_the_difference_between_Pointer_and_OpaquePointer?">13.3.19 What's the difference between <span class="code">Pointer</span> and <span class="code">OpaquePointer</span>?</h2>
 <p><span class="code">OpaquePointer</span> is deprecated and has been replaced with <span class="code">Pointer</span>.</p>
 <a name="t13.4"></a><h1 id="_language_faq.pod6-Perl_6_Implementation">13.4 Perl 6 Implementation</h1>
 <a name="t13.4.1"></a><h2 id="_language_faq.pod6-What_Perl_6_Implementations_are_available?">13.4.1 What Perl 6 Implementations are available?</h2>
 <p>Currently the best developed is Rakudo (using multiple Virtual Machine backends). Historic implementations include Niecza (.NET) and Pugs (Haskell). Others are listed at <a href="https://www.perl6.org/compilers/">Perl 6 Compilers</a></p>
 <a name="t13.4.2"></a><h2 id="_language_faq.pod6-What_language_is_Rakudo_written_in?">13.4.2 What language is Rakudo written in?</h2>
 <p>A short answer is that Rakudo is written almost entirely in Perl 6. A more detailed answer is that Rakudo is written in a mixture of Perl 6 and NQP ("Not Quite Perl"). NQP is a lightweight Perl 6-like environment for virtual machines; it's designed to be a high-level way to create compilers and libraries for virtual machines (such as MoarVM and JVM) using Perl 6 syntax.</p>
 <a name="t13.4.3"></a><h2 id="_language_faq.pod6-What_language_is_NQP_written_in?">13.4.3 What language is NQP written in?</h2>
 <p>NQP is a mixture of (1) NQP code, (2) whatever language the underlying virtual machine is using, (3) some third-party C and Java libraries, and (4) some bootstrapping files created by earlier runs of the build process.</p>
 <a name="t13.5"></a><h1 id="_language_faq.pod6-Meta_Questions_and_Advocacy">13.5 Meta Questions and Advocacy</h1>
 <a name="t13.5.1"></a><h2 id="_language_faq.pod6-When_will_Perl_6_be_ready?_Is_it_ready_now?">13.5.1 When will Perl 6 be ready? Is it ready now?</h2>
 <p>Readiness of programming languages and their compilers is not a binary decision. As they (both the language and the implementations) evolve, they grow steadily more usable. Depending on your demands on a programming language, Perl 6 and its compilers might or might not be ready for you.</p>
 <p>That said, version 6c (Christmas 2015) is the first official release of Perl 6 as a language, along with a validation suite and a compiler that passes it.</p>
 <a name="t13.5.2"></a><h2 id="_language_faq.pod6-Why_should_I_learn_Perl_6?_What's_so_great_about_it?">13.5.2 Why should I learn Perl 6? What's so great about it?</h2>
 <p>Perl 6 unifies many great ideas that aren't usually found in other programming languages. While several other languages offer some of these features, none of them offer all.</p>
 <ul><li><p>Perl 6 offers procedural, object-oriented AND functional programming methodologies.</p>
</li></ul> <ul><li><p>Easy to use consistent syntax, using invariable sigils for data-structures.</p>
</li></ul> <ul><li><p>Full grapheme based Unicode support, including Annex #29.</p>
</li></ul> <ul><li><p>Regular expressions are cleaned up, made more readable, taken to the next level of usability, with a lot more functionality. Named regular expressions are made possible for ease of use.</p>
</li></ul> <ul><li><p>Junctions allowing easy checking of multiple possibilities, e.g. $a == 1|3|42 (meaning is $a equal to 1 or 3 or 42).</p>
</li></ul> <ul><li><p>Dynamic variables provide a lexically scoped alternative to global variables.</p>
</li></ul> <ul><li><p>Emphasis on composability and lexical scoping to prevent “action at a distance”. For example, imports are always lexically scoped.</p>
</li></ul> <ul><li><p>Easy to understand consistent scoping rules and closures.</p>
</li></ul> <ul><li><p>Powerful object orientation, with classes and roles (everything can be seen as an object). Inheritance. Subtyping. Code-reuse.</p>
</li></ul> <ul><li><p>Introspection into objects and meta-objects (turtles all the way down).</p>
</li></ul> <ul><li><p>Meta Object Protocol allowing for meta-programming without needing to generate / parse code.</p>
</li></ul> <ul><li><p>Subroutine and method signatures for easy unpacking of positional and named parameters.</p>
</li></ul> <ul><li><p>Multi dispatch on identically named subroutines/methods with different signatures, based on arity, types and optional additional code.</p>
</li></ul> <ul><li><p>Compile time error reporting on unknown subroutines / impossible dispatch.</p>
</li></ul> <ul><li><p>Optional gradual type-checking at no additional runtime cost. With optional type annotations.</p>
</li></ul> <ul><li><p>Advanced error reporting based on introspection of the compiler/runtime state. This means more useful, more precise error messages.</p>
</li></ul> <ul><li><p>Phasers (like BEGIN / END) allow code to be executed at scope entry / exit, loop first / last / next and many more special contexts.</p>
</li></ul> <ul><li><p>High level concurrency model, both for implicit as well as explicit multi-processing, which goes way beyond primitive threads and locks. Perl 6's concurrency offers a rich set of (composable) tools.</p>
</li></ul> <ul><li><p>Multiple-core computers are getting used more and more, and with Perl 6 these can be used thanks to parallelism, both implicit (e.g. with the >>. method) and explicit ( start { code } ). This is important, because Moore's Law is ending.</p>
</li></ul> <ul><li><p>Structured language support is provided to enable programming for asynchronous execution of code.</p>
</li></ul> <ul><li><p>Supplies allow code to be executed when something happens (like a timer, or a signal, or a file-system event).</p>
</li></ul> <ul><li><p>react / whenever / supply keywords allows easy construction of interactive, event driven applications.</p>
</li></ul> <ul><li><p>Lazy evaluation when possible, eager evaluation when wanted or necessary. This means, for example, lazy lists, and even infinite lazy lists, like the Fibonacci sequence, or all prime numbers.</p>
</li></ul> <ul><li><p>Native data types for faster, closer to the metal, processing.</p>
</li></ul> <ul><li><p>Interfacing to external libraries in C / C++ are trivially simple with NativeCall.</p>
</li></ul> <ul><li><p>Interfacing with Perl 5 (CPAN) / Python modules trivially simple with Inline::Perl5 and Inline::Python.</p>
</li></ul> <ul><li><p>Can have multiple versions of a module installed and loaded simultaneously.</p>
</li></ul> <ul><li><p>System administration simplified due to simpler update/upgrade policies.</p>
</li></ul> <ul><li><p>Simple numeric computation without precision loss because of Rats (rational numbers).</p>
</li></ul> <ul><li><p>Extensible grammars for parsing data or code (which Perl 6 uses to parse itself).</p>
</li></ul> <ul><li><p>Perl 6 is a very mutable language (define your own functions, operators, traits and data-types, which modify the parser for you).</p>
</li></ul> <ul><li><p>Large selection of data-types, plus the possibility to create your own types.</p>
</li></ul> <ul><li><p>Multi-dimensional shaped and/or native arrays with proper bounds checking.</p>
</li></ul> <ul><li><p>Execute code at any time during parsing of a grammar, or when a certain match occurred.</p>
</li></ul> <ul><li><p>Adding a custom operator or adding a trait is as simple as writing a subroutine.</p>
</li></ul> <ul><li><p>Automatic generation of hyper-operators on any operator (system or custom added).</p>
</li></ul> <ul><li><p>Runs on a variety of back-ends. Currently MoarVM &amp; JVM, JavaScript in development, more may follow.</p>
</li></ul> <ul><li><p>Runtime optimization of hot code paths during execution (JIT).</p>
</li></ul> <ul><li><p>Runs on small (e.g. Raspberry Pi) and large multi-processor hardware.</p>
</li></ul> <ul><li><p>Garbage collection based: no timely destruction, so no ref-counting necessary. Use phasers for timely actions.</p>
</li></ul> <ul><li><p>Methods can be mixed into any instantiated object at runtime, e.g. to allow adding out-of-band data.</p>
</li></ul> <ul><li><p>Easy command-line interface accessible by MAIN subroutine with multiple dispatch and automated usage message generation.</p>
</li></ul> <ul><li><p>Fewer lines of code allow for more compact program creation. Huffman-coding of names allows for better readability.</p>
</li></ul> <ul><li><p>Lazy lists defined with a simple iterator interface, which any class can supply by minimally supplying a single method.</p>
</li></ul> <ul><li><p>Perl 6's motto's remain the same as they have been for Perl all along: “Perl is different. In a nutshell, Perl is designed to make the easy jobs easy, without making the hard jobs impossible.” and “There Is More Than One Way To Do It”. Now with even more -Ofun added.</p>
</li></ul> <p>Please see the <a href="https://perl6.org/compilers/features">feature comparison matrix</a> for an overview of implemented features.</p>
 <a name="t13.5.3"></a><h2 id="_language_faq.pod6-Is_Perl_6_fast_enough_for_me?">13.5.3 Is Perl 6 fast enough for me?</h2>
 <p>That depends on what you are doing. Rakudo has been developed with the philosophy of "make it work right then make it work fast". It's fast for some things already but needs work on others. Since the Christmas 2015 release stabilized the definition of the language, we're spending much of our effort on optimizing in 2016. Since Perl 6 provides lots of clues to the JIT that other dynamic languages don't, we think we'll have a lot of headroom for performance improvements. Some things already run faster than Perl 5.</p>
 <p>Perl 5 programmers should be aware that Perl 6 comes with more built-in functionality. Simple benchmarks will be misleading unless you include things like Moose, type checking modules etc. in your Perl 5 script.</p>
 <p>The following crude benchmarks, with all the usual caveats about such things, can show Perl 6 can be faster than Perl 5 for some similar common tasks if the big weaponry is included, but at the same time Perl 5 can be much faster if only the bare bones are included.</p>
 <p>Try it on your system you may be pleasantly surprised!</p>
 <p>Examples:</p>
 <pre class="code"># Perl 6 version
use v6;

class Foo { has $.i is rw };

for (1..1_000_000) -&gt; $i {
    my $obj = Foo.new;
    $obj.i = $i;
}

# Perl 5 version
package Foo;
use Moose;

has i =&gt; (is =&gt; 'rw');

__PACKAGE__-&gt;meta-&gt;make_immutable;

for my $i (1..1_000_000) {
    my $obj = Foo-&gt;new;
    $obj-&gt;i($i);
}

1;

# Another Perl 5 version that offers bare-bones set of features
# compared to Moose/Perl 6's version but those are not needed in this
# specific, simple program anyway.
package Foo;
use Mojo::Base -base;

has 'i';

for my $i (1..1_000_000) {
    my $obj = Foo-&gt;new;
    $obj-&gt;i($i);
}

1;

# A perl program which works under both perl5 (with perl -Mbigint)
# and perl6

my ($prev, $current) = (1, 0);

for (0..100_000) {
    ($prev, $current) = ($current, $prev + $current);
}
print $current;</pre>
</div> <!-- /language/functions.pod6 --><div class="pod-body"><a id="_language_functions.pod6"></a><a name="t14"><h1 class="title">14 Functions</h1></a> <p class="subtitle">Functions and Functional Programming in Perl 6</p> <p>Routines are the smallest means of code reuse in Perl 6. They come in several forms, most notably methods, which belong in classes and roles and are associated with an object, and functions, also called <i>subroutines</i> or short <i>sub</i>s, which exist independently of objects.</p>
 <p>Subroutines default to lexical (<span class="code">my</span>) scoping, and calls to them are generally resolved at compile time.</p>
 <p>Subroutines can have a <a href="#_type_Signature.pod6">signature</a>, also called <i>parameter list</i>, which specifies which, if any, arguments the signature expects. It can specify (or leave open) both the number and types of arguments, and also the return value.</p>
 <p>Introspection on subroutines is provided via <a href="#_type_Routine.pod6"> <span class="code">Routine</span> </a>.</p>
 <a name="t14.1"></a><h1 id="_language_functions.pod6-Defining/Creating/Using_Functions">14.1 Defining/Creating/Using Functions</h1>
 <a name="t14.1.1"></a><h2 id="_language_functions.pod6-Subroutines">14.1.1 <a name="67"></a>Subroutines</h2>
 <p>To create a function, often all that's needed is to define a subroutine using the <span class="code">sub</span> declarator:</p>
 <pre class="code">sub my-func { say "Look ma, no args!" }
my-func;</pre>
 <p>To have the subroutine take arguments, a <a href="#_type_Signature.pod6">signature</a> goes between the subroutine's name and its body, in parentheses:</p>
 <pre class="code">sub exclaim  &lt;b&gt;($phrase)&lt;/b&gt;  { 
     say $phrase  &lt;a href="~"&gt;~&lt;/a&gt;  "!!!!" 
 } 
 exclaim "Howdy, World"; 
</pre>
 <p>By default, subroutines are <a href="#_syntax_my.pod6">lexically scoped</a>. That is <span class="code">sub foo {...}</span> is the same as <span class="code">my sub foo {...}</span> and is only defined within the current scope.</p>
 <pre class="code">sub escape($str) { 
     # Puts a slash before non-alphanumeric characters 
     S:g[&amp;lt;-alpha -digit&gt;] = "\\$/" given $str 
 } 
 
 say escape 'foo#bar?'; # foo\#bar\? 
 
 { 
     sub escape($str) { 
         # Writes each non-alphanumeric character in its hexadecimal escape 
         S:g[&amp;lt;-alpha -digit&gt;] = "\\x[{ $/.ord.base(16) }]" given $str 
     } 
 
     say escape 'foo#bar?' # foo\x[23]bar\x[3F] 
 } 
 
 # Back to original escape function 
 say escape 'foo#bar?'; # foo\#bar\? 
</pre>
 <p>Subroutines don't have to be named; in this case they're called anonymous.</p>
 <pre class="code">say sub ($a, $b) { $a ** 2 + $b ** 2 }(3, 4) # 25</pre>
 <p>But in this case, it's often desirable to use the more succinct <a href="#_type_Block.pod6">block</a> syntax. Subroutines and blocks can be called in place, as in the example above.</p>
 <a name="t14.1.2"></a><h2 id="_language_functions.pod6-Blocks_and_Lambdas">14.1.2 <a name="68"></a>Blocks and Lambdas</h2>
 <p>Whenever you see something like <span class="code">{ $_ + 42 }</span>, <span class="code">-> $a, $b { $a ** $b }</span>, or <span class="code">{ $^text.indent($:spaces) }</span>, that's <a href="#_type_Block.pod6">Block</a> syntax. It's used after every <span class="code">if</span>, <span class="code">for</span>, <span class="code">while</span>, etc.</p>
 <pre class="code">for 1, 2, 3, 4 -&gt; $a, $b {
    say $a ~ $b;
}

12
34</pre>
 <p>They can also be used on their own as anonymous blocks of code.</p>
 <pre class="code">say { $^a ** 2 + $^b ** 2}(3, 4) # 25</pre>
 <p>For details about the syntax of blocks, see the documentation for the <a href="#_type_Block.pod6">Block</a> type.</p>
 <a name="t14.1.3"></a><h2 id="_language_functions.pod6-Signatures">14.1.3 Signatures</h2>
 <p>The parameters that a function accepts are described in its <i>signature</i>.</p>
 <pre class="code">sub format &lt;b&gt;(Str $s)&lt;/b&gt;  { ... } 
 -&gt;  &lt;b&gt;$a, $b&lt;/b&gt;  { ... } 
</pre>
 <p>Details about the syntax and use of signatures can be found in the <a href="#_type_Signature.pod6">documentation on the  <span class="code">Signature</span>  class</a>.</p>
 <a name="t14.1.3.1"></a><h3 id="_language_functions.pod6-Automatic_Signatures">14.1.3.1 Automatic Signatures</h3>
 <p><span class="indexed"><a id="69" name="@_"></a></span><span class="indexed"><a id="70" name="%_"></a></span> If no signature is provided but either of the two automatic variables <span class="code">@_</span> or <span class="code">%_</span> are used in the function body, a signature with <span class="code">*@_</span> or <span class="code">*%_</span> will be generated. Both automatic variables can be used that the same time.</p>
 <pre class="code">sub s { dd @_, %_ };
dd &amp;amp;s.signature # OUTPUT«:(*@_, *%_)␤»</pre>
 capture, destructuring,
 <a name="t14.1.4"></a><h2 id="_language_functions.pod6-Arguments">14.1.4 Arguments <a name="71"></a></h2>
 <p>Arguments are supplied as a comma separated list. To disambiguate nested calls parentheses or adverbial form can be used.</p>
 <pre class="code">sub f(&amp;amp;c){ c() * 2 }; # call the function reference c with empty parameter list
sub g($p){ $p - 2 };
say(g(42)); # nest call to g in call to say
f: { say g(666) }; # call f with a block</pre>
 <p>When calling a function, positional arguments should be supplied in the same order as the function's signature. Named arguments may be supplied in any order, but it is considered good form to place named arguments after positional arguments. Inside the argument list of a function call, some special syntax is supported:</p>
 <pre class="code">f :named(35)     # A named argument (in "adverb" form.)
f named =&gt; 35    # Also a named argument.
f :35named       # A named argument using abbreviated adverb form
f 'named' =&gt; 35  # Not a named argument, a Pair in a positional argument
f |$c            # Merge the contents of Capture $c as if they were supplied</pre>
 <p>Arguments passed to a function are conceptually first collected in a <span class="code">Capture</span> container. Details about the syntax and use of these containers can be found in the <a href="#_type_Capture.pod6">documentation on the  <span class="code">Capture</span>  class</a>.</p>
 <p>When using named arguments, note that normal List "pair-chaining" allows one to skip commas between named arguments.</p>
 <pre class="code">f :dest&amp;lt;/tmp/foo&gt; :src&amp;lt;/tmp/bar&gt; :lines(512)
f :32x :50y :110z   # This flavor of "adverb" works, too
f :a:b:c            # The spaces are also optional.</pre>
 <a name="t14.1.5"></a><h2 id="_language_functions.pod6-Multi-dispatch">14.1.5 <a name="72"></a>Multi-dispatch</h2>
 <p>Perl 6 allows you to write several routines with the same name, but different signatures. When the routine is called by name, the runtime environment decides which is the best match, and calls that <i>candidate</i>. You declare each candidate with the <span class="code">multi</span> declarator.</p>
 <pre class="code">multi congratulate($name) {
    say "Happy birthday, $name";
}
multi congratulate($name, $age) {
    say "Happy {$age}th birthday, $name";
}

congratulate 'Larry';       # Happy birthday, Larry
congratulate 'Bob', 45;     # Happy 45th birthday, Bob</pre>
 <p>Dispatch can happen on the number of arguments (the <i>arity</i>), but also on the type:</p>
 <pre class="code">multi as-json(Bool $d) { $d ?? 'true' !! 'false'; }
multi as-json(Real $d) { ~$d }
multi as-json(@d)      { sprintf '[%s]', @d.map(&amp;amp;as-json).join(', ') }

say as-json([True, 42]);    # [true, 42]</pre>
 <p><span class="code">multi</span> without any specific routine type always defaults to a <span class="code">sub</span>, but you can use it on methods as well. The candidates are all the multi methods of the object:</p>
 <pre class="code">class Congrats {
    multi method congratulate($reason, $name) {
        say "Hooray for your $reason, $name";
    }
}

role BirthdayCongrats {
    multi method congratulate('birthday', $name) {
        say "Happy birthday, $name";
    }
    multi method congratulate('birthday', $name, $age) {
        say "Happy {$age}th birthday, $name";
    }
}

my $congrats = Congrats.new does BirthdayCongrats;

$congrats.congratulate('promotion','Cindy'); #-&gt; Hooray for your promotion, Cindy
$congrats.congratulate('birthday','Bob');    #-&gt; Happy birthday, Bob</pre>
 <a name="t14.1.5.1"></a><h3 id="_language_functions.pod6-proto">14.1.5.1 <a name="73"></a>proto</h3>
 <p><span class="code">proto</span> is a way to formally declare commonalities between <span class="code">multi</span> candidates. It acts as a wrapper that can validate but not modify arguments. Consider this basic example:</p>
 <pre class="code">proto congratulate(Str $reason, Str $name, |) {*}
multi congratulate($reason, $name) {
   say "Hooray for your $reason, $name";
}
multi congratulate($reason, $name, Int $rank) {
   say "Hooray for your $reason, $name -- you got rank $rank!";
}

congratulate('being a cool number', 'Fred');     # OK
congratulate('being a cool number', 'Fred', 42); # OK
congratulate('being a cool number', 42);         # Proto match error</pre>
 <p>All <span class="code">multi congratulate</span> will conform to the basic signature of two strings, optionally followed by further parameters. The <span class="code">|</span> is an un-named <span class="code">Capture</span> parameter, allowing a <span class="code">multi</span> which takes additional arguments. The third call fails at compile time because the proto's <span class="code">signature</span> becomes the common signature of all three, and <span class="code">42</span> doesn't match <span class="code">Str</span>.</p>
 <pre class="code">say &amp;amp;congratulate.signature #-&gt; (Str $reason, Str $name, | is raw)</pre>
 <p>You can give the <span class="code">proto</span> a function body, and place the <span class="code">{*}</span> where you want the dispatch to be done.</p>
 <pre class="code"># attempts to notify someone -- returns False if unsuccessful
proto notify(Str $user,Str $msg) {
   my \hour = DateTime.now.hour;
   if hour &gt; 8 or hour &amp;lt; 22 {
      return {*};
   } else {
      # we can't notify someone when they might be sleeping
      return False;
   }
}</pre>
 <p><span class="code">{*}</span> always dispatches to candidates with the parameters it's called with. Parameter defaults and type coercions will work but are not be passed on.</p>
 <pre class="code">proto mistake-proto(Str() $str, Int $number = 42) {*}
multi mistake-proto($str, $number) { say $str.WHAT }
mistake-proto(7, 42);  #-&gt; (Int) -- coercions not passed on
mistake-proto('test'); #!&gt; fails -- defaults not passed on</pre>
 only
 <a name="t14.2"></a><h1 id="_language_functions.pod6-Conventions_and_Idioms">14.2 Conventions and Idioms</h1>
 <p>While the dispatch system described above provides a lot of flexibility, there are some conventions that most internal functions, and those in many modules, will follow. These produce a consistent look and feel.</p>
 <a name="t14.2.1"></a><h2 id="_language_functions.pod6-Slurpy_Conventions">14.2.1 Slurpy Conventions</h2>
 <p>Perhaps the most important of these is the way slurpy list arguments are handled. Most of the time, functions will not automatically flatten slurpy lists. The rare exceptions are those functions that don't have a reasonable behavior on lists of lists, for example, <a href="#_routine_chrs.pod6">chrs</a>, or where there is a conflict with an established idiom, like <a href="#_routine_pop.pod6">pop</a> being the inverse of <a href="#_routine_push.pod6">push</a>.</p>
 <p>If you wish to match this look and feel, any Iterable argument must be broken out element-by-element using a **@ slurpy, with two nuances:</p>
 <ul><li><p>An Iterable inside a <a href="#_language_containers.pod6-Scalar_containers">Scalar container</a> does not count.</p>
</li></ul> <ul><li><p>Lists created with a <a href="#_routine_,.pod6"> <span class="code">,</span> </a> at the top level only count as one Iterable.</p>
</li></ul> <p>This can be achieved by using a slurpy with a <span class="code">+</span> or <span class="code">+@</span> instead of <span class="code">**</span>:</p>
 <pre class="code">sub grab(+@a) { "grab $_".say for @a }</pre>
 <p>...which is shorthand for something very close to:</p>
 <pre class="code">multi sub grab(**@a) { "grab $_".say for @a }
multi sub grab(\a) {
    a ~~ Iterable and a.VAR !~~ Scalar ?? nextwith(|a) !! nextwith(a,)
}</pre>
 <p>This results in the following behavior, which is known as the "single argument rule" and is important to understand when invoking slurpy functions:</p>
 <pre class="code">grab(1, 2);      # grab 1 grab 2
grab((1, 2));    # grab 1 grab 2
grab($(1, 2));   # grab 1 2
grab((1, 2), 3); # grab 1 2 grab 3</pre>
 <p>This also makes user-requested flattening feel consistent whether there is one sublist, or many:</p>
 <pre class="code">grab(flat (1, 2), (3, 4));   # grab 1 grab 2 grab 3 grab 4
grab(flat $(1, 2), $(3, 4)); # grab 1 2 grab 3 4
grab(flat (1, 2));           # grab 1 grab 2
grab(flat $(1, 2));          # grab 1 2</pre>
 <p>It is worth noting that mixing binding and sigilless variables in these cases requires a bit of finesse, because there is no Scalar intermediary used during binding.</p>
 <pre class="code">my $a = (1, 2);  # Normal assignment, equivalent to $(1, 2)
grab($a);       # grab 1 2
my $b := (1, 2); # Binding, $b links directly to a bare (1, 2)
grab($b);       # grab 1 grab 2
my \c = (1, 2);  # Sigilless variables always bind, even with '='
grab(c);        # grab 1 grab 2</pre>
 <a name="t14.3"></a><h1 id="_language_functions.pod6-Functions_are_First-Class_Objects">14.3 Functions are First-Class Objects</h1>
 <p>Functions and other code objects can be passed around as values, just like any other object.</p>
 <p>There are several ways to get hold of a code object. You can assign it to a variable at the point of declaration:</p>
 <pre class="code">my $square = sub (Numeric $x) { $x * $x } 
 # and then use it: 
 say $square(6);    # 36 
</pre>
 <p>Or you can reference an existing named function by using the <span class="code">&amp;</span> in front of it.</p>
 <pre class="code">sub square($x) { $x * $x }; 
 
 # get hold of a reference to the function: 
 my $func = &amp;amp;square 
</pre>
 <p>This is very useful for <i>higher order functions</i>, that is, functions that take other functions as input. A simple one is <a href="#_type_List.pod6-routine_map">map</a>, which applies a function to each input element:</p>
 <pre class="code">sub square($x) { $x * $x };
my @squared = map &amp;amp;square,  1..5;
say join ', ', @squared;        # 1, 4, 9, 16, 25</pre>
 <a name="t14.3.1"></a><h2 id="_language_functions.pod6-Infix_Form">14.3.1 <!--  -->Infix Form</h2>
 <p>To call a subroutine with 2 arguments like a infix operator, use a subroutine reference surrounded by <span class="code">[</span> and <span class="code">]</span>.</p>
 <pre class="code">sub plus { $^a + $^b };
say 21 [&amp;amp;plus] 21;
OUTPUT«42␤»</pre>
 <a name="t14.3.2"></a><h2 id="_language_functions.pod6-Closures">14.3.2 Closures</h2>
 <p>All code objects in Perl 6 are <i>closures</i>, which means they can reference lexical variables from an outer scope.</p>
 <pre class="code">sub generate-sub($x) { 
     my $y = 2 * $x; 
     return sub { say $y }; 
     #      ^^^^^^^^^^^^^^  inner sub, uses $y 
 } 
 my $generated = generate-sub(21); 
 $generated();           # 42 
</pre>
 <p>Here <span class="code">$y</span> is a lexical variable inside <span class="code">generate-sub</span>, and the inner subroutine that is returned uses it. By the time that the inner sub is called, <span class="code">generate-sub</span> has already exited. Yet the inner sub can still use <span class="code">$y</span>, because it <i>closed</i> over the variable.</p>
 <p>A less obvious but useful example for closures is using <a href="#_type_List.pod6-routine_map">map</a> to multiply a list of numbers:</p>
 <pre class="code">my $multiply-by = 5;
say join ', ', map { $_ * $multiply-by }, 1..5;     # 5, 10, 15, 20, 25</pre>
 <p>Here the block passed to <span class="code">map</span> references the variable <span class="code">$multiply-by</span> from the outer scope, making the block a closure.</p>
 <p>Languages without closures cannot easily provide higher-order functions that are as easy to use and powerful as <span class="code">map</span>.</p>
 <a name="t14.3.3"></a><h2 id="_language_functions.pod6-Routines">14.3.3 Routines</h2>
 <p>Routines are code objects that conform to <a href="#_type_Routine.pod6">type Routine</a>, most notably <a href="#_type_Sub.pod6">Sub</a>, <a href="#_type_Method.pod6">Method</a>, <a href="#_type_Regex.pod6">Regex</a> and <a href="#_type_Submethod.pod6">Submethod</a>.</p>
 <p>They carry additional functionality in addition to what <a href="#_type_Block.pod6">Block</a> supplies: they can come as <a href="#13-Multi-dispatch">multis</a>, you can <a href="#_type_Routine.pod6-method_wrap">wrap</a> them, and exit early with <span class="code">return</span>:</p>
 <pre class="code">my $keywords = set &amp;lt;if for unless while&gt;; 
 
 sub has-keyword(*@words) { 
     for @words -&gt; $word { 
          &lt;b&gt;return&lt;/b&gt;  True if $word (elem) $keywords; 
     } 
     False; 
 } 
 
 say has-keyword 'not', 'one', 'here';       # False 
 say has-keyword 'but', 'here', 'for';       # True 
</pre>
 <p>Here <span class="code">return</span> does not just leave the block inside which it was called, but the whole routine. In general, blocks are transparent to <span class="code">return</span>, they attach to the outer routine.</p>
 <p>Routines can be inlined and as such provide an obstacle for wrapping. Use the pragma <span class="code">use soft;</span> to prevent inlining to allow wrapping at runtime.</p>
 <pre class="code">sub testee(Int $i, Str $s){
    rand.Rat * $i ~ $s;
}

sub wrap-to-debug(&amp;amp;c){
    say "wrapping {&amp;amp;c.name} with arguments {&amp;amp;c.signature.perl}";
    &amp;amp;c.wrap: sub (|args){
        note "calling {&amp;amp;c.name} with {args.gist}";
        my \ret-val := callwith(|args);
        note "returned from {&amp;amp;c.name} with return value {ret-val.perl}";
        ret-val
    }
}

my $testee-handler = wrap-to-debug(&amp;amp;testee);
# OUTPUT«wrapping testee with arguments :(Int $i, Str $s)»

say testee(10, "ten");
# OUTPUT«calling testee with \(10, "ten")␤returned from testee with return value "6.151190ten"␤6.151190ten»
&amp;amp;testee.unwrap($testee-handler);
say testee(10, "ten");
# OUTPUT«6.151190ten␤»</pre>
 Important ones: candidates, wrap, unwrap, assuming, arity, count
 <a name="t14.4"></a><h1 id="_language_functions.pod6-Defining_Operators">14.4 Defining Operators</h1>
 <p>Operators are just subroutines with funny names. The funny names are composed of the category name (<span class="code">infix</span>, <span class="code">prefix</span>, <span class="code">postfix</span>, <span class="code">circumfix</span>, <span class="code">postcircumfix</span>), followed by a colon, and a list of the operator name or names (two components in the case of circumfix and postcircumfix).</p>
 <p>This works both for adding multi candidates to existing operators, and for defining new ones. In the latter case, the definition of the new subroutine automatically installs the new operator into the grammar, but only in the current lexical scope. Importing an operator via <span class="code">use</span> or <span class="code">import</span> also makes it available.</p>
 <pre class="code"># adding a multi candidate to an existing operator: 
 multi infix:&amp;lt;+&gt;(Int $x, "same") { 2 * $x }; 
 say 21 + "same";            # 42 
 
 # defining a new operator 
 sub postfix:&amp;lt;!&gt;(Int $x where { $x &gt;= 0 }) { [*] 1..$x }; 
 say 6!;                     # 720 
</pre>
 <p>The operator declaration becomes available as soon as possible, so you can even recurse into a just-defined operator, if you really want to:</p>
 <pre class="code">sub postfix:&amp;lt;!&gt;(Int $x where { $x &gt;= 0 }) { 
     $x == 0 ?? 1 !! $x * ($x - 1)! 
 } 
 say 6!;                     # 720 
</pre>
 <p>Circumfix and postcircumfix operators are made of two delimiters, one opening and one closing.</p>
 <pre class="code">sub circumfix:&amp;lt;START END&gt;(*@elems) { 
     "start", @elems, "end" 
 } 
 
 say START 'a', 'b', 'c' END;        # start a b c end 
</pre>
 <p>Postcircumfixes also receive the term after which they are parsed as an argument:</p>
 <pre class="code">sub postcircumfix:&amp;lt;!! !!&gt;($left, $inside) { 
     "$left -&gt; ( $inside )" 
 } 
 say 42!! 1 !!;      # 42 -&gt; ( 1 ) 
</pre>
 <p>Blocks can be assigned directly to operator names. Use a variable declarator and prefix the operator name with a <span class="code">&amp;</span>-sigil.</p>
 <pre class="code">my &amp;amp;infix:&amp;lt;ieq&gt; = -&gt; |l { [eq] l&gt;&gt;.fc };
say "abc" ieq "Abc";
# OUTPUT«True␤»</pre>
 <a name="t14.4.1"></a><h2 id="_language_functions.pod6-Precedence">14.4.1 Precedence</h2>
 <p>Operator precedence in Perl 6 is specified relatively to existing operators. With <span class="code">is tighter(&amp;other-operator)</span> you can squeeze in an operator with a tighter precedence than the one you specified, but looser than the next-tighter precedence level.</p>
 <p>For example <span class="code">infix:&lt;*> </span> has a tighter precedence than <span class="code">infix:&lt;+> </span>, and squeezing one in between works like this:</p>
 <pre class="code">sub infix:&amp;lt;!!&gt;($a, $b) is tighter(&amp;amp;infix:&amp;lt;+&gt;) { 
     2 * ($a + $b) 
 } 
 
 say 1 + 2 * 3 !! 4;     # 21 
</pre>
 <p>Here the <span class="code">1 + 2 * 3 !! 4</span> is parsed as <span class="code">1 + ((2 * 3) !! 4)</span>, because the precedence of the new <span class="code">!!</span> operator is between that of <span class="code">+</span> and <span class="code">*</span>.</p>
 <p>The same effect could have been achieved with</p>
 <pre class="code">sub infix:&amp;lt;!!&gt;($a, $b) is looser(&amp;amp;infix:&amp;lt;*&gt;) { ... }</pre>
 <p>To put a new operator on the same precedence level as an existing operator, use <span class="code">is equiv(&amp;other-operator)</span> instead.</p>
 <a name="t14.4.2"></a><h2 id="_language_functions.pod6-Associativity">14.4.2 Associativity</h2>
 <p>When the same operator appears several times in a row, there are multiple possible interpretations. For example</p>
 <pre class="code">1 + 2 + 3</pre>
 <p>could be parsed as</p>
 <pre class="code">(1 + 2) + 3         # left associative</pre>
 <p>or as</p>
 <pre class="code">1 + (2 + 3)         # right associative</pre>
 <p>or as single call to an operator with three operands</p>
 <pre class="code">infix:&amp;lt;+&gt;(1, 2, 3); # list associative</pre>
 <p>For addition of real numbers, the distinction is somewhat moot, because <span class="code">+</span> is <a href="https://en.wikipedia.org/wiki/Associative_property">mathematically associative</a>.</p>
 <p>But for other operators it matters a great deal. For example for the exponentiation/power operator, <span class="code">infix:&lt;**> </span>:</p>
 <pre class="code">say 2 ** (2 ** 3);      # 256
say (2 ** 2) ** 3;      # 64</pre>
 <p>Perl 6 has the following possible associativity configurations:</p>
 <table>
<tr><th>A</th> <th>Assoc</th> <th>Meaning of $a ! $b ! $c</th></tr>
<tr><td>L</td> <td>left</td> <td>($a ! $b) ! $c</td></tr>
 <tr><td>R</td> <td>right</td> <td>$a ! ($b ! $c)</td></tr>
 <tr><td>N</td> <td>non</td> <td>ILLEGAL</td></tr>
 <tr><td>C</td> <td>chain</td> <td>($a ! $b) and ($b ! $c)</td></tr>
 <tr><td>X</td> <td>list</td> <td>infix:&lt;!>($a; $b; $c)</td></tr>
</table> <p>You can specify the associativity of an operator with the <span class="code">is assoc</span> trait, where <span class="code">left</span> is the default associativity.</p>
 <pre class="code">sub infix:&amp;lt;§&gt;(*@a) is assoc&amp;lt;list&gt; { 
     '(' ~ @a.join('|') ~ ')'; 
 } 
 
 say 1 § 2 § 3;      # (1|2|3) 
</pre>
 <a name="t14.5"></a><h1 id="_language_functions.pod6-Traits">14.5 Traits</h1>
 <p><i>Traits</i> are subroutines that are run at compile time to modify the behavior of a type, variable, routine, attribute, or other language object.</p>
 <p>Examples of traits are:</p>
 <pre class="code">class ChildClass is ParentClass { ... }
#                ^^ trait, with argument ParentClass
has $.attrib is rw;
#            ^^^^^  trait with name 'rw'
class SomeClass does AnotherRole { ... }
#               ^^^^ trait
has $!another-attribute handles &amp;lt;close&gt;;
#                       ^^^^^^^ trait</pre>
 <p>... and also <span class="code">is tighter</span>, <span class="code">is looser</span>, <span class="code">is equiv</span> and <span class="code">is assoc</span> from the previous section.</p>
 <p>Traits are subs of the form <span class="code">trait_mod&lt;VERB> </span>, where <span class="code">VERB</span> stands for the name like <span class="code">is</span>, <span class="code">does</span> or <span class="code">handles</span>. It receives the modified thing as argument, and the name as a named argument.</p>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Routine $r, :$doubles!) { 
     $r.wrap({ 
         2 * callsame; 
     }); 
 } 
 
 sub square($x) is doubles { 
     $x * $x; 
 } 
 
 say square 3;       # 18 
</pre>
 <p>See <a href="#_type_Routine.pod6">type Routine</a> for the documentation of built-in routine traits.</p>
 <a name="t14.6"></a><h1 id="_language_functions.pod6-Re-dispatching">14.6 Re-dispatching</h1>
 <p>There are cases in which a routine might want to call the next method from a chain. This chain could be a list of parent classes in a class hierarchy, or it could be less specific multi candidates from a multi dispatch, or it could be the inner routine from a <span class="code">wrap</span>.</p>
 <p>In all those cases, you can use <span class="code">callwith</span> to call the next routine in the chain with arguments of your own choice.</p>
 <p>For example</p>
 <pre class="code">multi a(Any $x) { 
     say "Any $x"; 
     return 5; 
 } 
 multi a(Int $x) { 
     say "Int $x"; 
     my $res = callwith($x + 1); 
     say "Back in Int with $res"; 
 } 
 
 a 1; 
</pre>
 <p>produces this output:</p>
 <pre class="code">Int 1 
 Any 2 
 Back in Int with 5 
</pre>
 <p>Here <span class="code">a 1</span> calls the most specific <span class="code">Int</span> candidate first, and <span class="code">callwith</span> re-dispatches to the less specific <span class="code">Any</span> candidate.</p>
 <p>Very often, a re-dispatch passes the same argument along that the caller received, so there is a special routine for that: <span class="code">callsame</span>.</p>
 <pre class="code">multi a(Any $x) { 
     say "Any $x"; 
     return 5; 
 } 
 multi a(Int $x) { 
     say "Int $x"; 
     my $res = callsame; 
     say "Back in Int with $res"; 
 } 
 
 a 1;        # Int 1\n Any 1\n Back in Int with 5 
</pre>
 <p>Another common use case is to re-dispatch to the next routine in the chain, and not do anything else afterwards. That's why we have <span class="code">nextwith</span> and <span class="code">nextsame</span>, which call the next routine with arbitrary arguments (<span class="code">nextwith</span>) or with the same argument as the caller received (<span class="code">nextsame</span>), but never return to the caller. Or to phrase it differently, the <span class="code">nextsame</span> and <span class="code">nextwith</span> variants replace the current callframe with the next candidate.</p>
 <pre class="code">multi a(Any $x) { 
     say "Any $x"; 
     return 5; 
 } 
 multi a(Int $x) { 
     say "Int $x"; 
     nextsame; 
     say "back in a";    # never executed, because 'nextsame' doesn't return 
 } 
 
 a 1;        # Int 1\n Any 1 
</pre>
 <p>As mentioned earlier, multi subs are not the only situation in which <span class="indexed"><a id="99" name="callwith"> <span class="code">callwith</span> </a></span>, <span class="indexed"><a id="100" name="callsame"> <span class="code">callsame</span> </a></span>, <span class="indexed"><a id="102" name="nextwith"> <span class="code">nextwith</span> </a></span> and <span class="indexed"><a id="103" name="nextsame"> <span class="code">nextsame</span> </a></span> can be helpful. One is for dispatching to wrapped routines:</p>
 <pre class="code"># enable wrapping: 
 use soft; 
 
 # function to be wrapped: 
 sub square-root($x) { $x.sqrt } 
 
 &amp;amp;square-root.wrap(sub ($num) { 
    nextsame if $num &gt;= 0; 
    1i * callwith(abs($num)); 
 }); 
 
 say square-root(4);     # 2 
 say square-root(-4);    # 0+2i 
</pre>
 <p>The final use case is to re-dispatch to methods from parent classes.</p>
 <pre class="code">class LoggedVersion is Version { 
     method new(|c) { 
         note "New version object created with arguments " ~ c.perl; 
         nextsame; 
     } 
 } 
 
 say LoggedVersion.new('1.0.2'); 
</pre>
 <p>If you need to make multiple calls to the wrapped code or to gain a reference to it, such as performing introspection it, you can use <span class="code">nextcallee</span>.</p>
 <pre class="code">sub power-it($x) { $x * $x } 
 sub run-it-again-and-again($x) { 
     my &amp;amp;again = nextcallee; 
     again again $x; 
 } 
 
 &amp;amp;power-it.wrap(&amp;amp;run-it-again-and-again); 
 say power-it(5);    # 625 
</pre>
 <a name="t14.7"></a><h1 id="_language_functions.pod6-Coercion_Types">14.7 Coercion Types</h1>
 <p>Coercion types can help you to have a specific type inside a routine, but accept wider input. When the routine is called, the argument is automatically converted to the narrower type.</p>
 <pre class="code">sub double(Int(Cool) $x) { 
     2 * $x 
 } 
 
 say double '21';    # 42 
 say double Any;     # Type check failed in binding $x; expected 'Cool' but got 'Any' 
</pre>
 <p>Here the <span class="code">Int</span> is the target type to which the argument will be coerced, and <span class="code">Cool</span> is the type that the routine accepts as input.</p>
 <p>If the accepted input type is <a href="#_type_Any.pod6">Any</a>, you can abbreviate <span class="code">Int(Any)</span> to <span class="code">Int()</span>.</p>
 <p>The coercion works simply by looking for a method with the same name as the target type. So you can define coercions for your own types like so:</p>
 <pre class="code">class MyModule::Foo {
   has $.msg = "I'm a foo!";

   method MyModule::Bar {
      ::('MyModule::Bar').new(:msg($.msg ~ ' But I am now Bar.'));
   }
}

class MyModule::Bar {
   has $.msg;
}

sub print-bar(MyModule::Bar() $bar) {
   say $bar.WHAT; #MyModule::Bar
   say $bar.msg;  #I'm a foo! But I am now Bar.
}

print-bar MyModule::Foo.new;</pre>
 <p>Coercion types are supposed to work wherever types work, but Rakudo currently (2015.02) only implements them for subroutine parameters.</p>
 <a name="t14.8"></a><h1 id="_language_functions.pod6-sub_MAIN">14.8 <span class="code">sub MAIN</span></h1>
 <p><span class="indexed"><a id="107" name="MAIN"></a></span></p>
 <p>The sub with the special name <span class="code">MAIN</span> is executed after all relevant phasers, and its signature is the means by which command line arguments can be parsed. Multi methods are supported and a usage method is automatically generated and displayed if no command line arguments are provided. All command line arguments are also available in <a href="#_language_variables.pod6-Dynamic_variables"> <span class="code">@*ARGS</span> </a>, it can be mutated before being processed by <span class="code">MAIN</span>.</p>
 <p>The return value of <span class="code">MAIN</span> is ignored. To provide an exitcode other then 0, call <a href="https://docs.perl6.org/routine/exit">exit</a>.</p>
 <pre class="code">sub MAIN( Int :$length = 24,
           :file($data) where { .IO.f // die "file not found in $*CWD" } = 'file.dat',
           Bool :$verbose )
{
    say $length if $length.defined;
    say $data   if $data.defined;
    say 'Verbosity ', ($verbose ?? 'on' !! 'off');

    exit 1;
}</pre>
</div> <!-- /language/glossary.pod6 --><div class="pod-body"><a id="_language_glossary.pod6"></a><a name="t15"><h1 class="title">15 Glossary</h1></a> <p class="subtitle">Glossary of Perl 6 terminology</p> <a name="t15.1"></a><h1 id="_language_glossary.pod6-Abstract_Class">15.1 Abstract Class <a name="74"></a></h1>
 <p>The generic Computer Science term "abstract <a href="#14-Class">class</a>" defines the <a href="#14-Interface">interface</a> or <a href="#14-API">#API</a> of a class. In Perl 6, this is implemented using <a href="#14-Role">roles</a> with <a href="#14-Stub">stubbed</a> methods.</p>
 <pre class="code">role Canine {
    method bark { ... }          # the ... indicates a stub
}

class Dog does Canine {
    method bark { say "woof" }   # *MUST* be implemented by class
}</pre>
 <a name="t15.2"></a><h1 id="_language_glossary.pod6-Advent_Calendar">15.2 Advent Calendar <a name="75"></a></h1>
 <p>In the context of Perl 6, a yearly set of blog posts for each day from the 1st until the 25th of December, to be found at <a href="https://perl6advent.wordpress.com">https://perl6advent.wordpress.com</a>.</p>
 <a name="t15.3"></a><h1 id="_language_glossary.pod6-Adverb">15.3 Adverb <a name="76"></a></h1>
 <p>Generically, an adverb is a named argument to a function. There are also some specific syntax forms that allow adverbs to be tucked into some convenient places:</p>
 <pre class="code">q:w"foo bar"   # ":w" is a Quotelike form modifier adverb
m:g/a|b|c/     # ":g" is also
4 +&gt; 5 :rotate # ":rotate" is an operator adverb
@h{3}:exists   # ":exists" is also, but is known as a subscript adverb</pre>
 <p>Adverbs are usually expressed with colon pair notation, and for this reason colon pair notation is also known as the adverbial pair form:</p>
 <pre class="code">:a(4)          # Same as "a" =&gt; 4</pre>
 <p>Some other forms that use a colon in ways that have adverb-like semantics are called adverbial forms. One special form starts with an integer value, followed by a name (for the key):</p>
 <pre class="code">:20seconds     # same as seconds =&gt; 20</pre>
 <p>Also see <a href="#14-Colon Pair and Colon List">#Colon Pair and Colon List</a>.</p>
 <a name="t15.4"></a><h1 id="_language_glossary.pod6-Adverbial_Pair">15.4 Adverbial Pair <a name="77"></a></h1>
 <p>A generalized form of <span class="code">pair notation</span>. They all start with the colon, like:</p>
 <pre class="code">adverbial pair  | pair notation
================|==============
  :foo&amp;lt;bar&gt;     | foo =&gt; 'bar'
  :foo(42)      | foo =&gt; 42
  :42foo        | foo =&gt; 42
  :$foo         | foo =&gt; $foo
  :foo          | foo =&gt; True
  :!foo         | foo =&gt; False</pre>
 <p>Also see <a href="#14-Adverb">#Adverb</a> and <a href="#14-Colon Pair and Colon List">#Colon Pair and Colon List</a>.</p>
 <a name="t15.5"></a><h1 id="_language_glossary.pod6-Allomorph">15.5 Allomorph <a name="78"></a></h1>
 <p>A type that has two related values which may be used depending on the context. The <i>allomorph</i> types <a href="#_type_IntStr.pod6">IntStr</a>, <a href="#_type_NumStr.pod6">NumStr</a>, <a href="#_type_RatStr.pod6">RatStr</a> and <a href="#_type_ComplexStr.pod6">ComplexStr</a> may be created as a result of parsing a quoted string:</p>
 <pre class="code">say &amp;lt;42&gt;.WHAT;     # (IntStr)
say &amp;lt;42.1e0&gt;.WHAT; # (NumStr)
say &amp;lt;42.1&gt;.WHAT;   # (RatStr)
say &amp;lt;42+0i&gt;.WHAT;  # (ComplexStr)</pre>
 <p>Or they may be created explicitly with differing string and numeric values.</p>
 <a name="t15.6"></a><h1 id="_language_glossary.pod6-Anonymous">15.6 Anonymous <a name="79"></a></h1>
 <p>A subroutine, method or submethod is called <i>anonymous</i> if it can't be called by name.</p>
 <pre class="code"># named subroutine
sub double($x) { 2 * $x };

# anonymous subroutine, stored in a named scalar
my $double = sub ($x) { 2 * $x };</pre>
 <p>Note that it is still allowed to have a name, but you cannot call it by that name:</p>
 <pre class="code"># anonymous, but knows its own name
my $s = anon sub triple($x) { 3 * $x }
say $s.name;        # triple
say triple(42);     # Undeclared routine: triple</pre>
 <a name="t15.7"></a><h1 id="_language_glossary.pod6-API">15.7 API <a name="80"></a></h1>
 <p>Application Programming Interface. Ideally, someone using your system or library should be able to do so with knowledge only of the API, but not necessarily knowing anything about the internals or implementation.</p>
 <p>See also <a href="#14-Abstract Class">#Abstract Class</a>.</p>
 <a name="t15.8"></a><h1 id="_language_glossary.pod6-Apocalypse">15.8 Apocalypse <a name="81"></a></h1>
 <p>A document originally written by <a href="#14-TimToady">#TimToady</a>, in which he processed the initial barrage of RFC's that came out of the Perl community. Now only kept as an historical document for reference. See also <a href="#14-Exegesis">#Exegesis</a> and <a href="#14-Synopsis">#Synopsis</a>.</p>
 <a name="t15.9"></a><h1 id="_language_glossary.pod6-Arity">15.9 Arity <a name="82"></a></h1>
 <p>The number of <a href="#14-Positional">positional</a> operands expected by an <a href="#14-Operator">operator</a>, <a href="#14-Subroutine">subroutine</a>, <a href="#14-Method">method</a> or <a href="#14-Callable">callable block</a>.</p>
 <pre class="code">sub infix:&amp;lt;+&gt;(Foo $a, Foo $b) { $a.Int + $b.Int }  # arity of "+" is 2
sub frobnicate($x) { ... }                         # arity of 1
sub the-answer() { 42 }                            # arity of 0
-&gt; $key, $value { ... }                            # arity of 2</pre>
 <p>The arity of a <span class="code">Callable</span> is one of the main selectors in <a href="#14-Multi-Dispatch">multi-dispatch</a>.</p>
 <a name="t15.10"></a><h1 id="_language_glossary.pod6-AST">15.10 AST <a name="83"></a></h1>
 <p>Acronym for <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"> <b>A</b> bstract  <b>S</b> yntax  <b>T</b> ree</a>. Used in many places, including <a href="#14-Actions">actions</a>, <a href="#14-PAST">#PAST</a>, and <a href="#14-QAST">#QAST</a>.</p>
 <a name="t15.11"></a><h1 id="_language_glossary.pod6-Autothreading">15.11 Autothreading <a name="84"></a></h1>
 <p>Autothreading is what happens if you pass a <a href="#14-Junction">Junction</a> to a subroutine that expects a parameter of type <a href="#14-Any">#Any</a> or a subtype thereof (such as anything <a href="#14-Cool">#Cool</a>). The call is then executed for each value of the junction. The result of these calls is assembled in a new junction of the same type as the original junction.</p>
 <pre class="code">sub f($x) { 2 * $x };
say f(1|2|3) == 4;    # any(False, True, False)</pre>
 <p>Here <span class="code">f()</span> is a sub with one parameter, and since it has no explicit type, it is implicitly typed as <span class="code">Any</span>. The <span class="code">Junction</span> argument causes the <span class="code">f(1|2|3)</span> call to be internally executed as <span class="code">f(1)|f(2)|f(3)</span>, and the resulting junction is <span class="code">2|4|6</span>. These are then all compared to <span class="code">4</span>, resulting in a junction <span class="code">False|True|False</span>. This process of separating junction arguments into multiple calls to a function is called <i>autothreading</i>.</p>
 <p>If you use the resulting junction in a boolean context, such as with an <span class="code">if</span>, it collapses into a single boolean which is <span class="code">True</span> if any of the values in the junction are True.</p>
 <pre class="code">if f(1|2|3) == 4 {    # fires because f(2) == 4 is true
    say 'success';
}</pre>
 <a name="t15.12"></a><h1 id="_language_glossary.pod6-block">15.12 block <a name="85"></a></h1>
 <a name="t15.13"></a><h1 id="_language_glossary.pod6-Boolean">15.13 Boolean <a name="86"></a></h1>
 <p><a href="#14-value">Value</a> of type <a href="#14-Bool">#Bool</a>. Apart the class itself, can be either <span class="code">True</span> or <span class="code">False</span>.</p>
 <a name="t15.14"></a><h1 id="_language_glossary.pod6-bytecode">15.14 bytecode <a name="87"></a></h1>
 <a name="t15.15"></a><h1 id="_language_glossary.pod6-Camelia">15.15 Camelia <a name="88"></a></h1>
 <p>A butterfly image intended primarily to represent Perl 6, The Language.</p>
 <a name="t15.16"></a><h1 id="_language_glossary.pod6-Class">15.16 Class <a name="89"></a></h1>
 <p>A basic software structure in <a href="#14-OOP">#OOP</a>. See the <a href="https://en.wikipedia.org/wiki/Class_%28computer_programming%29">Wikipedia entry</a>.</p>
 <a name="t15.17"></a><h1 id="_language_glossary.pod6-Colon_Pair_and_Colon_List">15.17 Colon Pair and Colon List <a name="90"></a> <a name="91"></a></h1>
 <p>A colon pair is a shorthand syntax used to create or visually present a Pair object. The two most common forms are:</p>
 <pre class="code">:a(4)          # Same as "a" =&gt; 4,   same as Pair.new("a", 4)
:a&amp;lt;4&gt;          # Same as "a" =&gt; "4", same as Pair.new("a", "4")</pre>
 <p>This is also known as the adverbial pair form. Note: when the part after the colon and before the brackets is not a legal identifier, other semantics apply, not all of which produce Pair objects.</p>
 <p>Two other common forms are:</p>
 <pre class="code">:a             # Same as :a(True)
:!a            # Same as :a(False)</pre>
 <p>A colon list just means that a list that contains only colon pairs, does not need commas, or even spaces:</p>
 <pre class="code">:a(4):c:!d:c   # Same as a =&gt; 4, c =&gt; True, d =&gt; False, c =&gt; True</pre>
 <p>Finally, if there is a variable with the same name as an intended adverbial pair, you don't have to specify the name twice, but just specify the adverb with the appropriate sigil:</p>
 <pre class="code">:$foo          # same as foo =&gt; $foo
:@bar          # same as bar =&gt; @bar
:%mapper       # same as mapper =&gt; %mapper
:&amp;amp;test         # same as test =&gt; &amp;amp;test</pre>
 <p>See also <a href="#14-Adverb">#Adverb</a>.</p>
 <a name="t15.18"></a><h1 id="_language_glossary.pod6-Damian_Conway">15.18 Damian Conway</h1>
 <p>Original author of the <a href="#14-Exegesis">#Exegesis</a> (among many other things). See also <a href="https://en.wikipedia.org/wiki/Damian_Conway">https://en.wikipedia.org/wiki/Damian_Conway</a>.</p>
 <a name="t15.19"></a><h1 id="_language_glossary.pod6-Exegesis">15.19 Exegesis <a name="92"></a></h1>
 <p>A document originally written by <a href="#14-TheDamian">#TheDamian</a>, in which he tried to explain the <a href="#14-Apocalypse">Apocalypses</a> to the common (wo)man. Now only kept as an historical document for reference. See also <a href="#14-Synopsis">#Synopsis</a>.</p>
 <a name="t15.20"></a><h1 id="_language_glossary.pod6-False">15.20 False <a name="93"></a></h1>
 <p>The value representing logical <span class="code">False</span> of the <a href="#14-Bool">#Bool</a> <a href="#14-Enum">enum</a>.</p>
 <a name="t15.21"></a><h1 id="_language_glossary.pod6-fiddly">15.21 fiddly <a name="94"></a></h1>
 <a name="t15.22"></a><h1 id="_language_glossary.pod6-handles">15.22 handles <a name="95"></a></h1>
 <a name="t15.23"></a><h1 id="_language_glossary.pod6-iffy">15.23 iffy <a name="96"></a></h1>
 <a name="t15.24"></a><h1 id="_language_glossary.pod6-Instance">15.24 Instance <a name="97"></a></h1>
 <p>An <i>instance</i> of a class is also called an <i>object</i> in some other programming languages. It has storage for attributes and is often the return value of a call to a method called <span class="code">new</span>, or a literal.</p>
 <p>Instances of most types are defined to be <span class="code">True</span> e.g., <span class="code">defined($instance)</span> is <span class="code">True</span>.</p>
 <pre class="code">my Str $str = "hello";  ## this is with builtin types, e.g. Str
if defined($str) {
    say "Oh, yeah. I'm defined.";
}
else {
    say "No. Something off? ";
}

## if you wanted objects...
class A {
    # nothing here for now.
}

my $an_instance = A.new;
say $an_instance.defined.perl;# defined($an_instance) works too.</pre>
 <p>To put things another way, a class contains the blueprints of methods and attributes, and an instance carries it into the real world.</p>
 <a name="t15.25"></a><h1 id="_language_glossary.pod6-Interface">15.25 Interface <a name="98"></a></h1>
 <p>An interface is an <a href="#14-Abstract Class">abstract class</a>.</p>
 <a name="t15.26"></a><h1 id="_language_glossary.pod6-IRC">15.26 IRC <a name="101"></a></h1>
 <p>Internet Relay Chat. Perl 6 developers and users usually hang out on the <span class="code">#perl6</span> channel of <span class="code">irc.freenode.org</span>. Currently available bots are:</p>
 <a name="t15.26.1"></a><h2 id="_language_glossary.pod6-camelia">15.26.1 camelia <a name="104"></a></h2>
 <p>The <a href="#14-Bot">#Bot</a> on the #perl6 <a href="#14-IRC">#IRC</a> channel that evaluates code, eg:</p>
 <pre class="code">[16:28:27]  &amp;lt;lizmat&gt;  m: say "Hello world"
[16:28:28]  &amp;lt;+camelia&gt;    rakudo-moar 812a48: OUTPUT«Hello world␤»</pre>
 <p>This is a handy tool for showing people if the output is (un)expected.</p>
 <a name="t15.26.2"></a><h2 id="_language_glossary.pod6-dalek">15.26.2 dalek <a name="105"></a></h2>
 <p>The <a href="#14-Bot">#Bot</a> on the #perl6 <a href="#14-IRC">#IRC</a> channel that reports changes made to various Perl 6 related <a href="#14-Repository">repositories</a>.</p>
 <pre class="code">[15:46:40] &amp;lt;+dalek&gt; doc: 2819f25 | lizmat++ | doc/Language/glossary.pod:
[15:46:40] &amp;lt;+dalek&gt; doc: Add stubs for stuff inside the glossary already
[15:46:40] &amp;lt;+dalek&gt; doc: review: https://github.com/perl6/doc/commit/2819f250</pre>
 <a name="t15.26.3"></a><h2 id="_language_glossary.pod6-yoleaux">15.26.3 yoleaux <a name="106"></a></h2>
 <p>The <a href="#14-Bot">#Bot</a> on the #perl6 <a href="#14-IRC">#IRC</a> channel that provides various services to people logged in. Commands to yoleax (a pun on YOLO) start with a period. Some often used commands are:</p>
 <a name="t15.26.3.1"></a><h3 id="_language_glossary.pod6-.tell">15.26.3.1 .tell</h3>
 <p>Leave a message to another user who is currently not logged in. The message will be relayed as soon as the user says anything on the channel.</p>
 <pre class="code">.tell lizmat I've read the glossary</pre>
 <a name="t15.26.3.2"></a><h3 id="_language_glossary.pod6-.u">15.26.3.2 .u</h3>
 <p>Look up unicode codepoint information from either a codepoint, or the name of a codepoint.</p>
 <pre class="code">[16:35:44]  &amp;lt;lizmat&gt;   .u empty set
[16:35:45]  &amp;lt;yoleaux&gt;  U+2205 EMPTY SET [Sm] (∅)
[16:36:29]  &amp;lt;lizmat&gt;   .u ∅
[16:36:30]  &amp;lt;yoleaux&gt;  U+2205 EMPTY SET [Sm] (∅)</pre>
 <p>Some <a href="#14-IRC">#IRC</a> clients then easily allow you to copy/paste the codepoint in question, which can be sometimes be easier than other unicode codepoint input methods.</p>
 <a name="t15.27"></a><h1 id="_language_glossary.pod6-IRC_Lingo">15.27 IRC Lingo</h1>
 <p>The following terms are often used on the Perl 6 related <a href="#14-IRC">#IRC</a> channels:</p>
 <a name="t15.27.1"></a><h2 id="_language_glossary.pod6-ALAP">15.27.1 ALAP <a name="108"></a></h2>
 <p>As Late As Possible</p>
 <a name="t15.27.2"></a><h2 id="_language_glossary.pod6-autopun">15.27.2 autopun <a name="109"></a></h2>
 <p>A self-referencing pun, e.g. "Are you ignorant or apathetic?" - "I don't know, and I don't care.</p>
 <a name="t15.27.3"></a><h2 id="_language_glossary.pod6-backlog">15.27.3 backlog <a name="110"></a></h2>
 <p>That part of a discussion on an <a href="#14-IRC">#IRC</a> channel that you've missed. If it is not or no longer available in your IRC client, you can go to sites such as <a href="http://irc.perl6.org">http://irc.perl6.org</a> to see what has been logged for you.</p>
 <a name="t15.27.4"></a><h2 id="_language_glossary.pod6-Bot">15.27.4 Bot <a name="111"></a></h2>
 <p>A program that does automatic tasks on one or more <a href="#14-IRC">#IRC</a> channels by acting like a regular user (as far as the IRC server is concerned) and performing some tasks that may involve answering to users requests. Examples are <a href="#14-camelia">#camelia</a>, <a href="#14-dalek">#dalek</a> and <a href="#14-yoleaux">#yoleaux</a>.</p>
 <a name="t15.27.5"></a><h2 id="_language_glossary.pod6-DWIM">15.27.5 DWIM <a name="113"></a></h2>
 <p>Do What I Mean. A programming language designer motto.</p>
 <a name="t15.27.6"></a><h2 id="_language_glossary.pod6-flap">15.27.6 flap <a name="114"></a></h2>
 <p>Sometimes a test will fail under some conditions, but not others; when this test passes some test runs and fails others, it's called flapping.</p>
 <a name="t15.27.7"></a><h2 id="_language_glossary.pod6-fossil">15.27.7 fossil <a name="115"></a></h2>
 <p>Something in a generally current document that is no longer true but which has not yet been fixed by correcting or removing it.</p>
 <a name="t15.27.8"></a><h2 id="_language_glossary.pod6-FSVO">15.27.8 FSVO <a name="116"></a></h2>
 <p>For Some Value Of...</p>
 <a name="t15.27.9"></a><h2 id="_language_glossary.pod6-FTFY">15.27.9 FTFY <a name="117"></a></h2>
 <p>Fixed That For You</p>
 <a name="t15.27.10"></a><h2 id="_language_glossary.pod6-IWBN">15.27.10 IWBN <a name="119"></a></h2>
 <p>It Would Be Nice</p>
 <a name="t15.27.11"></a><h2 id="_language_glossary.pod6-LHF">15.27.11 LHF <a name="120"></a></h2>
 <p>Low Hanging Fruit. Usually used in the context of a (relatively) simple task to be performed by a (relative) newbie.</p>
 <a name="t15.27.12"></a><h2 id="_language_glossary.pod6-LTA">15.27.12 LTA <a name="121"></a></h2>
 <p>Less Than Awesome. Usually used in the context of an error message that is rather undescriptive or unrelated to the actual error.</p>
 <a name="t15.27.13"></a><h2 id="_language_glossary.pod6-NST">15.27.13 NST <a name="124"></a></h2>
 <p>No Such Thing</p>
 <a name="t15.27.14"></a><h2 id="_language_glossary.pod6-Opt">15.27.14 Opt <a name="126"></a></h2>
 <p>Short for "optimization", usually in either the context of <a href="#14-Spesh">spesh</a> or <a href="#14-JIT">#JIT</a>.</p>
 <a name="t15.27.15"></a><h2 id="_language_glossary.pod6-PB">15.27.15 PB <a name="127"></a></h2>
 <p>Short for "problem". As in "that's not the pb".</p>
 <a name="t15.27.16"></a><h2 id="_language_glossary.pod6-PBP">15.27.16 PBP <a name="128"></a></h2>
 <p>"Perl Best Practices". The book by Damian Conway outlining best practices when programming Perl 5.</p>
 <a name="t15.27.17"></a><h2 id="_language_glossary.pod6-PR">15.27.17 PR <a name="130"></a></h2>
 <p>See <a href="#14-Pull Request">#Pull Request</a>.</p>
 <a name="t15.27.18"></a><h2 id="_language_glossary.pod6-P5">15.27.18 P5 <a name="131"></a></h2>
 <p>Perl 5</p>
 <a name="t15.27.19"></a><h2 id="_language_glossary.pod6-P6">15.27.19 P6 <a name="132"></a></h2>
 <p>Perl 6</p>
 <a name="t15.27.20"></a><h2 id="_language_glossary.pod6-RSN">15.27.20 RSN <a name="133"></a></h2>
 <p>Real Soon Now</p>
 <a name="t15.27.21"></a><h2 id="_language_glossary.pod6-RT">15.27.21 RT <a name="135"></a></h2>
 <p>Request Tracker (<a href="http://rt.perl.org/">http://rt.perl.org/</a>). The place where all the bugs related to <a href="#14-Rakudo">#Rakudo</a> live.</p>
 <a name="t15.27.22"></a><h2 id="_language_glossary.pod6-Thunk">15.27.22 Thunk <a name="136"></a></h2>
 <p>A piece of code that isn't immediately executed, but doesn't have an independent scope.</p>
 <a name="t15.27.23"></a><h2 id="_language_glossary.pod6-TIMTOWTDI">15.27.23 TIMTOWTDI <a name="138"></a></h2>
 <p>An alternative form of <a href="#14-TMTOWTDI">#TMTOWTDI</a>, explicitly including the "is" from the contraction "There's".</p>
 <a name="t15.27.24"></a><h2 id="_language_glossary.pod6-TMI">15.27.24 TMI <a name="139"></a></h2>
 <p>Too Much Information.</p>
 <a name="t15.27.25"></a><h2 id="_language_glossary.pod6-TMTOWTDI">15.27.25 TMTOWTDI <a name="140"></a></h2>
 <p>"There's More Than One Way To Do It", the Perl motto.</p>
 <a name="t15.27.26"></a><h2 id="_language_glossary.pod6-UGT">15.27.26 UGT <a name="141"></a></h2>
 <p>"Universal Greeting Time" - i.e., it's always "morning".</p>
 <a name="t15.27.27"></a><h2 id="_language_glossary.pod6-WFM">15.27.27 WFM <a name="143"></a></h2>
 <p>Works For Me</p>
 <a name="t15.27.28"></a><h2 id="_language_glossary.pod6-WIP">15.27.28 WIP <a name="144"></a></h2>
 <p>Work In Progress</p>
 <a name="t15.27.29"></a><h2 id="_language_glossary.pod6-WP">15.27.29 WP <a name="145"></a></h2>
 <p>Wikipedia</p>
 <a name="t15.27.30"></a><h2 id="_language_glossary.pod6-WW">15.27.30 WW <a name="146"></a></h2>
 <p>Short for <span class="code">wrong window</span>. When on <a href="#14-IRC">#IRC</a>, someone types something in a channel that was intended for another channel, or for a private message.</p>
 <a name="t15.28"></a><h1 id="_language_glossary.pod6-Larry_Wall">15.28 Larry Wall</h1>
 <p><a href="#14-Perl">Perl's</a> benevolent dictator for life, among many other things. See also <a href="https://en.wikipedia.org/wiki/Larry_Wall">https://en.wikipedia.org/wiki/Larry_Wall</a>.</p>
 <a name="t15.29"></a><h1 id="_language_glossary.pod6-Lexing">15.29 Lexing <a name="147"></a></h1>
 <a name="t15.30"></a><h1 id="_language_glossary.pod6-Literal">15.30 Literal <a name="148"></a></h1>
 <p>A <i>literal</i> is a piece of code that directly stands for an (often built-in) object and also refers to the object itself.</p>
 <pre class="code">my $x = 2;      # the 2 is a literal
say $x;         # $x is not a literal, but a variable
my $s = "Foo";  # the "Foo" is a literal, the $s is a variable</pre>
 <a name="t15.31"></a><h1 id="_language_glossary.pod6-lvalue">15.31 lvalue <a name="149"></a></h1>
 <p>An <i>lvalue</i>, or a <i>left value</i>, is anything that can appear on the left hand side of the assignment operator <span class="code">=</span>. It is anything you can assign to.</p>
 <p>Typical lvalues are variables, private and <span class="code">is rw</span> attributes, lists of variables and lvalue subroutines.</p>
 <p>Examples of lvalues:</p>
 <pre class="code">Declaration             lvalue          Comments

my $x;                  $x
my ($a, $b);            ($a, $b)
has $!attribute;        $!attribute     Only inside classes
has $.attrib is rw;     $.attrib
sub a is rw { $x };     a()</pre>
 <p>Examples of things that are not lvalues:</p>
 <pre class="code">3                        # literals
constant x = 3;          # constants
has $.attrib;            # attributes; you can only assign to $!attrib
sub f { }; f();          # "normal" subs are not writable
sub f($x) { $x = 3 };    # error - parameters are read-only by default</pre>
 <p>These are typically called <a href="#14-rvalue">rvalues</a>.</p>
 <a name="t15.32"></a><h1 id="_language_glossary.pod6-machine_code">15.32 machine code <a name="150"></a></h1>
 <p>See <a href="https://en.wikipedia.org/wiki/Machine_code">Wikipedia entry</a></p>
 <a name="t15.33"></a><h1 id="_language_glossary.pod6-Mainline">15.33 Mainline <a name="151"></a></h1>
 <p>The <span class="code">mainline</span> is the program text that is not part of any kind of block.</p>
 <pre class="code">use v6;     # mainline
sub f {
            # not in mainline, in sub f
}
f();        # in mainline again</pre>
 <p>You can also have the mainline of any package-like declarator, such as <a href="#14-Class">class</a>, <a href="#14-Module">module</a>, <a href="#14-Grammar">grammar</a>, etc. These are typically run just after the class/module/grammar have been compiled (or when loaded from a pre-compiled file).</p>
 <a name="t15.34"></a><h1 id="_language_glossary.pod6-MoarVM">15.34 MoarVM <a name="152"></a></h1>
 <p>MoarVM is short for Metamodel On A Runtime Virtual Machine. It's a virtual machine designed specifically for <a href="#14-NQP">#NQP</a> and its <a href="#14-MOP">#MOP</a>: <a href="#14-6model">#6model</a>. A document about <a href="https://github.com/MoarVM/MoarVM/blob/master/docs/reveal.md">the purpose of MoarVM</a>. MoarVM has some similarities with the Hotspot VM so you may peruse its <a href="http://openjdk.java.net/groups/hotspot/docs/HotSpotGlossary.html">glossary</a> for entries missing from the present one.</p>
 <a name="t15.35"></a><h1 id="_language_glossary.pod6-Multi-Dispatch">15.35 Multi-Dispatch <a name="153"></a></h1>
 <a name="t15.36"></a><h1 id="_language_glossary.pod6-multi-method">15.36 multi-method <a name="154"></a></h1>
 <a name="t15.37"></a><h1 id="_language_glossary.pod6-Niecza">15.37 Niecza <a name="155"></a></h1>
 <p>An implementation of Perl 6 targeting the .NET platform. No longer actively maintained.</p>
 <a name="t15.38"></a><h1 id="_language_glossary.pod6-Not_Quite_Perl">15.38 Not Quite Perl <a name="156"></a></h1>
 <p>See <a href="#14-NQP">#NQP</a>.</p>
 <a name="t15.39"></a><h1 id="_language_glossary.pod6-NQP">15.39 NQP <a name="157"></a></h1>
 <p>NQP is a primitive language for writing subroutines and methods using a subset of the Perl 6 syntax. It's not intended to be a full-fledged programming language, nor does it provide a runtime environment beyond the basic VM primitives. Compilers (such as <a href="#14-Rakudo">#Rakudo</a> typically use NQP to compile <a href="#14-Actions">action methods</a> that convert a parse tree into its equivalent <a href="#14-AST">abstract syntax tree</a> representation.</p>
 <a name="t15.40"></a><h1 id="_language_glossary.pod6-NYI">15.40 NYI <a name="158"></a></h1>
 <p>Not Yet Implemented</p>
 <a name="t15.41"></a><h1 id="_language_glossary.pod6-OOP">15.41 OOP <a name="159"></a></h1>
 <p>Object Oriented Programming, see <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">https://en.wikipedia.org/wiki/Object-oriented_programming</a></p>
 <a name="t15.42"></a><h1 id="_language_glossary.pod6-opcode">15.42 opcode <a name="160"></a></h1>
 <a name="t15.43"></a><h1 id="_language_glossary.pod6-Operator">15.43 Operator <a name="161"></a></h1>
 <p>An expression is made of operators and operands. More precisely it is made of an operator and operands that can be subexpressions or <a href="#14-value">#value</a>s. Operators are an alternative syntax for a <a href="#14-multi-method">#multi-method</a>. With that syntax, what would be the <a href="#14-Argument">argument</a>s of the function are named operands instead. Operators are classified into <a href="https://design.perl6.org/S02.html#Grammatical_Categories">categories</a> of categories. A category has a precedence, an arity, and can be <a href="#14-fiddly">#fiddly</a>, <a href="#14-iffy">#iffy</a>, <a href="#14-diffy">#diffy</a>. Perl 6 is very creative as to what is an operator, so there are many categories. Operators are made of many tokens, possibly with a subexpression. For example, <span class="code">@a[0]</span> belongs to the postcircumfix category, is broken into the operand <span class="code">@a</span> and the postcircumfix operator <span class="code">[0]</span> where <span class="code">0</span> is the postcircumfixed subexpression.</p>
 <p>The <span class="code">&lt;O(I&lt;...>)> </span> construction gives information about an operator that completes the information provided by its category. Below <span class="code">%conditional</span> is the category, <span class="code">:reducecheck&lt;ternary> </span>, which specifies calling <span class="code">.ternary</span> to post-process the <a href="#14-Parse Tree">parse subtree</a> and <span class="code">:pasttype&lt;if> </span> specifies the NQP <a href="#14-opcode">#opcode</a> generated in the <a href="#14-AST">#AST</a> from the parse subtree.</p>
 <pre class="code">&amp;lt;O('%conditional, :reducecheck&amp;lt;ternary&gt;, :pasttype&amp;lt;if&gt;')&gt;</pre>
 <a name="t15.44"></a><h1 id="_language_glossary.pod6-OS">15.44 OS <a name="162"></a></h1>
 <p>See <a href="https://en.wikipedia.org/wiki/Operating_system">Wikipedia article</a></p>
 <a name="t15.45"></a><h1 id="_language_glossary.pod6-Parse_Tree">15.45 Parse Tree <a name="163"></a></h1>
 <a name="t15.46"></a><h1 id="_language_glossary.pod6-Parameter">15.46 Parameter <a name="164"></a></h1>
 <p><a href="#_type_Parameter.pod6">Parameter</a> is a class to define parameters to <a href="#14-Subroutine">subroutines</a>, <a href="#14-Method">methods</a> and a <a href="#14-Callable">callable blocks</a>. As opposed to the <a href="#14-Argument">arguments</a> you specify when calling a subroutine/method/callable block.</p>
 <pre class="code">sub foo($bar) { say $bar }     # $bar is a parameter
foo(42);                       # 42 is an argument</pre>
 <a name="t15.47"></a><h1 id="_language_glossary.pod6-Parrot">15.47 Parrot <a name="168"></a></h1>
 <p>A <a href="#14-Virtual Machine">virtual machine</a> designed to run Perl 6 and other <a href="#14-Dynamic Language">dynamic languages</a>. No longer actively maintained.</p>
 <a name="t15.48"></a><h1 id="_language_glossary.pod6-PAST">15.48 PAST <a name="169"></a></h1>
 <p><a href="#14-Parrot">#Parrot</a> <a href="#14-AST">#AST</a>.</p>
 <a name="t15.49"></a><h1 id="_language_glossary.pod6-perl">15.49 perl <a name="171"></a></h1>
 <p>Name of the Perl 5 executor.</p>
 <a name="t15.50"></a><h1 id="_language_glossary.pod6-Perl">15.50 Perl <a name="172"></a></h1>
 <p>The Perl programming language in its many forms.</p>
 <a name="t15.51"></a><h1 id="_language_glossary.pod6-Perl_Community">15.51 Perl Community <a name="173"></a></h1>
 <a name="t15.52"></a><h1 id="_language_glossary.pod6-PERL">15.52 PERL <a name="174"></a></h1>
 <p>A way to describe <a href="#14-Perl">Perl</a> as a language, considered to be improper by many in the <a href="#14-Perl Community">#Perl Community</a>.</p>
 <a name="t15.53"></a><h1 id="_language_glossary.pod6-POD">15.53 POD <a name="175"></a></h1>
 <p><b>P</b>lain <b>O</b>l' <b>D</b>ocumentation, a documentation format understood by Perl 6. See <a href="https://design.perl6.org/S26.html">S26</a> for details.</p>
 <a name="t15.54"></a><h1 id="_language_glossary.pod6-Property">15.54 Property</h1>
 <p>See <a href="#14-Attribute">#Attribute</a>.</p>
 <a name="t15.55"></a><h1 id="_language_glossary.pod6-Pull_Request">15.55 Pull Request <a name="176"></a></h1>
 <p>A feature of <a href="https://github.com">https://github.com</a> that allows you to make patches to be easily applied using the Github user interface.</p>
 <a name="t15.56"></a><h1 id="_language_glossary.pod6-pugs">15.56 pugs <a name="177"></a></h1>
 <a name="t15.57"></a><h1 id="_language_glossary.pod6-QAST">15.57 QAST <a name="178"></a></h1>
 <p>Successor to <a href="#14-QAST">#QAST</a>.</p>
 <a name="t15.58"></a><h1 id="_language_glossary.pod6-Rakudo">15.58 Rakudo <a name="179"></a></h1>
 <p>Rakudo is the name of a Perl 6 implementation that runs on <a href="#14-MoarVM">#MoarVM</a> and the <a href="#14-JVM">#JVM</a>. It is an abbreviation of "Rakuda-do," which, when translated from Japanese, means "The Way of the Camel". Also, in Japanese, "Rakudo" means "Paradise."</p>
 <a name="t15.59"></a><h1 id="_language_glossary.pod6-Regular_Expression">15.59 Regular Expression</h1>
 <p>See <a href="https://en.wikipedia.org/wiki/Regular_expression">Regular Expression</a></p>
 <a name="t15.60"></a><h1 id="_language_glossary.pod6-regex">15.60 regex <a name="180"></a></h1>
 <p><a href="#14-Regular Expression">#Regular Expression</a>.</p>
 <a name="t15.61"></a><h1 id="_language_glossary.pod6-Repository">15.61 Repository <a name="181"></a></h1>
 <a name="t15.62"></a><h1 id="_language_glossary.pod6-roast">15.62 roast <a name="182"></a></h1>
 <p>The Perl 6 <a href="#14-test suite">specification tests</a>, which live here: <a href="https://github.com/perl6/roast/">https://github.com/perl6/roast/</a>. Originally developed for <a href="#14-pugs">#pugs</a>, it now serves all Perl 6 implementations. Why roast? It's the <b>r</b>epository <b>o</b>f <b>a</b>ll <b>s</b>pec <b>t</b>ests.</p>
 <a name="t15.63"></a><h1 id="_language_glossary.pod6-rule">15.63 rule <a name="183"></a></h1>
 <p>(Used in regular expressions)</p>
 <a name="t15.64"></a><h1 id="_language_glossary.pod6-rvalue">15.64 rvalue <a name="184"></a></h1>
 <p>A value that can be used on the right hand side of an assignment. See also <a href="#14-lvalue">#lvalue</a>.</p>
 <a name="t15.65"></a><h1 id="_language_glossary.pod6-Sigil">15.65 Sigil <a name="185"></a></h1>
 <p>In Perl, the sigil is the first character of a variable name. It must be either <a href="#14-$">#$</a>, <a href="#14-@">#@</a>, <a href="#14-%">#%</a>, or <a href="#14-&amp;amp;">#&amp;</a> respectively for a <a href="#14-Scalar">scalar</a>, <a href="#14-Array">array</a>, <a href="#14-Hash">hash</a>, or <a href="#14-Code">code</a> variable. See also <a href="#14-Twigil">#Twigil</a> and <a href="#14-role">#role</a>. Also sigilled variables allow short conventions for <a href="#14-Variable Interpolation">variable interpolation</a> in a double quoted string, or even <a href="#14-Postcircumfix">postcircumfix</a> <a href="#14-Expression">expressions</a> starting with such a variable.</p>
 <a name="t15.66"></a><h1 id="_language_glossary.pod6-Sigilless_Variable">15.66 Sigilless Variable <a name="186"></a></h1>
 <a name="t15.67"></a><h1 id="_language_glossary.pod6-Spesh">15.67 Spesh <a name="187"></a></h1>
 <p>A functionality of the <a href="#14-MoarVM">#MoarVM</a> platform that uses run-time gathered data to improve commonly used pieces of <a href="#14-bytecode">#bytecode</a>. It is much like a <a href="#14-JIT">#JIT</a> compiler, except that those usually output <a href="#14-machine code">#machine code</a> rather than bytecode.</p>
 <a name="t15.68"></a><h1 id="_language_glossary.pod6-STD">15.68 STD <a name="188"></a></h1>
 <p>STD.pm is the "standard" Perl 6 grammar definition, see <a href="https://github.com/perl6/std/">https://github.com/perl6/std/</a> that was used to implement Perl 6. STD.pm is no longer really a "specification" in a proscriptive sense: it's more of a guideline or model for Perl 6 implementations to follow.</p>
 <a name="t15.69"></a><h1 id="_language_glossary.pod6-Stub">15.69 Stub <a name="189"></a></h1>
 <a name="t15.70"></a><h1 id="_language_glossary.pod6-Symbol">15.70 Symbol <a name="190"></a></h1>
 <p>Fancy alternative way to denote a name. Generally used in the context of <a href="#14-Module">module</a>s linking, be it in the <a href="#14-OS">#OS</a> level, or at the Perl 6 <a href="#14-VM">#VM</a> level for modules generated from languages targeting these VMs. The set of <a href="#14-import">#import</a>ed or exported symbols is called the symbol table.</p>
 <a name="t15.71"></a><h1 id="_language_glossary.pod6-Synopsis">15.71 Synopsis <a name="191"></a></h1>
 <p>The current human-readable description of the Perl 6 language. Still in development. Much more a community effort than the <a href="#14-Apocalypse">Apocalypses</a> and <a href="#14-Exegesis">Exegeses</a> were. The current state of the language is reflected by <a href="#14-roast">#roast</a>, its <a href="#14-test suite">#test suite</a>, not the synopses where speculative material is not always so flagged or more recent additions have not been documented. This is even more true of material that has not been yet implemented.</p>
 <a name="t15.72"></a><h1 id="_language_glossary.pod6-Syntax_Analysis">15.72 Syntax Analysis <a name="192"></a></h1>
 <a name="t15.73"></a><h1 id="_language_glossary.pod6-test_suite">15.73 test suite <a name="193"></a></h1>
 <p>The Perl 6 test suite is <a href="#14-roast">#roast</a></p>
 <a name="t15.74"></a><h1 id="_language_glossary.pod6-Texas_operator">15.74 Texas operator <a name="194"></a></h1>
 <p>The ASCII variant of a non-ASCII Unicode <a href="#14-Operator">operator</a> or <a href="#14-Symbol">symbol</a>. So described because "Everything's bigger in Texas." For instance, <span class="code">(elem)</span> corresponds to the <span class="code">∈</span> ("Is this an element of that set?") operator that comes from set theory. Texas operators are a workaround to the problem that people don't know how to type Unicode yet. Culturally, while we encourage people to use the Unicode symbols in a vague sort of way, we do not disparage the use of the ASCII variants. Well, maybe just a little...</p>
 <a name="t15.75"></a><h1 id="_language_glossary.pod6-TheDamian">15.75 TheDamian</h1>
 <p><a href="#14-IRC">#IRC</a> screen name for <a href="#14-Damian Conway">#Damian Conway</a>, writer of the original <a href="#14-Exegesis">Exegeses</a>.</p>
 <a name="t15.76"></a><h1 id="_language_glossary.pod6-TimToady">15.76 TimToady</h1>
 <p><a href="#14-IRC">#IRC</a> screen name for <a href="#14-Larry Wall">#Larry Wall</a>, creator of Perl. The name comes from the pronunciation of <a href="#14-TIMTOWTDI">#TIMTOWTDI</a> as a word.</p>
 <a name="t15.77"></a><h1 id="_language_glossary.pod6-True">15.77 True <a name="195"></a></h1>
 <p>The value representing logical <span class="code">True</span> of the <a href="#14-Bool">#Bool</a> <a href="#14-Enum">enum</a>.</p>
 <a name="t15.78"></a><h1 id="_language_glossary.pod6-value">15.78 value <a name="196"></a></h1>
 <a name="t15.79"></a><h1 id="_language_glossary.pod6-Variable">15.79 Variable <a name="197"></a></h1>
 <p>A variable is a name for a <a href="#14-Container">container</a>.</p>
 <a name="t15.80"></a><h1 id="_language_glossary.pod6-Variable_Interpolation">15.80 Variable Interpolation <a name="198"></a></h1>
 <a name="t15.81"></a><h1 id="_language_glossary.pod6-Virtual_Machine">15.81 Virtual Machine <a name="199"></a></h1>
 <p>A virtual machine is the Perl compiler entity that executes the <a href="#14-Bytecode">bytecode</a>. It can optimize the bytecode or generate <a href="#14-Machine code">machine code</a> <a href="#14-JIT">Just in Time</a>. Examples are <a href="#14-MoarVM">#MoarVM</a>, <a href="#14-Parrot">#Parrot</a> (who are intended to run Perl 6) and more generic virtual machines such as <a href="#14-JVM">#JVM</a> and <a href="#14-Javascript">#Javascript</a>.</p>
 <a name="t15.82"></a><h1 id="_language_glossary.pod6-whitespace">15.82 whitespace <a name="200"></a></h1>
 <a name="t15.83"></a><h1 id="_language_glossary.pod6-6model">15.83 6model <a name="201"></a></h1>
</div> <!-- /language/grammars.pod6 --><div class="pod-body"><a id="_language_grammars.pod6"></a><a name="t16"><h1 class="title">16 Grammars</h1></a> <p class="subtitle">Parsing and interpreting text</p> <p>Grammars are a powerful tool used to destructure text and often to return data structures that have been created by interpreting that text.</p>
 <p>For example, Perl 6 is parsed and executed using a Perl 6-style grammar.</p>
 <p>An example that's more practical to the common Perl 6 user is the <a href="https://github.com/moritz/json">JSON::Tiny module</a>, which can deserialize any valid JSON file, however the deserializing code is written in less than 100 lines of simple, extensible code.</p>
 <p>If you didn't like grammar in school, don't let that scare you off grammars. Grammars allow you to group regexes, just as classes allow you to group methods of regular code.</p>
 <a name="t16.1"></a><h1 id="_language_grammars.pod6-Named_Regexes">16.1 <a name="112"></a>Named Regexes</h1>
 <p>The main ingredient of grammars is named <a href="#_language_regexes.pod6">regexes</a>. While the syntax of <a href="#_language_regexes.pod6">Perl 6 Regexes</a> is outside the scope of this document, <i>named</i> regexes have a special syntax, similar to subroutine definitions:<div class="marginale">In fact, named regexes can even take extra arguments, using the same syntax as subroutine parameter lists</div></p>
 <pre class="code">my  &lt;b&gt;regex number {&lt;/b&gt;  \d+ [ \. \d+ ]?  &lt;b&gt;}&lt;/b&gt;  
</pre>
 <p>In this case, we have to specify that the regex is lexically scoped using the <span class="code">my</span> keyword, because named regexes are normally used within grammars.</p>
 <p>Being named gives us the advantage of being able to easily reuse the regex elsewhere:</p>
 <pre class="code">say "32.51" ~~  &lt;b&gt;&amp;amp;number&lt;/b&gt; ; 
 say "15 + 4.5" ~~ / &lt;b&gt; &amp;lt;number&gt; &lt;/b&gt; \s* '+' \s* &lt;b&gt; &amp;lt;number&gt; &lt;/b&gt; / 
</pre>
 <p><b> <span class="code">regex</span> </b> isn't the only declarator for named regexes -- in fact, it's the least common. Most of the time, the <b> <span class="code">token</span> </b> or <b> <span class="code">rule</span> </b> declarators are used. These are both <i>ratcheting</i>, which means that the match engine won't back up and try again if it fails to match something. This will usually do what you want, but isn't appropriate for all cases:</p>
 <pre class="code">my regex works-but-slow { .+ q } 
 my token fails-but-fast { .+ q } 
 my $s = 'Tokens won\'t backtrack, which makes them fail quicker!'; 
 say so $s ~~ &amp;amp;works-but-slow; # True 
 say so $s ~~ &amp;amp;fails-but-fast; # False, the entire string get taken by the .+ 
</pre>
 <p>The only difference between the <span class="code">token</span> and <span class="code">rule</span> declarators is that the <span class="code">rule</span> declarator causes <a href="#_language_regexes.pod6-Sigspace"> <span class="code">:sigspace</span> </a> to go into effect for the Regex:</p>
 <pre class="code">my token non-space-y { 'once' 'upon' 'a' 'time' } 
 my rule space-y { 'once' 'upon' 'a' 'time' } 
 say 'onceuponatime'    ~~ &amp;amp;non-space-y; 
 say 'once upon a time' ~~ &amp;amp;space-y; 
</pre>
 <a name="t16.2"></a><h1 id="_language_grammars.pod6-Creating_Grammars">16.2 <a name="118"></a>Creating Grammars</h1>
 <p class="subtitle">Group of named regexes that form a formal grammar</p> <p><a href="#_type_Grammar.pod6">Grammar</a> is the superclass that classes automatically get when they are declared with the <span class="code">grammar</span> keyword instead of <span class="code">class</span>. Grammars should only be used to parse text; if you wish to extract complex data, an <a href="#_language_grammars.pod6-Action_Objects">action object</a> is recommended to be used in conjunction with the grammar.</p>
 <p><span class="indexed"><a id="122" name="sym"></a></span> <span class="indexed"><a id="123" name=":sym&lt;&gt; "></a></span> <span class="indexed"><a id="125" name="protoregex"></a></span></p>
 <a name="t16.2.1"></a><h2 id="_language_grammars.pod6-Protoregexes">16.2.1 Protoregexes</h2>
 <p>If you have a lot of alternations, it may become difficult to produce readable code or subclass your grammar. In the Actions class below, the ternary in <span class="code">method TOP</span> is less than ideal and it becomes even worse the more operations we we add:</p>
 <pre class="code">grammar Calculator {
    token TOP { [ &amp;lt;add&gt; | &amp;lt;sub&gt; ] }
    rule  add { &amp;lt;num&gt; '+' &amp;lt;num&gt; }
    rule  sub { &amp;lt;num&gt; '-' &amp;lt;num&gt; }
    token num { \d+ }
}

class Calculations {
    method TOP ($/) { make $&amp;lt;add&gt; ?? $&amp;lt;add&gt;.made !! $&amp;lt;sub&gt;.made; }
    method add ($/) { make [+] $&amp;lt;num&gt;; }
    method sub ($/) { make [-] $&amp;lt;num&gt;; }
}

say Calculator.parse('2 + 3', actions =&gt; Calculations).made;

# OUTPUT:
# 5</pre>
 <p>To make things better, we can use protoregexes that look like `<span class="code">:sym&lt;...> </span> adverbs on tokens:</p>
 <pre class="code">grammar Calculator {
    token TOP { &amp;lt;calc-op&gt; }

    proto rule calc-op          {*}
          rule calc-op:sym&amp;lt;add&gt; { &amp;lt;num&gt; '+' &amp;lt;num&gt; }
          rule calc-op:sym&amp;lt;sub&gt; { &amp;lt;num&gt; '-' &amp;lt;num&gt; }

    token num { \d+ }
}

class Calculations {
    method TOP              ($/) { make $&amp;lt;calc-op&gt;.made; }
    method calc-op:sym&amp;lt;add&gt; ($/) { make [+] $&amp;lt;num&gt;; }
    method calc-op:sym&amp;lt;sub&gt; ($/) { make [-] $&amp;lt;num&gt;; }
}

say Calculator.parse('2 + 3', actions =&gt; Calculations).made;

# OUTPUT:
# 5</pre>
 <p>In the grammar, the alternation has now been replaced with <span class="code">&lt;calc-op> </span>, which is essentially the name of a group of values we'll create. We do so by defining a rule prototype with <span class="code">proto rule calc-op</span>. Each of our previous alternations have been replaced by a new <span class="code">rule calc-op</span> definition and the name of the alternation is attached with <span class="code">:sym&lt;> </span> adverb.</p>
 <p>In the actions class, we now got rid of the ternary operator and simply take the <span class="code">.made</span> value from the <span class="code">$&lt;calc-op> </span> match object. And the actions for individual alternations now follow the name naming pattern as in the grammar: <span class="code">method calc-op:sym&lt;add> </span> and <span class="code">method calc-op:sym&lt;sub> </span>>.</p>
 <p>The real beauty of this method can be seen when you subclass that grammar and actions class. Let's say we want to add a multiplication feature to the calculator:</p>
 <pre class="code">grammar BetterCalculator is Calculator {
    rule calc-op:sym&amp;lt;mult&gt; { &amp;lt;num&gt; '*' &amp;lt;num&gt; }
}

class BetterCalculations is Calculations {
    method calc-op:sym&amp;lt;mult&gt; ($/) { make [*] $&amp;lt;num&gt; }
}

say BetterCalculator.parse('2 * 3', actions =&gt; BetterCalculations).made;

# OUTPUT:
# 6</pre>
 <p>All we had to add are additional rule and action to the <span class="code">calc-op</span> group and the thing works—all thanks to protoregexes.</p>
 <a name="t16.2.2"></a><h2 id="_language_grammars.pod6-Special_Tokens">16.2.2 Special Tokens</h2>
 <p><span class="indexed"><a id="129" name="TOP"></a></span></p>
 <a name="t16.2.2.1"></a><h3 id="_language_grammars.pod6-TOP">16.2.2.1 <span class="code">TOP</span></h3>
 <pre class="code">grammar Foo {
    token TOP { \d+ }
}</pre>
 <p>The <span class="code">TOP</span> token is the default first token attempted to match when parsing with a grammar—the root of the tree. Note that if you're parsing with <a href="#_type_Grammar.pod6-method_parse"> <span class="code">.parse</span> </a> method, <span class="code">token TOP</span> is automatically anchored to the start and end of the string (see also: <a href="#_type_Grammar.pod6-method_subparse"> <span class="code">.subparse</span> </a>).</p>
 <p>Using <span class="code">rule TOP</span> or <span class="code">regex TOP</span> are also acceptable.</p>
 <p>A different token can be chosen to be matched first using the <span class="code">:rule</span> named argument to <span class="code">.parse</span>, <span class="code">.subparse</span>, or <span class="code">.parsefile</span> <span class="code">Grammar</span> methods.</p>
 <p><span class="indexed"><a id="134" name="ws"></a></span></p>
 <a name="t16.2.2.2"></a><h3 id="_language_grammars.pod6-ws">16.2.2.2 <span class="code">ws</span></h3>
 <p>When <span class="code">rule</span> instead of <span class="code">token</span> is used, any whitespace after an atom is turned into a non-capturing call to <span class="code">ws</span>. That is:</p>
 <pre class="code">rule entry { &amp;lt;key&gt; ’=’ &amp;lt;value&gt; }</pre>
 <p>Is the same as:</p>
 <pre class="code">token entry { &amp;lt;key&gt; &amp;lt;.ws&gt; ’=’ &amp;lt;.ws&gt; &amp;lt;value&gt; &amp;lt;.ws&gt; } # . = non-capturing</pre>
 <p>The default <span class="code">ws</span> matches "whitespace", such a sequence of spaces (of whatever type), newlines, unspaces, or heredocs.</p>
 <p>It's perfectly fine to provide your own <span class="code">ws</span> token:</p>
 <pre class="code">grammar Foo {
    rule TOP { \d \d }
}.parse: "4   \n\n 5"; # Succeeds

grammar Bar {
    rule TOP { \d \d }
    token ws { \h*   }
}.parse: "4   \n\n 5"; # Fails</pre>
 <p><span class="indexed"><a id="137" name="&lt;?&gt; "></a></span></p>
 <a name="t16.2.2.3"></a><h3 id="_language_grammars.pod6-Always_Succeed_Assertion">16.2.2.3 Always Succeed Assertion</h3>
 <p>The <span class="code">&lt;?> </span> is the <i>always succeed</i> assertion. When used as a grammar token, it can be used to trigger an Action class method. In the following grammar we look for Arabic digits and define a <span class="code">succ</span> token with the always succeed assertion.</p>
 <p>In the action class, we use calles to the <span class="code">succ</span> method to do set up (in this case, we prepare a new element in <span class="code">@!numbers</span>). In the <span class="code">digit</span> method, we convert an Arabic digit into a Devanagari digit and add it to the last element of <span class="code">@!numbers</span>. Thanks to <span class="code">succ</span>, the last element will always be the number for the currently parsed <span class="code">digit</span> digits.</p>
 <pre class="code">grammar Digifier {
    rule TOP {
        [ &amp;lt;.succ&gt; &amp;lt;digit&gt;+ ]+
    }
    token succ   { &amp;lt;?&gt; }
    token digit { &amp;lt;[0..9]&gt; }
}

class Devanagari {
    has @!numbers;
    method digit ($/) { @!numbers[*-1] ~= $/.ord.&amp;amp;[+](2358).chr }
    method succ  ($)  { @!numbers.push: ''     }
    method TOP   ($/) { make @!numbers[^(*-1)] }
}

say Digifier.parse('255 435 777', actions =&gt; Devanagari.new).made;
# OUTPUT:
# (२५५ ४३५ ७७७)</pre>
 <a name="t16.2.3"></a><h2 id="_language_grammars.pod6-Methods_in_Grammar">16.2.3 Methods in Grammar</h2>
 <p>It's fine to use methods instead of rules or tokens in a grammar, as long as they return a <a href="#_type_Cursor.pod6">/type/Cursor</a>:</p>
 <pre class="code">grammar DigitMatcher {
    method TOP (:$full-unicode) {
        $full-unicode ?? self.num-full !! self.num-basic;
    }
    token num-full  { \d+ }
    token num-basic { &amp;lt;[0..9]&gt;+ }
}</pre>
 <p>The grammar above will attempt different matches depending on the arguments provided by parse methods:</p>
 <pre class="code">say +DigitMatcher.subparse: '12७१७९०९', args =&gt; \(:full-unicode);
# OUTPUT:
# 12717909

say +DigitMatcher.subparse: '12७१७९०९', args =&gt; \(:!full-unicode);
# OUTPUT:
# 12</pre>
 <a name="t16.3"></a><h1 id="_language_grammars.pod6-Action_Objects">16.3 Action Objects <a name="142"></a></h1>
 <p>A successful grammar match gives you a parse tree of <a href="#_type_Match.pod6">Match</a> objects, and the deeper that match tree gets, and the more branches in the grammar are, the harder it becomes to navigate the match tree to get the information you are actually interested in.</p>
 <p>To avoid the need for diving deep into a match tree, you can supply an <i>actions</i> object. After each successful parse of a named rule in your grammar, it tries to call a method of the same name as the grammar rule, giving it the newly created <a href="#_type_Match.pod6">Match</a> object as a positional argument. If no such method exists, it is skipped.</p>
 <p>Here is a contrived example of a grammar and actions in action:</p>
 <pre class="code">use v6; 
 
 grammar TestGrammar { 
     token TOP { \d+ } 
 } 
 
 class TestActions { 
     method TOP($/) { 
         $/.make(2 + $/); 
     } 
 } 
 
 my $actions = TestActions.new; 
 my $match = TestGrammar.parse('40', :$actions); 
 say $match;         # ｢40｣ 
 say $match.made;    # 42 
</pre>
 <p>An instance of <span class="code">TestActions</span> is passed as named argument <span class="code">actions</span> to the <a href="#_routine_parse.pod6">parse</a> call, and when token <span class="code">TOP</span> has matched successfully, it automatically calls method <span class="code">TOP</span>, passing the match object as an argument.</p>
 <p>To make it clear that the argument is a match object, the example uses <span class="code">$/</span> as a parameter name to the action method, though that's just a handy convention, nothing intrinsic. <span class="code">$match</span> would have worked too. (Though using <span class="code">$/</span> does give the advantage of providing <span class="code">$&lt;capture> </span> as a shortcut for <span class="code">$/&lt;capture> </span>).</p>
 <p>A slightly more involved example follows:</p>
 <pre class="code">use v6; 
 
 grammar KeyValuePairs { 
     token TOP { 
         [&amp;lt;pair&gt; \n+]* 
     } 
     token ws { \h* } 
 
     rule pair { 
         &amp;lt;key=.identifier&gt; '=' &amp;lt;value=.identifier&gt; 
     } 
     token identifier { 
         \w+ 
     } 
 } 
 
 class KeyValuePairsActions { 
     method identifier($/) { $/.make: ~$/                          } 
     method pair      ($/) { $/.make: $&amp;lt;key&gt;.made =&gt; $&amp;lt;value&gt;.made } 
     method TOP       ($/) { $/.make: $&amp;lt;pair&gt;».made                } 
 } 
 
 my  $res = KeyValuePairs.parse(q:to/EOI/, :actions(KeyValuePairsActions)).made; 
     second=b 
     hits=42 
     perl=6 
     EOI 
 
 for @$res -&gt; $p { 
     say "Key: $p.key()\tValue: $p.value()"; 
 } 
</pre>
 <p>This produces the following output:</p>
 <pre class="code">Key: second     Value: b 
 Key: hits       Value: 42 
 Key: perl       Value: 6 
</pre>
 <p>Rule <span class="code">pair</span>, which parsed a pair separated by an equals sign, aliases the two calls to token <span class="code">identifier</span> to separate capture names to make them available more easily and intuitively. The corresponding action method constructs a <a href="#_type_Pair.pod6">Pair</a> object, and uses the <span class="code">.made</span> property of the sub match objects. So it (like the action method <span class="code">TOP</span> too) exploits the fact that action methods for submatches are called before those of the calling/outer regex. So action methods are called in <a href="https://en.wikipedia.org/wiki/Tree_traversal#Post-order">post-order</a>.</p>
 <p>The action method <span class="code">TOP</span> simply collects all the objects that were <span class="code">.made</span> by the multiple matches of the <span class="code">pair</span> rule, and returns them in a list.</p>
 <p>Also note that <span class="code">KeyValuePairsActions</span> was passed as a type object to method <span class="code">parse</span>, which was possible because none of the action methods use attributes (which would only be available in an instance).</p>
 <p>In other cases, action methods might want to keep state in attributes. Then of course you must pass an instance to method parse.</p>
 <p>Note that <span class="code">token</span> <span class="code">ws</span> is special: when <span class="code">:sigspace</span> is enabled (and it is when we are using <span class="code">rule</span>), it replaces certain whitespace sequences. This is why the spaces around the equals sign in <span class="code">rule pair</span> work just fine and why the whitespace before closing <span class="code">}</span> does not gobble up the newlines looked for in <span class="code">token TOP</span>.</p>
</div> <!-- /language/io.pod6 --><div class="pod-body"><a id="_language_io.pod6"></a><a name="t17"><h1 class="title">17 Input/Output</h1></a> <p class="subtitle">File-related operations</p> <p>Here we present a quick overview of the file-related input/output operations. Details can be found in the documentation for the <a href="#_type_IO.pod6">IO</a> role, as well as the <a href="#_type_IO::Handle.pod6">IO::Handle</a> and <a href="#_type_IO::Path.pod6">IO::Path</a> types.</p>
 <a name="t17.1"></a><h1 id="_language_io.pod6-Reading_from_files">17.1 Reading from files</h1>
 <p>One way to read the contents of a file is to open the file via the <span class="code">open</span> function with the <span class="code">:r</span> (read) file mode option and slurp in the contents:</p>
 <pre class="code">my $fh = open "testfile", :r;
my $contents = $fh.slurp-rest;
$fh.close;</pre>
 <p>Here we explicitly close the file handle using the <span class="code">close</span> method on the <span class="code">IO::Handle</span> object. This is a very traditional way of reading the contents of a file. However, the same can be done more easily and clearly like so:</p>
 <pre class="code">my $contents = "testfile".IO.slurp;
# or in procedural form:
my $contents = slurp "testfile"</pre>
 <p>By adding the <span class="code">IO</span> role to the file name string, we are effectively able to refer to the string as the file object itself and thus slurp in its contents directly. Note that the <span class="code">slurp</span> takes care of opening and closing the file for you.</p>
 <a name="t17.1.1"></a><h2 id="_language_io.pod6-Line_by_line">17.1.1 Line by line</h2>
 <p>Of course, we also have the option to read a file line-by-line. The new line separator (i.e., <span class="code">$*IN.nl-in</span>) will be excluded.</p>
 <pre class="code">for 'huge-csv'.IO.lines -&gt; $line {
    # Do something with $line
}

# or if you'll be processing later
my @lines = 'huge-csv'.IO.lines;</pre>
 <a name="t17.2"></a><h1 id="_language_io.pod6-Writing_to_files">17.2 Writing to files</h1>
 <p>To write data to a file, again we have the choice of the traditional method of calling the <span class="code">open</span> function -- this time with the <span class="code">:w</span> (write) option -- and printing the data to the file:</p>
 <pre class="code">my $fh = open "testfile", :w;
$fh.print("data and stuff\n");
$fh.close;</pre>
 <p>Or equivalently with <span class="code">say</span>, thus the explicit newline is no longer necessary:</p>
 <pre class="code">my $fh = open "testfile", :w;
$fh.say("data and stuff");
$fh.close;</pre>
 <p>We can simplify this by using <span class="code">spurt</span> to open the file in write mode, writing the data to the file and closing it again for us:</p>
 <pre class="code">spurt "testfile", "data and stuff\n";</pre>
 <p>By default all (text) files are written as UTF-8, however if necessary, an explicit encoding can be specified via the <span class="code">:enc</span> option:</p>
 <pre class="code">spurt "testfile", "latin1 text: äöüß", enc =&gt; "latin1";</pre>
 <p>To append to a file, specify the <span class="code">:a</span> option when opening the file handle explicitly,</p>
 <pre class="code">my $fh = open "testfile", :a;
$fh.print("more data\n");
$fh.close;</pre>
 <p>or equivalently with <span class="code">say</span>, thus the explicit newline is no longer necessary,</p>
 <pre class="code">my $fh = open "testfile", :a;
$fh.say("more data");
$fh.close;</pre>
 <p>or even simpler with the <span class="code">:append</span> option in the call to <span class="code">spurt</span>:</p>
 <pre class="code">spurt "testfile", "more data\n", :append;</pre>
 <p>To explicitly write binary data to a file, open it with the <span class="code">:bin</span> option. The input/output operations then will take place using the <span class="code">Buf</span> type instead of the <span class="code">Str</span> type.</p>
 <a name="t17.3"></a><h1 id="_language_io.pod6-Checking_files_and_directories">17.3 Checking files and directories</h1>
 <p>Use the <span class="code">e</span> method on an <span class="code">IO::Handle</span> object to test whether the file or directory exists.</p>
 <pre class="code">if "nonexistent_file".IO.e {
    say "file exists";
}
else {
    say "file doesn't exist";
}</pre>
 <p>It is also possible to use the colon pair syntax to achieve the same thing:</p>
 <pre class="code">if "path/to/file".IO ~~ :e {
    say 'file exists';
}

my $file = "path/to/file";
if $file.IO ~~ :e {
    say 'file exists';
}</pre>
 <p>Similarly to the file existence check, one can also check to see if a path is a directory. For instance, assuming that the file <span class="code">testfile</span> and the directory <span class="code">lib</span> exist, we would obtain from the existence test method <span class="code">e</span> the same result, namely that both exist:</p>
 <pre class="code">say "testfile".IO.e;  # True
say "lib".IO.e;       # True</pre>
 <p>However, since only one of them is a directory, the directory test method <span class="code">d</span> will give a different result:</p>
 <pre class="code">say "testfile".IO.d;  # False
say "lib".IO.d;       # True</pre>
 <p>Naturally the tables are turned if we check to see if the path is a file via the file test method <span class="code">f</span>:</p>
 <pre class="code">say "testfile".IO.f;  # True
say "lib".IO.f;       # False</pre>
 <a name="t17.4"></a><h1 id="_language_io.pod6-Getting_a_directory_listing">17.4 Getting a directory listing</h1>
 <p>To list the contents of the current directory, use the <span class="code">dir</span> function. It returns a list of <a href="#_type_IO::Path.pod6">IO::Path</a> objects.</p>
 <pre class="code">say dir;    # "/path/to/testfile".IO "/path/to/lib".IO</pre>
 <p>To list the files and directories in a given directory, simply pass a path as an argument to <span class="code">dir</span>:</p>
 <pre class="code">say dir "/etc/";    # "/etc/ld.so.conf".IO "/etc/shadow".IO ....</pre>
 <a name="t17.5"></a><h1 id="_language_io.pod6-Creating_and_removing_directories">17.5 Creating and removing directories</h1>
 <p>To create a new directory, simply call the <span class="code">mkdir</span> function with the directory name as its argument:</p>
 <pre class="code">mkdir "newdir";</pre>
 <p>The function returns the name of the created directory on success and <span class="code">Nil</span> on failure. Thus the standard Perl idiom works as expected:</p>
 <pre class="code">mkdir "newdir" or die "$!";</pre>
 <p>Use <span class="code">rmdir</span> to remove <i>empty</i> directories:</p>
 <pre class="code">rmdir "newdir" or die "$!";</pre>
 TODO: base on https://github.com/perl6/specs/blob/master/S32-setting-library/IO.pod?
TODO: https://docs.perl6.org/type/IO::Handle has close but no open
</div> <!-- /language/ipc.pod6 --><div class="pod-body"><a id="_language_ipc.pod6"></a><a name="t18"><h1 class="title">18 Inter-Process Communication</h1></a> <p class="subtitle">Programs running other programs and communicating with them</p> <p><span class="indexed"><a id="165" name="IPC"></a></span></p>
 <a name="t18.1"></a><h1 id="_language_ipc.pod6-running">18.1 <a name="166"></a>running</h1>
 <p>Many programs need to be able to run other programs. Running a program in Perl 6 is as easy as:</p>
 <pre class="code">run 'git', 'status';</pre>
 <p>This line runs the program named "git" and passes "git" and "status" to its command-line. It will find the program using the <span class="code">%*ENV&lt;PATH> </span> setting.</p>
 <p>If you would like to run a program by sending a command-line to the shell, there's a tool for that as well. All shell meta characters are interpreted by the shell, including pipes, redirects, environment variable substitutions and so on.</p>
 <pre class="code">shell 'ls -lR | gzip -9 &gt; ls-lR.gz';</pre>
 <p>Caution should be taken when using <span class="code">shell</span> with user input.</p>
 <a name="t18.2"></a><h1 id="_language_ipc.pod6-proc">18.2 <a name="167"></a>proc</h1>
 <p>Both <span class="code">run</span> and <span class="code">shell</span> return a <a href="#_type_Proc.pod6">Proc</a> object, which can be used to communicate with the process in more detail.</p>
 <pre class="code">my $git = run 'git', 'log', '--oneline', :out;
for $git.out.lines -&gt; $line {
    my ($sha, $subject) = $line.split: ' ', 2;
    say "$subject [$sha]";
}</pre>
 <p>You can tell the <span class="code">Proc</span> object to capture output as a file handle by passing the <span class="code">:out</span> and <span class="code">:err</span> flags. You may also pass input via the <span class="code">:in</span> flag.</p>
 <pre class="code">my $echo = run 'echo', 'Hello, world', :out;
my $cat  = run 'cat', '-n', :in($echo.out), :out;
say $cat.out.get;</pre>
 <p>You may also use <span class="code">Proc</span> to capture the PID, send signals to the application, and check the exitcode.</p>
 <pre class="code">my $crontab = run 'crontab' '-l';
if $crontab.exitcode == 0 {
    say 'crontab -l ran ok';
}
else {
    say 'something went wrong';
}</pre>
 <a name="t18.3"></a><h1 id="_language_ipc.pod6-async">18.3 <a name="170"></a>async</h1>
 <p>When you need more control over the communication with and from another process, you will want to make use of <a href="#_type_Proc::Async.pod6">Proc::Async</a>. This class provides support for asynchronous communication with a program, as well as the ability to send signals to that program.</p>
 <pre class="code"># Get ready to run the program
my $log = Proc::Async.new('tail', '-f',  '/var/log/system.log');
$log.stdout.tap(-&gt; $buf { print $buf });
$log.stderr.tap(-&gt; $buf { $*ERR.print $buf });

# Start the program
my $done = $proc.start;
sleep 10;

# Tell the program to stop
$log.kill('QUIT');

# Wait for the program to finish
await $done;</pre>
 <p>Here is a small program that uses the "tail" program to print out the contents of the log named <span class="filename">system.log</span> for 10 seconds and then tells the program to stop with a QUIT signal.</p>
 <p>Whereas <span class="code">Proc</span> provides access to output using <span class="code">IO::Handle</span>s, <span class="code">Proc::Async</span> provides access using asynchronous supplies (see <a href="#_type_Supply.pod6">Supply</a>).</p>
 <p>If you want to run a program and do some work while you wait for the original program to finish, the <span class="code">start</span> routine returns a <a href="#_type_Promise.pod6">Promise</a>, which is kept when the program quits.</p>
 <p>Use the <span class="code">write</span> method to pass data into the program.</p>
</div> <!-- /language/list.pod6 --><div class="pod-body"><a id="_language_list.pod6"></a><a name="t19"><h1 class="title">19 Lists, Sequences, and Arrays</h1></a> <p class="subtitle">Positional data constructs</p> <p>Lists have been a central part of computing since before there were computers, during which time many devils have taken up residence in their details. They were actually one of the hardest parts of Perl 6 to design, but through persistence and patience, Perl 6 has arrived with an elegant system for handling them.</p>
 <a name="t19.1"></a><h1 id="_language_list.pod6-Literal_Lists">19.1 Literal Lists</h1>
 <p>Literal <a href="#_type_List.pod6"> <span class="code">List</span> s</a> are created with commas and semicolons <b>not</b> with parentheses, so:</p>
 <pre class="code">1, 2        # This is two-element list
(1, 2)      # This is also a List, in parentheses
(1; 2)      # same List
(1)         # This is not a List, just a 1 in parentheses
(1,)        # This is a one-element List</pre>
 <p>Parentheses can be used to mark the beginning and end of a <span class="code">List</span>, so:</p>
 <pre class="code">(1, 2), (1, 2) # This is a list of two lists.</pre>
 <p>Multidimensional literal <span class="code">List</span>s are created combining comma and semicolon. They can be used in routine argument lists and subscripts.</p>
 <pre class="code">say so (1,2; 3,4) eqv ((1,2), (3,4));
# OUTPUT«True␤»
say('foo';); # a list with one element and the empty list
# OUTPUT«(foo)()␤»</pre>
 <p>Individual elements can be pulled out of a list using a subscript. The first element of a list is at index number zero:</p>
 <pre class="code">say (1, 2)[0];  # says 1
say (1, 2)[1];  # says 2
say (1, 2)[2];  # says Nil
say (1, 2)[-1]; # Error</pre>
 <a name="t19.2"></a><h1 id="_language_list.pod6-The_@_sigil">19.2 The @ sigil</h1>
 <p>Variables in Perl 6 whose names bear the <span class="code">@</span> sigil are expected to contain some sort of list-like object. Of course, other variables may also contain these objects, but <span class="code">@</span>-sigiled variables always do, and are expected to act the part.</p>
 <p>By default, when you assign a <span class="code">List</span> to an <span class="code">@</span>-sigiled variable, you create an <span class="code">Array</span>. Those are described below. If, instead you want to put an actual <span class="code">List</span> into an <span class="code">@</span>-sigiled variable, you can use binding with <span class="code">:=</span> instead.</p>
 <pre class="code">my @a := 1, 2, 3;</pre>
 <p>Assigning Lists of Lists to <span class="code">@</span>-sigiled variables does not provide the same shortcut. In this case the outer List becomes the first element of the Array.</p>
 <pre class="code">my @a = (1,2; 3,4);
say @a.flat;
# OUTPUT«((1 2) (3 4))␤»
@a := (1,2; 3,4);
say @a.flat;
# OUTPUT«((1 2 3 4)␤»</pre>
 <p>One of the ways <span class="code">@</span>-sigiled variables act like lists is by always supporting <a href="#_language_subscripts.pod6">positional subscripting</a>. Anything bound to a <span class="code">@</span>-sigiled value must support the <a href="#_type_Positional.pod6">Positional</a> role which guarantees this:</p>
 <pre class="code">my @a := 1; # Type check failed in binding; expected Positional but got Int</pre>
 <a name="t19.3"></a><h1 id="_language_list.pod6-Reset_a_List_Container">19.3 Reset a List Container</h1>
 <p>To remove all elements from a Positional container assign <a href="#_type_Slip.pod6-Empty"> <span class="code">Empty</span> </a>, the empty list <span class="code">()</span> or a <span class="code">Slip</span> of the empty list to the container.</p>
 <pre class="code">my @a = 1, 2, 3;
@a = ();
@a = Empty;
@a = |();</pre>
 <a name="t19.4"></a><h1 id="_language_list.pod6-Iteration">19.4 Iteration</h1>
 <p>All lists may be iterated, which means taking each element from the list in order and stopping after the last element:</p>
 <pre class="code">for 1, 2, 3 { .say } # says 1, then says 2, then says 3</pre>
 <a name="t19.5"></a><h1 id="_language_list.pod6-Testing_for_Elements">19.5 Testing for Elements</h1>
 <p>To test for elements convert the <span class="code">List</span> or <span class="code">Array</span> to a <a href="#_type_Set.pod6"> <span class="code">Set</span> </a> or use a Set <a href="#_language_setbagmix.pod6">operator</a>.</p>
 <pre class="code">my @a = &amp;lt;foo bar buzz&gt;;
say @a.Set&amp;lt;bar buzz&gt;; # OUTPUT«(True True)␤»
say so 'bar' ∈ @a;    # OUTPUT«True␤»</pre>
 <a name="t19.5.1"></a><h2 id="_language_list.pod6-Sequences">19.5.1 Sequences</h2>
 <p>Not all lists are born full of elements. Some only create as many elements as they are asked for. These are called sequences, which are of type <span class="code">Seq</span>. As it so happens, loops return <span class="code">Seq</span>s.</p>
 <pre class="code">(loop { 42.say })[2] # says 42 three times</pre>
 <p>So, it is fine to have infinite lists in Perl 6, just so long as you never ask them for all their elements. In some cases, you may want to avoid asking them how long they are too -- Perl 6 will try to return <span class="code">Inf</span> if it knows a sequence is infinite, but it cannot always know.</p>
 TODO link or describe C&lt;...>
 <p>Although the <span class="code">Seq</span> class does provide some positional subscripting, it does not provide the full interface of <span class="code">Positional</span>, so an <span class="code">@</span>-sigiled variable may <b>not</b> be bound to a <span class="code">Seq</span>.</p>
 <pre class="code">my @s := (loop { 42.say }); # Error expected Positional but got Seq</pre>
 <p>This is because the <span class="code">Seq</span> does not keep values around after you have used them. This is useful behavior if you have a very long sequence, as you may want to throw values away after using them, so that your program does not fill up memory. For example, when processing a file of a million lines:</p>
 <pre class="code">for 'filename'.IO.lines -&gt; $line {
    do-something-with($line);
}</pre>
 <p>You can be confident that the entire content of the file will not stay around in memory, unless you are explicitly storing the lines somewhere.</p>
 <p>On the other hand, you may want to keep old values around in some cases. It is possible to hide a <span class="code">Seq</span> inside a <span class="code">List</span>, which will still be lazy, but will remember old values. This is done by calling the <span class="code">.list</span> method. Since this <span class="code">List</span> fully supports <span class="code">Positional</span>, you may bind it directly to an <span class="code">@</span>-sigiled variable.</p>
 <pre class="code">my @s := (loop { 42.say }).list;
@s[2]; # Says 42 three times
@s[1]; # does not say anything
@s[4]; # Says 42 two more times</pre>
 <p>You may also use the <span class="code">.cache</span> method instead of <span class="code">.list</span>, depending on how you want the references handled. See the <a href="#_type_Seq.pod6">page on  <span class="code">Seq</span> </a> for details.</p>
 TODO document .iterator
 <a name="t19.5.2"></a><h2 id="_language_list.pod6-Slips">19.5.2 Slips</h2>
 <p>Sometimes you want to insert the elements of a list into another list. This can be done with a special type of list called a <span class="code">Slip</span>.</p>
 <pre class="code">say (1, (2, 3), 4) eqv (1, 2, 3, 4);         # says False
say (1, Slip.new(2, 3), 4) eqv (1, 2, 3, 4); # says True
say (1, slip(2, 3), 4) eqv (1, 2, 3, 4);     # also says True</pre>
 <p>Another way to make a <span class="code">Slip</span> is with the <span class="code">|</span> prefix operator. Note that this has a tighter precedence than the comma, so it only affects a single value, but unlike the above options, it will break <a href="#_type_Scalar.pod6">Scalars</a>.</p>
 <pre class="code">say (1, |(2, 3), 4) eqv (1, 2, 3, 4);        # says True
say (1, |$(2, 3), 4) eqv (1, 2, 3, 4);       # also says True
say (1, slip($(2, 3)), 4) eqv (1, 2, 3, 4);  # says False</pre>
 <a name="t19.6"></a><h1 id="_language_list.pod6-Lazy_Lists">19.6 Lazy Lists</h1>
 <p>Lists can be lazy, what means that their values are computed on demand and stored for later use. To create a lazy list use <a href="#_language_control.pod6-gather/take">gather/take</a> or the <a href="#_language_operators.pod6-infix_...">sequence operator</a>. You can also write a class that implements the role <a href="#_type_Iterable.pod6">Iterable</a> and returns <span class="code">True</span> on a call to <a href="#_routine_lazy.pod6">lazy</a>. Please note that some methods like <span class="code">elems</span> may cause the entire list to be computed what will fail if the list is also infinite.</p>
 <pre class="code">my @l = 1,2,4,8...Inf;
say @l[0..16];
# OUTPUT«(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536)␤»</pre>
 <a name="t19.7"></a><h1 id="_language_list.pod6-Immutability">19.7 Immutability</h1>
 <p>The lists we have talked about so far (<span class="code">List</span>, <span class="code">Seq</span> and <span class="code">Slip</span>) are all immutable. This means you cannot remove elements from them, or re-bind existing elements:</p>
 <pre class="code">(1, 2, 3)[0]:delete; # Error Can not remove elements from a List
(1, 2, 3)[0] := 0;   # Error Cannot use bind operator with this left-hand side
(1, 2, 3)[0] = 0;    # Error Cannot modify an immutable Int</pre>
 <p>However, if any of the elements is wrapped in a <a href="#_type_Scalar.pod6"> <span class="code">Scalar</span> </a> you can still change the value which that <span class="code">Scalar</span> points to:</p>
 <pre class="code">my $a = 2;
(1, $a, 3)[1] = 42;
$a.say;            # says 42</pre>
 <p>...that is, it is only the list structure itself -- how many elements there are and each element's identity -- that is immutable. The immutability is not contagious past the identity of the element.</p>
 <a name="t19.8"></a><h1 id="_language_list.pod6-List_Contexts">19.8 List Contexts</h1>
 <p>So far we have mostly dealt with lists in neutral contexts. Lists are actually very context sensitive on a syntactical level.</p>
 <a name="t19.8.1"></a><h2 id="_language_list.pod6-List_Assignment_Context">19.8.1 List Assignment Context</h2>
 <p>When a list appears on the right hand side of an assignment into a <span class="code">@</span>-sigiled variable, it is "eagerly" evaluated. This means that a <span class="code">Seq</span> will be iterated until it can produce no more elements. This is one of the places you do not want to put an infinite list, lest your program hang and, eventually, run out of memory:</p>
 <pre class="code">my $i = 3;
my @a = (loop { $i.say; last unless --$i }); # Says 3 2 1
say "take off!";</pre>
 <a name="t19.8.2"></a><h2 id="_language_list.pod6-Flattening_&quot;Context&quot;">19.8.2 Flattening "Context"</h2>
 <p>When you have a list that contains sub-lists, but you only want one flat list, you may flatten the list to produce a sequence of values as if all parentheses were removed. This works no matter how many levels deep the parentheses are nested.</p>
 <pre class="code">say (1, (2, (3, 4)), 5).flat eqv (1, 2, 3, 4, 5) # says True</pre>
 <p>This is not really a syntactical "context" as much as it is a process of iteration, but it has the appearance of a context.</p>
 <p>Note that <a href="#_type_Scalar.pod6"> <span class="code">Scalar</span> s</a> around a list will make it immune to flattening:</p>
 <pre class="code">for (1, (2, $(3, 4)), 5).flat { .say } # says 1, then 2, then (3 4), then 5</pre>
 <p>...but an <span class="code">@</span>-sigiled variable will spill its elements.</p>
 <pre class="code">my @l := 2, (3, 4);
for (1, @l, 5).flat { .say };      # says 1, then 2, then 3, then 4, then 5
my @a = 2, (3, 4);                 # Arrays are special, see below
for (1, @a, 5).flat { .say };      # says 1, then 2, then (3 4), then 5</pre>
 <a name="t19.8.3"></a><h2 id="_language_list.pod6-Argument_List_(Capture)_Context">19.8.3 Argument List (Capture) Context</h2>
 <p>When a list appears as arguments to a function or method call, special syntax rules are at play: the list is immediately converted into a <span class="code">Capture</span>. A <span class="code">Capture</span> itself has a List (<span class="code">.list</span>) and a Hash (<span class="code">.hash</span>). Any <span class="code">Pair</span> literals whose keys are not quoted, or which are not parenthesized, never make it into <span class="code">.list</span>. Instead, they are considered to be named arguments and squashed into <span class="code">.hash</span>. See the <a href="#_type_Capture.pod6">page on  <span class="code">Capture</span> </a> for the details of this processing.</p>
 <p>Consider the following ways to make a new <span class="code">Array</span> from a <span class="code">List</span>. These ways place the <span class="code">List</span> in an argument list context and because of that, the <span class="code">Array</span> only contains <span class="code">1</span> and <span class="code">2</span> but not the <span class="code">Pair</span> <span class="code">:c(3)</span>, which is ignored.</p>
 <pre class="code">Array.new(1, 2, :c(3));
Array.new: 1, 2, :c(3);
new Array: 1, 2, :c(3);</pre>
 <p>In contrast, these ways do not place the <span class="code">List</span> in argument list context, so all the elements, even the <span class="code">Pair</span> <span class="code">:c(3)</span>, are placed in the <span class="code">Array</span>.</p>
 <pre class="code">Array.new((1, 2, :c(3)));
(1, 2, :c(3)).Array;
my @a = 1, 2, :c(3); Array.new(@a);
my @a = 1, 2, :c(3); Array.new: @a;
my @a = 1, 2, :c(3); new Array: @a;</pre>
 <p>In argument list context the <span class="code">|</span> prefix operator applied to a <span class="code">Positional</span> will always slip list elements as positional arguments to the Capture, while a <span class="code">|</span> prefix operator applied to an <span class="code">Associative</span> will slip pairs in as named parameters:</p>
 <pre class="code">my @a := 2, "c" =&gt; 3;
Array.new(1, |@a, 4);    # Array contains 1, 2, :c(3), 4
my %a = "c" =&gt; 3;
Array.new(1, |%a, 4);    # Array contains 1, 4</pre>
 <a name="t19.8.4"></a><h2 id="_language_list.pod6-Slice_Indexing_Context">19.8.4 Slice Indexing Context</h2>
 <p>From the perspective of the <span class="code">List</span> inside a <a href="#_language_subscripts.pod6-Slices">slice subscript</a>, is only remarkable in that it is unremarkable: because <a href="#_language_subscripts.pod6-Adverbs">adverbs</a> to a slice are attached after the <span class="code">]</span>, the inside of a slice is <b>not</b> an argument list, and no special processing of pair forms happens.</p>
 <p>Most <span class="code">Positional</span> types will enforce an integer coercion on each element of a slice index, so pairs appearing there will generate an error, anyway:</p>
 <pre class="code">(1, 2, 3)[1, 2, :c(3)] # Method 'Int' not found for invocant of class 'Pair'</pre>
 <p>...however this is entirely up to the type -- if it defines an order for pairs, it could consider <span class="code">:c(3)</span> a valid index.</p>
 <p>Indices inside a slice are usually not automatically flattened, but neither are sublists usually coerced to <span class="code">Int</span>. Instead, the list structure is kept intact, causing a nested slice operation that replicates the structure in the result:</p>
 <pre class="code">say ("a", "b", "c")[(1, 2), (0, 1)] eqv (("b", "c"), ("a", "b")) # says True</pre>
 <a name="t19.8.5"></a><h2 id="_language_list.pod6-Range_as_Slice">19.8.5 Range as Slice</h2>
 <p>A <a href="#_type_Range.pod6"> <span class="code">Range</span> </a> is a container for a lower and a upper boundary. Generating a slice with a <span class="code">Range</span> will include any index between those bounds, including the bounds. For infinite upper boundaries we agree with mathematicians that <span class="code">Inf</span> equals <span class="code">Inf-1</span>.</p>
 <pre class="code">my @a = 1..5;
say @a[0..2]; # OUTPUT«(1 2 3)␤»
say @a[0..^2]; # OUTPUT«(1 2)␤»
say @a[0..*];  # OUTPUT«(1 2 3 4 5)␤␤»
say @a[0..^*]; # OUTPUT«(1 2 3 4 5)␤»
say @a[0..Inf-1]; # OUTPUT«(1 2 3 4 5)␤»</pre>
 <a name="t19.8.6"></a><h2 id="_language_list.pod6-Array_Constructor_Context">19.8.6 Array Constructor Context</h2>
 <p>Inside an Array Literal, the list of initialization values is not in capture context and is just a normal list. It is, however, eagerly evaluated just as in assignment.</p>
 <pre class="code">[ 1, 2, :c(3) ] eqv Array.new((1, 2, :c(3))) # says True
[while $++ &amp;lt; 2 { 42.say; 43 }].map: *.say;   # says 42 twice then 43 twice
(while $++ &amp;lt; 2 { 42.say; 43 }).map: *.say;   # says "42" then "43"
                                             # then "42" then "43"</pre>
 <p>Which brings us to Arrays...</p>
 <a name="t19.9"></a><h1 id="_language_list.pod6-Arrays">19.9 Arrays</h1>
 <p>Arrays differ from lists in three major ways: Their elements may be typed, they automatically itemize their elements, and they are mutable. Otherwise they are Lists and are accepted wherever lists are.</p>
 <pre class="code">say Array ~~ List     # says True</pre>
 <p>A fourth, more subtle, way they differ is that when working with Arrays, it can sometimes be harder to maintain laziness or work with infinite sequences.</p>
 <a name="t19.9.1"></a><h2 id="_language_list.pod6-Typing">19.9.1 Typing</h2>
 <p>Arrays may be typed such that their slots perform a typecheck whenever they are assigned to. An Array that only allows <span class="code">Int</span> values to be assigned is of type <span class="code">Array[Int]</span> and one can create one with <span class="code">Array[Int].new</span>. If you intend to use an <span class="code">@</span>-sigiled variable only for this purpose, you may change its type by specifying the type of the elements when declaring it:</p>
 <pre class="code">my Int @a = 1, 2, 3;              # An Array that contains only Ints
my @b := Array[Int].new(1, 2, 3); # Same thing, but the variable is not typed
say @b eqv @a;                    # says True.
my @c = 1, 2, 3;                  # An Array that can contain anything
say @b eqv @c;                    # says False because types do not match
say @c eqv (1, 2, 3);             # says False because one is a List
say @b eq @c;                     # says True, because eq only checks values
say @b eq (1, 2, 3);              # says True, because eq only checks values

@a[0] = 42;                       # fine
@a[0] = "foo";                    # error: Type check failed in assignment</pre>
 <p>In the above example we bound a typed Array object to a <span class="code">@</span>-sigil variable for which no type had been specified. The other way around does not work -- you may not bind an Array that has the wrong type to a typed <span class="code">@</span>-sigiled variable:</p>
 <pre class="code">my @a := Array[Int].new(1, 2, 3);     # fine
@a := Array[Str].new("a", "b");       # fine, can be re-bound
my Int @b := Array[Int].new(1, 2, 3); # fine
@b := Array.new(1, 2, 3);             # error: Type check failed in binding</pre>
 <p>When working with typed arrays, it is important to remember that they are nominally typed. This means the declared type of an array is what matters. Given the following sub declaration:</p>
 <pre class="code">sub mean(Int @a) {
    @a.sum / @a.elems
}</pre>
 <p>Calls that pass an Array[Int] will be successful:</p>
 <pre class="code">my Int @b = 1, 3, 5;
say mean(@b);                       # @b is Array[Int]
say mean(Array[Int].new(1, 3, 5));  # Anonymous Array[Int]
say mean(my Int @ = 1, 3, 5);       # Another anonymous Array[Int]</pre>
 <p>However, the following calls will all fail, due to passing an untyped array, even if the array just happens to contain Int values at the point it is passed:</p>
 <pre class="code">my @c = 1, 3, 5;
say mean(@c);                       # Fails, passing untyped Array
say mean([1, 3, 5]);                # Same
say mean(Array.new(1, 3, 5));       # Same again</pre>
 <p>Note that in any given compiler, there may be fancy, under-the-hood, ways to bypass the type check on arrays, so when handling untrusted input, it can be good practice to perform additional type checks, where it matters:</p>
 <pre class="code">for @a -&gt; Int $i { $_++.say };</pre>
 <p>However, as long as you stick to normal assignment operations inside a trusted area of code, this will not be a problem, and typecheck errors will happen promptly during assignment to the array, if they cannot be caught at compile time. None of the core functions provided in Perl 6 for operating on lists should ever produce a wonky typed Array.</p>
 <p>Nonexistent elements (when indexed), or elements to which <span class="code">Nil</span> has been assigned, will assume a default value. This default may be adjusted on a variable-by-variable basis with the <span class="code">is default</span> trait. Note that an untyped <span class="code">@</span>-sigiled variable has an element type of <span class="code">Mu</span>, however its default value is an undefined <span class="code">Any</span>:</p>
 <pre class="code">my @a;
@a.of.perl.say;                 # says "Mu"
@a.default.perl.say;            # says "Any"
@a[0].say;                      # says "(Any)"
my Numeric @n is default(Real);
@n.of.perl.say;                 # says "Numeric"
@n.default.perl.say;            # says "Real"
@n[0].say;                      # says "(Real)"</pre>
 <a name="t19.9.2"></a><h2 id="_language_list.pod6-Fixed_Size_Arrays">19.9.2 Fixed Size Arrays</h2>
 <p>To limit the dimensions of an <span class="code">Array</span> provide the dimensions separated by <span class="code">,</span> or <span class="code">;</span> in brackets after the name of the array container. The values of such an <span class="code">Arrays</span> will default to <span class="code">Any</span>. The shape can be accessed at runtime via the <span class="code">shape</span> method.</p>
 <pre class="code">my @a[2,2];
dd @a;
# OUTPUT«Array.new(:shape(2, 2), [Any, Any], [Any, Any])␤»
say @a.shape;
# OUTPUT«(2 2)␤»</pre>
 <p>Assignment to a fixed size Array will promote a List of Lists to an Array of Arrays.</p>
 <pre class="code">my @a[2;2] = (1,2; 3,4);
@a[1;1] = 42;
dd @a;
# OUTPUT«Array.new(:shape(2, 2), [1, 2], [3, 42])␤»</pre>
 <a name="t19.9.3"></a><h2 id="_language_list.pod6-Itemization">19.9.3 Itemization</h2>
 <p>For most uses, Arrays consist of a number of slots each containing a <span class="code">Scalar</span> of the correct type. Each such <span class="code">Scalar</span>, in turn, contains a value of that type. Perl 6 will automatically type-check values and create Scalars to contain them when Arrays are initialized, assigned to, or constructed.</p>
 <p>This is actually one of the trickiest parts of Perl 6 list handling to get a firm understanding of.</p>
 <p>First, be aware that because itemization in Arrays is assumed, it essentially means that <span class="code">$(…)</span>s are being put around everything that you assign to an array, if you do not put them there yourself. On the other side, Array.perl does not put <span class="code">$</span> to explicitly show scalars, unlike List.perl:</p>
 <pre class="code">((1, 2), $(3, 4)).perl.say; # says "((1, 2), $(3, 4))"
[(1, 2), $(3, 4)].perl.say; # says "[(1, 2), (3, 4)]"
                            # ...but actually means: "[$(1, 2), $(3, 4)]"</pre>
 <p>It was decided all those extra dollar signs and parentheses were more of an eye sore than a benefit to the user. Basically, when you see a square bracket, remember the invisible dollar signs.</p>
 <p>Second, remember that these invisible dollar signs also protect against flattening, so you cannot really flatten the elements inside of an Array with a normal call to <span class="code">flat</span> or <span class="code">.flat</span>.</p>
 <pre class="code">((1, 2), $(3, 4)).flat.perl.say; # (1, 2, $(3, 4)).Seq
[(1, 2), $(3, 4)].flat.perl.say; # ($(1, 2), $(3, 4)).Seq</pre>
 <p>Since the square brackets do not themselves protect against flattening, you can still spill the elements out of an Array into a surrounding list using <span class="code">flat</span>.</p>
 <pre class="code">(0, [(1, 2), $(3, 4)], 5).flat.perl.say; # (0, $(1, 2), $(3, 4), 5).Seq</pre>
 <p>...the elements themselves, however, stay in one piece.</p>
 <p>This can irk users of data you provide if you have deeply nested Arrays where they want flat data. Currently they have to deeply map the structure by hand to undo the nesting:</p>
 <pre class="code">say gather [0, [(1, 2), [3, 4]], $(5, 6)].deepmap: *.take; # 1 2 3 4 5 6</pre>
 <p>...future versions of Perl 6 might find a way to make this easier. However, not returning Arrays or itemized lists from functions, when non-itemized lists are sufficient, is something that one should consider as a courtesy to their users:</p>
 <ul><li><p>use Slips when you want to always merge with surrounding lists</p>
</li></ul> <ul><li><p>use non-itemized lists when you want to make it easy for the user to flatten</p>
</li></ul> <ul><li><p>use itemized lists to protect things the user probably will not want flattened</p>
</li></ul> <ul><li><p>use Arrays as non-itemized lists of itemized lists, if appropriate,</p>
</li></ul> <ul><li><p>use Arrays if the user is going to want to mutate the result without copying it first.</p>
</li></ul> <p>The fact that all elements of an array are itemized (in <span class="code">Scalar</span> containers) is more a gentleman's agreement than a universally enforced rule, and it is less well enforced that typechecks in typed arrays. See the section below on binding to Array slots.</p>
 <a name="t19.9.4"></a><h2 id="_language_list.pod6-Literal_Arrays">19.9.4 Literal Arrays</h2>
 <p>Literal Arrays are constructed with a List inside square brackets. The List is eagerly iterated (at compile time if possible) and values in the list are each type-checked and itemized. The square brackets themselves will spill elements into surrounding lists when flattened, but the elements themselves will not spill due to the itemization.</p>
 <a name="t19.9.5"></a><h2 id="_language_list.pod6-Mutability">19.9.5 Mutability</h2>
 <p>Unlike lists, Arrays are mutable. Elements may deleted, added, or changed.</p>
 <pre class="code">my @a = "a", "b", "c";
@a.say;                  # [a b c]
@a.pop.say;              # says "c"
@a.say;                  # says "[a b]"
@a.push("d");
@a.say;                  # says "[a b d]"
@a[1, 3] = "c", "c";
@a.say;                  # says "[a c d c]"</pre>
 <a name="t19.9.5.1"></a><h3 id="_language_list.pod6-Assigning">19.9.5.1 Assigning</h3>
 <p>Assignment of a list to an Array is eager. The list will be entirely evaluated, and should not be infinite or the program may hang. Assignment to a slice of an <span class="code">Array</span> is, likewise, eager, but only up to the requested number of elements, which may be finite:</p>
 <pre class="code">my @a;
@a[0, 1, 2] = (loop { 42 });
@a.say;                     # says "[42 42 42]"</pre>
 <p>During assignment, each value will be typechecked to ensure it is a permitted type for the <span class="code">Array</span>. Any <span class="code">Scalar</span> will be stripped from each value and a new <span class="code">Scalar</span> will be wrapped around it.</p>
 <a name="t19.9.5.2"></a><h3 id="_language_list.pod6-Binding">19.9.5.2 Binding</h3>
 <p>Individual Array slots may be bound the same way <span class="code">$</span>-sigiled variables are:</p>
 <pre class="code">my $b = "foo";
my @a = 1, 2, 3;
@a[2] := $b;
@a.say;          # says '[1 2 "foo"]'
$b = "bar";
@a.say;          # says '[1 2 "bar"]'</pre>
 <p>...but binding Array slots directly to values is strongly discouraged. If you do, expect surprises with built-in functions. The only time this would be done is if a mutable container that knows the difference between values and Scalar-wrapped values is needed, or for very large Arrays where a native-typed array cannot be used. Such a creature should never be passed back to unsuspecting users.</p>
</div> <!-- /language/modules-extra.pod6 --><div class="pod-body"><a id="_language_modules-extra.pod6"></a><a name="t20"><h1 class="title">20 Module Development Utilities</h1></a> <p class="subtitle">What can help you write/test/improve your module(s)</p> <p>Here is a list of modules that you can find in the Perl 6 ecosystem which aim to make the experience of developing Perl 6 modules more fun.</p>
 <a name="t20.1"></a><h1 id="_language_modules-extra.pod6-Module_builder_and_Authoring_tools">20.1 Module builder and Authoring tools</h1>
 <p>Some modules and tools to help you with generating files that are part of a module distribution.</p>
 <ul><li><p><a href="https://modules.perl6.org/dist/App::Mi6">App::Mi6</a> Minimal authoring tool for Perl6</p>
</li></ul> <ul><li><p><a href="https://modules.perl6.org/dist/META6">META6</a> Do things with Perl 6 META files</p>
</li></ul> <ul><li><p><a href="https://bitbucket.org/rightfold/module-skeleton">Module::Skeleton</a> Generate a skeleton module</p>
</li></ul> <ul><li><p><a href="https://modules.perl6.org/dist/p6doc">p6doc</a> Generate documentation end-products</p>
</li></ul> <a name="t20.2"></a><h1 id="_language_modules-extra.pod6-Tests">20.2 Tests</h1>
 <p>Some tests of module quality.</p>
 <ul><li><p><a href="https://modules.perl6.org/dist/Test::META">Test::META</a> Test your META6.json file</p>
</li></ul> <ul><li><p><a href="https://modules.perl6.org/dist/Test::Output">Test::Output</a> Test the output to STDOUT and STDERR your program generates</p>
</li></ul> <ul><li><p><a href="https://modules.perl6.org/dist/Proc::Screen">Test::Screen</a> Use <b>GNU screen</b> to test fullscreen VT applications</p>
</li></ul> <ul><li><p><a href="https://modules.perl6.org/dist/Test::When">Test::When</a> Control when your tests are run (author testing, online testing, etc.)</p>
</li></ul> <a name="t20.3"></a><h1 id="_language_modules-extra.pod6-NativeCall">20.3 NativeCall</h1>
 <p>Here some modules to help you work with NativeCall.</p>
 <ul><li><p><a href="https://modules.perl6.org/dist/NativeHelpers::Array">NativeHelpers::Array</a> Provides routines to deal with CArray</p>
</li></ul> <ul><li><p><a href="https://modules.perl6.org/dist/App::GPTrixie">App::GPTrixie</a> Generate NativeCall code from C headers file</p>
</li></ul> <ul><li><p><a href="https://modules.perl6.org/dist/NativeCall::TypeDiag">NativeCall::TypeDiag</a> Provides routines to test your CStruct</p>
</li></ul> <a name="t20.4"></a><h1 id="_language_modules-extra.pod6-Sample_modules">20.4 Sample modules</h1>
 <p>Modules that exist only as minimalist examples, tests for installers, or skeletons.</p>
 <ul><li><p><a href="https://modules.perl6.org/dist/Foo">Foo</a> A module with two distributions of different versions</p>
</li></ul></div> <!-- /language/modules.pod6 --><div class="pod-body"><a id="_language_modules.pod6"></a><a name="t21"><h1 class="title">21 Modules</h1></a> <p class="subtitle">How to create, use and distribute Perl 6 modules</p> <a name="t21.1"></a><h1 id="_language_modules.pod6-Creating_and_Using_Modules">21.1 Creating and Using Modules</h1>
 <p>A module is usually a source file or set of source files<div class="marginale">Technically a module is a set of  <i>compunits</i>  which are usually files but could come from anywhere as long as there is a  <i>compunit repository</i>  that can provide it. See  <a href="https://design.perl6.org/S11.html">S11</a> .</div> that expose Perl 6 constructs. These are typically packages (<a href="#_language_objects.pod6-Classes">classes</a>, <a href="#_language_objects.pod6-Roles">roles</a>, <a href="#_type_Grammar.pod6">grammars</a>), <a href="#_language_functions.pod6">subroutines</a>, and sometimes <a href="#_language_variables.pod6">variables</a>. In Perl 6 <i>module</i> can also refer to a type of package declared with the <span class="code">module</span> keyword (see example below) but here we mostly mean "module" as a set of source files in a namespace.</p>
 <a name="t21.1.1"></a><h2 id="_language_modules.pod6-Basic_Structure">21.1.1 Basic Structure</h2>
 <p>Module distributions (in the <i>set of related source files</i> sense) in Perl 6 have the same structure as any distribution in the Perl family of languages: there is a main project directory containing a <span class="code">README</span> and a <span class="code">LICENSE</span> file, a <span class="code">lib</span> directory for the source files&mdash;which may be individually referred to as modules and/or may themselves define modules with the <span class="code">module</span> keyword<div class="marginale">As  <a href="https://design.perl6.org/S11.html#Units">synopsis S11</a>  says: Confusing? Yes it is.</div>, a <span class="code">t</span> directory for tests, and possibly a <span class="code">bin</span> directory for executable programs and scripts.</p>
 <p>Source files generally use the standard <span class="code">.pm</span> extension, and scripts or executables use <span class="code">.pl</span>. However, if you wish to highlight that the file is written in Perl 6 you can use the <span class="code">.pm6</span> extension for modules, and the <span class="code">.p6</span> extension for scripts. Test files still use the normal <span class="code">.t</span> extension.</p>
 <a name="t21.1.2"></a><h2 id="_language_modules.pod6-Loading_and_Basic_Importing">21.1.2 Loading and Basic Importing</h2>
 <p>Loading a module makes the packages in the same namespace declared within available in the file scope of the loader. Importing from a module makes the symbols exported available in the lexical scope of the importing statement.</p>
 <a name="t21.1.2.1"></a><h3 id="_language_modules.pod6-need">21.1.2.1 <a name="204"></a>need</h3>
 <p><span class="code">need</span> loads a <span class="code">compunit</span> at compile time.</p>
 <pre class="code">need MyModule;</pre>
 <p>Any packages in the namespace defined within will also be available.</p>
 <pre class="code"># MyModule.pm
unit module MyModule;

class MyModule::Class { ... }</pre>
 <p><span class="code">MyModule::Class</span> will be defined when <span class="code">MyModule</span> is loaded.</p>
 class Class { ... } won't get exported automatically on loading...not sure if bug or..
 <a name="t21.1.2.2"></a><h3 id="_language_modules.pod6-use">21.1.2.2 <a name="207"></a>use</h3>
 <p><span class="code">use</span> loads and then imports from a compunit at compile time.</p>
 <pre class="code">use MyModule;</pre>
 <p>It is equivalent to:</p>
 <pre class="code"> &lt;a href="#_language_modules.pod6-need"&gt;need&lt;/a&gt;  MyModule; 
 import MyModule; 
</pre>
 <a name="t21.1.2.3"></a><h3 id="_language_modules.pod6-require">21.1.2.3 <a name="210"></a>require</h3>
 <p><span class="code">require</span> loads a compunit and imports definite symbols at runtime.</p>
 <pre class="code">sub load-mymodule {
   say "loading MyModule";
   require MyModule;
}

load-mymodule();</pre>
 <p>The compunit name can be in a runtime variable if you put it inside an indirect lookup.</p>
 <pre class="code">sub load-a-module($name){
   require ::($name);
}

load-a-module('MyModule');</pre>
 <p>To import symbols you must define them at compile time.</p>
 <pre class="code">sub do-something {
   require MyModule &amp;lt;&amp;amp;something&gt;;
   something() # &amp;amp;something will be defined here
}

do-something();
# &amp;amp;something will not be defined here</pre>
 <p>If <span class="code">MyModule</span> doesn't export <span class="code">&amp;something</span> then it will fail.</p>
 <a name="t21.1.3"></a><h2 id="_language_modules.pod6-Exporting_and_Selective_Importing">21.1.3 Exporting and Selective Importing</h2>
 <a name="t21.1.3.1"></a><h3 id="_language_modules.pod6-is_export">21.1.3.1 is export</h3>
 <p>Packages, subroutines, variables, constants and enums are exported by marking them with the <a href="#_routine_is export.pod6">is export</a> trait.</p>
 <pre class="code">unit module MyModule; 
 our $var is export = 3; 
 sub foo is export { ... }; 
 constant $FOO is export = "foobar"; 
 enum FooBar is export &amp;lt;one two three&gt;; 
 
 # Packages like classes can be exported too 
 class MyClass is export {}; 
 
 # If a subpackage is in the namespace of the current package 
 # it doesn't need to be explicitly exported 
 class MyModule::MyClass {}; 
</pre>
 <p>As with all traits, if applied to a routine, "is export" should appear after any argument list.</p>
 <pre class="code">sub foo(Str $string) is export { ... } 
</pre>
 <p>You can pass named parameters to <span class="code">is export</span> to group symbols for exporting so that the importer can pick and choose. There are three predefined tags: <span class="code">ALL</span>, <span class="code">DEFAULT</span> and <span class="code">MANDATORY</span>.</p>
 <pre class="code"># lib/MyModule.pm 
 unit module MyModule; 
 sub bag        is export             { ... } 
 sub pants      is export(:MANDATORY) { ... } 
 sub sunglasses is export(:day)       { ... } 
 sub torch      is export(:night)     { ... } 
 sub underpants is export(:ALL)       { ... } 
</pre>
 <pre class="code"># main.pl 
 use lib 'lib'; 
 use MyModule;          #bag, pants 
 use MyModule :DEFAULT; #the same 
 use MyModule :day;     #pants, sunglasses 
 use MyModule :night;   #pants, torch 
 use MyModule :ALL;     #bag, pants, sunglasses, torch, underpants 
</pre>
 <a name="t21.1.3.2"></a><h3 id="_language_modules.pod6-UNIT::EXPORT::*">21.1.3.2 UNIT::EXPORT::*</h3>
 <p>Beneath the surface, <span class="code">is export</span> is adding the symbols to a <span class="code">UNIT</span> scoped package in the <span class="code">EXPORT</span> namespace. For example, <span class="code">is export(:FOO)</span> will add the target to the <span class="code">UNIT::EXPORT::FOO</span> package. This is what Perl 6 is really using to decide what to import.</p>
 <pre class="code">unit module MyModule; 
 
 sub foo is export { ... } 
 sub bar is export(:other) { ... } 
</pre>
 <p>Is the same as:</p>
 <pre class="code">unit module MyModule; 
 
 my package EXPORT::DEFAULT { 
     our sub foo { ... } 
 } 
 
 my package EXPORT::other { 
     our sub bar { ... } 
 } 
</pre>
 <p>For most purposes <span class="code">is export</span> is sufficient but the <span class="code">EXPORT</span> packages are useful when you want to produce the exported symbols dynamically. For example:</p>
 <pre class="code"># lib/MyModule.pm 
 unit module MyModule; 
 
 my package EXPORT::DEFAULT { 
    for &amp;lt;zero one two three four&gt;.kv -&gt; $number, $name { 
       for &amp;lt;sqrt log&gt; -&gt; $func { 
          OUR::{'&amp;amp;' ~ $func ~ '-of-' ~ $name } := sub { $number."$func"() }; 
       } 
    } 
 } 
 
</pre>
 <pre class="code"># main.pl 
 use MyModule; 
 say sqrt-of-four; #-&gt; 2 
 say log-of-zero;  #-&gt; -Inf 
</pre>
 <a name="t21.1.3.3"></a><h3 id="_language_modules.pod6-EXPORT">21.1.3.3 EXPORT</h3>
 <p>You can export arbitrary symbols with an <span class="code">EXPORT</span> sub. <span class="code">EXPORT</span> must return a <a href="#_type_Map.pod6">Map</a>, where the keys are the symbol names and the values are the desired values. The names should include the sigil (if any) for the associated type.</p>
 <pre class="code"># lib/MyModule.pm 
 
 class MyModule::Class { ... } 
 
 sub EXPORT { 
     { 
      '$var'   =&gt; 'one', 
      '@array' =&gt; &amp;lt;one two three&gt;, 
      '%hash'  =&gt; { one =&gt; 'two', three =&gt; 'four' }, 
      '&amp;amp;doit'   =&gt; sub { ... }, 
      'ShortName' =&gt; MyModule::Class 
     } 
 } 
</pre>
 <pre class="code"># main.pl 
 use lib 'lib'; 
 use MyModule; 
 say $var; 
 say @array; 
 say %hash; 
 doit(); 
 say ShortName.new; #-&gt; MyModule::Class.new 
</pre>
 <p>Note, <span class="code">EXPORT</span> can't be declared inside a package because presently Rakudo (2015.09) seems to treat <span class="code">EXPORT</span> as part of the compunit rather than the package.</p>
 <p>Whereas <span class="code">UNIT::EXPORT</span> packages deal with the named parameters passed to <span class="code">use</span>, the <span class="code">EXPORT</span> sub handles positional parameters. If you pass positional parameters to <span class="code">use</span> they will be passed to <span class="code">EXPORT</span>. If a positional is passed the module no longer exports default symbols. You may still import them explicitly by passing <span class="code">:DEFAULT</span> to <span class="code">use</span> along with your positional parameters.</p>
 <pre class="code"># lib/MyModule 
 
 class MyModule::Class {} 
 
 sub EXPORT($short_name?) { 
     { 
       do $short_name =&gt; MyModule::Class if $short_name 
     } 
 } 
 
 sub always is export(:MANDATORY) { say "works" } 
 
 #import with :ALL or :DEFAULT to get 
 sub shy is export { say "you found me!" } 
</pre>
 <pre class="code"># main.pl 
 use lib 'lib'; 
 use MyModule 'foo'; 
 say foo.new(); #MyModule::Class.new 
 always();      #OK   - is imported 
 shy();         #FAIL - won't be imported 
</pre>
 <p>You can combine `EXPORT` with type captures for interesting effect. This example creates a `?` postfix which will only work on <a href="#_type_Cool.pod6">Cool</a>s.</p>
 <pre class="code"># lib/MakeQuestionable.pm 
 sub EXPORT(::Questionable) { 
     my multi postfix:&amp;lt;?&gt;(Questionable $_) { .so }; 
     { 
       '&amp;amp;postfix:&amp;lt;?&gt;' =&gt; &amp;amp;postfix:&amp;lt;?&gt;, 
     } 
 } 
</pre>
 <pre class="code">use MakeQuestionable Cool; 
 say 0?, 1?, {}?, { a =&gt; "b" }?; # False True False True 
</pre>
 <a name="t21.1.4"></a><h2 id="_language_modules.pod6-Introspection">21.1.4 Introspection</h2>
 <p>To list exported symbols of a module first query the export tags supported by the module.</p>
 <pre class="code">use URI::Escape;$
dd URI::Escape::EXPORT::.keys;$
# OUTPUT«("DEFAULT", "ALL").Seq»</pre>
 <p>Then use the tag you like and pick the symbol by it's name.</p>
 <pre class="code">dd URI::Escape::EXPORT::DEFAULT::.keys;
# OUTPUT«("\&amp;amp;uri-escape", "\&amp;amp;uri_escape", "\&amp;amp;uri-unescape", "\&amp;amp;uri_unescape").Seq»
my &amp;amp;escape-uri = URI::Escape::EXPORT::DEFAULT::&amp;lt;&amp;amp;uri_escape&gt;;</pre>
 <a name="t21.1.5"></a><h2 id="_language_modules.pod6-Finding_Modules">21.1.5 Finding Modules</h2>
 <p>A user may have a collection of modules not found in the normal ecosystem but needed regularly. Instead of using the <span class="code">lib</span> pragma one can use the <span class="code">PERL6LIB</span> environment variable to point to module locations. For example:</p>
 <pre class="code">export PERL6LIB=/path/to/my-modules,/path/to/more/modules</pre>
 <p>Note that the comma (',') is used as the directory separator (instead of the colon (':') as with Perl 5 for <span class="code">PERL5LIB</span> or <span class="code">PERLLIB</span>).</p>
 <a name="t21.2"></a><h1 id="_language_modules.pod6-Distributing_Modules">21.2 Distributing Modules</h1>
 <p>If you've written a Perl 6 module and would like to share it with the community, we'd be delighted to have it listed in the <a href="https://modules.perl6.org">Perl 6 modules directory</a>. <span class="code">:)</span></p>
 <p>For now, the process requires that you use git for your module's version control.</p>
 <p>The instructions herein assume that you have a <a href="https://github.com">GitHub</a> account so that your module can be shared from its GitHub repository, however another provider such as <a href="https://about.gitlab.com/">GitLab</a> should work as long as it works in a similar way.</p>
 <p>To share your module, do the following:</p>
 <ul><li><p>Create a project directory named after your module. For example, if your module is <span class="code">Vortex::TotalPerspective</span>, then create a project directory named <span class="code">Vortex-TotalPerspective</span>. This project directory name will also be used as the GitHub repo name.</p>
</li></ul> <ul><li><p>Make your project directory look like this:</p>
 <pre class="code">Vortex-TotalPerspective/
|-- lib
|   `-- Vortex
|       `-- TotalPerspective.pm
|-- doc
|   `-- Vortex
|       `-- TotalPerspective.pod6
|-- LICENSE
|-- META6.json
|-- README.md
`-- t
    `-- basic.t</pre>
 <p>If your project contains other modules that help the main module do its job, they should go in your lib directory like so:</p>
 <pre class="code">lib
`-- Vortex
    |-- TotalPerspective.pm
    `-- TotalPerspective
        |-- FairyCake.pm
        `-- Gargravarr.pm</pre>
</li></ul> <ul><li><p>If you have any additional files (such as templates or a dynamic library) that you wish to have installed so you can access them at runtime, they should be placed in a <span class="code">resources</span> sub-directory of your project.</p>
</li></ul> <ul><li><p>The <span class="code">README.md</span> file is a <a href="https://help.github.com/articles/markdown-basics/">markdown-formatted</a> text file, which will later be automatically rendered as HTML by GitHub.</p>
</li></ul> <ul><li><p>Regarding the <span class="code">LICENSE</span> file, if you have no other preference, you might just use the same one that Rakudo Perl 6 uses. Just copy/paste the raw form of <a href="https://github.com/rakudo/rakudo/blob/nom/LICENSE">its license</a> into your own <span class="code">LICENSE</span> file.</p>
</li></ul> <ul><li><p>If you don't yet have any tests, you can leave out the <span class="code">t</span> directory and <span class="code">basic.t</span> file for now. For more info on how to write tests (for now), you might have a look at how other modules use <span class="code">Test</span>. It's quite similar to Perl 5's <span class="code">Test::More</span>.</p>
</li></ul> <ul><li><p>To document your modules, use <a href="https://design.perl6.org/S26.html">Perl 6 Pod</a> markup inside your modules. Module documentation is most appreciated and will be especially important once the Perl 6 module directory (or some other site) begins rendering Pod docs as HTML for easy browsing. <div class="marginale"> Note, described above is a minimal project directory. If your project contains scripts that you'd like distributed along with your module(s), put them in a  <span class="code">bin</span>  directory. If you have extra docs (in addition to the Pod docs in your module(s)), create a  <span class="code">doc</span>  directory for them. If you'd like a graphical logo to appear next to your module at the module directory, create a  <span class="code">logotype</span>  directory and put into it a  <span class="code">logo_32x32.png</span>  file. At some point, you might also consider adding  <span class="code">CONTRIBUTORS</span> ,  <span class="code">NEWS</span> ,  <span class="code">TODO</span> , or other files. </div></p>
</li></ul> <ul><li><p>Make your <span class="code">META6.json</span> file look something like this:</p>
 <pre class="code">    { 
         "perl" : "6.c", 
         "name" : "Vortex::TotalPerspective", 
         "version" : "0.1.0", 
         "description" : "Wonderful simulation to get some perspective.", 
         "authors" : [ " &lt;var class="replaceable"&gt;Your Name&lt;/var&gt; " ], 
         "provides" : { 
             "Vortex::TotalPerspective" : "lib/Vortex/TotalPerspective.pm" 
         }, 
         "depends" : [ ], 
         "resources" : [ ], 
         "source-url" : "git://github.com/ &lt;var class="replaceable"&gt;you&lt;/var&gt; /Vortex-TotalPerspective.git" 
     } 
</pre>
 <p>For choosing a version numbering scheme, perhaps use "major.minor.patch" (see <a href="https://design.perl6.org/S11.html#Versioning">the spec on versioning</a> for further details). If the version number doesn't matter to you or your users right now, you can just put in an asterisk (*) for the version.</p>
 <p>The <span class="code">authors</span> section includes a list of all the module authors. In the case there is only one author, a single element list must be supplied.</p>
 <p>In the <span class="code">provides</span> section, include all the namespaces provided by your distribution and that you wish to be installed, only module files that are explicitly included here will be installed and available with <span class="code">use</span> or <span class="code">require</span> in other programs.</p>
 <p>Set <span class="code">perl</span> version to the minimum perl version your module works with.</p>
 <p>The <span class="code">resources</span> section is optional, but, if present, should contain a list of the files in your <span class="code">resources</span> directory that you wish to be installed, these will be installed with hashed names alongside your library files and their installed location can be determined through the <span class="code">%?RESOURCES</span> Hash indexed on the name provided.</p>
 <p>The <a href="https://github.com/jonathanstowe/Test-META/">Test::META module</a> can help you check the correctness of the META6.json file.</p>
</li></ul> <ul><li><p>Put your project under git version control if you haven't done so already.</p>
</li></ul> <ul><li><p>Once you're happy with your project, create a repo for it at GitHub. See <a href="https://help.github.com/">GitHub's help docs</a> if necessary. Your GitHub repo should be named the same as your project directory. Immediately after creating the GitHub repo, GitHub shows you how to configure your local repo to know about your GitHub repo.</p>
</li></ul> <ul><li><p>Push your project to GitHub.</p>
</li></ul> <ul><li><p>Consider setting up automated testing (see <a href="https://docs.travis-ci.com/user/languages/perl6">https://docs.travis-ci.com/user/languages/perl6</a>).</p>
</li></ul> <ul><li><p>Create a PR on <a href="https://github.com/perl6/ecosystem">ecosystem</a> adding your module to META.list, or ping someone on IRC (#perl6 at freenode) to get help having it added.</p>
</li></ul> <ul><li><p>After the pull request has been accepted, wait for an hour. If your module doesn't show up on <a href="https://modules.perl6.org/">https://modules.perl6.org/</a>, please view the log file at <a href="https://modules.perl6.org/update.log">https://modules.perl6.org/update.log</a> to see if it identifies an error with your module or meta file.</p>
</li></ul> <p><b>That's it! Thanks for contributing to the Perl 6 community!</b></p>
 <p>If you'd like to try out installing your module, use the <span class="indexed"><a id="215" name="">panda</a></span> module installer tool which is included with Rakudo Star Perl 6:</p>
 <pre class="code">panda install Vortex::TotalPerspective 
</pre>
 <p>This will download your module to its own working directory (<span class="code">~/.panda</span>), build it there, and install the module into <span class="code">~/.perl6</span>.</p>
 <p>To use <span class="code">Vortex::TotalPerspective</span> from your scripts, just write <span class="code">use Vortex::TotalPerspective</span>, and your Perl 6 implementation will know where to look for the module file(s).</p>
 <a name="t21.3"></a><h1 id="_language_modules.pod6-Modules_and_Tools_related_to_module_authoring">21.3 Modules and Tools related to module authoring</h1>
 <p>You can find a list of modules and tools that aim to improve the experience of writing/test modules at <a href="#_language_modules-extra.pod6">Modules Extra</a></p>
 <a name="t21.4"></a><h1 id="_language_modules.pod6-The_Future_of_Ecosystem">21.4 The Future of Ecosystem</h1>
 <p><a href="https://modules.perl6.org">https://modules.perl6.org</a> and github-based infrastructure is temporary. The plan is to establish something similar to Perl 5's PAUSE/CPAN/MetaCPAN infrastructure. <b>Volunteers needed!</b></p>
 <p>The rough plan is:</p>
 <pre class="code">1. fix EVAL precomp bug (nine)
2. get Repository API straight
3. get zef up to speed
4. continue with the metacpan fork for perl6 (jdv79)</pre>
 <p>The repository with jdv's fork can be found at <a href="https://github.com/jdv/metacpan-web">https://github.com/jdv/metacpan-web</a></p>
 <p>You can also already upload your Perl 6 modules to <a href="https://pause.perl.org/">Perl 5's PAUSE</a>, selecting `Perl6` directory during the upload. That will ensure your module is indexed in Perl 6's space and not Perl 5's.</p>
 <a name="t21.4.1"></a><h2 id="_language_modules.pod6-Contact_Information">21.4.1 Contact Information</h2>
 <p>To help out or learn more, join the dedicated channel <a href="irc://irc.freenode.net/#perl6-toolchain">#perl6-toolchain on irc.freenode.net</a> <a href="http://irclog.perlgeek.de/perl6-toolchain/today">(channel logs)</a>. A repository to discuss tooling issues is also available at <a href="https://github.com/perl6/toolchain-bikeshed">https://github.com/perl6/toolchain-bikeshed</a></p>
</div> <!-- /language/mop.pod6 --><div class="pod-body"><a id="_language_mop.pod6"></a><a name="t22"><h1 class="title">22 Meta-Object Protocol</h1></a> <p class="subtitle">Introspection and the Perl 6 Object System</p> <p><span class="indexed"><a id="202" name="MOP"></a></span></p>
 <p>Perl 6 is built on a meta object layer. That means that there are objects (the <i>meta objects</i>) that control how various object-oriented constructs (such as classes, roles, methods, attributes, enums, ...) behave.</p>
 <p>To get a feeling for the meta object for <span class="code">class</span>, here is the same example twice: once as normal declarations in Perl 6, and once expressed through the meta model:</p>
 <pre class="code">class A {
    method x() { say 42 }
}

A.x();</pre>
 <p>corresponds to:</p>
 <pre class="code">constant A := Metamodel::ClassHOW.new_type( name =&gt; 'A' );  # class A {
A.^add_method('x', my method x(A:) { say 42 });             # method x() .. .
A.^compose;                                                 # }

A.x();</pre>
 <p>(except that the declarative form runs at compile time, and the latter form does not).</p>
 <p>The meta object behind an object can be obtained with <span class="code">$obj.HOW</span>, where HOW stands for Higher Order Workings (or, <i>HOW the *%@$ does this work?</i>).</p>
 <p>Here, the calls with <span class="code">.^</span> are calls to the meta object, so <span class="code">A.^compose</span> is a shortcut for <span class="code">A.HOW.compose(A)</span>. The invocant is passed in the parameter list as well, to make it possible to support prototype-style type systems, where there is just one meta object (and not one meta object per type, as standard Perl 6 does it).</p>
 <p>As the example above demonstrates, all object oriented features are available to the user, not just to the compiler. In fact the compiler just uses such calls to meta objects.</p>
 <a name="t22.1"></a><h1 id="_language_mop.pod6-Metamethods">22.1 Metamethods</h1>
 <p>These are introspective macros that resemble method calls.</p>
 <p>Metamethods are generally named with ALLCAPS, and it is considered good style to avoid creating your own methods with ALLCAPS names. This will avoid conflicts with any metamethods that may appear in future versions of the language. Note that if you really must use a method which has an ALLCAPS name, use quotes around the method name to safely call it indirectly:</p>
 <pre class="code">#| THIS IS A CLASS FOR SHOUTING THINGS
class MY-CLASSES-ARE-ALL-CAPS {
    method WHY { "I DON'T KNOW" }
}
my $c = MY-CLASSES-ARE-ALL-CAPS.new;
say $c.WHY      # "THIS IS A CLASS FOR SHOUTING THINGS"
say $c."WHY"()  # "I DON'T KNOW"</pre>
 <a name="t22.1.1"></a><h2 id="_language_mop.pod6-WHAT">22.1.1 <a name="203"></a>WHAT</h2>
 <p>The type object of the type.</p>
 <p>For example <span class="code">42.WHAT</span> returns the <span class="code">Int</span> type object.</p>
 <a name="t22.1.2"></a><h2 id="_language_mop.pod6-WHICH">22.1.2 <a name="205"></a>WHICH</h2>
 <p>The object's identity value. This can be used for hashing and identity comparison, and is how the <span class="code">===</span> infix operator is implemented.</p>
 <a name="t22.1.3"></a><h2 id="_language_mop.pod6-WHO">22.1.3 <a name="206"></a>WHO</h2>
 <p>The package supporting the object.</p>
 <a name="t22.1.4"></a><h2 id="_language_mop.pod6-WHERE">22.1.4 <a name="208"></a>WHERE</h2>
 <p>The memory address of the object. Note that this is not stable in implementations with moving/compacting garbage collectors. Use <span class="code">WHICH</span> for a stable identity indicator.</p>
 <a name="t22.1.5"></a><h2 id="_language_mop.pod6-HOW">22.1.5 <a name="209"></a>HOW</h2>
 <p>The metaclass object: "Higher Order Workings".</p>
 <a name="t22.1.6"></a><h2 id="_language_mop.pod6-WHY">22.1.6 <a name="211"></a>WHY</h2>
 <p>The attached Pod value.</p>
 <a name="t22.1.7"></a><h2 id="_language_mop.pod6-DEFINITE">22.1.7 <a name="212"></a>DEFINITE</h2>
 <p>The object has a valid concrete representation.</p>
 <p>Returns <span class="code">True</span> for instances and <span class="code">False</span> for type objects.</p>
 <a name="t22.1.8"></a><h2 id="_language_mop.pod6-VAR">22.1.8 <a name="213"></a>VAR</h2>
 <p>Returns the underlying <span class="code">Scalar</span> object, if there is one.</p>
 <p>The presence of a <span class="code">Scalar</span> object indicates that the object is "itemized".</p>
 <pre class="code">.say for (1, 2, 3); # not itemized, so "1\n2\n3\n"
.say for [1, 2, 3]; # itemized, so "1 2 3\n"
say (1, 2, 3).VAR ~~ Scalar; # False
say [1, 2, 3].VAR ~~ Scalar; # True</pre>
 <a name="t22.2"></a><h1 id="_language_mop.pod6-Structure_of_the_meta_object_system">22.2 Structure of the meta object system</h1>
 <p><b>Note:</b> this documentation largely reflects the meta object system as implemented by the <a href="http://rakudo.org/">Rakudo Perl 6 compiler</a>, since the <a href="https://design.perl6.org/">design documents</a> are very light on details.</p>
 <p>For each type declarator keyword, such as <span class="code">class</span>, <span class="code">role</span>, <span class="code">enum</span>, <span class="code">module</span>, <span class="code">package</span>, <span class="code">grammar</span> or <span class="code">subset</span>, there is a separate meta class in the <span class="code">Metamodel::</span> namespace. (Rakudo implements them in the <span class="code">Perl6::Metamodel::</span> namespace, and then maps <span class="code">Perl6::Metamodel</span> to <span class="code">Metamodel</span>).</p>
 <p>Many of the these meta classes share common functionality. For example roles, grammars and classes can all contain methods and attributes, as well as being able to do roles. This shared functionality is implemented in roles which are composed into the appropriate meta classes. For example <a href="#_type_Metamodel::RoleContainer.pod6">role Metamodel::RoleContainer</a> implements the functionality that a type can hold roles and <a href="#_type_Metamodel::ClassHOW.pod6">Metamodel::ClassHOW</a>, which is the meta class behind the <span class="code">class</span> keyword, does this role.</p>
 <p>Most meta classes have a <span class="code">compose</span> method that you must call when you're done creating or modifying a meta object. It creates method caches, validates things and so on, and weird behavior ensues if you forget to call it, so don't :-).</p>
 <a name="t22.2.1"></a><h2 id="_language_mop.pod6-Bootstrapping_concerns">22.2.1 Bootstrapping concerns</h2>
 <p>You might wonder how <span class="code">Metamodel::ClassHOW</span> can be a class, when being a class is defined in terms of <span class="code">Metamodel::ClassHOW</span>, or how the roles responsible for role handling can be roles. The answer is <i>by magic</i>.</p>
 <p>Just kidding. Bootstrapping is implementation specific. Rakudo does it by using the object system of the language in which itself is implemented, which happens to be (nearly) a subset of Perl 6: NQP, Not Quite Perl. NQP has a primitive, class-like kind called <span class="code">knowhow</span>, which is used to bootstrap its own classes and roles implementation. <span class="code">knowhow</span> is built on primitives that the virtual machine under NQP provides.</p>
 <p>Since the object model is bootstrapped in terms of lower-level types, introspection can sometimes return low-level types instead of the ones you expect, like an NQP-level routine instead of a normal <a href="#_type_Routine.pod6">Routine</a> object, or a bootstrap-attribute instead of <a href="#_type_Attribute.pod6">Attribute</a>.</p>
 <a name="t22.2.2"></a><h2 id="_language_mop.pod6-Composition_time_and_static_reasoning">22.2.2 Composition time and static reasoning</h2>
 <p>In Perl 6, a type is constructed as it is parsed, so in the beginning, it must be mutable. However if all types were always mutable, all reasoning about them would get invalidated at any modification of a type. For example the list of parent types and thus the result of type checking can change during that time.</p>
 <p>So to get the best of both worlds, there is a time when a type transitions from mutable to immutable. This is called <i>composition</i>, and for syntactically declared types, it happens when the type declaration is fully parsed (so usually when the closing curly brace is parsed).</p>
 <p>If you create types through the meta-object system directly, you must call <span class="code">.^compose</span> on them before they become fully functional.</p>
 <p>Most meta classes also use composition time to calculate some properties like the method resolution order, publish a method cache, and other house-keeping tasks. Meddling with types after they have been composed is sometimes possible, but usually a recipe for disaster. Don't do it.</p>
 <a name="t22.2.3"></a><h2 id="_language_mop.pod6-Power_and_Responsibility">22.2.3 Power and Responsibility</h2>
 <p>The meta object protocol offers much power that regular Perl 6 code intentionally limits, such as calling private methods on classes that don't trust you, peeking into private attributes, and other things that usually simply aren't done.</p>
 <p>Regular Perl 6 code has many safety checks in place; not so the meta model. It is close to the underlying virtual machine, and violating the contracts with the VM can lead to all sorts of strange behaviors that, in normal code, would obviously be bugs.</p>
 <p>So be extra careful and thoughtful when writing meta types.</p>
 <a name="t22.2.4"></a><h2 id="_language_mop.pod6-Power,_Convenience_and_Pitfalls">22.2.4 Power, Convenience and Pitfalls</h2>
 <p>The meta object protocol is designed to be powerful enough to implement the Perl 6 object system. This power occasionally comes at the cost of convenience.</p>
 <p>For example, when you write <span class="code">my $x = 42</span> and then proceed to call methods on <span class="code">$x</span>, most of these methods end up acting on the <a href="#_type_Int.pod6">integer</a> 42, not on the <a href="#_type_Scalar.pod6">scalar container</a> in which it is stored. This is a piece of convenience found in ordinary Perl 6. Many parts of the meta object protocol cannot afford to offer the convenience of automatically ignoring scalar containers, because they are used to implement those scalar containers as well. So if you write <span class="code">my $t = MyType; ... ; $t.^compose</span> you are composing the Scalar that the <span class="code">$</span>-sigiled variable implies, not <span class="code">MyType</span>.</p>
 <p>The consequence is that you need to have a rather detailed understanding of the subtleties of Perl 6 in order to avoid pitfalls when working with the MOP, and can't expect the same "do what I mean" convenience that ordinary Perl 6 code offers.</p>
</div> <!-- /language/nativecall.pod6 --><div class="pod-body"><a id="_language_nativecall.pod6"></a><a name="t23"><h1 class="title">23 Native Calling Interface</h1></a> <p class="subtitle">Call into dynamic libraries that follow the C calling convention</p> <a name="t23.1"></a><h1 id="_language_nativecall.pod6-Getting_Started">23.1 Getting Started</h1>
 <p><span class="indexed"><a id="214" name="nativecall"></a></span></p>
 <p>The simplest imaginable use of NativeCall would look something like this:</p>
 <pre class="code">use NativeCall;
sub some_argless_function() is native('something') { * }
some_argless_function();</pre>
 <p>The first line imports various traits and types. The next line looks like a relatively ordinary Perl 6 sub declaration - with a twist. We use the "native" trait in order to specify that the sub is actually defined in a native library. The platform-specific extension (e.g., '.so' or '.dll'), as well as any customary prefixes (e.g., 'lib') will be added for you.</p>
 <p>The first time you call "some_argless_function", the "libsomething" will be loaded and the "some_argless_function" will be located in it. A call will then be made. Subsequent calls will be faster, since the symbol handle is retained.</p>
 <p>Of course, most functions take arguments or return values - but everything else that you can do is just adding to this simple pattern of declaring a Perl 6 sub, naming it after the symbol you want to call and marking it with the "native" trait.</p>
 <a name="t23.2"></a><h1 id="_language_nativecall.pod6-Changing_names">23.2 Changing names</h1>
 <p>Sometimes you want the name of your Perl subroutine to be different from the name used in the library you're loading. Maybe the name is long or has different casing or is otherwise cumbersome within the context of the module you are trying to create.</p>
 <p>NativeCall provides a "symbol" trait for you to specify the name of the native routine in your library that may be different from your Perl subroutine name.</p>
 <pre class="code">module Foo;
use NativeCall;
our sub init() is native('foo') is symbol('FOO_INIT') { * }</pre>
 <p>Inside of "libfoo" there is a routine called "FOO_INIT" but, since we're creating a module called Foo and we'd rather call the routine as <span class="code">Foo::init</span>, we use the "symbol" trait to specify the name of the symbol in "libfoo" and call the subroutine whatever we want ("init" in this case).</p>
 <a name="t23.3"></a><h1 id="_language_nativecall.pod6-Passing_and_Returning_Values">23.3 Passing and Returning Values</h1>
 <p>Normal Perl 6 signatures and the <span class="code">returns</span> trait are used in order to convey the type of arguments a native function expects and what it returns. Here is an example.</p>
 <pre class="code">sub add(int32, int32) returns int32 is native("calculator") { * }</pre>
 <p>Here, we have declared that the function takes two 32-bit integers and returns a 32-bit integer. Here are some of the other types that you may pass (this will likely grow with time).</p>
 <pre class="code">int8           (int8_t in C, also used for char)
int16          (int16_t in C, also used for short)
int32          (int32_t in C, also used for int)
int64          (int64_t in C)
uint8          (uint8_t in C, also used for unsigned char)
uint16         (uint16_t in C, also used for unsigned short)
uint32         (uint32_t in C, also used for unsigned int)
uint64         (uint64_t in C)
long           (long in C)
longlong       (long long in C, at least 64-bit)
num32          (float in C)
num64          (double in C)
Str            (C string)
CArray[int32]  (int* in C, an array of ints)
Pointer[void]  (void* in C, can point to all other types)
bool           (bool from C99)
size_t         (size_t in C)</pre>
 <p>Don't use Perl 6 native types like <span class="code">int</span> or <span class="code">num</span>, as they don't have to correspond to the local C equivalent (e.g., Perl 6's <span class="code">int</span> can be 8 bytes but C's <span class="code">int</span> is only 4 bytes).</p>
 <p>Note that the lack of a <span class="code">returns</span> trait is used to indicate void return type. Do <i>not</i> use the 'void' type anywhere except in the Pointer parameterization.</p>
 <p>For strings, there is an additional "encoded" trait to give some extra hints on how to do the marshaling.</p>
 <pre class="code">sub message_box(Str is encoded('utf8')) is native('gui') { * }</pre>
 <p>To specify how to marshal string return types, just apply this trait to the routine itself.</p>
 <pre class="code">sub input_box() returns Str is encoded('utf8') is native('gui') { * }</pre>
 <p>Note that a null string can be passed by passing the Str type object; a null return will also be represented by the type object.</p>
 <p>If the C function requires the lifetime of a string to exceed the function call, the argument must be manually encoded and passed as <span class="code">CArray[uint8]</span>:</p>
 <pre class="code"># C prototype is void set_foo(const char *)
sub set_foo(CArray[uint8]) is native('foo') { * }
# C prototype is void use_foo(void)
sub use_foo() is native('foo') { * } # will use pointer stored by set_foo()

my $string = "FOO";
# The lifetime of this variable must be equal to the required lifetime of
# the data passed to the C function.
my $array = CArray[uint8].new($string.encode.list);

set_foo($array);
# ...
use_foo();
# It's fine if $array goes out of scope starting from here.</pre>
 <a name="t23.4"></a><h1 id="_language_nativecall.pod6-Basic_use_of_Pointers">23.4 Basic use of Pointers</h1>
 <p>When the signature of your native function needs a pointer to some native type (<span class="code">int32</span>, <span class="code">uint32</span>, etc.) all you need to do is declare the argument <span class="code">is rw</span> :</p>
 <pre class="code"># C prototype is void my_version(int *mayor, int *minor)
sub my_version(int32 is rw, int32 is rw) is native('foo') { * }
my_version(my int32 $mayor, my int32 $minor); # Pass a pointer to</pre>
 <p>Sometimes you need to get a pointer (for example, a library handle) back from a C library. You don't care about what it points to - you just need to keep hold of it. The Pointer type provides for this.</p>
 <pre class="code">sub Foo_init() returns Pointer is native("foo") { * }
sub Foo_free(Pointer) is native("foo") { * }</pre>
 <p>This works out OK, but you may fancy working with a type named something better than Pointer. It turns out that any class with the representation "CPointer" can serve this role. This means you can expose libraries that work on handles by writing a class like this:</p>
 <pre class="code">class FooHandle is repr('CPointer') {
    has $!initialized;

    # Here are the actual NativeCall functions.
    sub Foo_init() returns FooHandle is native("foo") { * }
    sub Foo_free(FooHandle) is native("foo") { * }

    # Here are the methods we use to expose it to the outside world.
    method new() {
        Foo_init();
        $!initialized = True;
    }
    method free() {
        if $!initialized {
            Foo_free(self);
            $!initialized = False; # prevent double frees
        }
    }

    # Free data when the object is garbage collected.
    method DESTROY() {
        self.free;
    }
}</pre>
 <p>Note that the CPointer representation can do nothing more than hold a C pointer. This means that your class cannot have extra attributes. However, for simple libraries this may be a neat way to expose an object oriented interface to it.</p>
 <p>Of course, you can always have an empty class:</p>
 <pre class="code">class DoorHandle is repr('CPointer') { }</pre>
 <p>And just use the class as you would use Pointer, but with potential for better type safety and more readable code.</p>
 <p>Once again, type objects are used to represent nulls.</p>
 <a name="t23.5"></a><h1 id="_language_nativecall.pod6-Function_Pointers">23.5 Function Pointers</h1>
 <p>C libraries can expose pointers to C functions as return values of functions and as members of Structures like, e.g., structs and unions.</p>
 <p>Example of invoking a function pointer "$fptr" returned by a function "f", using a signature defining the desired function parameters and return value:</p>
 <pre class="code">sub f() returns Pointer is native('mylib') { * }

my $fptr    = f();
my &amp;amp;newfunc = nativecast(:(Str, size_t --&gt; int32), $fptr);

say newfunc("test", 4);</pre>
 <a name="t23.6"></a><h1 id="_language_nativecall.pod6-Arrays">23.6 Arrays</h1>
 <p>NativeCall has some support for arrays. It is constrained to work with machine-size integers, doubles and strings, sized numeric types, arrays of pointers, arrays of structs, and arrays of arrays.</p>
 <p>Perl 6 arrays, which support amongst other things laziness, are laid out in memory in a radically different way to C arrays. Therefore, the NativeCall library offers a much more primitive CArray type, which you must use if working with C arrays.</p>
 <p>Here is an example of passing a C array.</p>
 <pre class="code">sub RenderBarChart(Str, int32, CArray[Str], CArray[num]) is native("chart") { * }
my @titles := CArray[Str].new;
@titles[0]  = 'Me';
@titles[1]  = 'You';
@titles[2]  = 'Hagrid';
my @values := CArray[num].new;
@values[0]  = 59.5e0;
@values[1]  = 61.2e0;
@values[2]  = 180.7e0;
RenderBarChart('Weights (kg)', 3, @titles, @values);</pre>
 <p>Note that binding was used to <span class="code">@titles</span>, <i>not</i> assignment! If you assign, you are putting the values into a Perl 6 array, and it will not work out. If this all freaks you out, forget you ever knew anything about the <span class="code">@</span> sigil and just use <span class="code">$</span> all the way when using NativeCall. :-)</p>
 <pre class="code">my $titles = CArray[Str].new;
$titles[0] = 'Me';
$titles[1] = 'You';
$titles[2] = 'Hagrid';</pre>
 <p>Getting return values for arrays works out just the same.</p>
 <p>Some library APIs may take an array as a buffer that will be populated by the C function and, for instance, return the actual number of items populated:</p>
 <pre class="code">sub get_n_ints(CArray[int32], int32) returns int32 is native('ints') { * }</pre>
 <p>In these cases it is important that the CArray has at least the number of elements that are going to be populated before passing it to the native subroutine, otherwise the C function may stomp all over Perl's memory leading to possibly unpredictable behaviour:</p>
 <pre class="code">my $ints = CArray[int32].new;
my $number_of_ints = 10;
$ints[$number_of_ints - 1] = 0; # extend the array to 10 items

my $n = get_n_ints($ints, $number_of_ints);</pre>
 <p>The memory management of arrays is important to understand. When you create an array yourself, then you can add elements to it as you wish and it will be expanded for you as required. However, this may result in it being moved in memory (assignments to existing elements will never cause this, however). This means you'd best know what you're doing if you twiddle with an array after passing it to a C library.</p>
 <p>By contrast, when a C library returns an array to you, then the memory can not be managed by NativeCall, and it doesn't know where the array ends. Presumably, something in the library API tells you this (for example, you know that when you see a null element, you should read no further). Note that NativeCall can offer you no protection whatsoever here - do the wrong thing, and you will get a segfault or cause memory corruption. This isn't a shortcoming of NativeCall, it's the way the big bad native world works. Scared? Here, have a hug. Good luck! :-)</p>
 <a name="t23.7"></a><h1 id="_language_nativecall.pod6-Structs">23.7 Structs</h1>
 <p>Thanks to representation polymorphism, it's possible to declare a normal looking Perl 6 class that, under the hood, stores its attributes in the same way a C compiler would lay them out in a similar struct definition. All it takes is a quick use of the "repr" trait:</p>
 <pre class="code">class Point is repr('CStruct') {
    has num64 $.x;
    has num64 $.y;
}</pre>
 <p>The attributes can only be of the types that NativeCall knows how to marshal into struct fields. Currently, structs can contain machine-sized integers, doubles, strings, and other NativeCall objects (CArrays, and those using the CPointer and CStruct reprs). Other than that, you can do the usual set of things you would with a class; you could even have some of the attributes come from roles or have them inherited from another class. Of course, methods are completely fine too. Go wild!</p>
 <p>CStruct objects are passed to native functions by reference and native functions must also return CStruct objects by reference. The memory management rules for these references are very much like the rules for arrays, though simpler since a struct is never resized. When you create a struct, the memory is managed for you and when the variable(s) pointing to the instance of a CStruct go away, the memory will be freed when the GC gets to it. When a CStruct-based type is used as the return type of a native function, the memory is not managed for you by the GC.</p>
 <p>NativeCall currently doesn't put object members in containers, so assigning new values to them (with =) doesn't work. Instead, you have to bind new values to the private members: <span class="code">$!struct-member := StructObj.new;</span></p>
 <p>As you may have predicted by now, a null is represented by the type object of the struct type.</p>
 <a name="t23.7.1"></a><h2 id="_language_nativecall.pod6-CUnions">23.7.1 CUnions</h2>
 <p>Likewise, it is possible to declare a Perl 6 class that stores its attributes the same way a C compiler would lay them out in a similar <span class="code">union</span> definition; using the <span class="code">CUnion</span> representation:</p>
 <pre class="code">class MyUnion is repr('CUnion') {
    has int32 $.flags32;
    has int64 $.flags64;
}

say nativesizeof(MyUnion.new);  # 8, ie. max(sizeof(MyUnion.flags32), sizeof(MyUnion.flags64))</pre>
 <a name="t23.7.2"></a><h2 id="_language_nativecall.pod6-Embedding_CStructs_and_CUnions">23.7.2 Embedding CStructs and CUnions</h2>
 <p>CStructs and CUnions can be in turn referenced by -- or embedded into -- a surrounding CStruct and CUnion. To say the former we use <span class="code">has</span> as usual, and to do the latter we use use the <span class="code">HAS</span> declarator instead:</p>
 <pre class="code">class MyStruct is repr('CStruct') {
    has Point $.point;  # referenced
    has int32 $.flags;
}

say nativesizeof(MyStruct.new);  # 16, ie. sizeof(struct Point *) + sizeof(int32_t)

class MyStruct2 is repr('CStruct') {
    HAS Point $.point;  # embedded
    has int32 $.flags;
}

say nativesizeof(MyStruct2.new);  # 24, ie. sizeof(struct Point) + sizeof(int32_t)</pre>
 <a name="t23.8"></a><h1 id="_language_nativecall.pod6-Typed_Pointers">23.8 Typed Pointers</h1>
 TODO
 <p>TBD more</p>
 <p>You can type your <span class="code">Pointer</span> by passing the type as a parameter. It works with the native type but also with <span class="code">CArray</span> and <span class="code">CStruct</span> defined types. NativeCall will not implicitly alloc the memory for it even when calling new on them. It's mostly useful in the case of a C routine returning a pointer, or if it's a pointer embedded in a <span class="code">CStruct</span>.</p>
 <p>You have to call <span class="code">.deref</span> on it to access the embedded type.</p>
 <pre class="code">my Pointer[int32] $p; #For a pointer on int32;
my Pointer[MyCstruct] $p2 = some_c_routine();
my MyCstruct $mc = $p2.deref;
say $mc.field1;</pre>
 <a name="t23.9"></a><h1 id="_language_nativecall.pod6-Buffers_and_Blobs">23.9 Buffers and Blobs</h1>
 TODO
 <p>TBD</p>
 <a name="t23.10"></a><h1 id="_language_nativecall.pod6-Function_arguments">23.10 Function arguments</h1>
 <p>NativeCall also supports native functions that take functions as arguments. One example of this is using function pointers as callbacks in an event-driven system. When binding these functions via NativeCall, one need only provide the equivalent signature as a constraint on the code parameter:</p>
 <pre class="code"># void SetCallback(int (*callback)(const char *))
my sub SetCallback(&amp;amp;callback (Str --&gt; int32)) is native('mylib') { * }</pre>
 <p>Note: the native code is responsible for memory management of values passed to Perl 6 callbacks this way. In other words, NativeCall will not free() strings passed to callbacks.</p>
 <a name="t23.11"></a><h1 id="_language_nativecall.pod6-Library_Paths_and_Names">23.11 Library Paths and Names</h1>
 TODO
 <p>TBD more</p>
 <p>The <span class="code">native</span> trait accepts the library name or the full path.</p>
 <pre class="code">constant LIBMYSQL = 'mysqlclient';
constant LIBFOO = '/usr/lib/libfoo.so.1';
# and later
sub mysql_affected_rows( .. ) returns int32 is native(LIBMYSQL);
sub bar is native(LIBFOO);</pre>
 <p>You can also put an incomplete path like './foo' and NativeCall will automatically put the right extension according to the platform specification.</p>
 <p>BE CAREFUL: the <span class="code">native</span> trait and <span class="code">constant</span> are evaluated at compile time. Don't write a constant that depends on a dynamic variable like:</p>
 <pre class="code">constant LIBMYSQL = %*ENV&amp;lt;P6LIB_MYSQLCLIENT&gt; || 'mysqlclient';</pre>
 <p>This will keep the value given at compile time. A module will be precompiled and <span class="code">LIBMYSQL</span> will keep the value it acquires when the module gets precompiled.</p>
 <a name="t23.11.1"></a><h2 id="_language_nativecall.pod6-ABI/API_Version">23.11.1 ABI/API Version</h2>
 <p>If you write <span class="code">native('foo')</span> NativeCall will search libfoo.so under Unix like system (libfoo.dynlib on OS X, foo.dll on win32). In most modern system it will require you or the user of your module to install the development package because it's recommended to always provide an API/ABI version to a shared library, so libfoo.so ends often being a symbolic link provided only by a devel package.</p>
 <p>To avoid that, the <span class="code">native</span> trait allows you to specify the API/ABI version. It can be a full version or just a part of it. (Try to stick to Major version, some BSD code does not care for Minor.)</p>
 <pre class="code">sub foo is native('foo', v1); # Will try to load libfoo.so.1
sub foo is native('foo', v1.2.3); # Will try to load libfoo.so.1.2.3

my List $lib = ('foo', 'v1');
sub foo is native($lib);</pre>
 <a name="t23.11.2"></a><h2 id="_language_nativecall.pod6-Routine">23.11.2 Routine</h2>
 <p>The <span class="code">native</span> trait also accepts a <span class="code">Callable</span> as argument, allowing you to provide your own way to handle the way it will find the library file to load.</p>
 <pre class="code">sub foo is native(sub {'libfoo.so.42'});</pre>
 <p>It will only be called at the first invocation of the sub.</p>
 <a name="t23.11.3"></a><h2 id="_language_nativecall.pod6-Calling_into_the_standard_library">23.11.3 Calling into the standard library</h2>
 <p>If you want to call a C function that's already loaded, either from the standard library or from your own program, you can pass the <span class="code">Str</span> type object as the argument to <span class="code">is native</span>, so <span class="code">is native(Str)</span>.</p>
 <p>For example on a UNIX-like operating system, you could use the following code to print the home directory of the current user:</p>
 <pre class="code">use NativeCall;
my class PwStruct is repr('CStruct') {
    has Str $.pw_name;
    has Str $.pw_passwd;
    has uint32 $.pw_uid;
    has uint32 $.pw_gid;
    has Str $.pw_gecos;
    has Str $.pw_dir;
    has Str $.pw_shell;
}
sub getuid()              returns uint32   is native(Str) { * };
sub getpwuid(uint32 $uid) returns PwStruct is native(Str) { * };

say getpwuid(getuid()).pw_dir;</pre>
 <p>Though of course <span class="code">$*HOME</span> is a much easier way :-)</p>
 <a name="t23.12"></a><h1 id="_language_nativecall.pod6-Exported_variables">23.12 Exported variables</h1>
 <p>Variables exported by a library -- also named "global" or "extern" variables -- can be accessed using <span class="code">cglobal</span>. For example:</p>
 <pre class="code">my $var := cglobal('libc.so.6', 'errno', int32)</pre>
 <p>This code binds to <span class="code">$var</span> a new <a href="#_type_Proxy.pod6">Proxy</a> object that redirects all its accesses to the integer variable named "errno" as exported by the "libc.so.6" library.</p>
 <a name="t23.13"></a><h1 id="_language_nativecall.pod6-C++_Support">23.13 C++ Support</h1>
 <p>NativeCall offers support to use classes and methods from C++ as shown in <a href="https://github.com/rakudo/rakudo/blob/nom/t/04-nativecall/13-cpp-mangling.t">https://github.com/rakudo/rakudo/blob/nom/t/04-nativecall/13-cpp-mangling.t</a> (and its associated C++ file). Note that at the moment it's not as tested and developed as C support.</p>
 <a name="t23.14"></a><h1 id="_language_nativecall.pod6-Helper_Functions">23.14 Helper Functions</h1>
 <p>The <span class="code">NativeCall</span> library exports several subroutines to help you work with data fron native libraries.</p>
 <a name="t23.14.1"></a><h2 id="_language_nativecall.pod6-sub_nativecast">23.14.1 sub <a name="216"></a>nativecast</h2>
 <pre class="code">sub nativecast($target-type, $source) is export(:DEFAULT)</pre>
 <p>This will <i>cast</i> the <a href="#_type_Pointer.pod6">Pointer</a> <span class="code">$source</span> to an object of <span class="code">$target-type</span>. The source pointer will typically have been obtained from a call to a native subroutine that returns a pointer or as a member of a <span class="code">struct</span>, this may be specified as <span class="code">void *</span> in the <span class="code">C</span> library definition for instance, but you may also cast from a pointer to a less specific type to a more specific one.</p>
 <p>As a special case, if a <a href="#_type_Signature.pod6">Signature</a> is supplied as <span class="code">$target-type</span> then a <span class="code">subroutine</span> will be returned which will call the native function pointed to by <span class="code">$source</span> in the same way as a subroutine declared with the <span class="code">native</span> trait. This is described in <a href="#22-Function_Pointers">Function Pointers</a>.</p>
 <a name="t23.14.2"></a><h2 id="_language_nativecall.pod6-sub_cglobal">23.14.2 sub <a name="217"></a>cglobal</h2>
 <pre class="code">sub cglobal($libname, $symbol, $target-type) is export is rw</pre>
 <p>This returns a <a href="#_type_Proxy.pod6">Proxy</a> object that provides access to the <span class="code">extern</span> named <span class="code">$symbol</span> that is exposed by the specified library. The library can be specified in the same ways that they can be to the <span class="code">native</span> trait.</p>
 <a name="t23.14.3"></a><h2 id="_language_nativecall.pod6-sub_nativesizeof">23.14.3 sub <a name="218"></a>nativesizeof</h2>
 <pre class="code">sub nativesizeof($obj) is export(:DEFAULT)</pre>
 <p>This returns the size in bytes of the supplied object, it can be thought of as being equivalent to <span class="code">sizeof</span> in <b>C</b>. The object can be a builtin native type such as <span class="code">int64</span> or <span class="code">num64</span>, a <span class="code">CArray</span> or a class with the <span class="code">repr</span> <span class="code">CStruct</span>, <span class="code">CUnion</span> or <span class="code">CPointer</span>.</p>
 <a name="t23.15"></a><h1 id="_language_nativecall.pod6-Examples">23.15 Examples</h1>
 <p>The <a href="https://github.com/jnthn/zavolaj">zavolaj</a> git repository (where NativeCall was originally developed) hosts <a href="https://github.com/jnthn/zavolaj/tree/master/examples">various examples</a> of how to use NativeCall.</p>
 <p>More examples can be found <a href="https://github.com/perl6/DBIish/tree/master/lib/DBDish">in the DBIsh repository</a>.</p>
 <a name="t23.15.1"></a><h2 id="_language_nativecall.pod6-MySQL">23.15.1 MySQL</h2>
 TODO Do we really need this here? Seems like this info should just go
              along-side that example in the git repo, rather than replicated
              on p6doc.
 <p>There is an example of using the MySQL client library. There is a project <a href="https://github.com/mberends/minidbi">https://github.com/mberends/minidbi</a> that wraps these functions with a DBI compatible interface. You'll need that library to hand; on Debian-esque systems it can be installed with something like:</p>
 <pre class="code">sudo apt-get install libmysqlclient</pre>
 <p>Prepare your system along these lines before trying out the examples:</p>
 <pre class="code">$ mysql -u root -p
CREATE DATABASE zavolaj;
CREATE USER 'testuser'@'localhost' IDENTIFIED BY 'testpass';
GRANT CREATE         ON zavolaj.* TO 'testuser'@'localhost';
GRANT DROP           ON zavolaj.* TO 'testuser'@'localhost';
GRANT INSERT         ON zavolaj.* TO 'testuser'@'localhost';
GRANT DELETE         ON zavolaj.* TO 'testuser'@'localhost';
GRANT SELECT         ON zavolaj.* TO 'testuser'@'localhost';
GRANT LOCK TABLES    ON zavolaj.* TO 'testuser'@'localhost';
GRANT SELECT         ON   mysql.* TO 'testuser'@'localhost';
# or maybe otherwise
GRANT ALL PRIVILEGES ON zavolaj.* TO 'testuser'@'localhost';</pre>
 <p>You can look at the results via a normal mysql connection:</p>
 <pre class="code">$ mysql -utestuser -ptestpass
USE zavolaj;
SHOW TABLES;
SELECT * FROM nom;</pre>
 <a name="t23.15.2"></a><h2 id="_language_nativecall.pod6-Microsoft_Windows">23.15.2 Microsoft Windows</h2>
 <p>The win32-api-call.p6 script shows an example Windows API call done from Perl 6. See <a href="https://github.com/jnthn/zavolaj/tree/master/examples">https://github.com/jnthn/zavolaj/tree/master/examples</a></p>
</div> <!-- /language/objects.pod6 --><div class="pod-body"><a id="_language_objects.pod6"></a><a name="t24"><h1 class="title">24 Object Orientation</h1></a> <p class="subtitle">Object Orientation in Perl 6</p> <p>Perl 6 is an object oriented language at its core, even though it allows you to write programs in other programming styles.</p>
 <p>Perl 6 comes with a wealth of predefined types, which can be classified in two categories: normal and <i>native</i> types.</p>
 <p>Native types are used for low-level types (like <span class="code">uint64</span>). They do not have the same capabilities as objects, though if you call methods on them, they are <i>boxed</i> into normal objects.</p>
 <p>Everything that you can store in a variable is either a native value or an object. That includes literals, types (type objects), code and containers.</p>
 <a name="t24.1"></a><h1 id="_language_objects.pod6-Using_Objects">24.1 Using Objects</h1>
 <p>You can use objects by calling methods on them. To call a method on an expression, add a dot, followed by the method name:</p>
 <pre class="code"> &lt;a href="#_routine_say.pod6"&gt;say&lt;/a&gt;  "abc" &lt;b&gt;. &lt;a href="#_routine_uc.pod6"&gt;uc&lt;/a&gt; &lt;/b&gt; ; 
 # ABC 
</pre>
 <p>This calls the <a href="#_routine_uc.pod6"> <span class="code">uc</span> </a> method on <span class="code">"abc"</span>, which is an object of type <a href="#_type_Str.pod6"> <span class="code">Str</span> </a>. If you need to supply arguments to the method, add parentheses after the method name with the arguments inside the parentheses:</p>
 <pre class="code">my $formatted-text = "Fourscore and seven years ago...". &lt;a href="#_routine_indent.pod6"&gt;indent&lt;/a&gt;  &lt;b&gt;(8)&lt;/b&gt; ; 
</pre>
 <p><span class="code">$formatted-text</span> now contains the above text, but indented 8 spaces.</p>
 <p>Multiple arguments simply require a comma between them:</p>
 <pre class="code">my @words = "Abe", "Lincoln"; 
 @words. &lt;a href="#_routine_push.pod6"&gt;push&lt;/a&gt; ("said" &lt;b&gt;,&lt;/b&gt;  $formatted-text. &lt;a href="#_routine_comb.pod6"&gt;comb&lt;/a&gt; ( &lt;a href="#_language_regexes.pod6"&gt;/\w+/&lt;/a&gt; )); 
</pre>
 <p>Another method call syntax separates the method name and the argument list with a colon:</p>
 <pre class="code">say @words. &lt;a href="#_routine_join.pod6"&gt;join&lt;/a&gt; : '--'; 
 # Abe--Lincoln--said--Fourscore--and--seven--years--ago 
</pre>
 <p>Since you have to put a <span class="code">:</span> after the method if you want to pass arguments without parentheses, a method call without a colon or parens is unambiguously a method call without an argument list:</p>
 <pre class="code">say 4.log:   ; # 1.38629436111989 ( natural logarithm of 4 )
say 4.log: +2; # 2                ( base-2 logarithm of 4 )
say 4.log  +2; # 3.38629436111989 ( natural logarithm of 4, plus 2 )</pre>
 <p>Many operations that don't look like method calls (for example, smart matching, or interpolating an object into a string) result in method calls under the hood.</p>
 <p>Methods can return mutable containers, in which case you can assign to the return value of a method call. This is how read-writable attributes to objects are used:</p>
 <pre class="code">$*IN. &lt;a href="#_routine_nl-in.pod6"&gt;nl-in&lt;/a&gt;  = "\r\n"; 
</pre>
 <p>Here, we are calling method <span class="code">nl-in</span> on the <span class="code">$*IN</span> object, without arguments, and assign to the container it returned with the <a href="="> <span class="code">=</span> </a> operator.</p>
 <p>All objects support methods from class <a href="#_type_Mu.pod6">Mu</a>, which is the root of the type hierarchy. In other words, all objects are derived from <span class="code">Mu</span>.</p>
 <a name="t24.1.1"></a><h2 id="_language_objects.pod6-Type_Objects">24.1.1 Type Objects</h2>
 <p>Types themselves are objects and you can get the <i>type object</i> simply by writing its name:</p>
 <pre class="code">my $int-type-obj = Int;</pre>
 <p>You can ask any object for its type object by calling the <span class="code">WHAT</span> method (which is actually a macro in method form):</p>
 <pre class="code">my $int-type-obj = 1.WHAT;</pre>
 <p>Type objects (other than <a href="#_type_Mu.pod6">Mu</a>) can be compared for equality with the <a href="==="> <span class="code">===</span> </a> identity operator:</p>
 <pre class="code">sub f(Int $x) { 
     if $x.WHAT  &lt;b&gt; &lt;a href="==="&gt;===&lt;/a&gt; &lt;/b&gt;  Int { 
         say 'you passed an Int'; 
     } 
     else { 
         say 'you passed a subtype of Int'; 
     } 
 } 
</pre>
 <p>Although, in most cases, the <a href="#_routine_isa.pod6"> <span class="code">.isa</span> </a> method will suffice:</p>
 <pre class="code">sub f($x) { 
     if $x &lt;b&gt;. &lt;a href="#_routine_isa.pod6"&gt;isa&lt;/a&gt; &lt;/b&gt; (Int) { 
         ... 
     } 
     ... 
 } 
</pre>
 <p>Subtype checking is done by smart-matching:</p>
 <pre class="code">if $type  &lt;b&gt; &lt;a href="~~"&gt;~~&lt;/a&gt; &lt;/b&gt;   &lt;a href="#_type_Real.pod6"&gt;Real&lt;/a&gt;  { 
     say '$type contains Real or a subtype thereof'; 
 } 
</pre>
 <a name="t24.2"></a><h1 id="_language_objects.pod6-Classes">24.2 <a name="219"></a>Classes</h1>
 <p>Classes are declared using the <span class="code">class</span> keyword, typically followed by a name.</p>
 <pre class="code">class Journey {
}</pre>
 <p>This declaration results in a type object being created and installed in the current package and current lexical scope under the name <span class="code">Journey</span>. You can also declare classes lexically:</p>
 <pre class="code">my class Journey {
}</pre>
 <p>This restricts their visibility to the current lexical scope, which can be useful if the class is an implementation detail nested inside a module or another class.</p>
 <a name="t24.2.1"></a><h2 id="_language_objects.pod6-Attributes">24.2.1 Attributes <a name="220"></a> <a name="221"></a> <a name="222"></a> <a name="223"></a></h2>
 <p>Attributes are variables that exist per instance of a class. They are where the state of an object is stored. In Perl 6, all attributes are private. They are typically declared using the <span class="code">has</span> declarator and the <span class="code">!</span> twigil.</p>
 <pre class="code">class Journey {
    has $!origin;
    has $!destination;
    has @!travellers;
    has $!notes;
}</pre>
 <p>While there is no such thing as a public (or even protected) attribute, there is a way to have accessor methods generated automatically: replace the <span class="code">!</span> twigil with the <span class="code">.</span> twigil (the <span class="code">.</span> should remind you of a method call).</p>
 <pre class="code">class Journey {
    has $.origin;
    has $.destination;
    has @!travellers;
    has $.notes;
}</pre>
 <p>This defaults to providing a read-only accessor. In order to allow changes to the attribute, add the <a href="#_routine_is rw.pod6">is rw</a> trait:</p>
 <pre class="code">class Journey {
    has $.origin;
    has $.destination;
    has @!travellers;
    has $.notes is rw;
}</pre>
 <p>Now, after a <span class="code">Journey</span> object is created, its <span class="code">.origin</span>, <span class="code">.destination</span>, and <span class="code">.notes</span> will all be accessible from outside the class, but only <span class="code">.notes</span> can be modified.</p>
 <p>The above allows creation of <span class="code">Journey</span> objects without an origin or destination. To change this you can provide a default value or make sure that it is provided by marking it with <a href="#_routine_is required.pod6">is required</a>.</p>
 <pre class="code">class Journey {
    # error if origin is not provided
    has $.origin is required;
    # set the destination to Orlando as default (unless that is the origin!)
    has $.destination = self.origin eq 'Orlando' ?? 'Kampala' !! 'Orlando';
    has @!travellers;
    has $.notes is rw;
}</pre>
 <p>Since classes inherit a default constructor from <span class="code">Mu</span> and we have requested that some accessor methods are generated for us, our class is already somewhat functional.</p>
 <pre class="code"># Create a new instance of the class. 
 my $vacation = Journey.new( 
     origin       &lt;a href="=&amp;gt;"&gt;=&gt;&lt;/a&gt;  'Sweden', 
     destination =&gt; 'Switzerland', 
     notes       =&gt; 'Pack hiking gear!' 
 ); 
 
 # Use an accessor; this outputs Sweden. 
 say $vacation.origin; 
 
 # Use an rw accessor to change the value. 
 $vacation.notes = 'Pack hiking gear and sunglasses!'; 
</pre>
 <p>Note that the default constructor will only set attributes that have an accessor method, but it can initialize read-only attributes.</p>
 <a name="t24.2.2"></a><h2 id="_language_objects.pod6-Methods">24.2.2 Methods</h2>
 <p>Methods are declared with the <span class="code">method</span> keyword inside a class body.</p>
 <pre class="code">class Journey { 
     has $.origin; 
     has $.destination; 
     has @!travellers; 
     has $.notes is rw; 
 
      &lt;b&gt;method&lt;/b&gt;  add_traveller($name) { 
         if $name  &lt;a href="#_routine_ne.pod6"&gt;ne&lt;/a&gt;   &lt;a href="#_routine_any.pod6"&gt;any&lt;/a&gt; (@!travellers) { 
              &lt;a href="#_routine_push.pod6"&gt;push&lt;/a&gt;  @!travellers, $name; 
         } 
         else { 
              &lt;a href="#_routine_warn.pod6"&gt;warn&lt;/a&gt;  "$name is already going on the journey!"; 
         } 
     } 
 
      &lt;b&gt;method&lt;/b&gt;  describe() { 
         "From $!origin to $!destination" 
     } 
 } 
</pre>
 <p>A method can have a signature, just like a subroutine. Attributes can be used in methods and can always be used with the <span class="code">!</span> twigil, even if they are declared with the <span class="code">.</span> twigil. This is because really, the <span class="code">.</span> twigil declares a <span class="code">!</span> twigil and then additionally generates an accessor method.</p>
 <p>Looking at the code above, there is a subtle but important difference between using <span class="code">$!origin</span> and <span class="code">$.origin</span> in the method <span class="code">describe</span>. The first is always a simple lookup of the attribute. It is cheap, and you know that it is the attribute declared in this class. The latter is really a method call and thus it may be overridden in a subclass. Only use <span class="code">$.origin</span> if you explicitly want to allow overriding.</p>
 <p>Unlike Subroutines, additional named arguments will not produce compile time or runtime errors. That allows chaining of methods via <a href="#_language_functions.pod6-Re-dispatching">Re-dispatching</a></p>
 <p>Method names can be resolved at runtime with the <span class="code">.""</span> operator.</p>
 <pre class="code">class A { has $.b };
my $name = 'b';
A.new."$name"().say;
# OUTPUT«(Any)␤»</pre>
 <a name="t24.2.3"></a><h2 id="_language_objects.pod6-self">24.2.3 self</h2>
 <p>Inside a method, the term <span class="code">self</span> is available, which is bound to the invocant, i.e. the object that the method was called on. <span class="code">self</span> can be used to call further methods on the invocant. Within methods, something like <span class="code">$.origin</span> is the same thing as <span class="code">self.origin</span>.</p>
 <a name="t24.2.4"></a><h2 id="_language_objects.pod6-Private_Methods">24.2.4 Private Methods</h2>
 <p>Methods strictly for use inside the class and that are not to be called from anywhere else are declared with an exclamation mark <span class="code">!</span> before the method name. They are called with an exclamation mark instead of a dot:</p>
 <pre class="code">method !do-something-private($x) {
    ...
}
method public($x) {
    if self.precondition {
        self!do-something-private(2 * $x)
    }
}</pre>
 <p>Private methods are not inherited to subclasses.</p>
 <a name="t24.2.5"></a><h2 id="_language_objects.pod6-Submethods">24.2.5 Submethods</h2>
 <p>A submethod is a public method that is not inherited to subclasses. The name stems from the fact that they are semantically similar to subroutines.</p>
 <p>Submethods are useful for object construction and destruction tasks, as well as for tasks that are so specific to a certain type that subtypes must certainly override them.</p>
 <p>For example the <a href="#_type_Mu.pod6-method new">default method new</a> calls submethod <span class="code">BUILD</span> on each class in an <a href="#23-Inheritance">inheritance</a> chain:</p>
 <pre class="code">class Point2D { 
     has $.x; 
     has $.y; 
 
     submethod BUILD(:$!x, :$!y) { 
         say "Initializing Point2D"; 
     } 
 } 
 
 class InvertiblePoint2D is Point2D { 
     submethod BUILD() { 
         say "Initializing InvertiblePoint2D"; 
     } 
     method invert { 
         self.new(x =&gt; - $.x, y =&gt; - $.y); 
     } 
 } 
 
 say InvertiblePoint2D.new(x =&gt; 1, y =&gt; 2); 
</pre>
 <p>This produces the following output:</p>
 <pre class="code">Initializing Point2D 
 Initializing InvertiblePoint2D 
 InvertiblePoint2D.new(x =&gt; 1, y =&gt; 2) 
</pre>
 <p>See also: <a href="#23-Object Construction">#Object Construction</a>.</p>
 <a name="t24.2.6"></a><h2 id="_language_objects.pod6-Inheritance">24.2.6 Inheritance</h2>
 <p>Classes can have <i>parent classes</i>.</p>
 <pre class="code">class Child  &lt;b&gt; &lt;a href="#_routine_is.pod6"&gt;is&lt;/a&gt;  Parent1 is Parent2&lt;/b&gt;  { } 
</pre>
 <p>If a method is called on the child class, and the child class does not provide that method, the method of that name in one of the parent classes is invoked instead, if it exists. The order in which parent classes are consulted is called the <i>method resolution order</i> (MRO). Perl 6 uses the <a href="https://en.wikipedia.org/wiki/C3_linearization">C3 method resolution order</a>. You can ask a type for its MRO through a call to its meta class:</p>
 <pre class="code">say List &lt;b&gt;.^ &lt;a href="#_type_Metamodel::C3MRO.pod6-mro"&gt;mro&lt;/a&gt; &lt;/b&gt; ;      # List() Cool() Any() Mu() 
</pre>
 <p>If a class does not specify a parent class, <a href="#_type_Any.pod6">Any</a> is assumed by default. All classes directly or indirectly derive from <a href="#_type_Mu.pod6">Mu</a>, the root of the type hierarchy.</p>
 <p>All calls to public methods are "virtual" in the C++ sense, which means that the actual type of an object determines which method to call, not the declared type:</p>
 <pre class="code">class Parent { 
     method frob { 
         say "the parent class frobs" 
     } 
 } 
 
 class Child is Parent { 
     method frob { 
         say "the child's somewhat more fancy frob is called" 
     } 
 } 
 
 my Parent $test; 
 $test = Child.new; 
 $test.frob;          # calls the frob method of Child rather than Parent 
</pre>
 <p>This produces the output:</p>
 <pre class="code">the child's somewhat more fancy frob is called</pre>
 <a name="t24.2.7"></a><h2 id="_language_objects.pod6-Object_Construction">24.2.7 Object Construction</h2>
 <p>Objects are generally created through method calls, either on the type object or on another object of the same type.</p>
 <p>Class <a href="#_type_Mu.pod6">Mu</a> provides a constructor method called <a href="#_routine_new.pod6">new</a>, which takes named arguments and uses them to initialize public attributes.</p>
 <pre class="code">class Point { 
     has $.x; 
     has $.y = 2 * $!x; 
 } 
 my $p = Point &lt;b&gt;. &lt;a href="#_routine_new.pod6"&gt;new&lt;/a&gt; &lt;/b&gt; ( x  &lt;a href="=&amp;gt;"&gt;=&gt;&lt;/a&gt;  5, y =&gt; 2); 
 #             ^^^ inherited from class Mu 
 say "x: ", $p.x; 
 say "y: ", $p.y; 
</pre>
 <p>This outputs:</p>
 <pre class="code">x: 5
y: 2</pre>
 <pre class="code">my $p2 = Point &lt;b&gt;.new&lt;/b&gt; ( x =&gt; 5 ); 
 # the given value for x is used to calculate the right 
 # value for y. 
 say "x: ", $p.x; 
 say "y: ", $p.y; 
</pre>
 <p>This outputs:</p>
 <pre class="code">x: 5
y: 10</pre>
 <p><span class="code">Mu.new</span> calls method <a href="#_routine_bless.pod6">bless</a> on its invocant, passing all the named arguments. <span class="code">bless</span> creates the new object and then calls method <span class="code">BUILDALL</span> on it. <span class="code">BUILDALL</span> walks all subclasses in reverse method resolution order (i.e. from <a href="#_type_Mu.pod6">Mu</a> to most derived classes) and in each class checks for existence of a method named <span class="code">BUILD</span>. If it exists, it is called, again passing all named arguments from method <span class="code">new</span> to it. If not, the public attributes from this class are initialized from named arguments of the same name. In either case, if neither <span class="code">BUILD</span> nor the default mechanism has initialized the attribute, default values are applied (the <span class="code">2 * $!x</span> in the example above).</p>
 <p>Due to the nature of the default behavior of <span class="code">BUILDALL</span> and custom <span class="code">BUILD</span> submethods, named arguments to the constructor <span class="code">new</span> derived from <span class="code">Mu</span> can correspond directly to public attributes of any of the classes in the method resolution order, or to any named parameter to any <span class="code">BUILD</span> submethod.</p>
 <p>This object construction scheme has several implications for customized constructors. First, custom <span class="code">BUILD</span> methods should always be submethods, otherwise they break attribute initialization in subclasses. Second, <span class="code">BUILD</span> submethods can be used to run custom code at object construction time. They can also be used for creating aliases for attribute initialization:</p>
 <pre class="code">class EncodedBuffer { 
     has $.enc; 
     has $.data; 
 
     submethod  &lt;b&gt;BUILD&lt;/b&gt; (:encoding(:$enc), :$data) { 
         $!enc   &lt;a href=":="&gt;:=&lt;/a&gt;   $enc; 
         $!data := $data; 
     } 
 } 
 my $b1 = EncodedBuffer.new( encoding =&gt; 'UTF-8', data =&gt; [64, 65] ); 
 my $b2 = EncodedBuffer.new( enc      =&gt; 'UTF-8', data =&gt; [64, 65] ); 
 #  both enc and encoding are allowed now 
</pre>
 <p>Since passing arguments to a routine binds the arguments to the parameters, a separate binding step is unnecessary if the attribute is used as a parameter. Hence the example above could also have been written as:</p>
 <pre class="code">    submethod BUILD(:encoding(:$ &lt;b&gt;!&lt;/b&gt; enc), :$ &lt;b&gt;!&lt;/b&gt; data) { 
         # nothing to do here anymore, the signature binding 
         # does all the work for us. 
     } 
</pre>
 <p>The third implication is that if you want a constructor that accepts positional arguments, you must write your own <span class="code">new</span> method:</p>
 <pre class="code">    class Point { 
         has $.x; 
         has $.y; 
         method new($x, $y) { 
             self. &lt;a href="#_routine_bless.pod6"&gt;bless&lt;/a&gt; (:$x, :$y); 
         } 
     } 
</pre>
 <p>However this is considered poor practice, because it makes correct initialization of objects from subclasses harder.</p>
 <p>Another thing to note is that the name <span class="code">new</span> is not special in Perl 6. It is merely a common convention. You can call <span class="code">bless</span> from any method at all, or use <span class="code">CREATE</span> to fiddle around with low-level workings.</p>
 <p>Another pattern of hooking into object creation is by writing your own method <span class="code">BUILDALL</span>. To make sure that initialization of superclasses works fine, you need to <span class="code">callsame</span> to invoke the parent classes <span class="code">BUILDALL</span>.</p>
 <pre class="code">class MyClass { 
     method BUILDALL(|) { 
         # initial things here 
 
         callsame;   # call the parent classes (or default) BUILDALL 
 
         # you can do final checks here. 
 
         self # return the fully built object 
     } 
 } 
</pre>
 TODO: better example for BUILDALL overriding
 <a name="t24.2.8"></a><h2 id="_language_objects.pod6-Object_Cloning">24.2.8 Object Cloning</h2>
 <p>The <span class="code">Mu</span> parent class, from which all classes inherit, supplies a method named <a href="#_routine_clone.pod6">clone</a> which is somewhat magical, in that it can copy values from an instance's private attributes to create a new instance. This cloning is shallow, in that it only binds attributes to the same values they contained in the original instance; it does not make copies of those contained values.</p>
 <p>As with <span class="code">new</span>, one may provide initial values for public attributes. These override values received from the original instance. (See the documentation for Mu's <a href="#_routine_clone.pod6">clone</a> for an example.)</p>
 <p>Note that since <span class="code">clone</span> is not a <span class="code">submethod</span>, a class which provides its own <span class="code">clone</span> method will replace the <span class="code">Mu</span> method. There is no automatic mechanism like <span class="code">BUILDALL</span> for cloning. For example, if one wished to make clone deeper for a particular class, one would will probably want to use <span class="code">callwith</span> or <span class="code">nextwith</span> to push the deeper copies to superclasses:</p>
 <pre class="code">class A {
    has $.a;
    #...
    method clone {
        nextwith(:a($.a.clone))
    }
}</pre>
 <p>This works well for simple classes, but in some cases one might need to follow <span class="code">BUILDALL</span>'s lead and work in reverse method resolution order:</p>
 <pre class="code">class B is A {
    has $.b;
    #...
    method clone {
        my $obj = callsame;
        $obj.b = $!b.clone(:seed($obj.a.generate_seed));
        $obj
    }
}</pre>
 <a name="t24.3"></a><h1 id="_language_objects.pod6-Roles">24.3 <a name="231"></a>Roles</h1>
 <p>Roles are in some ways similar to classes, in that they are a collection of attributes and methods. They differ in that roles are also meant for describing only parts of an object's behavior and in how roles are applied to classes. Or to phrase it differently, classes are meant for managing instances and roles are meant for managing behavior and code reuse.</p>
 <pre class="code">use MONKEY-SEE-NO-EVAL; 
 role Serializable { 
     method serialize() { 
         self. &lt;a href="#_routine_perl.pod6"&gt;perl&lt;/a&gt; ; # very primitive serialization 
     } 
     method deserialize($buf) { 
          &lt;a href="#_routine_EVAL.pod6"&gt;EVAL&lt;/a&gt;  $buf; # reverse operation to .perl 
     } 
 } 
 
 class Point  &lt;b&gt;does&lt;/b&gt;  Serializable { 
     has $.x; 
     has $.y; 
 } 
 my $p = Point.new(:x(1), :y(2)); 
 my $serialized = $p.serialize;      # method provided by the role 
 my $clone-of-p = Point.deserialize($serialized); 
 say $clone-of-p.x;      # 1 
</pre>
 <p>Roles are immutable as soon as the compiler parses the closing curly brace of the role declaration.</p>
 <a name="t24.3.1"></a><h2 id="_language_objects.pod6-Role_Application">24.3.1 <!--  -->Role Application</h2>
 <p>Role application differs significantly from class inheritance. When a role is applied to a class, the methods of that role are copied into the class. If multiple roles are applied to the same class, conflicts (e.g. attributes or non-multi methods of the same name) cause a compile-time error, which can be solved by providing a method of the same name in the class.</p>
 <p>This is much safer than multiple inheritance, where conflicts are never detected by the compiler, but are instead simply resolved to the superclass that appears earlier in the method resolution order, which might not be what the programmer wanted.</p>
 <p>For example, if you've discovered an efficient method to ride cows, and are trying to market it as a new form of popular transportation, you might have a class <span class="code">Bull</span>, for all the bulls you keep around the house, and a class <span class="code">Automobile</span>, for things that you can drive.</p>
 <pre class="code">class Bull {
    has Bool $.castrated = False;
    method steer {
        # Turn your bull into a steer
        $!castrated = True;
        return self;
    }
}
class Automobile {
    has $.direction;
    method steer($!direction) { }
}
class Taurus is Bull is Automobile { }

my $t = Taurus.new;
$t.steer; # Castrates $t</pre>
 <p>With this setup, your poor customers will find themselves unable to turn their Taurus and you won't be able to make more of your product! In this case, it may have been better to use roles:</p>
 <pre class="code">role Bull-Like {
    has Bool $.castrated = False;
    method steer {
        # Turn your bull into a steer
        $!castrated = True;
        return self;
    }
}
role Steerable {
    has Real $.direction;
    method steer(Real $d = 0) {
        $!direction += $d;
    }
}
class Taurus does Bull-Like does Steerable { }</pre>
 <p>This code will die with something like:</p>
 <pre class="code">===SORRY!===
Method 'steer' must be resolved by class Taurus because it exists in
multiple roles (Steerable, Bull-Like)</pre>
 <p>This check will save you and your customers a lot of headaches and you can simply define your class instead as:</p>
 <pre class="code">class Taurus does Bull-Like does Steerable {
    method steer($direction?) {
        self.Steerable::steer($direction?)
    }
}</pre>
 <p>When a role is applied to a second role, the actual application is delayed until the second role is applied to a class, at which point both roles are applied to the class. Thus</p>
 <pre class="code">role R1 {
    # methods here
}
role R2 does R1 {
    # methods here
}
class C does R2 { }</pre>
 <p>produces the same class <span class="code">C</span> as</p>
 <pre class="code">role R1 {
    # methods here
}
role R2 {
    # methods here
}
class C does R1 does R2 { }</pre>
 <a name="t24.3.2"></a><h2 id="_language_objects.pod6-Stubs">24.3.2 Stubs</h2>
 <p>When a role contains a stubbed method, a non-stubbed version of a method of the same name must be supplied at the time the role is applied to a class. This allows you to create roles that act as abstract interfaces.</p>
 <pre class="code">role AbstractSerializable { 
     method serialize() {  &lt;b&gt; &lt;a href="..."&gt;...&lt;/a&gt; &lt;/b&gt;  }  # literal ... here marks the 
                                       # method as a stub 
 } 
 
 # the following is a compile time error, for example 
 #        Method 'serialize' must be implemented by Point because 
 #        it is required by a role 
 class APoint does AbstractSerializable { 
     has $.x; 
     has $.y; 
 } 
 
 # this works: 
 class SPoint does AbstractSerializable { 
     has $.x; 
     has $.y; 
     method serialize() { "p($.x, $.y)" } 
 } 
</pre>
 <p>The implementation of the stubbed method may also be provided by another role.</p>
 <a name="t24.3.3"></a><h2 id="_language_objects.pod6-Inheritance">24.3.3 Inheritance</h2>
 <p>Roles cannot inherit from classes, but they may cause any class which does that role to inherit from another class. So if you write:</p>
 <pre class="code">    role A is Exception { } 
     class X::Ouch does A { } 
     X::Ouch.^parents.say # ((Exception)) 
</pre>
 <p>...then <span class="code">X::Ouch</span> will inherit directly from Exception, as we can see above by listing its parents.</p>
 <a name="t24.3.4"></a><h2 id="_language_objects.pod6-Pecking_order">24.3.4 Pecking order</h2>
 <p>A method defined directly in a class will always override definitions from applied roles or from inherited classes. If no such definition exists, methods from roles override methods inherited from classes. This happens both when said class was brought in by a role, and also when said class was inherited directly.</p>
 <p>Note that each candidate for a multi-method is its own method... in this case, the above only applies if two such candidates have the same signature. Otherwise, there is no conflict, and the candidate is just added to the multi-method.</p>
 <a name="t24.3.5"></a><h2 id="_language_objects.pod6-Automatic_Role_Punning">24.3.5 Automatic Role Punning</h2>
 <p>Any attempt to instantiate (and many other kinds of usage) a role will automatically create a class with the same name as the role, making it possible to transparently use a role as if it were a class.</p>
 <pre class="code">role Point { 
     has $.x; 
     has $.y; 
     method abs { sqrt($.x * $.x + $.y * $.y) } 
 } 
 say Point.new(x =&gt; 6, y =&gt; 8).abs; 
</pre>
 <p>We call this automatic creating of classes <i>punning</i>, and the generated class a <i>pun</i>.</p>
 <a name="t24.3.6"></a><h2 id="_language_objects.pod6-Parameterized_Roles">24.3.6 Parameterized Roles</h2>
 <p>Roles can be parameterized, by giving them a signature in square brackets:</p>
 <pre class="code">role BinaryTree[::Type] { 
     has BinaryTree[Type] $.left; 
     has BinaryTree[Type] $.right; 
     has Type $.node; 
 
     method visit-preorder(&amp;amp;cb) { 
         cb $.node; 
         for $.left, $.right -&gt; $branch { 
             $branch.visit-preorder(&amp;amp;cb) if defined $branch; 
         } 
     } 
     method visit-postorder(&amp;amp;cb) { 
         for $.left, $.right -&gt; $branch { 
             $branch.visit-postorder(&amp;amp;cb) if defined $branch; 
         } 
         cb $.node; 
     } 
     method new-from-list(::?CLASS:U: *@el) { 
         my $middle-index = @el.elems div 2; 
         my @left         = @el[0 .. $middle-index - 1]; 
         my $middle       = @el[$middle-index]; 
         my @right        = @el[$middle-index + 1 .. *]; 
         self.new( 
             node    =&gt; $middle, 
             left    =&gt; @left  ?? self.new-from-list(@left)  !! self, 
             right   =&gt; @right ?? self.new-from-list(@right) !! self, 
         ); 
     } 
 } 
 
 my $t = BinaryTree[Int].new-from-list(4, 5, 6); 
 $t.visit-preorder(&amp;amp;say);    # 5 \n 4 \n 6 
 $t.visit-postorder(&amp;amp;say);   # 4 \n 6 \n 5 
</pre>
 <p>Here the signature consists only of a type capture, but any signature will do:</p>
 <pre class="code">use v6; 
 
 enum Severity &amp;lt;debug info warn error critical&gt;; 
 
 role Logging[$filehandle = $*ERR] { 
     method log(Severity $sev, $message) { 
         $filehandle.print("[{uc $sev}] $message\n"); 
     } 
 } 
 
 Logging[$*OUT].log(debug, 'here we go');        # [DEBUG] here we go 
</pre>
 <p>You can have multiple roles of the same name, but with different signatures; the normal rules of multi dispatch apply for choosing multi candidates.</p>
 <a name="t24.3.7"></a><h2 id="_language_objects.pod6-Mixins_of_Roles">24.3.7 <a name="235"></a>Mixins of Roles</h2>
 <p>Roles can be mixed into objects. A role's given attributes and methods will be added to the methods and attributes the object already has. Multiple mixins and anonymous roles are supported.</p>
 <pre class="code">role R { method Str() {'hidden!'} };
my $i = 2 but R;
sub f(\bound){ put bound };
f($i); # hidden!</pre>
 <p>Note that the object got the role mixed in, not the object's class or the container. Thus @-sigiled containers will require binding to make the role stick. Some operators will return a new value, which effectively strips the mixin from the result.</p>
 <p>Mixins can happen at any time of your object's life.</p>
 <pre class="code"># A counter for Table of Contents
role TOC-Counter {
    has Int @!counters is default(0);
    method Str() { @!counters.join: '.' }
    method inc($level) {
        @!counters[$level - 1]++;
        @!counters.splice($level);
        self
    }
}

my Num $toc-counter = NaN;     # don't do maths with Not A Number
say $toc-counter; # NaN
$toc-counter does TOC-Counter; # now we mix the role in
$toc-counter.inc(1).inc(2).inc(2).inc(1).inc(2).inc(2).inc(3).inc(3);
put $toc-counter / 1;          # NaN (because that's numerical context)
put $toc-counter;              # 2.2.2 (put will call TOC-Counter::Str)</pre>
 <p>Roles can by anonymous.</p>
 <pre class="code">my %seen of Int is default(0 but role :: { method Str() {'NULL'} });
say %seen&amp;lt;not-there&gt;;          # NULL
say %seen&amp;lt;not-there&gt;.defined;  # True (0 may be False but is well defined)
say Int.new(%seen&amp;lt;not-there&gt;); # 0</pre>
 <a name="t24.4"></a><h1 id="_language_objects.pod6-Meta-Object_Programming_and_Introspection">24.4 Meta-Object Programming and Introspection</h1>
 <p>Perl 6 has a meta object system, which means that the behavior of objects, classes, roles, grammars, enums, etc. are themselves controlled by other objects; those objects are called <i>meta objects</i>. Meta objects are, like ordinary objects, instances of classes, in this case we call them <i>meta classes</i>.</p>
 <p>For each object or class you can get the meta object by calling <span class="code">.HOW</span> on it. Note that although this looks like a method call, it is actually special-cased in the compiler, so it is more like a macro.</p>
 <p>So, what can you do with the meta object? For one you can check if two objects have the same meta class by comparing them for equality:</p>
 <pre class="code">say 1.HOW ===   2.HOW;      # True
say 1.HOW === Int.HOW;      # True
say 1.HOW === Num.HOW;      # False</pre>
 <p>Perl 6 uses the word <i>HOW</i>, Higher Order Workings, to refer to the meta object system. Thus it should be no surprise that in Rakudo, the class name of the meta class that controls class behavior is called <span class="code">Perl6::Metamodel::ClassHOW</span>. For each class there is one instance of <span class="code">Perl6::Metamodel::ClassHOW</span>.</p>
 <p>But of course the meta model does much more for you. For example it allows you to introspect objects and classes. The calling convention for methods on meta objects is to call the method on the meta object and pass in the object of interest as first argument to the object. So to get the name of the class of an object, you could write:</p>
 <pre class="code">my $object = 1;
my $metaobject = 1.HOW;
say $metaobject.name($object);      # Int

# or shorter:
say 1.HOW.name(1);                  # Int</pre>
 <p>(The motivation is that Perl 6 also wants to allow a more prototype-based object system, where it's not necessary to create a new meta object for every type).</p>
 <p>To get rid of using the same object twice, there is a shortcut:</p>
 <pre class="code">say 1.^name;                        # Int
# same as
say 1.HOW.name(1);                  # Int</pre>
 <p>See <a href="#_type_Metamodel::ClassHOW.pod6">Metamodel::ClassHOW</a> for documentation of the meta class of <span class="code">class</span> and also the <a href="#_language_mop.pod6">general documentation on the meta object protocol</a>.</p>
</div> <!-- /language/operators.pod6 --><div class="pod-body"><a id="_language_operators.pod6"></a><a name="t25"><h1 class="title">25 Operators</h1></a> <p class="subtitle">Common Perl 6 infixes, prefixes, postfixes, and more!</p> <a name="t25.1"></a><h1 id="_language_operators.pod6-Operator_Precedence">25.1 Operator Precedence</h1>
 <p>In an expression like <span class="code">1 + 2 * 3</span>, the <span class="code">2 * 3</span> is evaluated first because the infix <span class="code">*</span> has tighter <b>precedence</b> than the <span class="code">+</span>.</p>
 <p>The following table summarizes the precedence levels in Perl 6, from tightest to loosest:</p>
 <table>
<tr><th>A</th> <th>Level</th> <th>Examples</th></tr>
<tr><td>N</td> <td>Terms</td> <td>42 3.14 "eek" qq["foo"] $x :!verbose @$array</td></tr>
 <tr><td>L</td> <td>Method postfix</td> <td>.meth .+ .? .* .() .[] .{} .&lt;> .«» .:: .= .^ .:</td></tr>
 <tr><td>N</td> <td>Autoincrement</td> <td>++ --</td></tr>
 <tr><td>R</td> <td>Exponentiation</td> <td>**</td></tr>
 <tr><td>L</td> <td>Symbolic unary</td> <td>! + - ~ ? | || +^ ~^ ?^ ^</td></tr>
 <tr><td>L</td> <td>Multiplicative</td> <td>* / % %% +&amp; +&lt; +> ~&amp; ~&lt; ~> ?&amp; div mod gcd lcm</td></tr>
 <tr><td>L</td> <td>Additive</td> <td>+ - +| +^ ~| ~^ ?| ?^</td></tr>
 <tr><td>L</td> <td>Replication</td> <td>x xx</td></tr>
 <tr><td>X</td> <td>Concatenation</td> <td>~</td></tr>
 <tr><td>X</td> <td>Junctive and</td> <td>&amp;</td></tr>
 <tr><td>X</td> <td>Junctive or</td> <td>| ^</td></tr>
 <tr><td>L</td> <td>Named unary</td> <td>temp let</td></tr>
 <tr><td>N</td> <td>Structural infix</td> <td>but does &lt;=> leg cmp .. ..^ ^.. ^..^</td></tr>
 <tr><td>C</td> <td>Chaining infix</td> <td>!= == &lt; &lt;= > >= eq ne lt le gt ge ~~ === eqv !eqv =~=</td></tr>
 <tr><td>X</td> <td>Tight and</td> <td>&amp;&amp;</td></tr>
 <tr><td>X</td> <td>Tight or</td> <td>|| ^^ // min max</td></tr>
 <tr><td>R</td> <td>Conditional</td> <td>?? !! ff fff</td></tr>
 <tr><td>R</td> <td>Item assignment</td> <td>= => += -= **= xx= .=</td></tr>
 <tr><td>L</td> <td>Loose unary</td> <td>so not</td></tr>
 <tr><td>X</td> <td>Comma operator</td> <td>, :</td></tr>
 <tr><td>X</td> <td>List infix</td> <td>Z minmax X X~ X* Xeqv ...</td></tr>
 <tr><td>R</td> <td>List prefix</td> <td>print push say die map substr ... [+] [*] any Z=</td></tr>
 <tr><td>X</td> <td>Loose and</td> <td>and andthen</td></tr>
 <tr><td>X</td> <td>Loose or</td> <td>or xor orelse</td></tr>
 <tr><td>X</td> <td>Sequencer</td> <td>&lt;==, ==>, &lt;&lt;==, ==>></td></tr>
 <tr><td>N</td> <td>Terminator</td> <td>; {...}, unless, extra ), ], }</td></tr>
</table> <p>Using two <span class="code">!</span> symbols below generically to represent any pair of operators that have the same precedence, the associativities specified above for binary operators are interpreted as follows:</p>
 <table>
<tr><th>A</th> <th>Assoc</th> <th>Meaning of $a ! $b ! $c</th></tr>
<tr><td>L</td> <td>left</td> <td>($a ! $b) ! $c</td></tr>
 <tr><td>R</td> <td>right</td> <td>$a ! ($b ! $c)</td></tr>
 <tr><td>N</td> <td>non</td> <td>ILLEGAL</td></tr>
 <tr><td>C</td> <td>chain</td> <td>($a ! $b) and ($b ! $c)</td></tr>
 <tr><td>X</td> <td>list</td> <td>infix:&lt;!>($a; $b; $c)</td></tr>
</table> <p>For unary operators this is interpreted as:</p>
 <table>
<tr><th>A</th> <th>Assoc</th> <th>Meaning of !$a!</th></tr>
<tr><td>L</td> <td>left</td> <td>(!$a)!</td></tr>
 <tr><td>R</td> <td>right</td> <td>!($a!)</td></tr>
 <tr><td>N</td> <td>non</td> <td>ILLEGAL</td></tr>
</table> <p>In the operator descriptions below, a default associativity of <i>left</i> is assumed.</p>
 <a name="t25.2"></a><h1 id="_language_operators.pod6-Operator_classification">25.2 Operator classification</h1>
 <p>Operators can occur in several positions relative to a term:</p>
 <table>
<tr><td>+term</td> <td>prefix</td></tr>
 <tr><td>term1 + term2</td> <td>infix</td></tr>
 <tr><td>term++</td> <td>postfix</td></tr>
 <tr><td>(term)</td> <td>circumfix</td></tr>
 <tr><td>term1[term2]</td> <td>postcircumfix</td></tr>
</table> <p>Each operator is also available as a subroutine. The name of the routine is formed of the operator category, then a colon, and a list quote construct with the symbol(s) that make up the operator:</p>
 <pre class="code">infix:&amp;lt;+&gt;(1, 2)                 # same as 1 + 2
circumfix:«( )»('a', 'b', 'c')  # same as ('a', 'b', 'c')</pre>
 <p>As a special case the <i>listop</i> (list operator) can stand either as a term or as a prefix. Subroutine calls are the most common listops. Other cases include meta-reduced infix operators (<span class="code">[+]| 1, 2, 3</span>) and the <a href="#24-prefix ...">#prefix ...</a> etc. stub operators.</p>
 <p>Defining custom operators is covered in <a href="#_language_functions.pod6-Defining_Operators">Defining Operators functions</a>.</p>
 <a name="t25.3"></a><h1 id="_language_operators.pod6-Meta_Operators">25.3 Meta Operators</h1>
 <p>Meta operators can be parameterized with other operators or subroutines in the same way as functions can take functions as parameters. To use a subroutine as a parameter prefix it's name with a <span class="code">&amp;</span>. Perl 6 will generate the actual combined operator in the background, allowing the mechanism to be applied to user defined operators. There are quite a few Meta operators with different semantics, as explained in detail as follows.</p>
 <a name="t25.4"></a><h1 id="_language_operators.pod6-Substitution_Operators">25.4 Substitution Operators</h1>
 <pre class="code">my $str = 'match string';
$str ~~ s/match/replacement/;
say $str; # replacement string

say S/match/replacement/ given 'match string'; # replacement string</pre>
 <p>The lower-case version (<span class="indexed"><a id="224" name="">s///</a></span>) substitutes in-place, while the upper-case version (<span class="indexed"><a id="225" name="">S///</a></span>) leaves the original alone and returns the resultant string.</p>
 <p>Both operators work on `$_` variable. Since smartmatch operator aliases the left hand side to `$_`, you can use lowercase `s///` with it, but it's a mistake to use it with uppercase `S///`, because you can't retrieve the modified string. The correct way is to alias the given string by some other method, such as a `for` loop or, as is shown in the example above, with a `given` block (in this case, it's a postfix form of it, without curlies).</p>
 <p>Both operators can take the same adverbs as the <a href="#_routine_subst.pod6">.subst method</a>, which go between the `s`/`S` and the opening `/`. Whitespace can be used liberally:</p>
 <pre class="code">$str ~~ s:g/match/replacement/;
say S:i :g /match/replacement/;</pre>
 <p>You can also use a different delimiter:</p>
 <pre class="code">$str ~~ s!foo!!;
say S{foo} = {} given 'foobar';</pre>
 <p>Non-matching characters can simply replace the original slashes. Matching characters, like braces, require an extra step where you use an assignment operator to assign the replacement to the match part.</p>
 <a name="t25.5"></a><h1 id="_language_operators.pod6-Assignment_Operators">25.5 Assignment Operators</h1>
 <p>Infix operators can be combined with the assignment operator to modify a value and apply the result to a container in one go. Containers will be autovivified if possible.</p>
 <pre class="code">my $a = 32;
$a += 10;  # 42

my $a = 3;
$a min= 5; # still 3
$a min= 2; # 2</pre>
 <p><!-- blocked by #63642 my @a = 1,2; @a ,= 3,4; --></p>
 <p>This behavior is automatically extended to include custom-defined infix operators.</p>
 <pre class="code">sub infix:&amp;lt;space-concat&gt; ($a, $b) { $a ~ " " ~ $b };
my $a = 'word1';
$a space-concat= 'word2'; # 'word1 word2'</pre>
 <p>Although not strictly operators, methods can be used in the same fashion.</p>
 <pre class="code">my Rat $a .= new;
my $a = 3.14;
$a .= Int; # 3</pre>
 <a name="t25.6"></a><h1 id="_language_operators.pod6-Negated_Relational_Operators">25.6 Negated Relational Operators</h1>
 <p>The result of a relational operator returning <span class="code">Bool</span> can be negated by prefixing with <span class="code">!</span>. To avoid visual confusion with the <span class="code">!!</span> operator, you may not modify any operator already beginning with <span class="code">!</span>.</p>
 <p>There are shortcuts for <span class="code">!==</span> and <span class="code">!eq</span>, namely <span class="code">!=</span> and <span class="code">ne</span>.</p>
 <pre class="code">my $a = True;
say so $a != True; # False
my $i = 10;

my $release = Date.new(:2015year, :12month, :24day);
my $today = Date.today;
say so $release !before $today; # True</pre>
 <a name="t25.7"></a><h1 id="_language_operators.pod6-Reversed_Operators">25.7 Reversed Operators</h1>
 <p>Any infix operator may be called with its two arguments reversed by prefixing with <span class="code">R</span>. Associativity of operands is reversed as well.</p>
 <pre class="code">say 4 R/ 12; # 3
say [R/] 2, 4, 16; # 2</pre>
 <a name="t25.8"></a><h1 id="_language_operators.pod6-Hyper_Operators">25.8 <a name="226"></a>Hyper Operators</h1>
 <p>Hyper operators apply a given operator enclosed by <span class="code">«</span> and <span class="code">»</span> to one or two lists, returning the resulting list. The pointy part of <span class="code">«</span> or <span class="code">»</span> has to point to the shorter list. A list with just one element is fine too. If one of the lists is shorter then the other, the operator will cycle over the shorter list until all elements of the longer list are processed.</p>
 <pre class="code">say (1, 2, 3) »*» 2;          # (2 4 6)
say (1, 2, 3, 4) »~» &amp;lt;a b&gt;;   # (1a 2b 3a 4b)
say (1, 2, 3) »+« (4, 5, 6);  # (5 7 9)</pre>
 <p>Assignment meta operators can be hyped.</p>
 <pre class="code">my @a = 1, 2, 3;
say @a »+=» 1; # [2 3 4]</pre>
 <p>Hyper forms of unary operators have the pointy bit point to the operator and the blunt end at the list to be operated on.</p>
 <pre class="code">my @wisdom = True, False, True;
say !« @wisdom; # [False True False]

my @a = 1, 2, 3;
@a»++;           # (2, 3, 4)</pre>
 <p>Hyper operators are defined recursively on nested arrays.</p>
 <pre class="code">say -« [[1, 2], 3]; # [[-1 -2] -3]</pre>
 <p>Methods can be called too, in an out of order, concurrent fashion. The resulting list is in order. Please note that all hyper operators are candidates for autothreading and will cause tears if said methods have side effects. The optimizer has full reign over hyper operators, which is the reason that they can not be defined by the user.</p>
 <pre class="code">my CarefulClass @objs;
my @results = @objs».take-care();

my @slops; # May Contain Nuts
@slops».?this-method-may-not-exist();</pre>
 <p>Hyper operators can work with hashes. The pointy direction indicates if missing keys are to be ignored in the resulting hash. The enclosed operator operates on all values that have keys in both hashes.</p>
 <table>
<tr><td>C&lt;%foo «+» %bar;></td> <td>intersection of keys</td></tr>
 <tr><td>C&lt;%foo »+« %bar;></td> <td>union of keys</td></tr>
 <tr><td>C&lt;%outer »+» %inner;></td> <td>only keys of %inner that exist in %outer will occur in the result</td></tr>
</table> <pre class="code">my %outer = 1, 2, 3 Z=&gt; &amp;lt;a b c&gt;;
my %inner = 1, 2 Z=&gt; &amp;lt;x z&gt;;
say %outer «~» %inner; # {"1" =&gt; "ax", "2" =&gt; "bz"}</pre>
 <p>Hyper operators can take user defined operators as its operator argument.</p>
 <pre class="code">sub pretty-file-site (Int $size --&gt; Str) {
    # rounding version of infix:&amp;lt;/&gt;(Int, Int)
    sub infix:&amp;lt;r/&gt;(Int \i1, Int \i2) {
        round(i1 / i2, 0.1)
    }

    # we build a vector of fractions of $size and zip that with the fitting prefix
    for $size «[r/]« (2**60, 2**50, 2**40, 2**30, 2**20, 2**10)
              Z      &amp;lt;EB     PB     TB     GB     MB     KB&gt; -&gt; [\v,\suffix] {
        # starting with the biggest suffix, we take the first that is 0.5 of that suffix or bigger
        return v ~ ' ' ~ suffix if v &gt; 0.4
    }
    # this be smaller or equal then 0.4 KB
    return $size.Str;
}

for 60, 50, 40, 30, 20, 10 -&gt; $test {
    my &amp;amp;a = { (2 ** $test) * (1/4, 1/2, 1, 10, 100).pick * (1..10).pick };
    print pretty-file-site(a.Int) xx 2, ' ';
}

# OUTPUT: «10 EB 4 EB 2 PB 5 PB 0.5 PB 4 TB 300 GB 4.5 GB 50 MB 200 MB 9 KB 0.6 MB»</pre>
 <p>Hyper operators do not descent into child lists. You can chain hyper operators to destructure a List of Lists.</p>
 <pre class="code">my $neighbors = ((-1, 0), (0, -1), (0, 1), (1, 0));
my $p = (2, 3);
say $neighbors »&gt;&gt;+&amp;lt;&amp;lt;» ($p, *); # ((1 3) (2 2) (2 4) (3 3))</pre>
 <a name="t25.9"></a><h1 id="_language_operators.pod6-Reduction_Operators">25.9 Reduction Operators</h1>
 <p>Reduction operators apply any infix operator, surrounded by <span class="code">[</span> and <span class="code">]</span>, element by element and return the resulting value. To use a function reference provide an additional layer of <span class="code">[</span> and <span class="code">]</span>.</p>
 <pre class="code">say [+] 1, 2, 3; # 6
sub plus { $^a + $^b };
say [[&amp;amp;plus]] 1, 2, 3; # 6</pre>
 <p>They can be defined as a list prefix operators or will be generated automatically.</p>
 <pre class="code">multi infix:&amp;lt;[~~]&gt; (@c, &amp;amp;test) is looser(&amp;amp;infix:&amp;lt;~~&gt;) {
    gather for @c { take $_ if test($_) }
};
my @l = 1, 'a', 2, 'b';
say @l [~~] {$^a ~~ Str}; # (a b)</pre>
 <p>For list infix operators, flattening is not done on the input list. This allows list operators to become the reduction operator.</p>
 <pre class="code">[X~] (1, 2), &amp;lt;a b&gt; # 1, 2 X~ &amp;lt;a b&gt;</pre>
 <p>By default reduction meta operators are eager. To lazily generate values, prefix the operator with a <span class="code">\</span>. If the non-meta part contains a <span class="code">\</span> already, quote it with <span class="code">[]</span> (e.g. <span class="code">[\[\x]]</span>).</p>
 <pre class="code">my $lazy := [\+] 1..*;
say $lazy[^10]; # (1 3 6 10 15 21 28 36 45 55)</pre>
 <a name="t25.10"></a><h1 id="_language_operators.pod6-Cross_Operators">25.10 Cross Operators</h1>
 <p>The cross metaoperator, <span class="code">X</span>, will apply a given infix operator in order of cross product to all lists, such that the rightmost operator varies most quickly.</p>
 <pre class="code">1..3 X~ &amp;lt;a b&gt;
# produces &amp;lt;1a, 1b, 2a, 2b, 3a, 3b&gt;</pre>
 <a name="t25.11"></a><h1 id="_language_operators.pod6-Zip_Operators">25.11 Zip Operators</h1>
 <p>The zip metaoperator, <span class="code">Z</span>, will apply a given infix operator to pairs taken one left, one right, from its arguments. The resulting list is returned.</p>
 <pre class="code">my @l = &amp;lt;a b c&gt; Z~ 1, 2, 3; # [a1 b2 c3]</pre>
 <p>If one of the operands runs out of elements prematurely, the zip operator will stop. An infinite list can be used to repeat elements. A list with a final element of <span class="code">*</span> will repeat its 2nd last element indefinitely.</p>
 <pre class="code">my @l = &amp;lt;a b c d&gt; Z~ ':' xx *; # &amp;lt;a: b: c: d:&gt;
my @l = &amp;lt;a b c d&gt; Z~ 1, 2, *;  # &amp;lt;a1 b2 c2 d2&gt;</pre>
 <p>If infix operator is not given, <span class="code">,</span> (comma operator) will be used by default:</p>
 <pre class="code">my @l = 1 Z 2; # [(1 2)]</pre>
 <a name="t25.12"></a><h1 id="_language_operators.pod6-Sequential_Operators">25.12 Sequential Operators</h1>
 <p>The sequential metaoperator, <span class="code">S</span>, will suppress any concurrency, or reordering done by the optimizer. Most simple infix operators are supported.</p>
 <pre class="code">say so 1 S&amp;amp; 2 S&amp;amp; 3; # True</pre>
 <a name="t25.13"></a><h1 id="_language_operators.pod6-Nesting_of_Meta_Operators">25.13 Nesting of Meta Operators</h1>
 <p>To avoid ambiguity when chaining meta operators use square brackets to help the compiler to understand you.</p>
 <pre class="code">my @a = 1, 2, 3;
my @b = 5, 6, 7;
@a X[+=] @b;
say @a; # [19 20 21]</pre>
 <a name="t25.14"></a><h1 id="_language_operators.pod6-Term_Precedence">25.14 <!--  -->Term Precedence</h1>
 <a name="t25.14.1"></a><h2 id="_language_operators.pod6-term_&lt;_>">25.14.1 term <span class="code">&lt; ></span></h2>
 <p>The <span class="indexed"><a id="227" name="qw quote-words">quote-words</a></span> construct. Breaks up the contents on whitespace, and returns a <a href="#_type_List.pod6">List</a> of the words. If a word looks like a number literal or a <span class="code">Pair</span> literal, it is converted to the appropriate number.</p>
 <pre class="code">say &amp;lt;a b c&gt;[1];     # b</pre>
 <a name="t25.14.2"></a><h2 id="_language_operators.pod6-term_(_)">25.14.2 term <span class="code">( )</span></h2>
 <p>The <span class="indexed"><a id="228" name="">grouping operator</a></span>.</p>
 <p><span class="indexed"><a id="229" name="() empty list"></a></span> An empty group <span class="code">()</span> creates an empty <a href="#_type_List.pod6">List</a> . Parens around non-empty expressions simply structure the expression, but not have additional semantics.</p>
 <p>In an argument list, putting parenthesis around an argument prevents it from being interpreted as a named argument.</p>
 <pre class="code">multi sub p(:$a!) { say 'named'      }
multi sub p($a)   { say 'positional' }
p a =&gt; 1;       # named
p (a =&gt; 1);     # positional</pre>
 <a name="t25.14.3"></a><h2 id="_language_operators.pod6-term_{_}">25.14.3 term <span class="code">{ }</span></h2>
 <p>Block or <a href="#_type_Hash.pod6">Hash</a> constructor.<span class="indexed"><a id="230" name="block constructor hash constructor"></a></span></p>
 <p>If the contents looks like a list of pairs and does not use <a href="#_syntax_$_.pod6">$_</a> or other placeholder parameters, returns an itemized <a href="#_type_Hash.pod6">Hash</a>.</p>
 <p>Otherwise it constructs a <a href="#_type_Block.pod6">Block</a>.</p>
 <p>Note that this construct does not re-parse the contents; rather the contents are always parsed as a statement list (i.e. like a block), and if the later analysis shows that it needs to be interpreted as a hash, the block is executed and coerced to <a href="#_type_Hash.pod6">Hash</a>.</p>
 <a name="t25.14.4"></a><h2 id="_language_operators.pod6-circumfix_[_]">25.14.4 circumfix <span class="code">[ ]</span></h2>
 <p>The <span class="indexed"><a id="232" name=""> <a href="#_type_Array.pod6">Array</a>  constructor</a></span>. Returns an itemized <a href="#_type_Array.pod6">Array</a> which does not flatten in list context.</p>
 <a name="t25.15"></a><h1 id="_language_operators.pod6-Method_Postfix_Precedence">25.15 Method Postfix Precedence</h1>
 <a name="t25.15.1"></a><h2 id="_language_operators.pod6-postcircumfix_[_]">25.15.1 postcircumfix <span class="code">[ ]</span></h2>
 <pre class="code">sub postcircumfix:&amp;lt;[ ]&gt;(@container, **@index,
                        :$k, :$v, :$kv, :$p, :$exists, :$delete)</pre>
 <p>Universal interface for positional access to zero or more elements of a @container, a.k.a. "<span class="indexed"><a id="233" name="array indexing operator array subscript operator">array indexing operator</a></span>".</p>
 <pre class="code">my @alphabet = 'a' .. 'z';
say @alphabet[0];                   #-&gt; a
say @alphabet[1];                   #-&gt; b
say @alphabet[*-1];                 #-&gt; z
say @alphabet[100]:exists;          #-&gt; False
say @alphabet[15, 4, 17, 11].join;  #-&gt; perl
say @alphabet[23 .. *].perl;        #-&gt; ("x", "y", "z")

@alphabet[1, 2] = "B", "C";
say @alphabet[0..3].perl            #-&gt; ("a", "B", "C", "d")</pre>
 <p>See <a href="#_language_subscripts.pod6">Subscripts</a> for a more detailed explanation of this operator's behavior, and how to implement support for it in custom types.</p>
 <a name="t25.15.2"></a><h2 id="_language_operators.pod6-postcircumfix_{_}">25.15.2 postcircumfix <span class="code">{ }</span></h2>
 <pre class="code">sub postcircumfix:&amp;lt;{ }&gt;(%container, **@key,
                        :$k, :$v, :$kv, :$p, :$exists, :$delete)</pre>
 <p>Universal interface for associative access to zero or more elements of a %container, a.k.a. "<span class="indexed"><a id="234" name="hash indexing operator hash subscript operator">hash indexing operator</a></span>".</p>
 <pre class="code">my %color = kiwi =&gt; "green", banana =&gt; "yellow", cherry =&gt; "red";
say %color{"banana"};               #-&gt; yellow
say %color{"cherry", "kiwi"}.perl;  #-&gt; ("red", "green")
say %color{"strawberry"}:exists;    #-&gt; False

%color{"banana", "lime"} = "yellowish", "green";
%color{"cherry"}:delete;
say %color;  #-&gt; banana =&gt; yellowish, kiwi =&gt; green, lime =&gt; green</pre>
 <p>See <a href="#_routine_[ ].pod6-postcircumfix_&lt;_&gt;"> <span class="code">postcircumfix &lt; ></span> </a> and <a href="#_routine_[ ].pod6-postcircumfix_«_»"> <span class="code">postcircumfix « »</span> </a> for convenient shortcuts, and <a href="#_language_subscripts.pod6">Subscripts</a> for a more detailed explanation of this operator's behavior, and how to implement support for it in custom types.</p>
 <a name="t25.15.3"></a><h2 id="_language_operators.pod6-postcircumfix_&lt;_>">25.15.3 postcircumfix <span class="code">&lt; ></span></h2>
 <p>Shortcut for <a href="#_routine_[ ].pod6-postcircumfix_{_}"> <span class="code">postcircumfix { }</span> </a> that quotes its argument using the same rules as the <a href="#_routine_&lt; &gt;.pod6-circumfix_&lt;_&gt;">quote-words operator</a> of the same name.</p>
 <pre class="code">my %color = kiwi =&gt; "green", banana =&gt; "yellow", cherry =&gt; "red";
say %color&amp;lt;banana&gt;;             #-&gt; yellow
say %color&amp;lt;cherry kiwi&gt;.perl;   #-&gt; ("red", "green")
say %color&amp;lt;strawberry&gt;:exists;  #-&gt; False</pre>
 <p>This is not a real operator, just syntactic sugar that is turned into the <span class="code">{ }</span> postcircumfix operator at compile-time.</p>
 <a name="t25.15.4"></a><h2 id="_language_operators.pod6-postcircumfix_«_»">25.15.4 postcircumfix <span class="code">« »</span></h2>
 <p>Shortcut for <a href="#_routine_[ ].pod6-postcircumfix_{_}"> <span class="code">postcircumfix { }</span> </a> that quotes its argument using the same rules as the <a href="#_routine_« ».pod6-circumfix_«_»">interpolating quote-words operator</a> of the same name.</p>
 <pre class="code">my %color = kiwi =&gt; "green", banana =&gt; "yellow", cherry =&gt; "red";
my $fruit = "kiwi";
say %color«cherry $fruit».perl;   #-&gt; ("red", "green")</pre>
 <p>This is not a real operator, just syntactic sugar that is turned into the <span class="code">{ }</span> postcircumfix operator at compile-time.</p>
 <a name="t25.15.5"></a><h2 id="_language_operators.pod6-postcircumfix_(_)">25.15.5 postcircumfix <span class="code">( )</span></h2>
 <p>The <span class="indexed"><a id="236" name="">call operator</a></span>. Treats the invocant as a <a href="#_type_Callable.pod6">Callable</a> and invokes it, using the expression between the parens as arguments.</p>
 <p>Note that an identifier followed by a pair of parens is always parsed as a subroutine call.</p>
 <p>If you want your objects to respond to the call operator, you need to implement a <span class="code">method CALL-ME</span>.</p>
 <a name="t25.15.6"></a><h2 id="_language_operators.pod6-postfix_.">25.15.6 postfix <span class="code">.</span></h2>
 <p>The operator for calling one method, <span class="code">$invocant.method</span>.<span class="indexed"><a id="237" name="method call"></a></span></p>
 <p>Technically this is not an operator, but syntax special-cased in the compiler.</p>
 <p><span class="indexed"><a id="238" name="postfix .&amp;"></a></span></p>
 <a name="t25.15.7"></a><h2 id="_language_operators.pod6-postfix_.&amp;">25.15.7 postfix <span class="code">.&amp;</span></h2>
 <p>The operator to call a subroutine (with at least one positional argument) like a method. The invocant will be bound to the first positional argument.</p>
 <p>Technically this is not an operator, but syntax special-cased in the compiler.</p>
 <pre class="code">my sub f($invocant){ dd $invocant; }
my $i = 42;
42.&amp;amp;f;
# OUTPUT«Int $invocant = 42␤»
42.&amp;amp;(-&gt; $invocant { dd $invocant });
# OUTPUT«Int $invocant = 42␤»</pre>
 <a name="t25.15.8"></a><h2 id="_language_operators.pod6-postfix_.=">25.15.8 postfix <span class="code">.=</span></h2>
 <p>A <span class="indexed"><a id="239" name="">mutating method call</a></span>. <span class="code">$invocant.=method</span> desugars to <span class="code">$invocant = $invocant.method</span>, similar to <a href=" &lt;span class=&quot;code&quot;&gt;=&lt;/span&gt; "> <span class="code">=</span> </a>.</p>
 <p>Technically this is not an operator, but syntax special-cased in the compiler.</p>
 <p><span class="indexed"><a id="240" name="postfix .^"></a></span></p>
 <a name="t25.15.9"></a><h2 id="_language_operators.pod6-postfix_.^">25.15.9 postfix <span class="code">.^</span></h2>
 <p>A <span class="indexed"><a id="242" name="">meta-method call</a></span>. <span class="code">$invocant.^method</span> calls <span class="code">method</span> on <span class="code">$invocant</span>'s metaclass. It desugars to <span class="code">$invocant.HOW.method($invocant, ...)</span>. See <a href="#_language_mop.pod6-index-entry-syntax_HOW-HOW">HOW</a> for more information.</p>
 <p>Technically this is not an operator, but syntax special-cased in the compiler.</p>
 <p><span class="indexed"><a id="243" name="postfix .?"></a></span></p>
 <a name="t25.15.10"></a><h2 id="_language_operators.pod6-postfix_.?">25.15.10 postfix <span class="code">.?</span></h2>
 <p><span class="indexed"><a id="244" name="">Safe call operator</a></span>. <span class="code">$invocant.?method</span> calls method <span class="code">method</span> on <span class="code">$invocant</span> if it has a method of such name. Otherwise it returns <a href="#_type_Nil.pod6">Nil</a>.</p>
 <p>Technically this is not an operator, but syntax special-cased in the compiler.</p>
 <p><span class="indexed"><a id="245" name="postfix .+"></a></span></p>
 <a name="t25.15.11"></a><h2 id="_language_operators.pod6-postfix_.+">25.15.11 postfix <span class="code">.+</span></h2>
 <p><span class="code">$invocant.+method</span> calls all methods called <span class="code">method</span> from <span class="code">$invocant</span>, and returns a <a href="#_type_List.pod6">List</a> of the results. Dies if no such method was found.</p>
 <p>Technically this is not an operator, but syntax special-cased in the compiler.</p>
 <p><span class="indexed"><a id="247" name="postfix .*"></a></span></p>
 <a name="t25.15.12"></a><h2 id="_language_operators.pod6-postfix_.*">25.15.12 postfix <span class="code">.*</span></h2>
 <p><span class="code">$invocant.*method</span> calls all methods called <span class="code">method</span> from <span class="code">$invocant</span>, and returns a <a href="#_type_List.pod6">List</a> of the results. If no such method was found, an empty <a href="#_type_List.pod6">List</a> is returned.</p>
 <p>Technically this is not an operator, but syntax special-cased in the compiler.</p>
 <p><span class="indexed"><a id="248" name="postfix »."></a></span></p>
 <a name="t25.15.13"></a><h2 id="_language_operators.pod6-postfix_»._/_postfix_>>.">25.15.13 postfix <span class="code">».</span> / postfix <span class="code">>>.</span></h2>
 <p><span class="indexed"><a id="249" name="">Hyper method call operator</a></span>. Will call a method on all elements of a <span class="code">List</span> out of order and return the list of return values in order.</p>
 <pre class="code">my @a = &amp;lt;a b c&gt;;
@a».say;                          # a␤b␤c␤
my @b = @a».ord;                  # [97, 98, 99]
sub foo(Str:D $c){ $c.ord * 2 };  # The first parameter of a method is the invocant.
say @a».&amp;amp;foo;                     # So we can pretend to have a method call with a sub that got a good first positional argument.
say @a».&amp;amp;({ .ord});               # Blocks have an implicit positional arguments that lands in $_. The latter can be omitted for method calls.</pre>
 <a name="t25.15.14"></a><h2 id="_language_operators.pod6-postfix_.postfix_/_.postcircumfix">25.15.14 postfix <span class="code">.postfix</span> / <span class="code">.postcircumfix</span> <a name="250"></a><a name="251"></a><a name="253"></a></h2>
 <p>In most cases, a dot may be placed before a postfix or postcircumfix:</p>
 <pre class="code">@a[1, 2, 3];
@a.[1, 2, 3]; # Same</pre>
 <p>This can be useful for visual clarity or brevity. For example, if an object's attribute is a function, putting a pair of parentheses after the attribute name will become part of the method call. So either two pairs of parentheses must be used, or a dot has to come before the parentheses to separate it from the method call.</p>
 <pre class="code">class Operation {
    has $.symbol;
    has &amp;amp;.function;
}
my $addition = Operation.new(:symbol&amp;lt;+&gt;, :function{ $^a + $^b });
say $addition.function()(1, 2); # 3
# OR
say $addition.function.(1, 2); # 3</pre>
 <p>If the postfix is an identifier, however, it will be interpreted as a normal method call.</p>
 <pre class="code">1.i # No such method 'i' for invocant of type 'Int'</pre>
 <p>Technically this is not an operator, but syntax special-cased in the compiler. <span class="indexed"><a id="254" name="postfix call"></a></span></p>
 <a name="t25.15.15"></a><h2 id="_language_operators.pod6-postfix_.:&lt;prefix>">25.15.15 postfix <span class="code">.:&lt;prefix></span></h2>
 <p>A prefix can be called like a method using colonpair notation. For example:</p>
 <pre class="code">my $a = 1;
say ++$a;     # 2
say $a.:&amp;lt;++&gt;; # 3</pre>
 <p>Technically this is not an operator, but syntax special-cased in the compiler. <span class="indexed"><a id="255" name="prefix call"></a></span></p>
 <a name="t25.15.16"></a><h2 id="_language_operators.pod6-postfix_.::">25.15.16 postfix <span class="code">.::</span></h2>
 <p>A <span class="indexed"><a id="256" name="">class-qualified method call</a></span>, used to call a method as defined in a parent class or role, even after it has been redefined in the child class.</p>
 <pre class="code">class Bar {
    method baz { 42 }
}
class Foo is Bar {
    method baz { "nope" }
}
say Foo.Bar::baz; # 42</pre>
 <a name="t25.16"></a><h1 id="_language_operators.pod6-Autoincrement_Precedence">25.16 Autoincrement Precedence</h1>
 <a name="t25.16.1"></a><h2 id="_language_operators.pod6-prefix_++">25.16.1 prefix <span class="code">++</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;++&gt;($x is rw) is assoc&amp;lt;none&gt;</pre>
 <p>Increments its argument by one, and returns the incremented value.<span class="indexed"><a id="257" name="increment operator"></a></span></p>
 <pre class="code">my $x = 3;
say ++$x;       # 4
say $x;         # 4</pre>
 <p>It works by calling the <a href="#_routine_succ.pod6">succ</a> method (for <i>successor</i>) on its argument, which gives custom types the freedom to implement their own increment semantics.</p>
 <a name="t25.16.2"></a><h2 id="_language_operators.pod6-prefix_--">25.16.2 prefix <span class="code">--</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;--&gt;($x is rw) is assoc&amp;lt;none&gt;</pre>
 <p>Decrements its argument by one, and returns the decremented value.<span class="indexed"><a id="258" name="decrement operator"></a></span></p>
 <pre class="code">my $x = 3;
say --$x;       # 2
say $x;         # 2</pre>
 <p>It works by calling the <a href="#_routine_pred.pod6">pred</a> method (for <i>predecessor</i>) on its argument, which gives custom types the freedom to implement their own decrement semantics.</p>
 <a name="t25.16.3"></a><h2 id="_language_operators.pod6-postfix_++">25.16.3 postfix <span class="code">++</span></h2>
 <pre class="code">multi sub postfix:&amp;lt;++&gt;($x is rw) is assoc&amp;lt;none&gt;</pre>
 <p>Increments its argument by one, and returns the unincremented value.<span class="indexed"><a id="259" name="increment operator"></a></span></p>
 <pre class="code">my $x = 3;
say $x++;       # 3
say $x;         # 4</pre>
 <p>It works by calling the <a href="#_routine_succ.pod6">succ</a> method (for <i>successor</i>) on its argument, which gives custom types the freedom to implement their own incrementation semantics.</p>
 <p>Note that this does not necessarily return its argument. For example for undefined values, it returns 0:</p>
 <pre class="code">my $x;
say $x++;       # 0
say $x;         # 1</pre>
 <a name="t25.16.4"></a><h2 id="_language_operators.pod6-postfix_--">25.16.4 postfix <span class="code">--</span></h2>
 <pre class="code">multi sub postfix:&amp;lt;--&gt;($x is rw) is assoc&amp;lt;none&gt;</pre>
 <p>Decrements its argument by one, and returns the undecremented value.<span class="indexed"><a id="260" name="decrement operator"></a></span></p>
 <pre class="code">my $x = 3;
say $x--;       # 3
say $x;         # 2</pre>
 <p>It works by calling the <a href="#_routine_pred.pod6">pred</a> method (for <i>predecessor</i>) on its argument, which gives custom types the freedom to implement their own decrementation semantics.</p>
 <p>Note that this does not necessarily return its argument. For example for undefined values, it returns 0:</p>
 <pre class="code">my $x;
say $x--;       # 0
say $x;         # -1</pre>
 <a name="t25.17"></a><h1 id="_language_operators.pod6-Exponentiation_Precedence">25.17 Exponentiation Precedence</h1>
 <a name="t25.17.1"></a><h2 id="_language_operators.pod6-infix_**">25.17.1 infix <span class="code">**</span></h2>
 <pre class="code">multi sub infix:&amp;lt;**&gt;(Any, Any) returns Numeric:D is assoc&amp;lt;right&gt;</pre>
 <p>The <span class="indexed"><a id="261" name="">exponentiation operator</a></span> coerces both arguments to <a href="#_type_Numeric.pod6">Numeric</a> and calculates the left-hand-side raised to the power of the right-hand side.</p>
 <p>If the right-hand side is a non-negative integer and the left-hand side is an arbitrary precision type (<a href="#_type_Int.pod6">Int</a>, <a href="#_type_FatRat.pod6">FatRat</a>), then the calculation is carried out without loss of precision.</p>
 <a name="t25.18"></a><h1 id="_language_operators.pod6-Symbolic_Unary_Precedence">25.18 Symbolic Unary Precedence</h1>
 <a name="t25.18.1"></a><h2 id="_language_operators.pod6-prefix_?">25.18.1 prefix <span class="code">?</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;?&gt;(Mu) returns Bool:D</pre>
 <p><span class="indexed"><a id="262" name="">Boolean context operator</a></span>.</p>
 <p>Coerces the argument to <a href="#_type_Bool.pod6">Bool</a> by calling the <span class="code">Bool</span> method on it. Note that this collapses <a href="#_type_Junction.pod6">Junction</a>s.</p>
 <a name="t25.18.2"></a><h2 id="_language_operators.pod6-prefix_!">25.18.2 prefix <span class="code">!</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;!&gt;(Mu) returns Bool:D</pre>
 <p><span class="indexed"><a id="263" name="">Negated boolean context operator</a></span>.</p>
 <p>Coerces the argument to <a href="#_type_Bool.pod6">Bool</a> by calling the <span class="code">Bool</span> method on it, and returns the negation of the result. Note that this collapses <a href="#_type_Junction.pod6">Junction</a>s.</p>
 <a name="t25.18.3"></a><h2 id="_language_operators.pod6-prefix_+">25.18.3 prefix <span class="code">+</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;+&gt;(Any) returns Numeric:D</pre>
 <p><span class="indexed"><a id="264" name="">Numeric context operator</a></span>.</p>
 <p>Coerces the argument to <a href="#_type_Numeric.pod6">Numeric</a> by calling the <span class="code">Numeric</span> method on it.</p>
 <a name="t25.18.4"></a><h2 id="_language_operators.pod6-prefix_-">25.18.4 prefix <span class="code">-</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;-&gt;(Any) returns Numeric:D</pre>
 <p><span class="indexed"><a id="265" name="">Negative numeric context operator</a></span>.</p>
 <p>Coerces the argument to <a href="#_type_Numeric.pod6">Numeric</a> by calling the <span class="code">Numeric</span> method on it, and then negates the result.</p>
 <a name="t25.18.5"></a><h2 id="_language_operators.pod6-prefix_~">25.18.5 prefix <span class="code">~</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;~&gt;(Any) returns Str:D</pre>
 <p><span class="indexed"><a id="266" name="">String context operator</a></span>.</p>
 <p>Coerces the argument to <a href="#_type_Str.pod6">Str</a> by calling the <span class="code">Str</span> method on it.</p>
 <a name="t25.18.6"></a><h2 id="_language_operators.pod6-prefix_|">25.18.6 prefix <span class="code">|</span></h2>
 <p>Flattens objects of type <a href="#_type_Capture.pod6">Capture</a>, <a href="#_type_Pair.pod6">Pair</a>, <a href="#_type_List.pod6">List</a> <a href="#_type_Map.pod6">Map</a> and <a href="#_type_Hash.pod6">Hash</a> into an argument list.</p>
 <p>Outside of argument lists, it returns a <a href="#_type_Slip.pod6">Slip</a>, which makes it flatten into the outer list. Inside <a href="#_language_list.pod6-Argument_List_(Capture)_Context">argument list</a> <a href="#_type_Positional.pod6"> <span class="code">Positional</span> s</a> are turned into positional arguments and <a href="#_type_Associative.pod6"> <span class="code">Associative</span> s</a> are turned into named arguments.</p>
 <a name="t25.18.7"></a><h2 id="_language_operators.pod6-prefix_+^">25.18.7 prefix <span class="code">+^</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;+^&gt;(Any) returns Int:D</pre>
 <p><span class="indexed"><a id="267" name="">Integer bitwise negation operator</a></span>.</p>
 <p>Coerces the argument to <a href="#_type_Int.pod6">Int</a> and does a bitwise negation on the result, assuming <a href="https://en.wikipedia.org/wiki/Two%27s_complement">two's complement</a>.</p>
 <a name="t25.18.8"></a><h2 id="_language_operators.pod6-prefix_?^">25.18.8 prefix <span class="code">?^</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;?^&gt;(Mu) returns Bool:D</pre>
 <p><span class="indexed"><a id="269" name="">Boolean bitwise negation operator</a></span>.</p>
 <p>Coerces the argument to <a href="#_type_Bool.pod6">Bool</a> and then does a bit flip, which makes it the same as <span class="code">prefix:&lt;!> </span>.</p>
 <a name="t25.18.9"></a><h2 id="_language_operators.pod6-prefix_^">25.18.9 prefix <span class="code">^</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;^&gt;(Any) returns Range:D</pre>
 <p><i>upto</i> operator.<span class="indexed"><a id="270" name="upto operator"></a></span></p>
 <p>Coerces the argument to <a href="#_type_Numeric.pod6">Numeric</a>, and generates a range from 0 up to (but excluding) the argument.</p>
 <pre class="code">say ^5;         # 0..^5
for ^5 { }      # 5 iterations</pre>
 <a name="t25.19"></a><h1 id="_language_operators.pod6-Multiplicative_Precedence">25.19 Multiplicative Precedence</h1>
 <a name="t25.19.1"></a><h2 id="_language_operators.pod6-infix_*">25.19.1 infix <span class="code">*</span></h2>
 <pre class="code">multi sub infix:&amp;lt;*&gt;(Any, Any) returns Numeric:D</pre>
 <p><span class="indexed"><a id="274" name="">Multiplication operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Numeric.pod6">Numeric</a> and multiplies them. The result is of the wider type. See <a href="#_type_Numeric.pod6">Numeric</a> for details.</p>
 <a name="t25.19.2"></a><h2 id="_language_operators.pod6-infix_/">25.19.2 infix <span class="code">/</span></h2>
 <pre class="code">multi sub infix:&amp;lt;/&gt;(Any, Any) returns Numeric:D</pre>
 <p><span class="indexed"><a id="276" name="">Division operator</a></span>.</p>
 <p>Coerces both argument to <a href="#_type_Numeric.pod6">Numeric</a> and divides the left through the right number. Division of <a href="#_type_Int.pod6">Int</a> values returns <a href="#_type_Rat.pod6">Rat</a>, otherwise the "wider type" rule described in <a href="#_type_Numeric.pod6">Numeric</a> holds.</p>
 <a name="t25.19.3"></a><h2 id="_language_operators.pod6-infix_div">25.19.3 infix <span class="code">div</span></h2>
 <pre class="code">multi sub infix:&amp;lt;div&gt;(Int:D, Int:D) returns Int:D</pre>
 <p><span class="indexed"><a id="279" name="">Integer division operator</a></span>. Rounds down.</p>
 <a name="t25.19.4"></a><h2 id="_language_operators.pod6-infix_%">25.19.4 infix <span class="code">%</span></h2>
 <pre class="code">multi sub infix:&amp;lt;%&gt;($x, $y) return Numeric:D</pre>
 <p><span class="indexed"><a id="281" name="">Modulo operator</a></span>. Coerces to <a href="#_type_Numeric.pod6">Numeric</a> first.</p>
 <p>Generally the following identity holds:</p>
 <pre class="code">$x % $y == $x - floor($x / $y) * $y</pre>
 <a name="t25.19.5"></a><h2 id="_language_operators.pod6-infix_%%">25.19.5 infix <span class="code">%%</span></h2>
 <pre class="code">multi sub infix:&amp;lt;%%&gt;($a, $b) returns Bool:D</pre>
 <p><span class="indexed"><a id="282" name="">Divisibility operator</a></span>. Returns <span class="code">True</span> if <span class="code">$a % $b == 0</span>.</p>
 <a name="t25.19.6"></a><h2 id="_language_operators.pod6-infix_mod">25.19.6 infix <span class="code">mod</span></h2>
 <pre class="code">multi sub infix:&amp;lt;mod&gt;(Int:D $a, Int:D $b) returns Int:D</pre>
 <p><span class="indexed"><a id="285" name="">Integer modulo operator</a></span>. Returns the remainder of an integer modulo operation.</p>
 <a name="t25.19.7"></a><h2 id="_language_operators.pod6-infix_+&amp;">25.19.7 infix <span class="code">+&amp;</span></h2>
 <pre class="code">multi sub infix:&amp;lt;+&amp;amp;&gt;($a, $b) returns Int:D</pre>
 <p>Numeric bitwise <i>AND</i> operator. Coerces both arguments to <a href="#_type_Int.pod6">Int</a> and does a bitwise <i>AND</i> operation assuming two's complement.<span class="indexed"><a id="287" name="Numeric bitwise AND operator"></a></span></p>
 <a name="t25.19.8"></a><h2 id="_language_operators.pod6-infix_+&lt;">25.19.8 infix <span class="code">+&lt;</span></h2>
 <pre class="code">multi sub infix:&amp;lt;&amp;lt; +&amp;lt; &gt;&gt;($a, $b) returns Int:D</pre>
 <p>Integer bit shift to the left.<span class="indexed"><a id="289" name="integer bit shift operator left"></a></span></p>
 <a name="t25.19.9"></a><h2 id="_language_operators.pod6-infix_+>">25.19.9 infix <span class="code">+></span></h2>
 <pre class="code">multi sub infix:&amp;lt;&amp;lt; +&gt; &gt;&gt;($a, $b) returns Int:D</pre>
 <p>Integer bit shift to the right.<span class="indexed"><a id="290" name="integer bit shift operator right"></a></span></p>
 <a name="t25.19.10"></a><h2 id="_language_operators.pod6-infix_gcd">25.19.10 infix <span class="code">gcd</span></h2>
 <pre class="code">multi sub infix:&amp;lt;gcd&gt;($a, $b) returns Int:D</pre>
 <p>Coerces both arguments to <a href="#_type_Int.pod6">Int</a> and returns the greatest common divisor.<span class="indexed"><a id="291" name="greatest common divisor operator"></a></span></p>
 <a name="t25.19.11"></a><h2 id="_language_operators.pod6-infix_lcm">25.19.11 infix <span class="code">lcm</span></h2>
 <pre class="code">multi sub infix:&amp;lt;lcm&gt;($a, $b) returns Int:D</pre>
 <p>Coerces both arguments to <a href="#_type_Int.pod6">Int</a> and returns the least common multiple, that is the smallest integer that is evenly divisible by both arguments.<span class="indexed"><a id="294" name="least common multiple operator"></a></span></p>
 <a name="t25.20"></a><h1 id="_language_operators.pod6-Additive_Precedence">25.20 Additive Precedence</h1>
 <a name="t25.20.1"></a><h2 id="_language_operators.pod6-infix_+">25.20.1 infix <span class="code">+</span></h2>
 <pre class="code">multi sub infix:&amp;lt;+&gt;($a, $b) returns Numeric:D</pre>
 <p><span class="indexed"><a id="296" name="">Addition operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Numeric.pod6">Numeric</a> and adds them.</p>
 <a name="t25.20.2"></a><h2 id="_language_operators.pod6-infix_-">25.20.2 infix <span class="code">-</span></h2>
 <pre class="code">multi sub infix:&amp;lt;-&gt;($a, $b) returns Numeric:D</pre>
 <p><span class="indexed"><a id="298" name="">Subtraction operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Numeric.pod6">Numeric</a> and subtracts the second from the first.</p>
 <a name="t25.20.3"></a><h2 id="_language_operators.pod6-infix_+|">25.20.3 infix <span class="code">+|</span></h2>
 <pre class="code">multi sub infix:&amp;lt;+|&gt;($a, $b) returns Int:D</pre>
 <p><span class="indexed"><a id="300" name="">Integer bitwise OR operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Int.pod6">Int</a> and does a bitwise <i>OR</i> (inclusive OR) operation.</p>
 <a name="t25.20.4"></a><h2 id="_language_operators.pod6-infix_+^">25.20.4 infix <span class="code">+^</span></h2>
 <pre class="code">multi sub infix:&amp;lt;+^&gt;($a, $b) returns Int:D</pre>
 <p><span class="indexed"><a id="302" name="">Integer bitwise XOR operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Int.pod6">Int</a> and does a bitwise <i>XOR</i> (exclusive OR) operation.</p>
 <a name="t25.20.5"></a><h2 id="_language_operators.pod6-infix_?|">25.20.5 infix <span class="code">?|</span></h2>
 <pre class="code">multi sub infix:&amp;lt;?|&gt;($a, $b) returns Bool:D</pre>
 <p><span class="indexed"><a id="304" name="">Boolean logical OR operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Bool.pod6">Bool</a> and does a logical <i>OR</i> (inclusive OR) operation.</p>
 <a name="t25.21"></a><h1 id="_language_operators.pod6-Replication_Precedence">25.21 Replication Precedence</h1>
 <a name="t25.21.1"></a><h2 id="_language_operators.pod6-infix_x">25.21.1 infix <span class="code">x</span></h2>
 <pre class="code">proto sub infix:&amp;lt;x&gt;(Any, Any) returns Str:D
multi sub infix:&amp;lt;x&gt;(Any, Any)
multi sub infix:&amp;lt;x&gt;(Str:D, Int:D)</pre>
 <p><span class="indexed"><a id="306" name="">String repetition operator</a></span>.</p>
 <p>Coerces <span class="code">$a</span> to <a href="#_type_Str.pod6">Str</a> and <span class="code">$b</span> to <a href="#_type_Int.pod6">Int</a> and repeats the string <span class="code">$b</span> times. Return the empty string if <span class="code">$b &lt;= 0 </span>.</p>
 <pre class="code">say 'ab' x 3;       # ababab
say 42 x 3;         # 424242</pre>
 <a name="t25.21.2"></a><h2 id="_language_operators.pod6-infix_xx">25.21.2 infix <span class="code">xx</span></h2>
 <pre class="code">multi sub infix:&amp;lt;xx&gt;($a, $b) returns List:D</pre>
 <p><span class="indexed"><a id="307" name="">List repetition operator</a></span>.</p>
 <p>Returns a list of <span class="code">$a</span> repeated and evaluated <span class="code">$b</span> times (<span class="code">$b</span> is coerced to <a href="#_type_Int.pod6">Int</a>). If <span class="code">$b &lt;= 0 </span>, the empty list is returned.</p>
 <p>The left-hand side is evaluated for each repetition, so</p>
 <pre class="code">[1, 2] xx 5</pre>
 <p>returns five distinct arrays (but with the same content each time), and</p>
 <pre class="code">rand xx 3</pre>
 <p>returns three pseudo random numbers that are determined independently.</p>
 <p>The right-hand side can be <span class="code">*</span>, in which case a lazy, infinite list is returned.</p>
 <a name="t25.22"></a><h1 id="_language_operators.pod6-Concatenation">25.22 Concatenation</h1>
 <a name="t25.22.1"></a><h2 id="_language_operators.pod6-infix_~">25.22.1 infix <span class="code">~</span></h2>
 <pre class="code">proto sub infix:&amp;lt;~&gt;(Any, Any) returns Str:D
multi sub infix:&amp;lt;~&gt;(Any,   Any)
multi sub infix:&amp;lt;~&gt;(Str:D, Str:D)</pre>
 <p><span class="indexed"><a id="309" name="">String concatenation operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Str.pod6">Str</a> and concatenates them.</p>
 <pre class="code">say 'ab' ~ 'c';     # abc</pre>
 <a name="t25.23"></a><h1 id="_language_operators.pod6-Junctive_AND_(all)_Precedence">25.23 Junctive AND (all) Precedence</h1>
 <a name="t25.23.1"></a><h2 id="_language_operators.pod6-infix_&amp;">25.23.1 infix <span class="code">&amp;</span></h2>
 <pre class="code">multi sub infix:&amp;lt;&amp;amp;&gt;($a, $b) returns Junction:D is assoc&amp;lt;list&gt;</pre>
 <p><span class="indexed"><a id="311" name="">All junction operator</a></span>.</p>
 <p>Creates an <i>all</i> <a href="#_type_Junction.pod6">Junction</a> from its arguments. See <a href="#_type_Junction.pod6">Junction</a> for more details.</p>
 <a name="t25.24"></a><h1 id="_language_operators.pod6-Junctive_OR_(any)_Precedence">25.24 Junctive OR (any) Precedence</h1>
 <a name="t25.24.1"></a><h2 id="_language_operators.pod6-infix_|">25.24.1 infix <span class="code">|</span></h2>
 <pre class="code">multi sub infix:&amp;lt;|&gt;($a, $b) returns Junction:D is assoc&amp;lt;list&gt;</pre>
 <p><span class="indexed"><a id="313" name="">Any junction operator</a></span>.</p>
 <p>Creates an <i>any</i> <a href="#_type_Junction.pod6">Junction</a> from its arguments. See <a href="#_type_Junction.pod6">Junction</a> for more details.</p>
 <a name="t25.24.2"></a><h2 id="_language_operators.pod6-infix_^">25.24.2 infix <span class="code">^</span></h2>
 <pre class="code">multi sub infix:&amp;lt;^&gt;($a, $b) returns Junction:D is assoc&amp;lt;list&gt;</pre>
 <p><span class="indexed"><a id="314" name="">One junction operator</a></span>.</p>
 <p>Creates a <i>one</i> <a href="#_type_Junction.pod6">Junction</a> from its arguments. See <a href="#_type_Junction.pod6">Junction</a> for more details.</p>
 <a name="t25.25"></a><h1 id="_language_operators.pod6-Named_Unary_Precedence">25.25 Named Unary Precedence</h1>
 <a name="t25.25.1"></a><h2 id="_language_operators.pod6-prefix_temp">25.25.1 prefix <span class="code">temp</span></h2>
 <pre class="code">sub prefix:&amp;lt;temp&gt;(Mu $a is rw)</pre>
 <p>"temporizes" the variable passed as the argument, which means it is reset to its old value on scope exit. (This is similar to the <a href="http://perldoc.perl.org/functions/local.html">local</a> operator in Perl 5, except that <span class="code">temp</span> does not reset the value).</p>
 <a name="t25.25.2"></a><h2 id="_language_operators.pod6-prefix_let">25.25.2 prefix <span class="code">let</span></h2>
 <pre class="code">sub prefix:&amp;lt;let&gt;(Mu $a is rw)</pre>
 <p>Restores the previous value if the block exits unsuccessfully. A successful exit means the block returned a defined value or a list.</p>
 <pre class="code">my $answer = 42;

{
    let $answer = 84;
    die if not Bool.pick;
    CATCH {
        default { say "it's been reset :(" }
    }
    say "we made it 84 sticks!";
}

say $answer;</pre>
 <p>In the above case, if the <span class="code">Bool.pick</span> returns true, the answer will stay as 84 because the block returns a defined value (<span class="code">say</span> returns true). Otherwise the <span class="code">die</span> statement will cause the block to exit unsuccessfully, resetting the answer to 42.</p>
 this is duplicated in variables.pod
 <a name="t25.26"></a><h1 id="_language_operators.pod6-Nonchaining_Binary_Precedence">25.26 Nonchaining Binary Precedence</h1>
 <a name="t25.26.1"></a><h2 id="_language_operators.pod6-infix_does">25.26.1 infix <span class="code">does</span></h2>
 <pre class="code">sub infix:&amp;lt;does&gt;(Mu $obj, Mu $role) is assoc&amp;lt;none&gt;</pre>
 <p>Mixes <span class="code">$role</span> into <span class="code">$obj</span> at run time. Requires <span class="code">$obj</span> to be mutable.</p>
 <p><span class="code">$role</span> doesn't need to a be a role, it can be something that knows how to act like a role, for example enum values.</p>
 <a name="t25.26.2"></a><h2 id="_language_operators.pod6-infix_but">25.26.2 infix <span class="code">but</span></h2>
 <pre class="code">sub infix:&amp;lt;but&gt;(Mu $obj, Mu $role) is assoc&amp;lt;none&gt;</pre>
 <p>Creates a copy of <span class="code">$obj</span> with <span class="code">$role</span> mixed in. Since <span class="code">$obj</span> is not modified, <span class="code">but</span> can be used to created immutable values with mixins.</p>
 <p><span class="code">$role</span> doesn't need to a be a role, it can be something that knows how to act like a role, for example enum values.</p>
 <a name="t25.26.3"></a><h2 id="_language_operators.pod6-infix_cmp">25.26.3 infix <span class="code">cmp</span></h2>
 <pre class="code">proto sub infix:&amp;lt;cmp&gt;(Any, Any) returns Order:D is assoc&amp;lt;none&gt;
multi sub infix:&amp;lt;cmp&gt;(Any,       Any)
multi sub infix:&amp;lt;cmp&gt;(Real:D,    Real:D)
multi sub infix:&amp;lt;cmp&gt;(Str:D,     Str:D)
multi sub infix:&amp;lt;cmp&gt;(Version:D, Version:D)</pre>
 <p><span class="indexed"><a id="320" name="">Generic, "smart" three-way comparator</a></span>.</p>
 <p>Compares strings with string semantics, numbers with number semantics, <a href="#_type_Pair.pod6">Pair</a> objects first by key and then by value etc.</p>
 <p>if <span class="code">$a eqv $b</span>, then <span class="code">$a cmp $b</span> always returns <span class="code">Order::Same</span>.</p>
 <pre class="code">say (a =&gt; 3) cmp (a =&gt; 4);      # Less
say 4        cmp 4.0;           # Same
say 'b'      cmp 'a';           # More</pre>
 <a name="t25.26.4"></a><h2 id="_language_operators.pod6-infix_leg">25.26.4 infix <span class="code">leg</span></h2>
 <pre class="code">proto sub infix:&amp;lt;leg&gt;($a, $b) returns Order:D is assoc&amp;lt;none&gt;
multi sub infix:&amp;lt;leg&gt;(Any,   Any)
multi sub infix:&amp;lt;leg&gt;(Str:D, Str:D)</pre>
 <p><span class="indexed"><a id="322" name="">String three-way comparator</a></span>. Short for <i>less, equal or greater?</i>.</p>
 <p>Coerces both arguments to <a href="#_type_Str.pod6">Str</a>, and then does a lexicographic comparison.</p>
 <pre class="code">say 'a' leg 'b';        Less
say 'a' leg 'a';        Same
say 'b' leg 'a';        More</pre>
 <a name="t25.26.5"></a><h2 id="_language_operators.pod6-infix_&lt;=>">25.26.5 infix <span class="code">&lt;=></span></h2>
 <pre class="code">multi sub infix:«&amp;lt;=&gt;»($a, $b) returns Order:D is assoc&amp;lt;none&gt;</pre>
 <p><span class="indexed"><a id="323" name="">Numeric three-way comparator</a></span>.<span class="indexed"><a id="324" name="spaceship operator"></a></span></p>
 <p>Coerces both arguments to <a href="#_type_Real.pod6">Real</a>, and then does a numeric comparison.</p>
 <a name="t25.26.6"></a><h2 id="_language_operators.pod6-infix_..">25.26.6 infix <span class="code">..</span></h2>
 <pre class="code">multi sub infix:&amp;lt;..&gt;($a, $b) returns Range:D is assoc&amp;lt;none&gt;</pre>
 <p><span class="indexed"><a id="326" name="">Range operator</a></span></p>
 <p>Constructs a <a href="#_type_Range.pod6">Range</a> from the arguments.</p>
 <a name="t25.26.7"></a><h2 id="_language_operators.pod6-infix_..^">25.26.7 infix <span class="code">..^</span></h2>
 <pre class="code">multi sub infix:&amp;lt;..^&gt;($a, $b) returns Range:D is assoc&amp;lt;none&gt;</pre>
 <p><span class="indexed"><a id="328" name="">Right-open range operator</a></span>.</p>
 <p>Constructs a <a href="#_type_Range.pod6">Range</a> from the arguments, excluding the end point.</p>
 <a name="t25.26.8"></a><h2 id="_language_operators.pod6-infix_^..">25.26.8 infix <span class="code">^..</span></h2>
 <pre class="code">multi sub infix:&amp;lt;^..&gt;($a, $b) returns Range:D is assoc&amp;lt;none&gt;</pre>
 <p><span class="indexed"><a id="329" name="">Left-open range operator</a></span>.</p>
 <p>Constructs a <a href="#_type_Range.pod6">Range</a> from the arguments, excluding the start point.</p>
 <a name="t25.26.9"></a><h2 id="_language_operators.pod6-infix_^..^">25.26.9 infix <span class="code">^..^</span></h2>
 <pre class="code">multi sub infix:&amp;lt;^..^&gt;($a, $b) returns Range:D is assoc&amp;lt;none&gt;</pre>
 <p><span class="indexed"><a id="330" name="">Open range operator</a></span></p>
 <p>Constructs a <a href="#_type_Range.pod6">Range</a> from the arguments, excluding both start and end point.</p>
 <a name="t25.27"></a><h1 id="_language_operators.pod6-Chaining_Binary_Precedence">25.27 Chaining Binary Precedence</h1>
 <a name="t25.27.1"></a><h2 id="_language_operators.pod6-infix_==">25.27.1 infix <span class="code">==</span></h2>
 <pre class="code">proto sub infix:&amp;lt;==&gt;($, $) returns Bool:D is assoc:&amp;lt;chain&gt;
multi sub infix:&amp;lt;==&gt;(Any, Any)
multi sub infix:&amp;lt;==&gt;(Int:D, Int:D)
multi sub infix:&amp;lt;==&gt;(Num:D, Num:D)
multi sub infix:&amp;lt;==&gt;(Rational:D, Rational:D)
multi sub infix:&amp;lt;==&gt;(Real:D, Real:D)
multi sub infix:&amp;lt;==&gt;(Complex:D, Complex:D)
multi sub infix:&amp;lt;==&gt;(Numeric:D, Numeric:D)</pre>
 <p><span class="indexed"><a id="331" name="">Numeric equality operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Numeric.pod6">Numeric</a> if necessary, and returns <span class="code">True</span> if they are equal.</p>
 <a name="t25.27.2"></a><h2 id="_language_operators.pod6-infix_!=">25.27.2 infix <span class="code">!=</span></h2>
 <pre class="code">proto sub infix:&amp;lt;!=&gt;(Mu, Mu) returns Bool:D is assoc&amp;lt;chain&gt;</pre>
 <p><span class="indexed"><a id="332" name="">Numeric inequality operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Numeric.pod6">Numeric</a> (if necessary), and returns <span class="code">True</span> if they are distinct.</p>
 <a name="t25.27.3"></a><h2 id="_language_operators.pod6-infix_&lt;">25.27.3 infix <span class="code">&lt;</span></h2>
 <pre class="code">proto sub infix:«&amp;lt;»(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:«&amp;lt;»(Int:D, Int:D)
multi sub infix:«&amp;lt;»(Num:D, Num:D)
multi sub infix:«&amp;lt;»(Real:D, Real:D)</pre>
 <p><span class="indexed"><a id="333" name="">Numeric less than operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Real.pod6">Real</a> (if necessary), and returns <span class="code">True</span> if the first argument is smaller than the second.</p>
 <a name="t25.27.4"></a><h2 id="_language_operators.pod6-infix_&lt;=">25.27.4 infix <span class="code">&lt;=</span></h2>
 <pre class="code">proto sub infix:«&amp;lt;=»(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:«&amp;lt;=»(Int:D, Int:D)
multi sub infix:«&amp;lt;=»(Num:D, Num:D)
multi sub infix:«&amp;lt;=»(Real:D, Real:D)</pre>
 <p><span class="indexed"><a id="334" name="">Numeric less than or equal to operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Real.pod6">Real</a> (if necessary), and returns <span class="code">True</span> if the first argument is smaller than or equal to the second.</p>
 <a name="t25.27.5"></a><h2 id="_language_operators.pod6-infix_>">25.27.5 infix <span class="code">></span></h2>
 <pre class="code">proto sub infix:«&gt;»(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:«&gt;»(Int:D, Int:D)
multi sub infix:«&gt;»(Num:D, Num:D)
multi sub infix:«&gt;»(Real:D, Real:D)</pre>
 <p><span class="indexed"><a id="335" name="">Numeric greater than operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Real.pod6">Real</a> (if necessary), and returns <span class="code">True</span> if the first argument is larger than the second.</p>
 <a name="t25.27.6"></a><h2 id="_language_operators.pod6-infix_>=">25.27.6 infix <span class="code">>=</span></h2>
 <pre class="code">proto sub infix:«&gt;=»(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:«&gt;=»(Int:D, Int:D)
multi sub infix:«&gt;=»(Num:D, Num:D)
multi sub infix:«&gt;=»(Real:D, Real:D)</pre>
 <p><span class="indexed"><a id="336" name="">Numeric less than or equal to operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Real.pod6">Real</a> (if necessary), and returns <span class="code">True</span> if the first argument is larger than or equal to the second.</p>
 <a name="t25.27.7"></a><h2 id="_language_operators.pod6-infix_eq">25.27.7 infix <span class="code">eq</span></h2>
 <pre class="code">proto sub infix:&amp;lt;eq&gt;(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;eq&gt;(Any,   Any)
multi sub infix:&amp;lt;eq&gt;(Str:D, Str:D)</pre>
 <p><span class="indexed"><a id="337" name="">String equality operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Str.pod6">Str</a> (if necessary), and returns <span class="code">True</span> if both are equal.</p>
 <p>Mnemonic: <i>equal</i></p>
 <a name="t25.27.8"></a><h2 id="_language_operators.pod6-infix_ne">25.27.8 infix <span class="code">ne</span></h2>
 <pre class="code">proto sub infix:&amp;lt;ne&gt;(Mu, Mu) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;ne&gt;(Mu,    Mu)
multi sub infix:&amp;lt;ne&gt;(Str:D, Str:D)</pre>
 <p><span class="indexed"><a id="338" name="">String inequality operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Str.pod6">Str</a> (if necessary), and returns <span class="code">False</span> if both are equal.</p>
 <p>Mnemonic: <i>not equal</i></p>
 <a name="t25.27.9"></a><h2 id="_language_operators.pod6-infix_gt">25.27.9 infix <span class="code">gt</span></h2>
 <pre class="code">proto sub infix:&amp;lt;gt&gt;(Mu, Mu) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;gt&gt;(Mu,    Mu)
multi sub infix:&amp;lt;gt&gt;(Str:D, Str:D)</pre>
 <p><span class="indexed"><a id="339" name="">String greater than operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Str.pod6">Str</a> (if necessary), and returns <span class="code">True</span> if the first is larger than the second, as determined by lexicographic comparison.</p>
 <p>Mnemonic: <i>greater than</i></p>
 <a name="t25.27.10"></a><h2 id="_language_operators.pod6-infix_ge">25.27.10 infix <span class="code">ge</span></h2>
 <pre class="code">proto sub infix:&amp;lt;ge&gt;(Mu, Mu) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;ge&gt;(Mu,    Mu)
multi sub infix:&amp;lt;ge&gt;(Str:D, Str:D)</pre>
 <p><span class="indexed"><a id="340" name="">String greater than or equal to operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Str.pod6">Str</a> (if necessary), and returns <span class="code">True</span> if the first is equal to or larger than the second, as determined by lexicographic comparison.</p>
 <p>Mnemonic: <i>greater or equal</i></p>
 <a name="t25.27.11"></a><h2 id="_language_operators.pod6-infix_lt">25.27.11 infix <span class="code">lt</span></h2>
 <pre class="code">proto sub infix:&amp;lt;lt&gt;(Mu, Mu) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;lt&gt;(Mu,    Mu)
multi sub infix:&amp;lt;lt&gt;(Str:D, Str:D)</pre>
 <p><span class="indexed"><a id="341" name="">String less than operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Str.pod6">Str</a> (if necessary), and returns <span class="code">True</span> if the first is smaller than the second, as determined by lexicographic comparison.</p>
 <p>Mnemonic: <i>less than</i></p>
 <a name="t25.27.12"></a><h2 id="_language_operators.pod6-infix_le">25.27.12 infix <span class="code">le</span></h2>
 <pre class="code">proto sub infix:&amp;lt;le&gt;(Mu, Mu) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;le&gt;(Mu,    Mu)
multi sub infix:&amp;lt;le&gt;(Str:D, Str:D)</pre>
 <p><span class="indexed"><a id="342" name="">String less than or equal to operator</a></span>.</p>
 <p>Coerces both arguments to <a href="#_type_Str.pod6">Str</a> (if necessary), and returns <span class="code">True</span> if the first is equal to or smaller than the second, as determined by lexicographic comparison.</p>
 <p>Mnemonic: <i>less or equal</i></p>
 <a name="t25.27.13"></a><h2 id="_language_operators.pod6-infix_before">25.27.13 infix <span class="code">before</span></h2>
 <pre class="code">proto sub infix:&amp;lt;before&gt;(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;before&gt;(Any,       Any)
multi sub infix:&amp;lt;before&gt;(Real:D,    Real:D)
multi sub infix:&amp;lt;before&gt;(Str:D,     Str:D)
multi sub infix:&amp;lt;before&gt;(Version:D, Version:D)</pre>
 <p>Generic ordering, uses the same semantics as <a href="#24-infix cmp">cmp</a>. Returns <span class="code">True</span> if the first argument is smaller than the second.</p>
 <a name="t25.27.14"></a><h2 id="_language_operators.pod6-infix_after">25.27.14 infix <span class="code">after</span></h2>
 <pre class="code">proto sub infix:&amp;lt;after&gt;(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;after&gt;(Any,       Any)
multi sub infix:&amp;lt;after&gt;(Real:D,    Real:D)
multi sub infix:&amp;lt;after&gt;(Str:D,     Str:D)
multi sub infix:&amp;lt;after&gt;(Version:D, Version:D)</pre>
 <p>Generic ordering, uses the same semantics as <a href="#24-infix cmp">cmp</a>. Returns <span class="code">True</span> if the first argument is larger than the second.</p>
 <a name="t25.27.15"></a><h2 id="_language_operators.pod6-infix_eqv">25.27.15 infix <span class="code">eqv</span></h2>
 <pre class="code">proto sub infix:&amp;lt;eqv&gt;(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
proto sub infix:&amp;lt;eqv&gt;(Any, Any)</pre>
 <p><span class="indexed"><a id="343" name="">Equivalence operator</a></span>. Returns <span class="code">True</span> if the two arguments are structurally the same, i.e. from the same type and (recursively) contain the same values.</p>
 <pre class="code">say [1, 2, 3] eqv [1, 2, 3];        # True
say Any eqv Any;                    # True
say 1 eqv 2;                        # False
say 1 eqv 1.0;                      # False</pre>
 <p>For arbitrary objects this is not possible with the default <span class="code">eqv</span> operator. E.g., <span class="code">eqv</span> will not consider two instances of the same object as being structurally equivalent:</p>
 <pre class="code">class A {
    has $.a;
}
say A.new(a =&gt; 5) eqv A.new(a =&gt; 5);  #=&gt; False</pre>
 <p>To get <span class="code">eqv</span> semantics for objects of this class, one would need to implement an appropriate infix <span class="code">eqv</span> operator:</p>
 <pre class="code">class A {
    has $.a;
}
multi infix:&amp;lt;eqv&gt;(A $l, A $r) { $l.a eqv $r.a }
say A.new(a =&gt; 5) eqv A.new(a =&gt; 5);  #=&gt; True</pre>
 <a name="t25.27.16"></a><h2 id="_language_operators.pod6-infix_===">25.27.16 infix <span class="code">===</span></h2>
 <pre class="code">proto sub infix:&amp;lt;===&gt;(Any, Any) returns Bool:D is assoc&amp;lt;chain&gt;
proto sub infix:&amp;lt;===&gt;(Any, Any)</pre>
 <p><span class="indexed"><a id="344" name="">Value identity operator</a></span>. Returns <span class="code">True</span> if both arguments are the same object.</p>
 <pre class="code">class A { };
my $a = A.new;
say $a === $a;              # True
say A.new === A.new;        # False
say A === A;                # True</pre>
 <p>For value types, <span class="code">===</span> behaves like <span class="code">eqv</span>:</p>
 <pre class="code">say 'a' === 'a';            # True
say 'a' === 'b';            # False

# different types
say 1 === 1.0;              # False</pre>
 <p><span class="code">===</span> uses the <a href="#_routine_WHICH.pod6">WHICH</a> method to obtain the object identity, so all value types must override method <span class="code">WHICH</span>.</p>
 <a name="t25.27.17"></a><h2 id="_language_operators.pod6-infix_=:=">25.27.17 infix <span class="code">=:=</span></h2>
 <pre class="code">proto sub infix:&amp;lt;=:=&gt;(Mu \a, Mu \b) returns Bool:D is assoc&amp;lt;chain&gt;
multi sub infix:&amp;lt;=:=&gt;(Mu \a, Mu \b)</pre>
 <p><span class="indexed"><a id="345" name="">Container identity operator</a></span>. Returns <span class="code">True</span> if both arguments are bound to the same container. If it returns <span class="code">True</span>, it generally means that modifying one will also modify the other.</p>
 <pre class="code">my ($a, $b) = (1, 3);
say $a =:= $b;      # False
$b = 2;
say $a;             # 1
$b := $a;
say $a =:= $b;      # True
$a = 5;
say $b;             # 5</pre>
 <a name="t25.27.18"></a><h2 id="_language_operators.pod6-infix_~~">25.27.18 infix <span class="code">~~</span></h2>
 <p>The <span class="indexed"><a id="346" name="">smart-match operator</a></span>. Aliases the left-hand side to <span class="code">$_</span>, then evaluates the right-hand side, and calls <span class="code">.ACCEPTS($_)</span> on it. The semantics are left to the type of the right-hand side operand.</p>
 <p>Here is an excerpt of built-in smart-matching functionality:</p>
 <table>
<tr><th>Right-hand side</th> <th>Comparison semantics</th></tr>
<tr><td>Mu:U</td> <td>type check</td></tr>
 <tr><td>Str</td> <td>string equality</td></tr>
 <tr><td>Numeric</td> <td>numeric equality</td></tr>
 <tr><td>Regex</td> <td>regex match</td></tr>
 <tr><td>Callable</td> <td>boolean result of invocation</td></tr>
 <tr><td>Any:D</td> <td>object identity</td></tr>
</table> <a name="t25.27.19"></a><h2 id="_language_operators.pod6-infix_=~=">25.27.19 infix <span class="code">=~=</span></h2>
 <pre class="code">proto sub infix:&amp;lt;=~=&gt;($, $) returns Bool:D is assoc:&amp;lt;chain&gt;
multi sub infix:&amp;lt;=~=&gt;(Any, Any)
multi sub infix:&amp;lt;=~=&gt;(Int:D, Int:D)
multi sub infix:&amp;lt;=~=&gt;(Num:D, Num:D)
multi sub infix:&amp;lt;=~=&gt;(Rational:D, Rational:D)
multi sub infix:&amp;lt;=~=&gt;(Real:D, Real:D)
multi sub infix:&amp;lt;=~=&gt;(Complex:D, Complex:D)
multi sub infix:&amp;lt;=~=&gt;(Numeric:D, Numeric:D)</pre>
 <p>The <span class="indexed"><a id="347" name="">approximately-equal operator</a></span>. Calculates the relative difference between the left-hand and right-hand sides and returns <span class="code">True</span> if the difference is less than $*TOLERANCE (which defaults to 1e-15). However, if either side is zero then it checks that the absolute difference between the sides is less than $*TOLERANCE. Note that this operator is not arithmetically symmetrical (doesn't do ± Δ):</p>
 <pre class="code">say ($x + $*TOLERANCE) =~= $x;   # True
say ($x - $*TOLERANCE) =~= $x;   # False</pre>
 <p>The tolerance is supposed to be modifiable via an adverb:</p>
 <pre class="code">say $x =~= $y :tolerance(.1);</pre>
 <p>however, this is not yet implemented. The same effect can be achieved by assigning to $*TOLERANCE.</p>
 <pre class="code">{
    my $*TOLERANCE = .1;
    say 11 =~= 10;               # True
}</pre>
 <p>Note that setting $*TOLERANCE = 0 will cause all comparisons to fail.</p>
 <pre class="code">{
    my $*TOLERANCE = 0;
    say 1 =~= 1;                 # False
}</pre>
 <a name="t25.28"></a><h1 id="_language_operators.pod6-Tight_AND_Precedence">25.28 Tight AND Precedence</h1>
 <a name="t25.28.1"></a><h2 id="_language_operators.pod6-infix_&amp;&amp;">25.28.1 infix <span class="code">&amp;&amp;</span></h2>
 <p>Returns the first argument that evaluates to <span class="code">False</span> in boolean context, or otherwise the last argument.</p>
 <p>Note that this short-circuits, i.e. if one of the arguments evaluates to a false value, the arguments to the right of are never evaluated.</p>
 <pre class="code">sub a { 1 }
sub b { 0 }
sub c { die "never called" };
say a() &amp;amp;&amp;amp; b() &amp;amp;&amp;amp; c();      # 0</pre>
 <a name="t25.29"></a><h1 id="_language_operators.pod6-Tight_OR_Precedence">25.29 Tight OR Precedence</h1>
 <a name="t25.29.1"></a><h2 id="_language_operators.pod6-infix_||">25.29.1 infix <span class="code">||</span></h2>
 <p>Returns the first argument that evaluates to <span class="code">True</span> in boolean context, or otherwise the last argument.</p>
 <p>Note that this short-circuits, i.e. if one of the arguments evaluates to a true value, the arguments to the right of are never evaluated.</p>
 <pre class="code">sub a { 0 }
sub b { 1 }
sub c { die "never called" };
say a() || b() || c();      # 1</pre>
 <a name="t25.29.2"></a><h2 id="_language_operators.pod6-infix_^^">25.29.2 infix <span class="code">^^</span></h2>
 <p>Returns the first true argument if there is only one, and <a href="#_type_Nil.pod6">Nil</a> otherwise. Short-circuits as soon as two true arguments are found.</p>
 <pre class="code">say 0 ^^ 42;                # 42
say 0 ^^ 42 ^^ 1 ^^ die 8;  # (empty line)</pre>
 <p>Note that the semantics of this operator may not be what you assume: infix <span class="code">^^</span> flips to first true value it finds, and then flips to Nil <i>forever</i> after the second, no matter how many more true values there are. (In other words, it has "find the one true value" semantics, not "boolean parity" semantics.)</p>
 <a name="t25.29.3"></a><h2 id="_language_operators.pod6-infix_//">25.29.3 infix <span class="code">//</span></h2>
 <p><span class="indexed"><a id="348" name="">Defined-or operator</a></span>. Returns the first defined operand, or else the last operand. Short-circuits.</p>
 <pre class="code">say Any // 0 // 42;         # 0</pre>
 <a name="t25.29.4"></a><h2 id="_language_operators.pod6-infix_min">25.29.4 infix <span class="code">min</span></h2>
 <p>Returns the smallest of the arguments, as determined by <a href="#_routine_cmp.pod6">cmp</a> semantics.</p>
 <pre class="code">$foo min= 0  # read as: $foo decreases to 0</pre>
 <a name="t25.29.5"></a><h2 id="_language_operators.pod6-infix_max">25.29.5 infix <span class="code">max</span></h2>
 <p>Returns the largest of the arguments, as determined by <a href="#_routine_cmp.pod6">cmp</a> semantics.</p>
 <pre class="code">$foo max= 0  # read as: $foo increases to 0</pre>
 <a name="t25.30"></a><h1 id="_language_operators.pod6-Conditional_Operator_Precedence">25.30 Conditional Operator Precedence</h1>
 <a name="t25.30.1"></a><h2 id="_language_operators.pod6-infix_??_!!">25.30.1 infix <span class="code">?? !!</span></h2>
 <p><span class="indexed"><a id="349" name="">Ternary operator</a></span>, <span class="indexed"><a id="350" name="">conditional operator</a></span>.</p>
 <p><span class="code">$condition ?? $true !! $false</span> evaluates and returns the expression from the <span class="code">$true</span> branch if <span class="code">$condition</span> is a true value. Otherwise it evaluates and returns the <span class="code">$false</span> branch.</p>
 <a name="t25.30.2"></a><h2 id="_language_operators.pod6-infix_ff">25.30.2 infix <span class="code">ff</span></h2>
 <pre class="code">sub infix:&amp;lt;ff&gt;(Mu $a, Mu $b)</pre>
 <p><span class="indexed"><a id="351" name="">Flipflop operator</a></span>.</p>
 <p>Compares both arguments to <span class="code">$_</span> (that is, <span class="code">$_ ~~ $a</span> and <span class="code">$_ ~~ $b</span>). Evaluates to <span class="code">False</span> until the left-hand smartmatch is <span class="code">True</span>, at which point it evaluates to <span class="code">True</span> until the right-hand smartmatch is <span class="code">True</span>.</p>
 <p>In effect, the left-hand argument is the "start" condition, and the right-hand is the "stop" condition. This construct is typically used to pick up only a certain section of lines. For example:</p>
 <pre class="code">    my $excerpt = q:to/END/; 
     Here's some unimportant text. 
     =begin code 
         This code block is what we're after. 
         We'll use 'ff' to get it. 
     =end code 
     More unimportant text. 
     END 
 
     my @codelines = gather for $excerpt.lines { 
         take $_ if  &lt;b&gt;"=begin code" ff "=end code"&lt;/b&gt;  
     } 
 
     # this will print four lines, starting with "=begin code" and ending with 
     # "=end code" 
     say @codelines.join("\n"); 
</pre>
 <p>After matching the start condition, the operator will then match the same <span class="code">$_</span> to the stop condition, and act accordingly if successful. In this example, only the first element is printed:</p>
 <pre class="code">for &amp;lt;AB C D B E F&gt; {
    say $_ if /A/ ff /B/;  # prints only "AB"
}</pre>
 <p>If you only want to test against a start condition, and have no stop condition, <span class="code">*</span> can be used as the "stop" condition.</p>
 <pre class="code">for &amp;lt;A B C D E&gt; {
    say $_ if /C/ ff *; # prints C, D, and E
}</pre>
 <p>For the sed-like version, which does <i>not</i> try <span class="code">$_</span> on the stop condition after succeeding on the start condition, see <a href=" &lt;span class=&quot;code&quot;&gt;fff&lt;/span&gt; "> <span class="code">fff</span> </a>.</p>
 <p>This operator cannot be overloaded, as it is handled specially by the compiler.</p>
 <a name="t25.30.3"></a><h2 id="_language_operators.pod6-infix_^ff">25.30.3 infix <span class="code">^ff</span></h2>
 <pre class="code">sub infix:&amp;lt;^ff&gt;(Mu $a, Mu $b)</pre>
 <p>Works like <a href=" &lt;span class=&quot;code&quot;&gt;ff&lt;/span&gt; "> <span class="code">ff</span> </a>, except it does not return <span class="code">True</span> for items matching the start condition (including items also matching the stop condition).</p>
 <p>A comparison:</p>
 <pre class="code">my @list = &amp;lt;A B C&gt;;
say $_ if /A/ ff /C/ for @list;  # prints A, B, and C
say $_ if /A/ ^ff /C/ for @list; # prints B and C</pre>
 <p>The sed-like version can be found in <a href="#_routine_^fff.pod6"> <span class="code">^fff</span> </a>.</p>
 <p>This operator cannot be overloaded, as it is handled specially by the compiler.</p>
 <a name="t25.30.4"></a><h2 id="_language_operators.pod6-infix_ff^">25.30.4 infix <span class="code">ff^</span></h2>
 <pre class="code">sub infix:&amp;lt;ff^&gt;(Mu $a, Mu $b)</pre>
 <p>Works like <a href=" &lt;span class=&quot;code&quot;&gt;ff&lt;/span&gt; "> <span class="code">ff</span> </a>, except it does not return <span class="code">True</span> for items matching the stop condition (including items that first matched the start condition).</p>
 <pre class="code">my @list = &amp;lt;A B C&gt;;
say $_ if /A/ ff /C/ for @list;  # prints A, B, and C
say $_ if /A/ ff^ /C/ for @list; # prints A and B</pre>
 <p>The sed-like version can be found in <a href=" &lt;span class=&quot;code&quot;&gt;fff^&lt;/span&gt; "> <span class="code">fff^</span> </a>.</p>
 <p>This operator cannot be overloaded, as it is handled specially by the compiler.</p>
 <a name="t25.30.5"></a><h2 id="_language_operators.pod6-infix_^ff^">25.30.5 infix <span class="code">^ff^</span></h2>
 <pre class="code">sub infix:&amp;lt;^ff^&gt;(Mu $a, Mu $b)</pre>
 <p>Works like <a href=" &lt;span class=&quot;code&quot;&gt;ff&lt;/span&gt; "> <span class="code">ff</span> </a>, except it does not return <span class="code">True</span> for items matching either the stop or start condition (or both).</p>
 <pre class="code">my @list = &amp;lt;A B C&gt;;
say $_ if /A/ ff /C/ for @list;  # prints A, B, and C
say $_ if /A/ ^ff^ /C/ for @list; # prints B</pre>
 <p>The sed-like version can be found in <a href="#_routine_^fff^.pod6"> <span class="code">^fff^</span> </a>.</p>
 <p>This operator cannot be overloaded, as it is handled specially by the compiler.</p>
 <a name="t25.30.6"></a><h2 id="_language_operators.pod6-infix_fff">25.30.6 infix <span class="code">fff</span></h2>
 <pre class="code">sub infix:&amp;lt;fff&gt;(Mu $a, Mu $b)</pre>
 <p>Performs a sed-like flipflop operation, wherein it returns <span class="code">False</span> until the left argument smartmatches against <span class="code">$_</span>, and after that returns <span class="code">True</span> until the right argument smartmatches against <span class="code">$_</span>.</p>
 <p>Works similarly to <a href=" &lt;span class=&quot;code&quot;&gt;ff&lt;/span&gt; "> <span class="code">ff</span> </a>, except that it only tries one argument per invocation. That is, if <span class="code">$_</span> smartmatches the left argument, <span class="code">fff</span> will <b>not</b> then try to match that same <span class="code">$_</span> against the right argument.</p>
 <pre class="code">for &amp;lt;AB C D B E F&gt; {
    say $_ if /A/ fff /B/;  # Prints "AB", "C", "D", and "B"
}</pre>
 <p>The non-sed-like flipflop (which after successfully matching the left argument against <span class="code">$_</span> will try that same <span class="code">$_</span> against the right argument and act accordingly), see <a href=" &lt;span class=&quot;code&quot;&gt;ff&lt;/span&gt; "> <span class="code">ff</span> </a>.</p>
 <p>This operator cannot be overloaded, as it is handled specially by the compiler.</p>
 <a name="t25.30.7"></a><h2 id="_language_operators.pod6-infix_^fff">25.30.7 infix <span class="code">^fff</span></h2>
 <pre class="code">sub infix:&amp;lt;^fff&gt;(Mu $a, Mu $b)</pre>
 <p>Like <a href=" &lt;span class=&quot;code&quot;&gt;fff&lt;/span&gt; "> <span class="code">fff</span> </a>, except it does not return true for matches to the left argument.</p>
 <pre class="code">my @list = &amp;lt;A B C&gt;;
say $_ if /A/ fff /C/ for @list;  # prints A, B, and C
say $_ if /A/ ^fff /C/ for @list; # prints B and C</pre>
 <p>For the non-sed version, see <a href="#_routine_^ff.pod6"> <span class="code">^ff</span> </a>.</p>
 <p>This operator cannot be overloaded, as it is handled specially by the compiler.</p>
 <a name="t25.30.8"></a><h2 id="_language_operators.pod6-infix_fff^">25.30.8 infix <span class="code">fff^</span></h2>
 <pre class="code">sub infix:&amp;lt;fff^&gt;(Mu $a, Mu $b)</pre>
 <p>Like <a href=" &lt;span class=&quot;code&quot;&gt;fff&lt;/span&gt; "> <span class="code">fff</span> </a>, except it does not return true for matches to the right argument.</p>
 <pre class="code">my @list = &amp;lt;A B C&gt;;
say $_ if /A/ fff /C/ for @list;  # prints A, B, and C
say $_ if /A/ fff^ /C/ for @list; # prints A and B</pre>
 <p>For the non-sed version, see <a href=" &lt;span class=&quot;code&quot;&gt;ff^&lt;/span&gt; "> <span class="code">ff^</span> </a>.</p>
 <p>This operator cannot be overloaded, as it is handled specially by the compiler.</p>
 <a name="t25.30.9"></a><h2 id="_language_operators.pod6-infix_^fff^">25.30.9 infix <span class="code">^fff^</span></h2>
 <pre class="code">sub infix:&amp;lt;^fff^&gt;(Mu $a, Mu $b)</pre>
 <p>Like <a href=" &lt;span class=&quot;code&quot;&gt;fff&lt;/span&gt; "> <span class="code">fff</span> </a>, except it does not return true for matches to either the left or right argument.</p>
 <pre class="code">my @list = &amp;lt;A B C&gt;;
say $_ if /A/ fff /C/ for @list;  # prints A, B, and C
say $_ if /A/ ^fff^ /C/ for @list; # prints B</pre>
 <p>For the non-sed version, see <a href="#_routine_^ff^.pod6"> <span class="code">^ff^</span> </a>.</p>
 <p>This operator cannot be overloaded, as it is handled specially by the compiler.</p>
 <a name="t25.31"></a><h1 id="_language_operators.pod6-Item_Assignment_Precedence">25.31 Item Assignment Precedence</h1>
 <a name="t25.31.1"></a><h2 id="_language_operators.pod6-infix_=">25.31.1 infix <span class="code">=</span></h2>
 <pre class="code">sub infix:&amp;lt;=&gt;(Mu $a is rw, Mu $b)</pre>
 <p><span class="indexed"><a id="352" name="">Item assignment operator</a></span>.</p>
 <p>Places the value of the right-hand side into the container on the left-hand side. Its exact semantics are left to the container type on the left-hand side.</p>
 <p>(Note that item assignment and list assignment have different precedence levels, and the syntax of the left-hand side decides whether an equal sign <span class="code">=</span> is parsed as item assignment or list assignment operator).</p>
 <a name="t25.31.2"></a><h2 id="_language_operators.pod6-infix_=>">25.31.2 infix <span class="code">=></span></h2>
 <pre class="code">sub infix:«=&gt;»($key, Mu $value) returns Pair:D</pre>
 <p><a href="#_type_Pair.pod6">Pair</a> constructor.<span class="indexed"><a id="353" name="pair constructor"></a></span></p>
 <p>Constructs a <a href="#_type_Pair.pod6">Pair</a> object with the left-hand side as the key and the right-hand side as the value.</p>
 <p>Note that the <span class="code">=> </span> operator is syntactically special-cased, in that it allows unquoted identifier on the left-hand side.</p>
 <pre class="code">my $p = a =&gt; 1;
say $p.key;         # a
say $p.value;       # 1</pre>
 <p>A <a href="#_type_Pair.pod6">Pair</a> within an argument list with an unquoted identifier on the left is interpreted as a named argument.</p>
 <p>See <a href="#_language_terms.pod6-Pair">the Terms language documentation</a> for more ways to create <span class="code">Pair</span> objects.</p>
 <a name="t25.32"></a><h1 id="_language_operators.pod6-Loose_Unary_Precedence">25.32 Loose Unary Precedence</h1>
 <a name="t25.32.1"></a><h2 id="_language_operators.pod6-prefix_not">25.32.1 prefix <span class="code">not</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;not&gt;(Mu $x) returns Bool:D</pre>
 <p>Evaluates its argument in boolean context (and thus collapses <a href="#_type_Junction.pod6">Junction</a>s), and negates the result. Please note that <span class="code">not</span> is easy to misuse, see <a href="#_language_traps.pod6-Loose_boolean_operators">traps</a>.</p>
 <a name="t25.32.2"></a><h2 id="_language_operators.pod6-prefix_so">25.32.2 prefix <span class="code">so</span></h2>
 <pre class="code">multi sub prefix:&amp;lt;so&gt;(Mu $x) returns Bool:D</pre>
 <p>Evaluates its argument in boolean context (and thus collapses <a href="#_type_Junction.pod6">Junction</a>s), and returns the result.</p>
 <a name="t25.33"></a><h1 id="_language_operators.pod6-Comma_Operator_Precedence">25.33 Comma Operator Precedence</h1>
 <a name="t25.33.1"></a><h2 id="_language_operators.pod6-infix_,">25.33.1 infix <span class="code">,</span></h2>
 <pre class="code">sub infix:&amp;lt;,&gt;(*@a) is assoc&amp;lt;list&gt; returns List:D</pre>
 <p>Constructs a <a href="#_type_List.pod6">List</a> from its arguments. Also used syntactically as the separator of arguments in calls.</p>
 <a name="t25.33.2"></a><h2 id="_language_operators.pod6-infix_:">25.33.2 infix <span class="code">:</span></h2>
 <p>Used as an argument separator just like infix <span class="code">,</span> and marks the argument to its left as the invocant. That turns what would otherwise be a function call into a method call.</p>
 <pre class="code">substr('abc': 1);       # same as 'abc'.substr(1)</pre>
 <p>Infix <span class="code">:</span> is only allowed after the first argument of a non-method call. In other positions it is a syntax error.</p>
 <a name="t25.34"></a><h1 id="_language_operators.pod6-List_Infix_Precedence">25.34 List Infix Precedence</h1>
 <a name="t25.34.1"></a><h2 id="_language_operators.pod6-infix_Z">25.34.1 infix <span class="code">Z</span></h2>
 <pre class="code">sub infix:&amp;lt;Z&gt;(**@lists) returns List:D is assoc&amp;lt;chain&gt;</pre>
 <p><span class="indexed"><a id="355" name="">Zip operator</a></span>.</p>
 <p>Interleaves the lists passed to <span class="code">Z</span> like a zipper, stopping as soon as the first input list is exhausted:</p>
 <pre class="code">say (1, 2 Z &amp;lt;a b c&gt; Z &amp;lt;+ -&gt;).perl;  #=&gt; ((1, "a", "+"), (2, "b", "-")).Seq</pre>
 <p>The <span class="code">Z</span> operator also exists as a meta operator, in which case the inner lists are replaced by the value from applying the meta'ed operator to the list:</p>
 <pre class="code">say 100, 200 Z+ 42, 23;             #=&gt; (142 223)
say 1..3 Z~ &amp;lt;a b c&gt; Z~ 'x' xx 3;    #=&gt; (1ax 2bx 3cx)</pre>
 <a name="t25.34.2"></a><h2 id="_language_operators.pod6-infix_X">25.34.2 infix <span class="code">X</span></h2>
 <pre class="code">sub infix:&amp;lt;X&gt;(**@lists) returns List:D is assoc&amp;lt;chain&gt;</pre>
 <p>Creates a cross product from all the lists, order so that the rightmost elements vary most rapidly:<span class="indexed"><a id="356" name="cross product operator"></a></span></p>
 <pre class="code">1..3 X &amp;lt;a b c&gt; X 9
# produces ((1 a 9) (1 b 9) (1 c 9)
#           (2 a 9) (2 b 9) (2 c 9)
#           (3 a 9) (3 b 9) (3 c 9))</pre>
 <p>The <span class="code">X</span> operator also exists as a meta operator, in which case the inner lists are replaced by the value from applying the meta'ed operator to the list:</p>
 <pre class="code">1..3 X~ &amp;lt;a b c&gt; X~ 9
# produces (1a9 1b9 1c9 2a9 2b9 2c9 3a9 3b9 3c9)</pre>
 <a name="t25.34.3"></a><h2 id="_language_operators.pod6-infix_...">25.34.3 infix <span class="code">...</span> <a name="357"></a><a name="358"></a><a name="359"></a></h2>
 <pre class="code">multi sub infix:&amp;lt;...&gt;(**@) is assoc&amp;lt;list&gt;
multi sub infix:&amp;lt;...^&gt;(**@) is assoc&amp;lt;list&gt;</pre>
 <p>The <span class="indexed"><a id="361" name="">sequence operator</a></span> is a generic operator to produce lazy lists.</p>
 <p>It can have initial elements and a generator on left-hand side, and an endpoint on the right-hand side.</p>
 <p>The sequence operator invokes the generator with as many arguments as necessary. The arguments are taken from the initial elements and the already generated elements.</p>
 <p>The default generator is <span class="code">*.</span><a href="#_routine_succ.pod6">succ</a> or <span class="code">*.</span><a href="#_routine_pred.pod6">pred</a>, depending on how the end points compare:</p>
 <pre class="code">say 1 ... 4;        # 1 2 3 4
say 4 ... 1;        # 4 3 2 1
say 'a' ... 'e';    # a b c d e
say 'e' ... 'a';    # e d c b a</pre>
 <p>An endpoint of <span class="code">*</span> (<a href="#_type_Whatever.pod6">Whatever</a>) generates an infinite sequence, with a default generator of *.succ</p>
 <pre class="code">say (1 ... *)[^5];  # 1 2 3 4 5</pre>
 <p>Custom generators are the last argument before the '...' operator. This one takes two arguments, and generates the Fibonacci numbers</p>
 <pre class="code">say (1, 1, -&gt; $a, $b { $a + $b } ... *)[^8];    # 1 1 2 3 5 8 13 21
# same but shorter
say (1, 1, *+* ... *)[^8];                      # 1 1 2 3 5 8 13 21</pre>
 <p>Of course the generator can also take only one argument.</p>
 <pre class="code">say 5, { $_ * 2 } ... 40;                       # 5 10 20 40</pre>
 <p>There must be at least as many initial elements as arguments to the generator.</p>
 <p>Without a generator, and more than one initial element, and all initial elements numeric, the sequence operator tries to deduce the generator. It knows about arithmetic and geometric sequences.</p>
 <pre class="code">say 2, 4, 6 ... 12;     # 2 4 6 8 10 12
say 1, 2, 4 ... 32;     # 1 2 4 8 16 32</pre>
 <p>If the endpoint is not <span class="code">*</span>, it is smart-matched against each generated element, and the sequence is terminated when the smart-match succeeded. For the <span class="code">...</span> operator, the final element is included, for the <span class="code">...^</span> operator it is excluded.</p>
 <p>This allows you to write</p>
 <pre class="code">say 1, 1, *+* ...^ *&gt;= 100;</pre>
 <p>To generate all Fibonacci numbers up to but excluding 100.</p>
 <p>The <span class="code">...</span> operators consider the initial values as "generated elements" as well, so the are also checked against the endpoint:</p>
 <pre class="code">my $end = 4;
say 1, 2, 4, 8, 16 ... $end;
# outputs 1 2 4</pre>
 <a name="t25.35"></a><h1 id="_language_operators.pod6-List_Prefix_Precedence">25.35 List Prefix Precedence</h1>
 <a name="t25.35.1"></a><h2 id="_language_operators.pod6-infix_=">25.35.1 infix <span class="code">=</span></h2>
 <p><span class="indexed"><a id="366" name="">List assignment operator</a></span>. Its exact semantics are left to the container type on the left-hand side. See <a href="#_type_Array.pod6">Array</a> and <a href="#_type_Hash.pod6">Hash</a> for common cases.</p>
 <p>The distinction between item assignment and list assignment is determined by the parser depending on the syntax of the left-hand side.</p>
 <a name="t25.35.2"></a><h2 id="_language_operators.pod6-infix_:=">25.35.2 infix <span class="code">:=</span></h2>
 <p><span class="indexed"><a id="369" name="">Binding operator</a></span>. Whereas <span class="code">$x = $y</span> puts the value in <span class="code">$y</span> into <span class="code">$x</span>, <span class="code">$x := $y</span> makes <span class="code">$x</span> and <span class="code">$y</span> the same thing.</p>
 <pre class="code">    my $a = 42; 
     my $b  &lt;b&gt;=&lt;/b&gt;  $a; 
     $b &lt;a href="++"&gt;++&lt;/a&gt; ; 
     say $a; 
</pre>
 <p>This will output 42, because <span class="code">$a</span> and <span class="code">$b</span> both contained the number <span class="code">42</span>, but the <a href="#_language_containers.pod6-Binding">containers</a> were different.</p>
 <pre class="code">    my $a = 42; 
     my $b  &lt;b&gt;:=&lt;/b&gt;  $a; 
     $b &lt;a href="++"&gt;++&lt;/a&gt; ; 
     say $a; 
</pre>
 <p>This will output 43, since <span class="code">$b</span> and <span class="code">$a</span> both represented the same object.</p>
 <a name="t25.35.3"></a><h2 id="_language_operators.pod6-infix_::=">25.35.3 infix <span class="code">::=</span></h2>
 <p><span class="indexed"><a id="372" name="">Read-only binding operator</a></span>. See <a href=":="> <span class="code">infix :=</span> </a>.</p>
 <a name="t25.35.4"></a><h2 id="_language_operators.pod6-listop_...">25.35.4 listop <span class="code">...</span></h2>
 <p>The <i>yada, yada, yada</i> operator or <i>stub</i> operator. If it is the only statement in a routine or type, it marks that routine or type as a stub (which is significant in the context of pre-declaring types and composing roles).</p>
 <p>If the <span class="code">...</span> statement is executed, it calls <a href="#_routine_fail.pod6">fail</a>, with the default message <span class="code">stub code executed</span>.</p>
 <a name="t25.35.5"></a><h2 id="_language_operators.pod6-listop_!!!">25.35.5 listop <span class="code">!!!</span></h2>
 <p><span class="indexed"><a id="374" name="">Fatal stub operator</a></span>.</p>
 <p>If it is the only statement in a routine or type, it marks that routine or type as a stub (which is significant in the context of pre-declaring types and composing roles).</p>
 <p>If the <span class="code">!!!</span> statement is executed, it calls <a href="#_routine_die.pod6">die</a>, with the default message <span class="code">stub code executed</span>.</p>
 <a name="t25.35.6"></a><h2 id="_language_operators.pod6-listop_???">25.35.6 listop <span class="code">???</span></h2>
 <p><span class="indexed"><a id="375" name="">Admonitory stub operator</a></span>.</p>
 <p>If it is the only statement in a routine or type, it marks that routine or type as a stub (which is significant in the context of pre-declaring types and composing roles).</p>
 <p>If the <span class="code">???</span> statement is executed, it calls <a href="#_routine_warn.pod6">warn</a>, with the default message <span class="code">stub code executed</span>.</p>
 <a name="t25.35.7"></a><h2 id="_language_operators.pod6-Reduction_operators">25.35.7 Reduction operators</h2>
 <p>Any infix operator (except for non-associating operators) can be surrounded by square brackets in term position to create a list operator that reduces using that operation.</p>
 <pre class="code">    [+] 1, 2, 3;      # 1 + 2 + 3 = 6 
     my @a = (5, 6); 
     [*] @a;           # 5 * 6 = 30 
 
</pre>
 <p>Reduction operators have the same associativity as the operators they are based on.</p>
 <pre class="code">    [-] 4, 3, 2;      # 4-3-2 = (4-3)-2 = -1 
     [**] 4, 3, 2;     # 4**3**2 = 4**(3**2) = 262144 
 
</pre>
 <a name="t25.36"></a><h1 id="_language_operators.pod6-Loose_AND_precedence">25.36 Loose AND precedence</h1>
 <a name="t25.36.1"></a><h2 id="_language_operators.pod6-infix_and">25.36.1 infix <span class="code">and</span></h2>
 <p>Same as <a href="#24-infix &amp;amp;&amp;amp;">#infix &amp;&amp;</a>, except with looser precedence.</p>
 <p>Returns the first operand that evaluates to <span class="code">False</span> in boolean context, or otherwise the last operand, it short-circuits. Please note that <span class="code">and</span> is easy to misuse, see <a href="#_language_traps.pod6-Loose_boolean_operators">traps</a>.</p>
 <a name="t25.36.2"></a><h2 id="_language_operators.pod6-infix_andthen">25.36.2 infix <span class="code">andthen</span></h2>
 <p>Returns the first undefined argument, otherwise the last argument. Short-circuits. The result of the left side is bound to $_ for the right side, or passed as arguments if the right side is a block or pointy block.</p>
 <a name="t25.37"></a><h1 id="_language_operators.pod6-Loose_OR_Precedence">25.37 Loose OR Precedence</h1>
 <a name="t25.37.1"></a><h2 id="_language_operators.pod6-infix_or">25.37.1 infix <span class="code">or</span></h2>
 <p>Same as <span class="code">infix ||</span>, except with looser precedence.</p>
 <p>Returns the first argument that evaluates to <span class="code">True</span> in boolean context, or otherwise the last argument, it short-circuits. Please note that <span class="code">or</span> is easy to misuse, see <a href="#_language_traps.pod6-Loose_boolean_operators">traps</a>.</p>
 <a name="t25.37.2"></a><h2 id="_language_operators.pod6-infix_orelse">25.37.2 infix <span class="code">orelse</span></h2>
 <p>Same as <span class="code">infix //</span>, except with looser precedence.</p>
 <p>Returns the first defined argument, or else the last argument. Short-circuits.</p>
 <a name="t25.38"></a><h1 id="_language_operators.pod6-Sequencer_Precedence">25.38 Sequencer Precedence</h1>
 <a name="t25.38.1"></a><h2 id="_language_operators.pod6-infix_==>">25.38.1 infix <span class="code">==></span></h2>
 <p>This <span class="indexed"><a id="384" name="">feed</a></span> operator takes the result from the left and passes it to the next (right) routine as the last parameter.</p>
 <p>The precedence is very loose so you will need to use parentheses to assign the result or you can even just use another feed operator! In the case of routines/methods that take a single argument or where the first argument is a block, it is often required that you call with parentheses (though this is not required for the very last routine/method).</p>
 <pre class="code"># Traditional structure, read bottom-to-top
my @result =
    sort               # (4) Sort, result is &amp;lt;Earth People&gt;
    grep { /&amp;lt;[PE]&gt;/ }, # (3) Look for P or E
    map { .tc },       # (2) Capitalize the words
    &amp;lt;people of earth&gt;; # (1) Start with the input

# Feed (left-to-right) with parentheses, read top-to-bottom
my @result = (
    &amp;lt;people of earth&gt;  # (1) Start with the input
    ==&gt; map({ .tc })   # (2) Capitalize the words
    ==&gt; grep /&amp;lt;[PE]&gt;/  # (3) Look for P or E
    ==&gt; sort           # (4) Sort, result is &amp;lt;Earth People&gt;
);

# For illustration, method chaining equivalent, read top-to-bottom
my @result =
    &amp;lt;people of earth&gt;  # (1) Start with the input
    .map({ .tc })      # (2) Capitalize the words
    .grep(/&amp;lt;[PE]&gt;/)    # (3) Look for P or E
    .sort;             # (4) Sort, result is &amp;lt;Earth People&gt;

# To assign without the need of parentheses use another feed operator
&amp;lt;people of earth&gt;
    ==&gt; map({ .tc })
    ==&gt; grep /&amp;lt;[PE]&gt;/
    ==&gt; sort()
    ==&gt; my @result;

# It can be useful to capture a partial result, however, unlike
# the leftward feed operator, it does require parentheses or a semicolon
&amp;lt;people of earth&gt;
    ==&gt; map({ .tc })
    ==&gt; my @caps; @caps # also could wrap in parentheses instead
    ==&gt; grep /&amp;lt;[PE]&gt;/
    ==&gt; sort()
    ==&gt; my @result;</pre>
 <p>The feed operator lets you construct method-chaining-like patterns out of routines and the results of methods on unrelated data. In method-chaining, you are restricted to the methods available on the data or the result of previous method call. With feed operators, that restriction is gone. The resulting code could also be seen to be more readable than a series of method calls broken over multiple lines.</p>
 <p>Note: In the future, this operator will see some change as it gains the ability to run list operations in parallel. It will enforce that the <b>left</b> operand is enclosable as a closure (that can be cloned and run in a subthread).</p>
 <a name="t25.38.2"></a><h2 id="_language_operators.pod6-infix_&lt;==">25.38.2 infix <span class="code">&lt;==</span></h2>
 <p>This <span class="indexed"><a id="385" name="">leftward feed</a></span> operator takes the result from the right and passes it to the previous (left) routine as the last parameter. This elucidates the right-to-left dataflow for a series of list manipulating functions.</p>
 <pre class="code"># Traditional structure, read bottom-to-top
my @result =
    sort                   # (4) Sort, result is &amp;lt;Earth People&gt;
    grep { /&amp;lt;[PE]&gt;/ },     # (3) Look for P or E
    map { .tc },           # (2) Capitalize the words
    &amp;lt;people of earth&gt;;     # (1) Start with the input

# Feed (right-to-left) with parentheses, read bottom-to-top
my @result = (
    sort()                 # (4) Sort, result is &amp;lt;Earth People&gt;
    &amp;lt;== grep({ /&amp;lt;[PE]&gt;/ }) # (3) Look for P or E
    &amp;lt;== map({ .tc })       # (2) Capitalize the words
    &amp;lt;== &amp;lt;people of earth&gt;  # (1) Start with the input
);

# To assign without parentheses, use another feed operator
my @result
    &amp;lt;== sort()             # (4) Sort, result is &amp;lt;Earth People&gt;
    &amp;lt;== grep({ /&amp;lt;[PE]&gt;/ }) # (3) Look for P or E
    &amp;lt;== map({ .tc })       # (2) Capitalize the words
    &amp;lt;== &amp;lt;people of earth&gt;; # (1) Start with the input

# It can be useful to capture a partial result
my @result
    &amp;lt;== sort()
    &amp;lt;== grep({ /&amp;lt;[PE]&gt;/ })
    &amp;lt;== my @caps # unlike ==&gt;, there is no need for additional statement
    &amp;lt;== map({ .tc })
    &amp;lt;== &amp;lt;people of earth&gt;;</pre>
 <p>Unlike the rightward feed operator, the result is not closely mappable to method-chaining. However, compared to the traditional structure above where each argument is separated by a line, the resulting code is more demonstrative than commas. The leftward feed operator also allows you to "break into" the statement and capture an intermediary result which can be extremely useful for debugging or to take that result and create another variation on the final result.</p>
 <p>Note: In the future, this operator will see some change as it gains the ability to run list operations in parallel. It will enforce that the <b>right</b> operand is enclosable as a closure (that can be cloned and run in a subthread).</p>
</div> <!-- /language/packages.pod6 --><div class="pod-body"><a id="_language_packages.pod6"></a><a name="t26"><h1 class="title">26 Packages</h1></a> <p class="subtitle">Organizing and referencing namespaced program elements</p> * Take a lot of stuff from S02 for this
* Document 'import'

 <p>Packages are nested namespaces of named program elements. Modules, classes, grammars, and others are types of packages. Like files in a directory, you can generally refer to named elements with their short-name if they are local, or with a longer name to disambiguate.</p>
 <a name="t26.1"></a><h1 id="_language_packages.pod6-Names">26.1 Names</h1>
 <p>A <i>name</i> is anything that is a legal part of a variable name (not counting the sigil). This includes:</p>
 <pre class="code">$foo                # simple identifiers
$Foo::Bar::baz      # compound identifiers separated by ::
$Foo::($bar)::baz   # compound identifiers that perform interpolations
$42                 # numeric names
$!                  # certain punctuational variables</pre>
 <p><span class="indexed"><a id="241" name=":: package"></a></span> <span class="code">::</span> is used to separate nested package names.</p>
 <a name="t26.1.1"></a><h2 id="_language_packages.pod6-Package-qualified_names">26.1.1 Package-qualified names</h2>
 <p>Ordinary package-qualified names look like:</p>
 <pre class="code">$Foo::Bar::baz      # the $baz variable in package Foo::Bar</pre>
 <p>Sometimes it's clearer to keep the sigil with the variable name, so an alternate way to write this is:</p>
 <pre class="code">Foo::Bar::&amp;lt;$baz&gt;</pre>
 <p>This is resolved at compile time because the variable name is a constant.</p>
 <p>If the name part before <span class="code">::</span> is null, it means the package is unspecified and must be searched for. Generally this means that an initial <span class="code">::</span> following the main sigil is a no-op on names that are known at compile time, though <span class="code">::()</span> can also be used to introduce an interpolation. Also, in the absence of another sigil, <span class="code">::</span> can serve as its own sigil indicating intentional use of a not-yet-declared package name.</p>
 <a name="t26.2"></a><h1 id="_language_packages.pod6-Pseudo-packages">26.2 Pseudo-packages</h1>
 <p>The following pseudo-package names are reserved at the front of a name:</p>
 <pre class="code">MY          # Symbols in the current lexical scope (aka $?SCOPE)
OUR         # Symbols in the current package (aka $?PACKAGE)
CORE        # Outermost lexical scope, definition of standard Perl
GLOBAL      # Interpreter-wide package symbols, really UNIT::GLOBAL
PROCESS     # Process-related globals (superglobals)
COMPILING   # Lexical symbols in the scope being compiled</pre>
 <p>The following relative names are also reserved but may be used anywhere in a name:</p>
 <pre class="code">CALLER      # Contextual symbols in the immediate caller's lexical scope
CALLERS     # Contextual symbols in any caller's lexical scope
DYNAMIC     # Contextual symbols in my or any caller's lexical scope
OUTER       # Symbols in the next outer lexical scope
OUTERS      # Symbols in any outer lexical scope
LEXICAL     # Contextual symbols in my or any outer's lexical scope
UNIT        # Symbols in the outermost lexical scope of compilation unit
SETTING     # Lexical symbols in the unit's DSL (usually CORE)
PARENT      # Symbols in this package's parent package (or lexical scope)
CLIENT      # The nearest CALLER that comes from a different package</pre>
 <p>The file's scope is known as <span class="code">UNIT</span>, but there are one or more lexical scopes outside of that corresponding to the linguistic setting (often known as the prelude in other cultures). Hence, the <span class="code">SETTING</span> scope is equivalent to <span class="code">UNIT::OUTERS</span>. For a standard Perl program <span class="code">SETTING</span> is the same as <span class="code">CORE</span>, but various startup options (such as <span class="code">-n</span> or <span class="code">-p</span>) can put you into a domain specific language, in which case <span class="code">CORE</span> remains the scope of the standard language, while <span class="code">SETTING</span> represents the scope defining the DSL that functions as the setting of the current file. When used as a search term in the middle of a name, <span class="code">SETTING</span> includes all its outer scopes up to <span class="code">CORE</span>. To get <i>only</i> the setting's outermost scope, use <span class="code">UNIT::OUTER</span> instead.</p>
 <a name="t26.3"></a><h1 id="_language_packages.pod6-Looking_up_names">26.3 Looking up names</h1>
 <a name="t26.3.1"></a><h2 id="_language_packages.pod6-Interpolating_into_names">26.3.1 Interpolating into names</h2>
 <p><span class="indexed"><a id="246" name="::()"></a></span> You may interpolate a string into a package or variable name using <span class="code">::($expr)</span> where you'd ordinarily put a package or variable name. The string is allowed to contain additional instances of <span class="code">::</span>, which will be interpreted as package nesting. You may only interpolate entire names, since the construct starts with <span class="code">::</span>, and either ends immediately or is continued with another <span class="code">::</span> outside the parens. Most symbolic references are done with this notation:</p>
 <pre class="code">$foo = "Bar";
$foobar = "Foo::Bar";
$::($foo)           # lexically-scoped $Bar
$::("MY::$foo")     # lexically-scoped $Bar
$::("OUR::$foo")    # package-scoped $Bar
$::("GLOBAL::$foo") # global $Bar
$::("PROCESS::$foo")# process $Bar
$::("PARENT::$foo") # current package's parent's $Bar
$::($foobar)        # $Foo::Bar
$::($foobar)::baz   # $Foo::Bar::baz
$::($foo)::Bar::baz # $Bar::Bar::baz
$::($foobar)baz     # ILLEGAL at compile time (no operator baz)</pre>
 <p>An initial <span class="code">::</span> doesn't imply global. Here as part of the interpolation syntax it doesn't even imply package. After the interpolation of the <span class="code">::()</span> component, the indirect name is looked up exactly as if it had been there in the original source code, with priority given first to leading pseudo-package names, then to names in the lexical scope (searching scopes outwards, ending at <span class="code">CORE</span>). The current package is searched last.</p>
 <p>Use the <span class="code">MY</span> pseudopackage to limit the lookup to the current lexical scope, and <span class="code">OUR</span> to limit the scopes to the current package scope.</p>
 <a name="t26.3.2"></a><h2 id="_language_packages.pod6-Direct_lookup">26.3.2 Direct lookup</h2>
 <p>To do direct lookup in a package's symbol table without scanning, treat the package name as a hash:</p>
 <pre class="code">Foo::Bar::{'&amp;amp;baz'}  # same as &amp;amp;Foo::Bar::baz
PROCESS::&amp;lt;$IN&gt;      # Same as $*IN
Foo::&amp;lt;::Bar&gt;&amp;lt;::Baz&gt; # same as Foo::Bar::Baz</pre>
 <p>Unlike <span class="code">::()</span> symbolic references, this does not parse the argument for <span class="code">::</span>, nor does it initiate a namespace scan from that initial point. In addition, for constant subscripts, it is guaranteed to resolve the symbol at compile time.</p>
 <p>The null pseudo-package is the same search list as an ordinary name search. That is, the following are all identical in meaning:</p>
 <pre class="code">$foo
$::{'foo'}
::{'$foo'}
$::&amp;lt;foo&gt;
::&amp;lt;$foo&gt;</pre>
 <p>Each of them scans lexical scopes outward, and then the current package scope (though the package scope is then disallowed when "strict" is in effect).</p>
 <p>As a result of these rules, you can write any arbitrary variable name as either of:</p>
 <pre class="code">$::{'!@#$#@'}
::{'$!@#$#@'}</pre>
 <p>You can also use the <span class="code">::&lt;> </span> form as long as there are no spaces in the name.</p>
 <a name="t26.3.3"></a><h2 id="_language_packages.pod6-Package_lookup">26.3.3 Package lookup</h2>
 <p>Subscript the package object itself as a hash object, the key of which is the variable name, including any sigil. The package object can be derived from a type name by use of the <span class="code">::</span> postfix:</p>
 <pre class="code">MyType::&amp;lt;$foo&gt;</pre>
 <a name="t26.4"></a><h1 id="_language_packages.pod6-Globals">26.4 Globals</h1>
 <p>Interpreter globals live in the <span class="code">GLOBAL</span> package. The user's program starts in the <span class="code">GLOBAL</span> package, so "our" declarations in the mainline code go into that package by default. Process-wide variables live in the <span class="code">PROCESS</span> package. Most predefined globals such as <span class="code">$*UID</span> and <span class="code">$*PID</span> are actually process globals.</p>
 <a name="t26.5"></a><h1 id="_language_packages.pod6-Version">26.5 Version</h1>
 <p><span class="indexed"><a id="252" name=".^ver package"></a></span> Any package may have a <a href="#_type_Version.pod6">Version</a> object attached to it. This object can be accessed via <span class="code">$?PACKAGE.^ver</span> or from outside the package <span class="code">Fully::Qualified::Name.^ver</span>.</p>
</div> <!-- /language/performance.pod6 --><div class="pod-body"><a id="_language_performance.pod6"></a><a name="t27"><h1 class="title">27 Performance</h1></a> <p class="subtitle">Measuring and improving run-time or compile-time performance</p> <p>This page is about anything to do with <a href="https://en.wikipedia.org/wiki/Computer_performance">computer performance</a> in the context of Perl 6.</p>
 <a name="t27.1"></a><h1 id="_language_performance.pod6-First,_clarify_the_problem">27.1 First, clarify the problem</h1>
 <p><b>Make sure you're not wasting time on the wrong code</b>: start by identifying your <a href="https://en.wikiquote.org/wiki/Donald_Knuth">"critical 3%"</a> by "profiling" as explained below.</p>
 <a name="t27.1.1"></a><h2 id="_language_performance.pod6-Time_with_now_-_INIT_now">27.1.1 Time with <span class="code">now - INIT now</span></h2>
 <p>Expressions of the form <span class="code">now - INIT now</span>, where <span class="code">INIT</span> is a <a href="#_language_phasers.pod6">phase in the running of a Perl 6 program</a>, provide a great idiom for timing code snippets.</p>
 <p>Use the <span class="code">m: your code goes here</span> <a href="#_language_glossary.pod6-camelia">#perl6 channel evalbot</a> to write lines like:</p>
 <pre class="code">m: say now - INIT now
rakudo-moar 8bd7ee: OUTPUT«0.0018558␤»</pre>
 <p>The <span class="code">now</span> to the left of <span class="code">INIT</span> runs 0.0018558 seconds <i>later</i> than the <span class="code">now</span> to the right of the <span class="code">INIT</span> because the latter occurs during <a href="#_language_phasers.pod6-INIT">the INIT phase</a>.</p>
 <a name="t27.1.2"></a><h2 id="_language_performance.pod6-Profile_with_prof-m:_your_code_goes_here">27.1.2 Profile with <span class="code">prof-m: your code goes here</span></h2>
 <p>Enter <span class="code">prof-m: your code goes here</span> in the <a href="#_language_glossary.pod6-IRC">#perl6 channel</a> to invoke a Perl 6 compiler with a <span class="code">--profile</span> option. The evalbot's output includes a link to <a href="https://en.wikipedia.org/wiki/Profiling_(computer_programming)">profile info</a>:</p>
 <pre class="code">    yournick prof-m: say 'hello world' 
     camelia  prof-m 273e89: OUTPUT«hello world␤...» 
              .. Prof:  &lt;a href="http://p.p6c.org/20f9e25"&gt;http://p.p6c.org/20f9e25&lt;/a&gt;  
 
</pre>
 <p>Click on the profile info link to see a profile for <span class="code">say 'hello world'</span>.</p>
 <p>To learn how to interpret the profile info, ask questions on channel.</p>
 <a name="t27.1.3"></a><h2 id="_language_performance.pod6-Profile_locally">27.1.3 Profile locally</h2>
 <p>When using the <a href="http://moarvm.org">MoarVM</a> backend the <a href="http://rakudo.org">Rakudo</a> compiler's <span class="code">--profile</span> command line option writes profile information as an HTML file.</p>
 <p>To learn how to interpret the profile info, use the <span class="code">prof-m: your code goes here</span> evalbot (explained above) and ask questions on channel.</p>
 <a name="t27.1.4"></a><h2 id="_language_performance.pod6-Profile_compiling">27.1.4 Profile compiling</h2>
 <p>The Rakudo compiler's <span class="code">--profile-compile</span> option profiles the time and memory used to compile code.</p>
 <a name="t27.1.5"></a><h2 id="_language_performance.pod6-Create_or_view_benchmarks">27.1.5 Create or view benchmarks</h2>
 <p>Use <a href="https://github.com/japhb/perl6-bench">perl6-bench</a>.</p>
 <p>If you run perl6-bench for multiple compilers (typically versions of Perl 5, Perl 6, or NQP) then results for each are visually overlaid on the same graphs to provide for quick and easy comparison.</p>
 <a name="t27.1.6"></a><h2 id="_language_performance.pod6-Share_problems">27.1.6 Share problems</h2>
 <p>Once you've used the above techniques to pinpoint code and performance that really matters you're in a good place to share problems, one at a time:</p>
 <ul><li><p>For each problem you see, distill it down to a one-liner or short public gist of code that either already includes performance numbers or is small enough that it can be profiled using <span class="code">prof-m: your code or gist URL goes here</span>.</p>
</li></ul> <ul><li><p>Think about the minimum speed increase (or ram reduction or whatever) you need/want. What if it took a month for folk to help you achieve that? A year?</p>
</li></ul> <ul><li><p>Let folk know if your Perl 6 use-case is in a production setting or just for fun.</p>
</li></ul> <a name="t27.2"></a><h1 id="_language_performance.pod6-Solve_problems">27.2 Solve problems</h1>
 <p>This bears repeating: <b>make sure you're not wasting time on the wrong code</b>. Start by identifying the <a href="https://en.wikiquote.org/wiki/Donald_Knuth">"critical 3%"</a> of your code.</p>
 <a name="t27.2.1"></a><h2 id="_language_performance.pod6-Line_by_line">27.2.1 Line by line</h2>
 <p>A quick, fun, productive way to try improve code line-by-line is to collaborate with others using the <a href="#_language_glossary.pod6-IRC">#perl6</a> evalbot <a href="#_language_glossary.pod6-camelia">camelia</a>.</p>
 <a name="t27.2.2"></a><h2 id="_language_performance.pod6-Routine_by_routine">27.2.2 Routine by routine</h2>
 <p>With multidispatch you can drop in new variants of routines "alongside" existing ones:</p>
 <pre class="code"># existing code generically matches a two arg foo call:
multi sub foo(Any $a, Any $b) { ... }

# new variant takes over for a foo("quux", 42) call:
multi sub foo("quux", Int $b) { ... }</pre>
 <p>The call overhead of having multiple <span class="code">foo</span> definitions is generally insignificant (though see discussion of <span class="code">where</span> below), so if your new definition handles its particular case more quickly/leanly than the previously existing set of definitions then you probably just made your code that much faster/leaner for that case.</p>
 <a name="t27.2.3"></a><h2 id="_language_performance.pod6-Speed_up_type-checks_and_call_resolution">27.2.3 Speed up type-checks and call resolution</h2>
 <p>Most <a href="#_type_Signature.pod6-Type_Constraints"> <span class="code">where</span>  clauses</a> -- and thus most <a href="https://design.perl6.org/S12.html#Types_and_Subtypes">subsets</a> -- force dynamic (run-time) type checking and call resolution for any call it <i>might</i> match. This is slower, or at least later, than compile-time.</p>
 <p>Method calls are generally resolved as late as possible, so dynamically, at run-time, whereas sub calls are generally resolvable statically, at compile-time.</p>
 <a name="t27.2.4"></a><h2 id="_language_performance.pod6-Choose_better_algorithms">27.2.4 Choose better algorithms</h2>
 <p>One of the most reliable techniques for making large performance improvements regardless of language or compiler is to pick an algorithm better suited to your needs.</p>
 <p>A classic example is <a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm">Boyer-Moore</a>. To match a small string in a large string, one obvious way to do it is to compare the first character of the two strings and then, if they match, compare the second characters, or, if they don't match, compare the first character of the small string with the second character in the large string, and so on. In contrast, the Boyer-Moore algorithm starts by comparing the *last* character of the small string with the correspondingly positioned character in the large string. For most strings the Boyer-Moore algorithm is close to N times faster algorithmically, where N is the length of the small string.</p>
 <p>The next couple sections discuss two broad categories for algorithmic improvement that are especially easy to accomplish in Perl 6. For more on this general topic, read the wikipedia page on <a href="https://en.wikipedia.org/wiki/Algorithmic_efficiency">algorithmic efficiency</a>, especially the See also section near the end.</p>
 <a name="t27.2.4.1"></a><h3 id="_language_performance.pod6-Change_sequential/blocking_code_to_parallel/non-blocking">27.2.4.1 Change sequential/blocking code to parallel/non-blocking</h3>
 <p>This is another very important class of algorithmic improvement.</p>
 <p>See the slides for <a href="http://jnthn.net/papers/2015-yapcasia-concurrency.pdf#page=17">Parallelism, Concurrency, and Asynchrony in Perl 6</a> and/or <a href="https://www.youtube.com/watch?v=JpqnNCx7wVY&amp;list=PLRuESFRW2Fa77XObvk7-BYVFwobZHdXdK&amp;index=8">the matching video</a>.</p>
 <a name="t27.2.5"></a><h2 id="_language_performance.pod6-Use_existing_high_performance_code">27.2.5 Use existing high performance code</h2>
 <p>Is there an existing high (enough) performance implementation of what you're trying to speed up / slim down?</p>
 <p>There are a lot of C libs out there. <a href="#_language_nativecall.pod6">NativeCall</a> makes it easy to create wrappers for C libs (there's experimental support for C++ libs too) such as <a href="https://github.com/Skarsnik/perl6-gumbo">Gumbo</a>. (Data marshalling and call handling is somewhat poorly optimized at the time of writing this but for many applications that won't matter.)</p>
 <p>Perl 5's compiler can be treated as a C lib. Mix in Perl 6 types, the <a href="#_language_mop.pod6">MOP</a>, and some hairy programming that someone else has done for you, and the upshot is that you can conveniently <a href="http://stackoverflow.com/a/27206428/1077672">use Perl 5 modules in Perl 6</a>.</p>
 <p>More generally, Perl 6 is designed for smooth interop with other languages and there are a number of <a href="https://modules.perl6.org/#q=inline">modules aimed at providing convenient use of libs from other langs</a>.</p>
 <a name="t27.2.6"></a><h2 id="_language_performance.pod6-Make_the_Rakudo_compiler_generate_faster_code">27.2.6 Make the Rakudo compiler generate faster code</h2>
 <p>The focus to date (Feb 2016) regarding the compiler has been correctness, not how fast it generates code or, more importantly, how fast or lean the code it generates runs. But that's expected to change somewhat this year and beyond. You can talk to compiler devs on the freenode IRC channels #perl6 and #moarvm about what to expect. Better still you can contribute yourself:</p>
 <ul><li><p>Rakudo is largely written in Perl 6. So if you can write Perl 6, then you can hack on the compiler, including optimizing any of the large body of existing high-level code that impacts the speed of your code (and everyone else's).</p>
</li></ul> <ul><li><p>Most of the rest of the compiler is written in a small language called <a href="https://github.com/perl6/nqp">NQP</a> that's basically a subset of Perl 6. If you can write Perl 6 you can fairly easily learn to use and improve the mid-level NQP code too, at least from a pure language point of view. To dig in to NQP and Rakudo's guts, start with <a href="http://edumentab.github.io/rakudo-and-nqp-internals-course/">NQP and internals course</a>.</p>
</li></ul> <ul><li><p>If low-level C hacking is your idea of fun, checkout <a href="http://moarvm.org">MoarVM</a> and visit the freenode IRC channel #moarvm (<a href="http://irclog.perlgeek.de/moarvm/">logs</a>).</p>
</li></ul> <a name="t27.2.7"></a><h2 id="_language_performance.pod6-Still_need_more_ideas?">27.2.7 Still need more ideas?</h2>
 <p>There are endless performance topics.</p>
 <p>Some known current Rakudo performance weaknesses not yet covered in this page include use of gather/take, use of junctions, regexes, and string handling in general.</p>
 <p>If you think some topic needs more coverage on this page please submit a PR or tell someone your idea. Thanks. :)</p>
 <a name="t27.3"></a><h1 id="_language_performance.pod6-Not_getting_the_results_you_need/want?">27.3 Not getting the results you need/want?</h1>
 <p>If you've tried everything on this page to no avail, please consider discussing things with a compiler dev on #perl6 so we can learn from your use-case and what you've found out about it so far.</p>
 <p>Once you know one of the main devs knows of your plight, allow enough time for an informed response (a few days or weeks depending on the exact nature of your problem and potential solutions).</p>
 <p>If <i>that</i> hasn't worked out either, please consider filing an issue discussing your experience at <a href="https://github.com/perl6/user-experience/issues">our user experience repo</a> before moving on. Thanks. :)</p>
</div> <!-- /language/phasers.pod6 --><div class="pod-body"><a id="_language_phasers.pod6"></a><a name="t28"><h1 class="title">28 Phasers</h1></a> <p class="subtitle">Program execution phases and corresponding phaser blocks</p> <p>The lifetime (execution timeline) of a program is broken up into phases. A <i>phaser</i> is a block of code called during a specific execution phase.</p>
 <a name="t28.1"></a><h1 id="_language_phasers.pod6-Phasers">28.1 Phasers</h1>
 <p>A phaser block is just a trait of the closure containing it, and is automatically called at the appropriate moment. These auto-called blocks are known as <i>phasers</i>, since they generally mark the transition from one phase of computing to another. For instance, a <span class="code">CHECK</span> block is called at the end of compiling a compilation unit. Other kinds of phasers can be installed as well; these are automatically called at various times as appropriate, and some of them respond to various control exceptions and exit values.</p>
 <p>Here is a summary:</p>
 <pre class="code">BEGIN {...} #  * at compile time, ASAP, only ever runs once
CHECK {...} #  * at compile time, ALAP, only ever runs once
 LINK {...} #  * at link time, ALAP, only ever runs once
 INIT {...} #  * at run time, ASAP, only ever runs once
  END {...} #  at run time, ALAP, only ever runs once

ENTER {...} #  * at every block entry time, repeats on loop blocks.
LEAVE {...} #  at every block exit time (even stack unwinds from exceptions)
 KEEP {...} #  at every successful block exit, part of LEAVE queue
 UNDO {...} #  at every unsuccessful block exit, part of LEAVE queue

FIRST {...} #  * at loop initialization time, before any ENTER
 NEXT {...} #  at loop continuation time, before any LEAVE
 LAST {...} #  at loop termination time, after any LEAVE

  PRE {...} #  assert precondition at every block entry, before ENTER
 POST {...} #  assert postcondition at every block exit, after LEAVE

CATCH {...} #  catch exceptions, before LEAVE</pre>
 <pre class="code">CONTROL {...} #  catch control exceptions, before LEAVE

   LAST {...} #  supply tapped by whenever-block is done, runs very last
   QUIT {...} #  catch async exceptions within a whenever-block, runs very last

COMPOSE {...} #  when a role is composed into a class</pre>
 <p>Phasers marked with a <span class="code">*</span> have a run-time value, and if evaluated earlier than their surrounding expression, they simply save their result for use in the expression later when the rest of the expression is evaluated:</p>
 <pre class="code">my $compiletime = BEGIN { now };
our $temphandle = ENTER { maketemp() };</pre>
 <p>As with other statement prefixes, these value-producing constructs may be placed in front of either a block or a statement:</p>
 <pre class="code">my $compiletime = BEGIN now;
our $temphandle = ENTER maketemp();</pre>
 <p>Most of these phasers will take either a block or a function reference. The statement form can be particularly useful to expose a lexically scoped declaration to the surrounding lexical scope without "trapping" it inside a block.</p>
 <p>These declare the same variables with the same scope as the preceding example, but run the statements as a whole at the indicated time:</p>
 <pre class="code">BEGIN my $compiletime = now;
ENTER our $temphandle = maketemp();</pre>
 <p>(Note, however, that the value of a variable calculated at compile time may not persist under run-time cloning of any surrounding closure.)</p>
 <p>Most of the non-value-producing phasers may also be so used:</p>
 <pre class="code">END say my $accumulator;</pre>
 <p>Note, however, that</p>
 <pre class="code">END say my $accumulator = 0;</pre>
 <p>sets the variable to 0 at <span class="code">END</span> time, since that is when the "my" declaration is actually executed. Only argumentless phasers may use the statement form. This means that <span class="code">CATCH</span> and <span class="code">CONTROL</span> always require a block, since they take an argument that sets <span class="code">$_</span> to the current topic, so that the innards are able to behave as a switch statement. (If bare statements were allowed, the temporary binding of <span class="code">$_</span> would leak out past the end of the <span class="code">CATCH</span> or <span class="code">CONTROL</span>, with unpredictable and quite possibly dire consequences. Exception handlers are supposed to reduce uncertainty, not increase it.)</p>
 <p><span class="indexed"><a id="268" name="will trait"></a></span> Some of these phasers also have corresponding traits that can be set on variables. These have the advantage of passing the variable in question into the closure as its topic:</p>
 <pre class="code">our $h will enter { .rememberit() } will undo { .forgetit() };</pre>
 <p>Only phasers that can occur multiple times within a block are eligible for this per-variable form.</p>
 <p>The topic of the block outside a phaser is still available as <span class="code">OUTER::&lt;$_> </span>. Whether the return value is modifiable may be a policy of the phaser in question. In particular, the return value should not be modified within a <span class="code">POST</span> phaser, but a <span class="code">LEAVE</span> phaser could be more liberal.</p>
 <p>Any phaser defined in the lexical scope of a method is a closure that closes over <span class="code">self</span> as well as normal lexicals. (Or equivalently, an implementation may simply turn all such phasers into submethods whose primed invocant is the current object.)</p>
 <p>When multiple phasers are scheduled to run at the same moment, the general tiebreaking principle is that initializing phasers execute in order declared, while finalizing phasers execute in the opposite order, because setup and teardown usually want to happen in the opposite order from each other.</p>
 <a name="t28.1.1"></a><h2 id="_language_phasers.pod6-Execution_Order">28.1.1 Execution Order</h2>
 <pre class="code">Compilation Begins

  BEGIN {...} #  at compile time, ASAP, only ever runs once
  CHECK {...} #  at compile time, ALAP, only ever runs once
   LINK {...} #  at link time, ALAP, only ever runs once
COMPOSE {...} #  when a role is composed into a class

Execution Begins

   INIT {...} #  at run time, ASAP, only ever runs once

Before block execution begins

    PRE {...} #  assert precondition at every block entry, before ENTER

Loop execution begins

  FIRST {...} #  at loop initialization time, before any ENTER

Block execution begins

  ENTER {...} #  at every block entry time, repeats on loop blocks.

Exception maybe happens

  CATCH {...} #  catch exceptions, before LEAVE
CONTROL {...} #  catch control exceptions, before LEAVE

End of loop, either continuing or finished

   NEXT {...} #  at loop continuation time, before any LEAVE
   LAST {...} #  at loop termination time, after any LEAVE

End of block

  LEAVE {...} #  at every block exit time (even stack unwinds from exceptions)
   KEEP {...} #  at every successful block exit, part of LEAVE queue
   UNDO {...} #  at every unsuccessful block exit, part of LEAVE queue

Postcondition for block

   POST {...} #  assert postcondition at every block exit, after LEAVE

Async whenever-block is complete

   LAST {...} #  if ended normally with done, runs once after block
   QUIT {...} #  catch async exceptions

Program terminating

    END {...} #  at run time, ALAP, only ever runs once</pre>
 <a name="t28.2"></a><h1 id="_language_phasers.pod6-Program_Execution_Phasers">28.2 Program Execution Phasers</h1>
 <a name="t28.2.1"></a><h2 id="_language_phasers.pod6-BEGIN">28.2.1 <a name="271"></a>BEGIN</h2>
 <p>Runs at compile time, as soon as possible, only runs once.</p>
 <p>Can have a return value that is provided even in later phases.</p>
 <a name="t28.2.2"></a><h2 id="_language_phasers.pod6-CHECK">28.2.2 <a name="272"></a>CHECK</h2>
 <p>Runs at compile time, As late as possible, only runs once.</p>
 <p>Can have a return value that is provided even in later phases.</p>
 <p>Code that is generated at run time can still fire off <span class="code">CHECK</span> and <span class="code">INIT</span> phasers, though of course those phasers can't do things that would require travel back in time. You need a wormhole for that.</p>
 <a name="t28.2.3"></a><h2 id="_language_phasers.pod6-LINK">28.2.3 <a name="273"></a>LINK</h2>
 <p>Runs at link time, As late as possible, only runs once.</p>
 <p>Can have a return value that is provided even in later phases.</p>
 <p>The compiler is free to ignore <span class="code">LINK</span> phasers compiled at run time since they're too late for the application-wide linking decisions.</p>
 <a name="t28.2.4"></a><h2 id="_language_phasers.pod6-INIT">28.2.4 <a name="275"></a>INIT</h2>
 <p>Runs after compilation during main execution, as soon as possible, only runs once.</p>
 <p>Can have a return value that is provided even in later phases.</p>
 <p>When phasers are in different modules, the <span class="code">INIT</span> and <span class="code">END</span> phasers are treated as if declared at <span class="code">use</span> time in the using module. (It is erroneous to depend on this order if the module is used more than once, however, since the phasers are only installed the first time they're noticed.)</p>
 <p>Code that is generated at run time can still fire off <span class="code">CHECK</span> and <span class="code">INIT</span> phasers, though of course those phasers can't do things that would require travel back in time. You need a wormhole for that.</p>
 <p>An <span class="code">INIT</span> only runs once for all copies of a cloned closure.</p>
 <a name="t28.2.5"></a><h2 id="_language_phasers.pod6-END">28.2.5 <a name="277"></a>END</h2>
 <p>Runs after compilation during main execution, as late as possible, only runs once.</p>
 <p>When phasers are in different modules, the <span class="code">INIT</span> and <span class="code">END</span> phasers are treated as if declared at <span class="code">use</span> time in the using module. (It is erroneous to depend on this order if the module is used more than once, however, since the phasers are only installed the first time they're noticed.)</p>
 <a name="t28.3"></a><h1 id="_language_phasers.pod6-Block_Phasers">28.3 Block Phasers</h1>
 <p>Execution in the context of a block has its own phases.</p>
 <p>Block-leaving phasers wait until the call stack is actually unwound to run. Unwinding happens only after some exception handler decides to handle the exception that way. That is, just because an exception is thrown past a stack frame does not mean we have officially left the block yet, since the exception might be resumable. In any case, exception handlers are specified to run within the dynamic scope of the failing code, whether or not the exception is resumable. The stack is unwound and the phasers are called only if an exception is not resumed.</p>
 <p>These can occur multiple times within the block. So they aren't really traits, exactly--they add themselves onto a list stored in the actual trait. So if you examine the <span class="code">ENTER</span> trait of a block, you'll find that it's really a list of phasers rather than a single phaser.</p>
 <p>All of these phaser blocks can see any previously declared lexical variables, even if those variables have not been elaborated yet when the closure is invoked (in which case the variables evaluate to an undefined value.)</p>
 <a name="t28.3.1"></a><h2 id="_language_phasers.pod6-ENTER">28.3.1 <a name="278"></a>ENTER</h2>
 <p>Runs at every block entry time, repeats on loop blocks.</p>
 <p>Can have a return value that is provided even in later phases.</p>
 <p>An exception thrown from an <span class="code">ENTER</span> phaser will abort the <span class="code">ENTER</span> queue, but one thrown from a <span class="code">LEAVE</span> phaser will not.</p>
 <a name="t28.3.2"></a><h2 id="_language_phasers.pod6-LEAVE">28.3.2 <a name="280"></a>LEAVE</h2>
 <p>Runs at every block exit time (even stack unwinds from exceptions).</p>
 <p>So <span class="code">LEAVE</span> phasers for a given block are necessarily evaluated after any <span class="code">CATCH</span> and <span class="code">CONTROL</span> phasers. This includes the <span class="code">LEAVE</span> variants, <span class="code">KEEP</span> and <span class="code">UNDO</span>. <span class="code">POST</span> phasers are evaluated after everything else, to guarantee that even <span class="code">LEAVE</span> phasers can't violate postconditions.</p>
 <p>An exception thrown from an <span class="code">ENTER</span> phaser will abort the <span class="code">ENTER</span> queue, but one thrown from a <span class="code">LEAVE</span> phaser will not.</p>
 <p>If a <span class="code">POST</span> fails or any kind of <span class="code">LEAVE</span> block throws an exception while the stack is unwinding, the unwinding continues and collects exceptions to be handled. When the unwinding is completed all new exceptions are thrown from that point.</p>
 <a name="t28.3.3"></a><h2 id="_language_phasers.pod6-KEEP">28.3.3 <a name="283"></a>KEEP</h2>
 <p>Runs at every successful block exit, as part of the LEAVE queue (shares the same order of execution).</p>
 <p>For phasers such as <span class="code">KEEP</span> and <span class="code">POST</span> that are run when exiting a scope normally, the return value (if any) from that scope is available as the current topic within the phaser.</p>
 <a name="t28.3.4"></a><h2 id="_language_phasers.pod6-UNDO">28.3.4 <a name="284"></a>UNDO</h2>
 <p>Runs at every unsuccessful block exit, as part of the LEAVE queue (shares the same order of execution).</p>
 <a name="t28.3.5"></a><h2 id="_language_phasers.pod6-PRE">28.3.5 <a name="286"></a>PRE</h2>
 <p>Asserts a precondition at every block entry. Runs before the ENTER phase.</p>
 <p><span class="code">PRE</span> phasers fire off before any <span class="code">ENTER</span> or <span class="code">FIRST</span>.</p>
 <p>The exceptions thrown by failing <span class="code">PRE</span> and <span class="code">POST</span> phasers cannot be caught by a <span class="code">CATCH</span> in the same block, which implies that <span class="code">POST</span> phaser are not run if a <span class="code">PRE</span> phaser fails.</p>
 <a name="t28.3.6"></a><h2 id="_language_phasers.pod6-POST">28.3.6 <a name="288"></a>POST</h2>
 <p>Asserts a postcondition at every block entry. Runs after the LEAVE phase.</p>
 <p>For phasers such as <span class="code">KEEP</span> and <span class="code">POST</span> that are run when exiting a scope normally, the return value (if any) from that scope is available as the current topic within the phaser.</p>
 <p>The <span class="code">POST</span> block can be defined in one of two ways. Either the corresponding <span class="code">POST</span> is defined as a separate phaser, in which case <span class="code">PRE</span> and <span class="code">POST</span> share no lexical scope. Alternately, any <span class="code">PRE</span> phaser may define its corresponding <span class="code">POST</span> as an embedded phaser block that closes over the lexical scope of the <span class="code">PRE</span>.</p>
 <p>If a <span class="code">POST</span> fails or any kind of <span class="code">LEAVE</span> block throws an exception while the stack is unwinding, the unwinding continues and collects exceptions to be handled. When the unwinding is completed all new exceptions are thrown from that point.</p>
 <p>The exceptions thrown by failing <span class="code">PRE</span> and <span class="code">POST</span> phasers cannot be caught by a <span class="code">CATCH</span> in the same block, which implies that <span class="code">POST</span> phaser are not run if a <span class="code">PRE</span> phaser fails.</p>
 <a name="t28.4"></a><h1 id="_language_phasers.pod6-Loop_Phasers">28.4 Loop Phasers</h1>
 <p><span class="code">FIRST</span>, <span class="code">NEXT</span>, and <span class="code">LAST</span> are meaningful only within the lexical scope of a loop, and may occur only at the top level of such a loop block.</p>
 <a name="t28.4.1"></a><h2 id="_language_phasers.pod6-FIRST">28.4.1 <a name="292"></a>FIRST</h2>
 <p>Runs at loop initialization, before ENTER.</p>
 <p>Can have a return value that is provided even in later phases.</p>
 <a name="t28.4.2"></a><h2 id="_language_phasers.pod6-NEXT">28.4.2 <a name="293"></a>NEXT</h2>
 <p>Runs when loop is continued (either through <span class="code">next</span> or because you got to the bottom of the loop and are looping back around), before LEAVE.</p>
 <p>A <span class="code">NEXT</span> executes only if the end of the loop block is reached normally, or an explicit <span class="code">next</span> is executed. In distinction to <span class="code">LEAVE</span> phasers, a <span class="code">NEXT</span> phaser is not executed if the loop block is exited via any exception other than the control exception thrown by <span class="code">next</span>. In particular, a <span class="code">last</span> bypasses evaluation of <span class="code">NEXT</span> phasers.</p>
 <a name="t28.4.3"></a><h2 id="_language_phasers.pod6-LAST">28.4.3 <a name="295"></a>LAST</h2>
 <p>Runs when loop is aborted (either through <span class="code">last</span>, or <span class="code">return</span>, or because you got to the bottom of the loop and are done), after LEAVE.</p>
 <a name="t28.5"></a><h1 id="_language_phasers.pod6-Exception_Handling_Phasers">28.5 Exception Handling Phasers</h1>
 <a name="t28.5.1"></a><h2 id="_language_phasers.pod6-CATCH">28.5.1 <a name="297"></a>CATCH</h2>
 <p>Runs when an exception is raised by the current block, before the LEAVE phase.</p>
 <a name="t28.5.2"></a><h2 id="_language_phasers.pod6-CONTROL">28.5.2 <a name="299"></a>CONTROL</h2>
 <p>Runs when a control exception is raised by the current block, before the LEAVE phase. It is raised by <span class="code">return</span>, <span class="code">fail</span>, <span class="code">redo</span>, <span class="code">next</span>, <span class="code">last</span>, <span class="code">take</span>, <span class="code">warn</span>, <span class="code">proceed</span> and <span class="code">succeed</span>.</p>
 <a name="t28.6"></a><h1 id="_language_phasers.pod6-Object_Phasers">28.6 Object Phasers</h1>
 <a name="t28.6.1"></a><h2 id="_language_phasers.pod6-COMPOSE">28.6.1 <a name="301"></a>COMPOSE</h2>
 <p>Runs when a role is composed into a class.</p>
 <a name="t28.7"></a><h1 id="_language_phasers.pod6-Asynchronous_Phasers">28.7 Asynchronous Phasers</h1>
 <a name="t28.7.1"></a><h2 id="_language_phasers.pod6-LAST">28.7.1 <a name="303"></a>LAST</h2>
 <p>Runs when a <a href="#_type_Supply.pod6">Supply</a> finishes with a call to <span class="code">done</span> or when a <span class="code">supply</span> block exits normally. It runs completely after the <span class="code">whenever</span> block it is placed within finishes.</p>
 <p>This phaser reuses the name <span class="code">LAST</span>, but works differently from the <span class="code">LAST</span> loop phaser. This phaser is similar to setting the <span class="code">done</span> routine while tapping a supply with <span class="code">tap</span>.</p>
 <a name="t28.7.2"></a><h2 id="_language_phasers.pod6-QUIT">28.7.2 <a name="305"></a>QUIT</h2>
 <p>Runs when a <a href="#_type_Supply.pod6">Supply</a> terminates early with an exception. It runs after the <span class="code">whenever</span> block it is placed within finishes.</p>
 <p>This phaser is similar to setting the <span class="code">quit</span> routine while tapping a Supply with <span class="code">tap</span>.</p>
</div> <!-- /language/quoting.pod6 --><div class="pod-body"><a id="_language_quoting.pod6"></a><a name="t29"><h1 class="title">29 Quoting Constructs</h1></a> <p class="subtitle">Writing strings, word lists, and regexes in Perl 6</p> <a name="t29.1"></a><h1 id="_language_quoting.pod6-The_Q_Lang">29.1 The Q Lang</h1>
 <p>Strings are usually represented in Perl 6 code using some form of quoting construct. The most minimalistic of these is <span class="code">Q</span>, usable via the shortcut <span class="code">｢…｣</span>, or via <span class="code">Q</span> followed by any pair of delimiters surrounding your text. Most of the time, though, the most you'll need is <span class="code">'…'</span> or <span class="code">"…"</span>, described in more detail in the following sections.</p>
 <a name="t29.1.1"></a><h2 id="_language_quoting.pod6-Literal_strings:_Q">29.1.1 <a name="308"></a>Literal strings: Q</h2>
 <pre class="code"> &lt;b&gt;Q[&lt;/b&gt; A literal string &lt;b&gt;]&lt;/b&gt;  
  &lt;b&gt;｢&lt;/b&gt; More plainly. &lt;b&gt;｣&lt;/b&gt;  
  &lt;b&gt;Q ^&lt;/b&gt; Almost any non-word character can be a delimiter! &lt;b&gt;^&lt;/b&gt;  
</pre>
 <p>Delimiters can be nested, but in the plain <span class="code">Q</span> form, backslash escapes aren't allowed. In other words, basic <span class="code">Q</span> strings are as literal as possible.</p>
 <pre class="code">Q&amp;lt;Make sure you  &lt;b&gt;&amp;lt;&lt;/b&gt; match &lt;b&gt;&gt;&lt;/b&gt;  opening and closing delimiters&gt; 
 Q{This is still a closing curly brace →  &lt;b&gt;\&lt;/b&gt; } 
</pre>
 <p>These examples produce:</p>
 <pre class="code">A literal string
More plainly.
Almost any non-word character can be a delimiter!
Make sure you &amp;lt;match&gt; opening and closing delimiters
This is still a closing curly brace → \</pre>
 <p>The other quote forms add to this basic functionality:</p>
 <a name="t29.1.2"></a><h2 id="_language_quoting.pod6-Escaping:_q">29.1.2 <a name="310"></a>Escaping: q</h2>
 <pre class="code"> &lt;b&gt;'&lt;/b&gt; Very plain &lt;b&gt;'&lt;/b&gt;  
  &lt;b&gt;q[&lt;/b&gt; This back &lt;b&gt;\s&lt;/b&gt; lash stays &lt;b&gt;]&lt;/b&gt;  
  &lt;b&gt;q[&lt;/b&gt; This back &lt;b&gt;\\&lt;/b&gt; slash stays &lt;b&gt;]&lt;/b&gt;  # Identical output 
  &lt;b&gt;q{&lt;/b&gt; This is not a closing curly brace →  &lt;b&gt;\}&lt;/b&gt; , but this is →  &lt;b&gt;}&lt;/b&gt;  
  &lt;b&gt;Q :q $&lt;/b&gt; There are no backslashes here, only lots of  &lt;b&gt;\$&lt;/b&gt;  &lt;b&gt;\$&lt;/b&gt;  &lt;b&gt;\$&lt;/b&gt; ! &lt;b&gt;$&lt;/b&gt;  
  &lt;b&gt;'&lt;/b&gt; (Just kidding. There &lt;b&gt;\'&lt;/b&gt; s no money in that string) &lt;b&gt;'&lt;/b&gt;  
  &lt;b&gt;'&lt;/b&gt; No $interpolation {here}! &lt;b&gt;'&lt;/b&gt;  
  &lt;b&gt;Q:q!&lt;/b&gt; Just a literal "\n" here &lt;b&gt;!&lt;/b&gt;  
</pre>
 <p>The <span class="code">q</span> form allows for escaping characters that would otherwise end the string using a backslash. The backslash itself can be escaped, too, as in the third example above. The usual form is <span class="code">'…'</span> or <span class="code">q</span> followed by a delimiter, but it's also available as an adverb on <span class="code">Q</span>, as in the fifth and last example above.</p>
 <p>These examples produce:</p>
 <pre class="code">Very plain
This back\slash stays
This back\slash stays
This is not a closing curly brace → } but this is →
There are no backslashes here, only lots of $$$!
(Just kidding. There's no money in that string)
No $interpolation {here}!
Just a literal "\n" here</pre>
 <a name="t29.1.3"></a><h2 id="_language_quoting.pod6-Interpolation:_qq">29.1.3 <a name="312"></a>Interpolation: qq</h2>
 <pre class="code">my $color = 'blue'; 
  &lt;a href="#_routine_say.pod6"&gt;say&lt;/a&gt;   &lt;b&gt;"&lt;/b&gt; My favorite color is  &lt;b&gt;$color&lt;/b&gt; ! &lt;b&gt;"&lt;/b&gt;  
</pre>
 <pre class="code">My favorite color is blue!</pre>
 <p>The <span class="code">qq</span> form -- usually written using double quotes -- allows for interpolation of variables, i.e., variables can be written within the string so that the content of the variable is inserted into the string. It is also possible to escape variables within a <span class="code">qq</span>-quoted string:</p>
 <pre class="code">say  &lt;b&gt;"&lt;/b&gt; The  &lt;b&gt;\&lt;/b&gt; $color variable contains the value '$color' &lt;b&gt;"&lt;/b&gt; ; 
</pre>
 <pre class="code">The $color variable contains the value 'blue'</pre>
 <p>Another feature of <span class="code">qq</span> is the ability to interpolate Perl 6 code from within the string, using curly braces:</p>
 <pre class="code">my ($x, $y, $z) = 4, 3.5, 3; 
 say "This room is  &lt;b&gt;$x&lt;/b&gt;  m by  &lt;b&gt;$y&lt;/b&gt;  m by  &lt;b&gt;$z&lt;/b&gt;  m."; 
 say "Therefore its volume should be  &lt;b&gt;{ $x * $y * $z }&lt;/b&gt;  m³!"; 
</pre>
 <pre class="code">This room is 4 m by 3.5 m by 3 m.
Therefore its volume should be 42 m³!</pre>
 <p>By default, only variables with the <span class="code">$</span> sigil are interpolated normally. This way, when you write <span class="code">"documentation@perl6.org"</span>, you aren't interpolating the <span class="code">@perl6</span> variable. If that's what you want to do, append a <span class="code">[]</span> to the variable name:</p>
 <pre class="code">my @neighbors = "Felix", "Danielle", "Lucinda"; 
 say "@neighbors &lt;b&gt;[]&lt;/b&gt;  and I try our best to coexist peacefully." 
</pre>
 <pre class="code">Felix Danielle Lucinda and I try our best to coexist peacefully.</pre>
 <p>Often a method call is more appropriate. These are allowed within <span class="code">qq</span> quotes as long as they have parentheses after the call. Thus the following code will work:</p>
 <pre class="code">say "@neighbors &lt;b&gt;. &lt;a href="#_routine_join.pod6"&gt;join&lt;/a&gt; (', ')&lt;/b&gt;  and I try our best to coexist peacefully." 
</pre>
 <pre class="code">Felix, Danielle, Lucinda and I try our best to coexist peacefully.</pre>
 <p>However, <span class="code">"@example.com"</span> produces <span class="code">@example.com</span>.</p>
 <a name="t29.1.4"></a><h2 id="_language_quoting.pod6-Word_quoting:_qw">29.1.4 Word quoting: qw <a name="315"></a><a name="316"></a></h2>
 <pre class="code"> &lt;b&gt;&amp;lt;&lt;/b&gt; a b c &lt;b&gt;&gt;&lt;/b&gt;   &lt;a href="#_routine_eqv.pod6"&gt;eqv&lt;/a&gt;  ('a', 'b', 'c') 
  &lt;b&gt;qw|&lt;/b&gt; ! @ # $ % ^ &amp;amp; * \| &amp;lt; &gt;  &lt;b&gt;|&lt;/b&gt;  eqv '! @ # $ % ^ &amp;amp; * | &amp;lt; &gt;'.words 
  &lt;b&gt;Q:w {&lt;/b&gt;  [ ] \{ \}  &lt;b&gt;}&lt;/b&gt;  eqv ('[', ']', '{', '}') 
</pre>
 <p>The <span class="code">:w</span> form, usually written <span class="code">&lt;…></span> or <span class="code">qw</span>, splits the string into "words". In this context, words are defined as sequences of non-whitespace characters separated by whitespace. The <span class="code">q:w</span> and <span class="code">qw</span> forms inherit the interpolation and escape semantics of the <span class="code">q</span> and single quote string delimiters, whereas <span class="code">Qw</span> and <span class="code">Q:w</span> inherit the non-escaping semantics of the <span class="code">Q</span> quoter.</p>
 <p>This form is used in preference to using many quotation marks and commas for lists of strings. For example, where you could write:</p>
 <pre class="code">my @directions = 'left', 'right,', 'up', 'down';</pre>
 <p>It's easier to write and to read this:</p>
 <pre class="code">my @directions = &amp;lt;left right up down&gt;;</pre>
 <a name="t29.1.5"></a><h2 id="_language_quoting.pod6-Word_quoting_with_quote_protection:_qww">29.1.5 <a name="317"></a>Word quoting with quote protection: qww</h2>
 <p>The <span class="code">qw</span> form of word quoting will treat quote characters literally, leaving them in the resulting words:</p>
 <pre class="code">say qw{"a b" c}.perl; # ("\"a", "b\"", "c")</pre>
 <p>Thus, if you wish to preserve quoted sub-strings as single items in the resulting words you need to use the <span class="code">qww</span> variant:</p>
 <pre class="code">say qww{"a b" c}.perl; # ("a b", "c")</pre>
 <a name="t29.1.6"></a><h2 id="_language_quoting.pod6-Word_quoting_with_interpolation:_qqw">29.1.6 <a name="318"></a>Word quoting with interpolation: qqw</h2>
 <p>The <span class="code">qw</span> form of word quoting doesn't interpolate variables:</p>
 <pre class="code">my $a = 42; say qw{$a b c};  # $a b c</pre>
 <p>Thus, if you wish for variables to be interpolated within the quoted string, you need to use the <span class="code">qqw</span> variant:</p>
 <pre class="code">my $a = 42;
my @list = qqw{$a b c};
say @list;                # 42 b c</pre>
 <p>Note that variable interpolation happens before word splitting:</p>
 <pre class="code">my $a = "a b";
my @list = qqw{$a c};
.say for @list; # says "a", says "b", then says "c"</pre>
 <a name="t29.1.7"></a><h2 id="_language_quoting.pod6-Word_quoting_with_interpolation_and_quote_protection:_qqww">29.1.7 <a name="319"></a>Word quoting with interpolation and quote protection: qqww</h2>
 <p>The <span class="code">qqw</span> form of word quoting will treat quote characters literally, leaving them in the resulting words:</p>
 <pre class="code">my $a = 42; say qqw{"$a b" c}.perl; # ("\"42", "b\"", "c")</pre>
 <p>Thus, if you wish to preserve quoted sub-strings as single items in the resulting words you need to use the <span class="code">qqww</span> variant:</p>
 <pre class="code">my $a = 42; say qqww{"$a b" c}.perl; # ("42 b", "c")</pre>
 <p>or equivalently:</p>
 <pre class="code">my $a = 42; say &amp;lt;&amp;lt;"$a b" c&gt;&gt;.perl; # ("42 b", "c")
my $a = 42; say «"$a b" c».perl; # ("42 b", "c")</pre>
 <p>Quote protection happens before interpolation, and interpolation happens before word splitting, so quotes coming from inside interpolated variables are just literal quote characters:</p>
 <pre class="code">my $a = "1 2";
say qqww{"$a" $a}.perl; # ("1 2", "1", "2")
my $b = "1 \"2 3\"";
say qqww{"$b" $b}.perl; # ("1 \"2 3\"", "1", "\"2", "3\"")</pre>
 <a name="t29.1.8"></a><h2 id="_language_quoting.pod6-Shell_quoting:_qx">29.1.8 <a name="321"></a>Shell quoting: qx</h2>
 <p>To run a string as an external program, not only is it possible to pass the string to the <span class="code">shell</span> or <span class="code">run</span> functions but one can also perform shell quoting in a similar manner to the backticks a.k.a. <span class="code">qx</span> in Perl 5. There are some subtleties to consider, however. The backticks are no longer used for shell quoting in Perl 6 and the <span class="code">qx</span> quotes <i>don't</i> interpolate Perl variables. Thus</p>
 <pre class="code">my $world = "there";
say qx{echo "hello $world"}</pre>
 <p>prints simply <span class="code">hello</span>. Nevertheless, if you have declared an environment variable before calling <span class="code">perl6</span>, this will be available within <span class="code">qx</span>, for instance</p>
 <pre class="code">WORLD="there" perl6
&gt; say qx{echo "hello $WORLD"}</pre>
 <p>will now print <span class="code">hello there</span>.</p>
 <p>The result of calling <span class="code">qx</span> is returned, so this information can be assigned to a variable for later use:</p>
 <pre class="code">my $output = qx{echo "hello!"};
say $output;    # hello!</pre>
 <p>See also <a href="#_routine_shell.pod6">shell</a>, <a href="#_routine_run.pod6">run</a> and <a href="#_type_Proc::Async.pod6">Proc::Async</a> for other ways to execute external commands.</p>
 <a name="t29.1.9"></a><h2 id="_language_quoting.pod6-Shell_quoting_with_interpolation:_qqx">29.1.9 <a name="325"></a>Shell quoting with interpolation: qqx</h2>
 <p>If one wishes to use the content of a Perl variable within an external command, then the <span class="code">qqx</span> shell quoting construct should be used (this corresponds to Perl 5's <span class="code">qx</span>):</p>
 <pre class="code">my $world = "there";
say qqx{echo "hello $world"};  # hello there</pre>
 <p>Again, the output of the external command can be kept in a variable:</p>
 <pre class="code">my $word = "cool";
my $option = "-i";
my $file = "/usr/share/dict/words";
my $output = qqx{grep $option $word $file};
# runs the command: grep -i cool /usr/share/dict/words
say $output;      # Cooley␤Cooley's␤Coolidge␤Coolidge's␤cool␤ ...</pre>
 <p>See also <a href="#_routine_shell.pod6">shell</a> and <a href="#_routine_run.pod6">run</a> for other ways to execute external commands.</p>
 <a name="t29.1.10"></a><h2 id="_language_quoting.pod6-Heredocs:_:to">29.1.10 <a name="327"></a>Heredocs: :to</h2>
 <p>A convenient way to write multi-line string literals are <i>heredocs</i>, which let you choose the delimiter yourself:</p>
 <pre class="code">say q:to/END/; 
 Here is 
 some multi-line 
 string 
 END 
</pre>
 <p>The contents of the heredoc only begin on the next line, so you can (and should) finish the line.</p>
 <pre class="code">my $escaped = my-escaping-function(q:to/TERMINATOR/, language =&gt; 'html'); 
 Here are the contents of the heredoc. 
 Potentially multiple lines. 
 TERMINATOR 
</pre>
 <p>If the terminator is indented, that amount of indention is removed from the string literals. Therefore this heredoc</p>
 <pre class="code">say q:to/END/; 
     Here is 
     some multi line 
         string 
     END 
</pre>
 <p>produces this output:</p>
 <pre class="code">Here is 
 some multi line 
     string 
 
 
</pre>
 <p>Heredocs include the newline from before the terminator.</p>
 <a name="t29.2"></a><h1 id="_language_quoting.pod6-Regexes">29.2 Regexes</h1>
 <p>For information about quoting as applied in regexes see the <a href="#_language_regexes.pod6">regular expression documentation</a>.</p>
</div> <!-- /language/rb-nutshell.pod6 --><div class="pod-body"><a id="_language_rb-nutshell.pod6"></a><a name="t30"><h1 class="title">30 Perl 6 from Ruby - Nutshell</h1></a> <p class="subtitle">Learning Perl 6 from Ruby, in a nutshell: What do I already know?</p> <p>This page attempts to index the high-level differences in syntax and semantics between Ruby and Perl 6. Whatever works in Ruby and must be written differently in Perl 6 should be listed here (whereas many Perl 6 features and idioms won't be).</p>
 <p>Hence this should not be mistaken for a beginner tutorial or overview of Perl 6; it is intended as a technical reference for Perl 6 learners with a strong Ruby background.</p>
 <a name="t30.1"></a><h1 id="_language_rb-nutshell.pod6-Basic_Syntax">30.1 Basic Syntax</h1>
 <a name="t30.1.1"></a><h2 id="_language_rb-nutshell.pod6-Statement_Ending_Semi-Colons">30.1.1 Statement Ending Semi-Colons</h2>
 <p>Ruby detects the end of most statements with a newline (and a few exceptions), as long as the expression is complete. It is common break up a long expression by leaving an operator dangling at the end of a line to ensure that the parsing will continue:</p>
 <pre class="code">foo +     # In Ruby a trailing operator means parsing should continue
  bar +
  baz</pre>
 <p>In Perl 6 you must explicitly terminate statements with a <span class="code">;</span>, which allows for better feedback and more flexibility in breaking up long lines. Two exceptions not needing an explicit <span class="code">;</span> are the last statement in a block, and after the closing curley brace of the block itself (if there is nothing else on that line):</p>
 <pre class="code">if 5 &amp;lt; $x &amp;lt; 10 {
  say "Yep!";
  $x = 17         # No ; required before closing }
}                 # No ; required after closing } because of the newline
say "Done!";      # The ; is not required here if nothing follows</pre>
 <a name="t30.1.2"></a><h2 id="_language_rb-nutshell.pod6-Whitespace">30.1.2 Whitespace</h2>
 <p>Ruby allows a surprising amount of flexibility in the use of whitespace, even with strict mode and warnings turned on:</p>
 <pre class="code"># unidiomatic but valid Ruby
puts"Hello "+
(people [ i]
    . name
    ) . upcase+"!"if$greeted[i]&amp;lt;1</pre>
 <p>Perl 6 also endorses programmer freedom and creativity, but balanced syntactic flexibility against its design goal of having a consistent, deterministic, extensible grammar that supports single-pass parsing and helpful error messages, integrates features like custom operators cleanly, and doesn't lead programmers to accidentally misstate their intent. Also, the practice of "code golf" is slightly de-emphasized; Perl 6 is designed to be more concise in concepts than in keystrokes.</p>
 <p>As a result, there are various places in the syntax where whitespace is optional in Ruby, but is either mandatory or forbidden in Perl 6. Many of those restrictions are unlikely to concern much real-life Perl code (e.g. whitespace being disallowed between an array variable and its square braces), but there are a few that will unfortunately conflict with some Ruby hackers' habitual coding styles:</p>
 <ul><li><p><i>No space allowed before the opening parenthesis of an argument list.</i></p>
 <pre class="code">foo (3, 4, 1); # Not right in Ruby or Perl 6 (in Perl 6 this would
               # try to pass a single argument of type List to foo)
foo(3, 4, 1);  # Ruby and Perl 6
foo 3, 4, 1;   # Ruby and Perl 6 - alternative parentheses-less style</pre>
</li></ul> <ul><li><p><i>Space is  <b>required</b>  immediately after keywords</i></p>
 <pre class="code">if(a &amp;lt; 0); ...; end         # OK in Ruby
if ($a &amp;lt; 0) { ... }         # Perl 6
if $a &amp;lt; 0 { ... }           # Perl 6, more idiomatic

while(x &gt; 5); ...; end      # OK in Ruby
while ($x &gt; 5) { ... }      # Perl 6
while $x &gt; 5 { ... }        # Perl 6, more idiomatic</pre>
</li></ul> <ul><li><p><i>No space allowed before a postfix/postcircumfix operator (including array/hash subscripts).</i></p>
 <pre class="code">seen [ :fish ] = 1    # Ruby, not idiomatic but allowed
%seen&amp;lt; fish &gt; = 1;    # Perl 6, no space allowed after 'seen'</pre>
</li></ul> <ul><li><p><i>Space required before an infix operator if it would conflict with an existing postfix/postcircumfix operator.</i></p>
 <pre class="code">n&amp;lt;1     # Ruby (in Perl 6 this would conflict with postcircumfix &amp;lt; &gt;)
$n &amp;lt; 1; # Perl 6</pre>
</li></ul> <a name="t30.1.3"></a><h2 id="_language_rb-nutshell.pod6-._Method_calls,_.send">30.1.3 <span class="code">.</span> Method calls, <span class="code">.send</span></h2>
 <p>Method call syntax uses a dot just like Ruby:</p>
 <pre class="code">person.name    # Ruby
$person.name   # Perl 6</pre>
 <p>To call a method whose name is not known until runtime:</p>
 <pre class="code">object.send(methodname, args);  # Ruby
$object."$methodname"(@args);   # Perl 6</pre>
 <p>If you leave out the quotes, then Perl 6 expects <span class="code">$methodname</span> to contain a <span class="code">Method</span> object, rather than the simple string name of the method.</p>
 <a name="t30.1.4"></a><h2 id="_language_rb-nutshell.pod6-Variables,_Sigils,_Scope,_and_Common_Types">30.1.4 Variables, Sigils, Scope, and Common Types</h2>
 <p>In Ruby, variables use sigils primarily to indicate scope. <span class="code">$</span> for global scope, <span class="code">@@</span> for class scope, <span class="code">@</span> for instance scope, and no sigil for local variables (including parameters). The <span class="code">&amp;</span> sigil is also used to indicate method references. Symbols are prefixed with <span class="code">:</span>, but they are not variable and so not really sigils.</p>
 <p>In Perl 6 sigils are primarily used to indicate a role that the contained value implements, indicating the type (or at least the interface) of the value. The sigils are invariant, no matter how the variable is being used - you can think of them as part of the variable's name.</p>
 <p>The scope of a variable is instead indicated by the declaration itself (<span class="code">my</span>, <span class="code">has</span>, <span class="code">our</span>, etc).</p>
 <a name="t30.1.4.1"></a><h3 id="_language_rb-nutshell.pod6-Variable_Scope">30.1.4.1 Variable Scope</h3>
 <p>For local variables, Ruby uses implicit variable declaration upon assignment and limited to the current block. In Ruby the content of an <span class="code">if</span> or <span class="code">while</span> built-in construct is not a block or scope.</p>
 <p>Perl 6 uses explicit scope indicators, and never creates variables implicitly. Every place you see <span class="code">{ ... }</span> is a scope, including the body of a conditional or loop. The commonly used scope declarations:</p>
 <pre class="code">foo = 7        # Ruby, variable scope is defined by first assignment and
               # extends to the end of the current block

my  $foo = 7   # Perl 6, lexical scoped to the current block
our $foo = 7   # Perl 6, package scoped
has $!foo = 7  # Perl 6, instance scoped (attribute)</pre>
 <a name="t30.1.4.2"></a><h3 id="_language_rb-nutshell.pod6-$_Scalar">30.1.4.2 <span class="code">$</span> Scalar</h3>
 <p>The <span class="code">$</span> sigil is always used with "scalar" variables (e.g. <span class="code">$name</span>). These are single-value containers.</p>
 <p>This is the most general-purpose variable type, with no restrictions on its contents. Note that you can still address/use its contents, like <span class="code">$x[1]</span>, <span class="code">$x{"foo"}</span>, and <span class="code">$f("foo")</span>.</p>
 <a name="t30.1.4.3"></a><h3 id="_language_rb-nutshell.pod6-@_Array">30.1.4.3 <span class="code">@</span> Array</h3>
 <p>The <span class="code">@</span> sigil is always used with "array" variables (e.g. <span class="code">@months</span>, <span class="code">@months[2]</span>, <span class="code">@months[2, 4]</span> for an array slice). Variables using the <span class="code">@</span> sigil can only contain things that do the <span class="code">Positional</span> role, indicating positional indexing and slicing capabilities.</p>
 <ul><li><p><i>Indexing</i></p>
 <pre class="code">puts months[2]; # Ruby
say @months[2]; # Perl 6</pre>
</li></ul> <ul><li><p><i>Value-slicing</i></p>
 <pre class="code">puts months[8..11].join(',') # Ruby
say @months[8..11].join(',') # Perl 6</pre>
</li></ul> <a name="t30.1.4.4"></a><h3 id="_language_rb-nutshell.pod6-%_Hash">30.1.4.4 <span class="code">%</span> Hash</h3>
 <p>The <span class="code">%</span> sigil is always used with "hash" variables (e.g. <span class="code">%calories</span>, <span class="code">%calories&lt;apple></span>, <span class="code">%calories&lt;pear plum></span>). Variables using the <span class="code">%</span> sigil can only contain things that do the <span class="code">Associative</span> role.</p>
 <p>Ruby uses square brackets to access values for both Arrays and Hashes. Perl 6 uses curley braces for hashes instead. The angle-brackets version is available which always autoquotes its contents (strings without quotes):</p>
 <p>Adverbs can be used to control the type of slice.</p>
 <ul><li><p><i>Indexing</i></p>
 <pre class="code">puts calories["apple"]  # Ruby
say %calories{"apple"}; # Perl 6

puts calories["apple"]  # Ruby
puts calories[:apple]   # Ruby, symbols for keys are common
say %calories&amp;lt;apple&gt;;   # Perl 6 - angle brackets instead of single-quotes
say %calories«$key»;    # Perl 6 - double angles interpolate as double-quotes</pre>
</li></ul> <ul><li><p><i>Value-slicing</i></p>
 <pre class="code">puts calories.values_at('pear', 'plum').join(',') # Ruby
puts calories.values_at(%w(pear plum)).join(',')  # Ruby, pretty?
say %calories{'pear', 'plum'}.join(',');          # Perl 6
say %calories&amp;lt;pear plum&gt;.join(',');               # Perl 6 (prettier)
my $keys = 'pear plum';
say %calories«$keys».join(','); # Perl 6, interpolated split</pre>
</li></ul> <ul><li><p><i>Key/value-slicing</i></p>
 <pre class="code">say calories.slice('pear', 'plum').join(','); # Ruby, with ActiveRecord
say %calories{'pear', 'plum'}:kv.join(',');   # Perl 6 - use :kv adverb
say %calories&amp;lt;pear plum&gt;:kv.join(',');        # Perl 6 (prettier version)</pre>
</li></ul> <a name="t30.1.4.5"></a><h3 id="_language_rb-nutshell.pod6-&amp;_Sub">30.1.4.5 <span class="code">&amp;</span> Sub</h3>
 <p>The <span class="code">&amp;</span> sigil is used very similarly to Ruby's <span class="code">&amp;</span> to refer to the function object of a named subroutine/operator without invoking it, i.e. to use the name as a "noun" instead of a "verb". Variables using the <span class="code">&amp;</span> sigil can only contain things that do the <span class="code">Callable</span> role.</p>
 <pre class="code">add = -&gt; n, m { n + m } # Ruby lambda for an addition function
add.(2, 3)              # =&gt; 5, Ruby invocation of a lambda
add.call(2, 3)          # =&gt; 5, Ruby invocation of a lambda

my &amp;amp;add = -&gt; $n, $m { $n + $m } # Perl 6 addition function
&amp;amp;add(2, 3)                      # =&gt; 5, you can keep the sigil
add(2, 3)                       # =&gt; 5, and it works without it

foo_method = &amp;amp;foo;     # Ruby
my &amp;amp;foo_method = &amp;amp;foo; # Perl 6

some_func(&amp;amp;say) # Ruby pass a function reference
some_func(&amp;amp;say) # Perl 6 passes function references the same way</pre>
 <p>Often in Ruby we pass a block as the last parameter, which is especially used for DSLs. This can be an implicit parameter called by <span class="code">yield</span>, or an explicit block prefixed with <span class="code">&amp;</span>. In Perl 6 a <span class="code">Callable</span> parameter is always listed and called by the variable name (instead of yield), and there are a variety of ways of invoking the function.</p>
 <pre class="code"># Ruby, declare a method and call the implicit block argument
def f
  yield 2
end

# Ruby, invoke f, pass it a block with 1 argument
f do |n|
  puts "Hi #{n}"
end

# Perl 6, declare a method with an explicit block argument
sub f(&amp;amp;g:($)) {
  g(2)
}

# Perl 6, invoke f, pass it a block with 1 argument
# There are several other ways to do this
f(-&gt; $n { say "Hi {$n}" }) # Explicit argument
f -&gt; $n { say "Hi {$n}" }  # Explicit argument, no parenthesis
f { say "Hi {$^n}" }       # Implicit argument

# Additionally, if 'f' is a method on instance 'obj' you can use C&amp;lt;:&gt;
# instead of parenthesis
obj.f(-&gt; $n { say "Hi {$n}" })  # Explicit argument
obj.f: -&gt; $n { say "Hi {$n}" }  # Explicit argument, no parenthesis
obj.f: { say "Hi {$^n}" }       # Implicit argument, no parenthesis</pre>
 <a name="t30.1.4.6"></a><h3 id="_language_rb-nutshell.pod6-*_Slurpy_params_/_argument_expansion">30.1.4.6 <span class="code">*</span> Slurpy params / argument expansion</h3>
 <p>In Ruby you can declare an argument to slurp the remainder of the passed parameters into an array using a <span class="code">*</span> prefix. It works the same way in Perl 6:</p>
 <pre class="code">def foo(*args); puts "I got #{args.length} args!"; end # Ruby
sub foo(*@args) { say "I got #{@args.elems} args!" }   # Perl 6</pre>
 <p>You might want to expand an array into a set of arguments. In Perl 6 this is also done using the <span class="code">*</span> prefix:</p>
 <pre class="code">args = %w(a b c)         # Ruby
foo(*args)

my @args = &amp;lt;a b c&gt;       # Perl 6
foo(*@args)</pre>
 <p>Perl 6 has many more advanced ways of passing parameters and receiving arguments, see <a href="#_language_functions.pod6-Signatures">Signatures</a> and <a href="#_type_Capture.pod6">Captures</a>.</p>
 <a name="t30.1.5"></a><h2 id="_language_rb-nutshell.pod6-Twigils">30.1.5 Twigils</h2>
 <p>Perl 6 additionally uses "twigils", which are further indicators about the variable and go between the sigil and the rest of the variable name. Examples:</p>
 <pre class="code">$foo     # Scalar with no twigil
$!foo    # Private instance variable
$.foo    # Instance variable accessor
$*foo    # Dynamically scoped variable
$^foo    # A positional (placeholder) parameter to a block
$:foo    # A named parameter
$=foo    # POD (documentation) variables
$?FILE   # Current source filename. The ? twigil indicates a compile-time value
$~foo    # Sublanguage seen by parser, uncommon</pre>
 <p>Though each of these examples use the <span class="code">$</span> sigil, most could use <span class="code">@</span> (Positional) or <span class="code">%</span> (Associative).</p>
 <a name="t30.1.6"></a><h2 id="_language_rb-nutshell.pod6-:_Symbols">30.1.6 <span class="code">:</span> Symbols</h2>
 <p>Perl 6 generally uses strings in the places where Ruby uses symbols. A primary example of this is in hash keys.</p>
 <pre class="code">address[:joe][:street] # Typical Ruby nested hash with symbol keys
%address&amp;lt;joe&gt;&amp;lt;street&gt;  # Typical Perl 6 nested hash with string keys</pre>
 <p>Perl 6 has <i>colon-pair</i> syntax, which can sometimes look like Ruby symbols.</p>
 <pre class="code">:age            # Ruby symbol

# All of these are equivalent for Perl 6
:age            # Perl 6 pair with implicit True value
:age(True)      # Perl 6 pair with explicit True value
age =&gt; True     # Perl 6 pair using arrow notation
"age" =&gt; True   # Perl 6 pair using arrow notation and explicit quotes</pre>
 <p>You could probably get away with using a colon-pair without an explicit value and pretend that it is a Ruby symbol a lot of the time, but it isn't idomatic Perl 6.</p>
 <a name="t30.2"></a><h1 id="_language_rb-nutshell.pod6-Operators">30.2 Operators</h1>
 <p>Many operators have a similar usage in both Ruby and Perl 6:</p>
 <ul><li><p><span class="code">,</span> List Separator</p>
</li></ul> <ul><li><p><span class="code">+</span> Numeric Addition</p>
</li></ul> <ul><li><p><span class="code">-</span> Numeric Subtraction</p>
</li></ul> <ul><li><p><span class="code">*</span> Numeric Multiplication</p>
</li></ul> <ul><li><p><span class="code">/</span> Numeric Division</p>
</li></ul> <ul><li><p><span class="code">%</span> Numeric Modulus</p>
</li></ul> <ul><li><p><span class="code">**</span> Numeric Exponentiation</p>
</li></ul> <ul><li><p><span class="code">! &amp;&amp; ||</span> Booleans, high-precedence</p>
</li></ul> <ul><li><p><span class="code">not and or</span> Booleans, low-precedence</p>
</li></ul> <p>You may use <span class="code">$x++</span> instead of <span class="code">x += 1</span> as a shortcut for incrementing a variable. This can be used as a pre-increment <span class="code">++$x</span> (increment, return new value) or post-increment <span class="code">$x++</span> (increment, return old value).</p>
 <p>You may use <span class="code">$x--</span> instead of <span class="code">x -= 1</span> as a shortcut for decrementing a variable. This can be used as a pre-decrement <span class="code">--$x</span> (decrement, return new value) or post-decrement <span class="code">$x--</span> (decrement, return old value).</p>
 <a name="t30.2.1"></a><h2 id="_language_rb-nutshell.pod6-==_!=_&lt;_>_&lt;=_>=_Comparisons">30.2.1 <span class="code">== != &lt; > &lt;= >=</span> Comparisons</h2>
 <p>Comparisons in Perl 6 are separated between numeric and string to avoid common errors.</p>
 <ul><li><p><span class="code">== != &lt; > &lt;= >=</span> Comparisons</p>
</li></ul> <ul><li><p><span class="code">eq ne lt gt le ge</span> String comparisons</p>
</li></ul> <p>For example, using <span class="code">==</span> tries to convert the values to numbers, and <span class="code">eq</span> tries to convert the values to strings.</p>
 <a name="t30.2.2"></a><h2 id="_language_rb-nutshell.pod6-&lt;=>_Three-way_comparisons">30.2.2 <span class="code">&lt;=></span> Three-way comparisons</h2>
 <p>In Ruby, the <span class="code">&lt;=></span> operator returns -1, 0, or 1. In Perl 6, they return <span class="code">Order::Less</span>, <span class="code">Order::Same</span>, or <span class="code">Order::More</span>.</p>
 <p><span class="code">&lt;=></span> forces numeric context for the comparison.</p>
 <p><span class="code">leg</span> ("Less, Equal, or Greater?") forces string context for the comparison.</p>
 <p><span class="code">cmp</span> does either <span class="code">&lt;=></span> or <span class="code">leg</span>, depending on the existing type of its arguments.</p>
 <a name="t30.2.3"></a><h2 id="_language_rb-nutshell.pod6-~~_Smart-match_operator">30.2.3 <span class="code">~~</span> Smart-match operator</h2>
 <p>This is a very common matching operator which doesn't exist in Ruby. Here are some examples:</p>
 <pre class="code">say "match!" if $foo ~~ /bar/;      # Regex match
say "match!" if $foo ~~ "bar";      # String match
say "match!" if $foo ~~ :(Int, Str) # Signature match (destructure)</pre>
 <p>See <a href="https://design.perl6.org/S03.html#Smart_matching">S03/Smart matching</a></p>
 <a name="t30.2.4"></a><h2 id="_language_rb-nutshell.pod6-&amp;_|_^_Numeric_Bitwise_ops">30.2.4 <span class="code">&amp; | ^</span> Numeric Bitwise ops</h2>
 <a name="t30.2.5"></a><h2 id="_language_rb-nutshell.pod6-&amp;_|_^_Boolean_ops">30.2.5 <span class="code">&amp; | ^</span> Boolean ops</h2>
 <p>In Perl 6, these single-character ops have been removed, and replaced by two-character ops which coerce their arguments to the needed context.</p>
 <pre class="code"># Infix ops (two arguments; one on each side of the op)
+&amp;amp;  +|  +^  And Or Xor: Numeric
~&amp;amp;  ~|  ~^  And Or Xor: String
?&amp;amp;  ?|  ?^  And Or Xor: Boolean

# Prefix ops (one argument, after the op)
+^  Not: Numeric
~^  Not: String
?^  Not: Boolean (same as the ! op)</pre>
 <a name="t30.2.6"></a><h2 id="_language_rb-nutshell.pod6-&amp;._Conditional_chaining_operator">30.2.6 <span class="code">&amp;.</span> Conditional chaining operator</h2>
 <p>Ruby uses the <span class="code">&amp;.</span> operator to chain methods without raising an error if one invocation returns nil. In Perl 6 use <span class="code">.?</span> for the same purpose.</p>
 <a name="t30.2.7"></a><h2 id="_language_rb-nutshell.pod6-&lt;&lt;_>>_Numeric_shift_left,_right_ops,_shovel_operator">30.2.7 <span class="code">&lt;&lt; >></span> Numeric shift left, right ops, shovel operator</h2>
 <p>Replaced by <span class="code">+&lt;</span> and <span class="code">+></span> .</p>
 <pre class="code">puts 42 &amp;lt;&amp;lt; 3  # Ruby
say  42 +&amp;lt; 3; # Perl 6</pre>
 <p>Note that Ruby often uses the <span class="code">&lt;&lt;</span> operator as the "shovel operator", which is similar to <span class="code">.push</span>. This usage isn't common in Perl 6.</p>
 <a name="t30.2.8"></a><h2 id="_language_rb-nutshell.pod6-=>_and_:_Key-Value_Separators">30.2.8 <span class="code">=></span> and <span class="code">:</span> Key-Value Separators</h2>
 <p>In Ruby, <span class="code">=></span> is used in the context of key/value pairs for Hash literal declaration and parameter passing. <span class="code">:</span> is used as a shorthand when the left side is a symbol.</p>
 <p>In Perl 6, <span class="code">=></span> is the Pair operator, which is quite different in principle, but works the same in many situations.</p>
 <p>If you are using <span class="code">=></span> in a hash literal, then the usage is very similar:</p>
 <pre class="code">hash = { "AAA" =&gt; 1, "BBB" =&gt; 2 }  # Ruby, though symbol keys are more common
my %hash = ( AAA =&gt; 1, BBB =&gt; 2 ); # Perl 6, uses ()'s though {} usually work</pre>
 <a name="t30.2.9"></a><h2 id="_language_rb-nutshell.pod6-?_:_Ternary_operator">30.2.9 <span class="code">? :</span> Ternary operator</h2>
 <p>In Perl 6, this is spelled with two question marks instead of one question mark, and two exclamation points instead of one colon. This deviation from the common ternary operators disambiguates several situations and makes the false-case stand out more.</p>
 <pre class="code">result     = (  score &gt; 60 )  ? 'Pass'  : 'Fail'; # Ruby
my $result = ( $score &gt; 60 ) ?? 'Pass' !! 'Fail'; # Perl 6</pre>
 <a name="t30.2.10"></a><h2 id="_language_rb-nutshell.pod6-+_String_Concatenation">30.2.10 <span class="code">+</span> String Concatenation</h2>
 <p>Replaced by the tilde. Mnemonic: think of "stitching" together the two strings with needle and thread.</p>
 <pre class="code">$food = 'grape' + 'fruit'  # Ruby
$food = 'grape' ~ 'fruit'; # Perl 6</pre>
 <a name="t30.2.11"></a><h2 id="_language_rb-nutshell.pod6-String_interpolation">30.2.11 String interpolation</h2>
 <p>In Ruby, <span class="code">"#{foo}s"</span> deliminates a block embedded in a double-quoted string. In Perl 6 drop the <span class="code">#</span> prefix: <span class="code">"{$foo}s"</span>. As in Ruby, you can place arbitrary code into the embedded block and it will be rendered in string context.</p>
 <p>Simple variables can be interpolated into a double-quoted string without using the block syntax:</p>
 <pre class="code"># Ruby
name = "Bob"
puts "Hello! My name is #{name}!"

# Perl 6
my $name = "Bob"
say "Hello! My name is $name!"</pre>
 <p>The result of an embedded block in Ruby uses <span class="code">.to_s</span> to get string context. Perl 6 uses <span class="code">.Str</span>, or <span class="code">.gist</span> for the same affect.</p>
 <a name="t30.3"></a><h1 id="_language_rb-nutshell.pod6-Compound_Statements">30.3 Compound Statements</h1>
 <a name="t30.3.1"></a><h2 id="_language_rb-nutshell.pod6-Conditionals">30.3.1 Conditionals</h2>
 <a name="t30.3.1.1"></a><h3 id="_language_rb-nutshell.pod6-if_elsif_else_unless">30.3.1.1 <span class="code">if</span> <span class="code">elsif</span> <span class="code">else</span> <span class="code">unless</span></h3>
 <p>This work very similarly between Ruby and Perl 6, but Perl 6 uses <span class="code">{ }</span> to clearly deliniate the blocks.</p>
 <pre class="code"># Ruby
if x &gt; 5
    puts "Bigger!"
elsif x == 5
    puts "The same!"
else
    puts "Smaller!"
end

# Perl 6
if x &gt; 5 {
    say "Bigger!"
} elsif x == 5 {
    puts "The same!"
} else {
    puts "Smaller!"
}</pre>
 <p>Binding the conditional expression to a variable is a little different:</p>
 <pre class="code">if x = dostuff(); ...; end   # Ruby
if dostuff() -&gt; $x {...}     # Perl 6, block-assignment uses arrow</pre>
 <p>The <span class="code">unless</span> conditional only allows for a single block in Perl 6; it does not allow for an <span class="code">elsif</span> or <span class="code">else</span> clause.</p>
 <a name="t30.3.1.2"></a><h3 id="_language_rb-nutshell.pod6-case-when">30.3.1.2 <span class="code">case</span>-<span class="code">when</span></h3>
 <p>The Perl 6 <span class="code">given</span>-<span class="code">when</span> construct is like a chain of <span class="code">if</span>-<span class="code">elsif</span>-<span class="code">else</span> statements or like the <span class="code">case</span>-<span class="code">when</span> construct in Ruby. A big difference is that Ruby uses the <span class="code">==</span> comparison for each condition, but Perl 6 uses the more general smart-match <span class="code">~~</span> operator.</p>
 <p>It has the general structure:</p>
 <pre class="code">given EXPR {
    when EXPR { ... }
    when EXPR { ... }
    default { ... }
}</pre>
 <p>In its simplest form, the construct is as follows:</p>
 <pre class="code">given $value {
    when "a match" {
        do-something();
    }
    when "another match" {
        do-something-else();
    }
    default {
        do-default-thing();
    }
}</pre>
 <p>This is simple in the sense that a scalar value is matched in the <span class="code">when</span> statements. More generally, the matches are actually smart-matches on the input value such that lookups using more complex entities such as regexps can be used instead of scalar values.</p>
 <a name="t30.3.2"></a><h2 id="_language_rb-nutshell.pod6-Loops">30.3.2 Loops</h2>
 <a name="t30.3.2.1"></a><h3 id="_language_rb-nutshell.pod6-while_until">30.3.2.1 <span class="code">while</span> <span class="code">until</span></h3>
 <p>Mostly unchanged; parens around the conditions are optional, but if used, must not immediately follow the keyword, or it will be taken as a function call instead. Binding the conditional expression to a variable is also a little different:</p>
 <pre class="code">while x = dostuff(); ...; end    # Ruby
while dostuff() -&gt; $x {...}      # Perl 6</pre>
 <a name="t30.3.2.2"></a><h3 id="_language_rb-nutshell.pod6-for_.each">30.3.2.2 <span class="code">for</span> <span class="code">.each</span></h3>
 <p><span class="code">for</span> loops are rare in Ruby, instead we typically use <span class="code">.each</span> on an enumerable. The most direct translation to Perl 6 would be to use <span class="code">.map</span> for both <span class="code">.each</span> and <span class="code">.map</span>, but we typically use a <span class="code">for</span> loop directly.</p>
 <pre class="code"># Ruby for loop
for n in 0..5
    puts "n: #{n}"
end

# Ruby, more common usage of .each
(0..5).each do |n|
    puts "n: #{n}"
end

# Perl 6
for 0..5 -&gt; $n {
    say "n: $n";
}

# Perl 6, mis-using .map
(0..5).map: -&gt; $n {
    say "n: $n";
}</pre>
 <p>In Ruby, the iteration variable for <span class="code">.each</span> is a copy of the list element, and modifying it does nothing to the original list. Note that it is a copy of the REFERENCE, so you can still change the values to which it refers.</p>
 <p>In Perl 6, that alias is read-only (for safety) and thus behaves exactly like Ruby, unless you change <span class="code">-></span> to <span class="code">&lt;-></span>.</p>
 <pre class="code">cars.each { |car| ... }    # Ruby; read-only referenc
for @cars  -&gt; $car   {...} # Perl 6; read-only
for @cars &amp;lt;-&gt; $car   {...} # Perl 6; read-write</pre>
 <a name="t30.3.3"></a><h2 id="_language_rb-nutshell.pod6-Flow_Interruption_statements">30.3.3 Flow Interruption statements</h2>
 <p>Same as Ruby:</p>
 <ul><li><p><span class="code">next</span></p>
</li></ul> <ul><li><p><span class="code">redo</span></p>
</li></ul> <ul><li><ul><li><p><span class="code">break</span></p>
</li></ul></li></ul> <p>This is <span class="code">last</span> in Perl 6.</p>
 <a name="t30.4"></a><h1 id="_language_rb-nutshell.pod6-Regular_Expressions_(_Regex_/_Regexp_)">30.4 Regular Expressions ( Regex / Regexp )</h1>
 <p>Regular expressions in Perl 6 are significantly different, and more powerful, than in Ruby. By default whitespace is ignored and all characters must be escaped, for example. Regexes can be easily combined and declared in ways to build efficient grammars.</p>
 <p>There are many powerful features of Perl 6 regexes, especially defining entire grammars using the same syntax. See <a href="#_language_regexes.pod6">Regexes</a> and <a href="#_language_grammars.pod6">Grammars</a>.</p>
 <a name="t30.4.1"></a><h2 id="_language_rb-nutshell.pod6-.match_method_and_=~_operator">30.4.1 <span class="code">.match</span> method and <span class="code">=~</span> operator</h2>
 <p>In Ruby, regex matches can be done against a variable using the <span class="code">=~</span> regexp match operator or the <span class="code">.match</span> method. In Perl 6, the <span class="code">~~</span> smartmatch op is used instead, or the <span class="code">.match</span> method.</p>
 <pre class="code">next if line   =~ /static/   # Ruby
next if $line  ~~ /static/;  # Perl 6

next if line  !~  /dynamic/ ; # Ruby
next if $line !~~ /dynamic/ ; # Perl 6

next if line.match(/static/)    # Ruby
next if $line.match(/static/);  # Perl 6</pre>
 <p>Alternately, the <span class="code">.match</span> and <span class="code">.subst</span> methods can be used. Note that <span class="code">.subst</span> is non-mutating. See <a href="https://design.perl6.org/S05.html#Substitution">S05/Substitution</a>.</p>
 <a name="t30.4.2"></a><h2 id="_language_rb-nutshell.pod6-.sub_and_.sub!">30.4.2 <span class="code">.sub</span> and <span class="code">.sub!</span></h2>
 <p>In Perl 6 you typically use the <span class="code">s///</span> operator to do regex substitution.</p>
 <pre class="code">fixed = line.sub(/foo/, 'bar')        # Ruby, non-mutating
my $fixed = $line.subst(/foo/, 'bar') # Perl 6, non-mutating

line.sub!(/foo/, 'bar')   # Ruby, mutating
$line ~~ s/foo/bar/;      # Perl 6, mutating</pre>
 <a name="t30.4.3"></a><h2 id="_language_rb-nutshell.pod6-Regex_options">30.4.3 Regex options</h2>
 <p>Move any options from the end of the regex to the beginning. This may require you to add the optional <span class="code">m</span> on a plain match like <span class="code">/abc/</span>.</p>
 <pre class="code">next if $line =~    /static/i # Ruby
next if $line ~~ m:i/static/; # Perl 6</pre>
 <a name="t30.4.4"></a><h2 id="_language_rb-nutshell.pod6-Whitespace_is_ignored,_most_things_must_be_quoted">30.4.4 Whitespace is ignored, most things must be quoted</h2>
 <p>In order to aid in readability and reusability, whitespace is not significant in Perl 6 regexes.</p>
 <pre class="code">/this is a test/ # Ruby, boring string
/this.*/         # Ruby, possibly interesting string

/ this " " is " " a " " test / # Perl 6, each space is quoted
/ "this is a test" / # Perl 6, quoting the whole string
/ this .* /          # Perl 6, possibly interesting string</pre>
 <a name="t30.4.5"></a><h2 id="_language_rb-nutshell.pod6-Special_matchers_generally_fall_under_the_&lt;>_syntax">30.4.5 Special matchers generally fall under the &lt;> syntax</h2>
 <p>There are many cases of special matching syntax that Perl 6 regexes support. They won't all be listed here, but often instead of being surrounded by <span class="code">()</span>, the assertions will be surrounded by <span class="code">&lt;></span>.</p>
 <p>For character classes, this means that:</p>
 <ul><li><p><span class="code">[abc]</span> becomes <span class="code">&lt;[abc]></span></p>
</li></ul> <ul><li><p><span class="code">[^abc]</span> becomes <span class="code">&lt;-[abc]></span></p>
</li></ul> <ul><li><p><span class="code">[a-zA-Z]</span> becomes <span class="code">&lt;[a..zA..Z]></span></p>
</li></ul> <ul><li><p><span class="code">[[:upper:]]</span> becomes <span class="code">&lt;:upper></span></p>
</li></ul> <ul><li><p><span class="code">[abc[:upper:]]</span> becomes <span class="code">&lt;[abc]+:Upper></span></p>
</li></ul> <p>For look-around assertions:</p>
 <ul><li><p><span class="code">(?=[abc])</span> becomes <span class="code">&lt;?[abc]></span></p>
</li></ul> <ul><li><p><span class="code">(?=ar?bitrary* pattern)</span> becomes <span class="code">&lt;before ar?bitrary* pattern></span></p>
</li></ul> <ul><li><p><span class="code">(?!=[abc])</span> becomes <span class="code">&lt;![abc]></span></p>
</li></ul> <ul><li><p><span class="code">(?!=ar?bitrary* pattern)</span> becomes <span class="code">&lt;!before ar?bitrary* pattern></span></p>
</li></ul> <ul><li><p><span class="code">(?&lt;=ar?bitrary* pattern)</span> becomes <span class="code">&lt;after ar?bitrary* pattern></span></p>
</li></ul> <ul><li><p><span class="code">(?&lt;!ar?bitrary* pattern)</span> becomes <span class="code">&lt;!after ar?bitrary* pattern></span></p>
</li></ul> <p>(Unrelated to &lt;> syntax, the "lookaround" <span class="code">/foo\Kbar/</span> becomes <span class="code">/foo &lt;( bar )> /</span></p>
 <ul><li><p><span class="code">(?(?{condition))yes-pattern|no-pattern)</span> becomes <span class="code">[ &lt;?{condition}> yes-pattern | no-pattern ]</span></p>
</li></ul> <a name="t30.4.6"></a><h2 id="_language_rb-nutshell.pod6-Longest_token_matching_(LTM)_displaces_alternation">30.4.6 Longest token matching (LTM) displaces alternation</h2>
 <p>In Perl 6 regexen, <span class="code">|</span> does Longest Token Match (LTM), which decides which alternation wins an ambiguous match based off of a set of rules, rather than about which was written first in the regex.</p>
 <p>To avoid the new logic, change any <span class="code">|</span> in your Ruby regex to a <span class="code">||</span>.</p>
 <a name="t30.5"></a><h1 id="_language_rb-nutshell.pod6-File-related_operations">30.5 File-related operations</h1>
 <a name="t30.5.1"></a><h2 id="_language_rb-nutshell.pod6-Reading_the_lines_of_a_text_file_into_an_array">30.5.1 Reading the lines of a text file into an array</h2>
 <p>Both Ruby and Perl 6 make it easy to read all of the lines in a file into a single variable, and in both cases each line has the newline removed.</p>
 <pre class="code">lines = File.readlines("file")   # Ruby
my @lines = "file".IO.lines;     # Perl 6, create an IO object from a string</pre>
 <a name="t30.5.2"></a><h2 id="_language_rb-nutshell.pod6-Iterating_over_the_lines_of_a_text_file">30.5.2 Iterating over the lines of a text file</h2>
 <p>Reading the entire file into memory isn't recommended. The <span class="code">.lines</span> method in Perl 6 returns a lazy sequence, but assigning to an array forces the file to be read. It is better to iterate over the results:</p>
 <pre class="code"># Ruby
File.foreach("file") do |line|
    puts line
end

# Perl 6
for "file".IO.lines -&gt; $line {
    say $line
}</pre>
 <a name="t30.6"></a><h1 id="_language_rb-nutshell.pod6-Object_Orientation">30.6 Object Orientation</h1>
 <a name="t30.6.1"></a><h2 id="_language_rb-nutshell.pod6-Basic_classes,_methods,_attributes">30.6.1 Basic classes, methods, attributes</h2>
 <p>Classes are defined similarly between Ruby and Perl 6, using the <span class="code">class</span> keyword. Ruby uses <span class="code">def</span> for methods, whereas Perl 6 uses <span class="code">method</span>.</p>
 <pre class="code"># Ruby
class Foo
    def greet(name)
        puts "Hi #{name}!"
    end
end

# Perl 6
class Foo {
    method greet($name) {
        say "Hi $name!"
    }
}</pre>
 <p>In Ruby you can use an attribute without declaring it beforehand, and you can tell it is an attribute because of the <span class="code">@</span> sigil. You can also easily create accessors using <span class="code">attr_accessor</span> and it's variants. In Perl 6 you use a <span class="code">has</span> declaration and a variety of sigils. You can use the <span class="code">!</span> twigil for private attributes or <span class="code">.</span> to create an accessor.</p>
 <pre class="code"># Ruby
class Person
    attr_accessor :age    # Declare .age as an accessor method for @age
    def initialize
        @name = 'default' # Assign default value to private instance var
    end
end

# Perl 6
class Person
    has $.age;              # Declare $!age and accessor methods
    has $!name = 'default'; # Assign default value to private instance var
end</pre>
 <p>Creating a new instance of the class uses the <span class="code">.new</span> method. In Ruby you must manually assign instance variables as needed inside <span class="code">initialize</span>. In Perl 6 you get a default constructor that accepts key/value pairs of accessor attributes, and can do further setup in the <span class="code">BUILD</span> method. Like with Ruby, you can override <span class="code">new</span> itself for more advanced functionality, but this is rare.</p>
 <pre class="code"># Ruby
class Person
    attr_accessor :name, :age
    def initialize(attrs)
        @name = attrs[:name] || 'Jill'
        @age  = attrs[:age] || 42
        @birth_year = Time.now.year - @age
    end
end
p = Person.new( name: 'Jack', age: 23 )

# Perl 6
class Person
    has $.name = 'Jill';
    has $.age  = 42;
    has $!birth_year;
    method BUILD {
        $!birth_year = now.Date.year - $.age;
    }
}
p = Person.new( name =&gt; 'Jack', age =&gt; 23 )</pre>
 <a name="t30.6.2"></a><h2 id="_language_rb-nutshell.pod6-Private_Methods">30.6.2 Private Methods</h2>
 <p>Private methods in Perl 6 are declared with a <span class="code">!</span> prefixed in their name, and are invoked with a <span class="code">!</span> instead of a <span class="code">.</span>.</p>
 <pre class="code"># Ruby
class Foo
    def visible
        puts "I can be seen!"
        hidden
    end

    private
    def hidden
        puts "I cannot easily be called!"
    end
end

# Perl 6
class Foo {
    method visible {
        say "I can be seen!"
        self!hidden
    }

    method !hidden {
        say "I cannot easily be called!"
    }
}</pre>
 <p>An important note is that in Ruby child objects can see parent private methods (so they are more like "protected" methods in other languages). In Perl 6 child objects cannot call parent private methods.</p>
 <a name="t30.6.3"></a><h2 id="_language_rb-nutshell.pod6-Going_Meta">30.6.3 Going Meta</h2>
 <p>Here are a few examples of meta-programming. Note that Perl 6 separates the meta-methods from the regular methods.</p>
 <pre class="code">person = Person.new       # Ruby, create a new person
my $person = Person.new   # Perl 6, create a new person

person.class              # Ruby, returns Person (class)
$person.WHAT              # Perl 6, returns Person (class)

person.methods            # Ruby
$person.^methods          # Perl 6, using .^ syntax to access meta-methods

person.instance_variables # Ruby
$person.^attributes       # Perl 6</pre>
 <p>Like Ruby, in Perl 6, everything is an object, but not all operations are equivalent to <span class="code">.send</span>. Many operators are global functions that use typed multi-dispatch (function signatures with types) to decide which implementation to use.</p>
 <pre class="code">5.send(:+, 3)    # =&gt; 8, Ruby
&amp;amp;[+](5, 3)       # =&gt; 8, Perl 6, reference to infix additon operator

&amp;amp;[+].^candidates # Perl 6, lists all signatures for the + operator</pre>
 <p>See <a href="#_language_mop.pod6">Meta-Object Protocol</a> for lots of further details.</p>
 <a name="t30.7"></a><h1 id="_language_rb-nutshell.pod6-Environment_variables">30.7 Environment variables</h1>
 <a name="t30.7.1"></a><h2 id="_language_rb-nutshell.pod6-Perl_module_library_path">30.7.1 Perl module library path</h2>
 <p>In Ruby, one of the environment variables to specify extra search paths for modules is <span class="code">RUBYLIB</span>.</p>
 <pre class="code">$ RUBYLIB="/some/module/lib" ruby program.rb</pre>
 <p>In Perl 6 this is similar, you merely needs to change the name. As you probably guessed, you just need to use <span class="code">PERL6LIB</span>:</p>
 <pre class="code">$ PERL6LIB="/some/module/lib" perl6 program.p6</pre>
 <p>As with Ruby, if you don't specify <span class="code">PERL6LIB</span>, you need to specify the library path within the program via the <span class="code">use lib</span> pragma:</p>
 <pre class="code"># Ruby and Perl 6
use lib '/some/module/lib';</pre>
 <a name="t30.8"></a><h1 id="_language_rb-nutshell.pod6-Misc.">30.8 Misc.</h1>
 <a name="t30.8.1"></a><h2 id="_language_rb-nutshell.pod6-Importing_specific_functions_from_a_module">30.8.1 Importing specific functions from a module</h2>
 <p>In Ruby there is no built-in way to selectively import/export methods from a module.</p>
 <p>In Perl 6 you specifies the functions which are to be exported by using the <span class="code">is export</span> role on the relevant subs and <i>all</i> subs with this role are then exported. Hence, the following module <span class="code">Bar</span> exports the subs <span class="code">foo</span> and <span class="code">bar</span> but not <span class="code">baz</span>:</p>
 <pre class="code">unit module Bar; # remainder of the file is in module Bar { ... }

sub foo($a) is export { say "foo $a" }
sub bar($b) is export { say "bar $b" }
sub baz($z) { say "baz $z" }</pre>
 <p>To use this module, simply <span class="code">use Bar</span> and the functions <span class="code">foo</span> and <span class="code">bar</span> will be available</p>
 <pre class="code">use Bar;
foo(1);    #=&gt; "foo 1"
bar(2);    #=&gt; "bar 2"</pre>
 <p>If you tries to use <span class="code">baz</span> an "Undeclared routine" error is raised at compile time.</p>
 <p>Some modules allow for selectively importing funcitons, which would look like:</p>
 <pre class="code">use Bar &amp;lt;foo&gt;; # Import only foo
foo(1);        #=&gt; "foo 1"
bar(2);        # Error!</pre>
 <a name="t30.8.2"></a><h2 id="_language_rb-nutshell.pod6-OptionParser,_parsing_command-line_flags">30.8.2 <span class="code">OptionParser</span>, parsing command-line flags</h2>
 <p>Command line argument switch parsing in Perl 6 is done by the parameter list of the <span class="code">MAIN</span> subroutine.</p>
 <pre class="code"># Ruby
require 'optparse'
options = {}
OptionParser.new do |opts|
    opts.banner = 'Usage: example.rb --length=abc'
    opts.on("--length", "Set the file") do |length|
        raise "Length must be &gt; 0" unless length.to_i &gt; 0
        options[:length] = length
    end
    opts.on("--filename", "Set the file") do |filename|
        options[:file] = filename
    end
    opts.on("--verbose", "Increase verbosity") do |verbose|
        options[:verbose] = true
    end
end.parse!

puts options[:length]
puts options[:filename]
puts 'Verbosity ', (options[:verbose] ? 'on' : 'off')

ruby example.rb --filename=foo --length=42 --verbose
    42
    foo
    Verbosity on

ruby example.rb --length=abc
    Length must be &gt; 0

# Perl 6
sub MAIN ( Int :$length where * &gt; 0, :filename = 'file.dat', Bool :$verbose ) {
    say $length;
    say $data;
    say 'Verbosity ', ($verbose ?? 'on' !! 'off');
}

perl6 example.p6 --file=foo --length=42 --verbose
    42
    foo
    Verbosity on
perl6 example.p6 --length=abc
    Usage:
      c.p6 [--length=&amp;lt;Int&gt;] [--file=&amp;lt;Any&gt;] [--verbose]</pre>
 <p>Note that Perl 6 auto-generates a full usage message on error in command-line parsing.</p>
 <a name="t30.9"></a><h1 id="_language_rb-nutshell.pod6-RubyGems,_External_Libraries">30.9 RubyGems, External Libraries</h1>
 <p>See <a href="https://modules.perl6.org/">https://modules.perl6.org/</a>, where a growing number of Perl 6 libraries are available along with the tools to manage them.</p>
 <p>If the module that you were using has not been converted to Perl 6, and no alternative is listed in this document, then its use under Perl 6 may not have been addressed yet.</p>
 <p>You can experiment with <a href="https://github.com/awwaiid/Inline-Ruby/">Inline::Ruby</a> to call existing Ruby code from your Perl 6 programs. This uses an embedded instance of the <span class="code">ruby</span> interpreter to run Ruby code called from your Perl 6 script. Note that this is an EXPERIMENTAL library. You can similarly call other language's libraries with Inline::Perl5, Inline::Python, and others.</p>
</div> <!-- /language/regexes.pod6 --><div class="pod-body"><a id="_language_regexes.pod6"></a><a name="t31"><h1 class="title">31 Regexes</h1></a> <p class="subtitle">Pattern matching against strings</p> <p>Regular expressions are a computer science concept where simple patterns describe the format of text. Pattern matching is the process of applying these patterns to actual text to look for matches.</p>
 <p>Most modern regular expression facilities are more powerful than traditional regular expressions due to the influence of languages such as Perl, but the short-hand term <i>regex</i> has stuck and continues to mean <i>regular expression-like pattern matching</i>.</p>
 <p>In Perl 6, although they are capable of much more than regular languages, we continue to call them <i>regexes</i>.</p>
 <a name="t31.1"></a><h1 id="_language_regexes.pod6-Lexical_conventions">31.1 <a name="354"></a>Lexical conventions</h1>
 <p>Perl 6 has special syntax for writing regexes:</p>
 <pre class="code">m/abc/;         # a regex that is immediately matched against $_
rx/abc/;        # a Regex object
/abc/;          # a Regex object</pre>
 <p>The first two can use delimiters other than the slash:</p>
 <pre class="code">m{abc};
rx{abc};</pre>
 <p>Note that neither the colon <span class="code">:</span> nor round parentheses can be delimiters; the colon is forbidden because it clashes with adverbs, such as <span class="code">rx:i/abc/</span> (case insensitive regexes), and round parentheses indicate a function call instead.</p>
 <p>Whitespace in regexes is generally ignored (except with the <span class="code">:s</span> or <span class="code">:sigspace</span> adverb).</p>
 <p>As in the rest of Perl 6, comments in regexes start with a hash character <span class="code">#</span> and go to the end of the current line.</p>
 <a name="t31.2"></a><h1 id="_language_regexes.pod6-Literals">31.2 Literals</h1>
 <p>The simplest case of a regex is a constant string. Matching a string against that regex searches for that string:</p>
 <pre class="code">if 'properly' ~~ m/ perl / {
    say "'properly' contains 'perl'";
}</pre>
 <p>Alphanumeric characters and the underscore <span class="code">_</span> are literal matches. All other characters must either be escaped with a backslash (for example <span class="code">\:</span> to match a colon), or included in quotes:</p>
 <pre class="code">/ 'two words' /     # matches 'two words' including the blank
/ "a:b"       /     # matches 'a:b' including the colon
/ '#' /             # matches a hash character</pre>
 <p>Strings are searched left to right for the regex, thus it is sufficient if a substring matches the regex:</p>
 <pre class="code">if 'abcdef' ~~ / de / {
    say ~$/;            # de
    say $/.prematch;    # abc
    say $/.postmatch;   # f
    say $/.from;        # 3
    say $/.to;          # 5
};</pre>
 <p>Match results are stored in the <span class="code">$/</span> variable and are also returned from the match. The result is of <a href="#_type_Match.pod6">type Match</a> if the match was successful; otherwise it is <a href="#_type_Nil.pod6">Nil</a>.</p>
 <a name="t31.3"></a><h1 id="_language_regexes.pod6-Wildcards_and_character_classes">31.3 Wildcards and character classes</h1>
 <a name="t31.3.1"></a><h2 id="_language_regexes.pod6-Dot_to_match_any_character">31.3.1 <a name="360"></a>Dot to match any character</h2>
 <p>An unescaped dot <span class="code">.</span> in a regex matches any single character.</p>
 <p>So these all match:</p>
 <pre class="code">'perl' ~~ /per./;       # matches the whole string
'perl' ~~ / per . /;    # the same; whitespace is ignored
'perl' ~~ / pe.l /;     # the . matches the r
'speller' ~~ / pe.l/;   # the . matches the first l</pre>
 <p>This doesn't match:</p>
 <pre class="code">'perl' ~~ /. per /</pre>
 <p>because there is no character to match before <span class="code">per</span> in the target string.</p>
 <a name="t31.3.2"></a><h2 id="_language_regexes.pod6-Backslashed,_predefined_character_classes">31.3.2 Backslashed, predefined character classes</h2>
 <p>There are predefined character classes of the form <span class="code">\w</span>. Its negation is written with an upper-case letter, <span class="code">\W</span>.</p>
 <ul><li><p><span class="indexed"><a id="362" name="regex \d regex \D">\d and \D</a></span></p>
</li></ul> <p><span class="code">\d</span> matches a single digit (Unicode property <span class="code">N</span>) and <span class="code">\D</span> matches a single character that is not a digit.</p>
 <pre class="code">'ab42' ~~ /\d/ and say ~$/;     # 4
'ab42' ~~ /\D/ and say ~$/;     # a</pre>
 <p>Note that not only the Arabic digits (commonly used in the Latin alphabet) match <span class="code">\d</span>, but also digits from other scripts.</p>
 <p>Examples for digits are:</p>
 <pre class="code">U+0035 5 DIGIT FIVE
U+07C2 ߂ NKO DIGIT TWO
U+0E53 ๓ THAI DIGIT THREE
U+1B56 ᭖ BALINESE DIGIT SIX</pre>
 <ul><li><p><span class="indexed"><a id="363" name="regex \h regex \H">\h and \H</a></span></p>
</li></ul> <p><span class="code">\h</span> matches a single horizontal whitespace character. <span class="code">\H</span> matches a single character that is not a horizontal whitespace character.</p>
 <p>Examples for horizontal whitespace characters are</p>
 <pre class="code">U+0020 SPACE
U+00A0 NO-BREAK SPACE
U+0009 CHARACTER TABULATION
U+2001 EM QUAD</pre>
 <p>Vertical whitespace like newline characters are explicitly excluded; those can be matched with <span class="code">\v</span>, and <span class="code">\s</span> matches any kind of whitespace.</p>
 <ul><li><p><span class="indexed"><a id="364" name="regex \n regex \N">\n and \N</a></span></p>
</li></ul> <p><span class="code">\n</span> matches a single, logical newline character. <span class="code">\n</span> is supposed to also match a Windows CR LF codepoint pair; though it is unclear whether the magic happens at the time that external data is read, or at regex match time. <span class="code">\N</span> matches a single character that's not a logical newline.</p>
 <ul><li><p><span class="indexed"><a id="365" name="regex \s regex \S">\s and \S</a></span></p>
</li></ul> <p><span class="code">\s</span> matches a single whitespace character. <span class="code">\S</span> matches a single character that is not whitespace.</p>
 <pre class="code">if 'contains a word starting with "w"' ~~ / w \S+ / {
    say ~$/;        # word
}</pre>
 <ul><li><p><span class="indexed"><a id="367" name="regex \t regex \T">\t and \T</a></span></p>
</li></ul> <p><span class="code">\t</span> matches a single tab/tabulation character, <span class="code">U+0009</span>. (Note that exotic tabs like the <span class="code">U+000B VERTICAL TABULATION</span> character are not included here). <span class="code">\T</span> matches a single character that is not a tab.</p>
 <ul><li><p><span class="indexed"><a id="368" name="regex \v regex \V">\v and \V</a></span></p>
</li></ul> <p><span class="code">\v</span> matches a single vertical whitespace character. <span class="code">\V</span> matches a single character that is not vertical whitespace.</p>
 <p>Examples for vertical whitespace characters:</p>
 <pre class="code">U+000A LINE FEED
U+000B VERTICAL TABULATION
U+000C CARRIAGE RETURN
U+0085 NEXT LINE
U+2029 PARAGRAPH SEPARATOR</pre>
 <p>Use <span class="code">\s</span> to match any kind of whitespace, not just vertical whitespace.</p>
 <ul><li><p><span class="indexed"><a id="370" name="regex \w regex \W">\w and \W</a></span></p>
</li></ul> <p><span class="code">\w</span> matches a single word character, i.e. a letter (Unicode category L), a digit or an underscore. <span class="code">\W</span> matches a single character that isn't a word character.</p>
 <p>Examples of word characters:</p>
 <pre class="code">0041 A LATIN CAPITAL LETTER A
0031 1 DIGIT ONE
03B4 δ GREEK SMALL LETTER DELTA
03F3 ϳ GREEK LETTER YOT
0409 Љ CYRILLIC CAPITAL LETTER LJE</pre>
 <a name="t31.3.3"></a><h2 id="_language_regexes.pod6-Unicode_properties">31.3.3 <a name="371"></a>Unicode properties</h2>
 <p>The character classes so far are mostly for convenience; a more systematic approach is the use of Unicode properties. They are called in the form <span class="code"> &lt;:property> </span>, where <span class="code">property</span> can be a short or long Unicode property name.</p>
 <p>The following list is stolen from the Perl 5 <a href="http://perldoc.perl.org/perlunicode.html">perlunicode</a> documentation:</p>
 <table>
<tr><th>Short</th> <th>Long</th></tr>
<tr><td>L</td> <td>Letter</td></tr>
 <tr><td>LC</td> <td>Cased_Letter</td></tr>
 <tr><td>Lu</td> <td>Uppercase_Letter</td></tr>
 <tr><td>Ll</td> <td>Lowercase_Letter</td></tr>
 <tr><td>Lt</td> <td>Titlecase_Letter</td></tr>
 <tr><td>Lm</td> <td>Modifier_Letter</td></tr>
 <tr><td>Lo</td> <td>Other_Letter</td></tr>
 <tr><td>M</td> <td>Mark</td></tr>
 <tr><td>Mn</td> <td>Nonspacing_Mark</td></tr>
 <tr><td>Mc</td> <td>Spacing_Mark</td></tr>
 <tr><td>Me</td> <td>Enclosing_Mark</td></tr>
 <tr><td>N</td> <td>Number</td></tr>
 <tr><td>Nd</td> <td>Decimal_Number (also Digit)</td></tr>
 <tr><td>Nl</td> <td>Letter_Number</td></tr>
 <tr><td>No</td> <td>Other_Number</td></tr>
 <tr><td>P</td> <td>Punctuation (also punct)</td></tr>
 <tr><td>Pc</td> <td>Connector_Punctuation</td></tr>
 <tr><td>Pd</td> <td>Dash_Punctuation</td></tr>
 <tr><td>Ps</td> <td>Open_Punctuation</td></tr>
 <tr><td>Pe</td> <td>Close_Punctuation</td></tr>
 <tr><td>Pi</td> <td>Initial_Punctuation</td></tr>
 <tr><td></td> <td>(may behave like Ps or Pe depending on usage)</td></tr>
 <tr><td>Pf</td> <td>Final_Punctuation</td></tr>
 <tr><td></td> <td>(may behave like Ps or Pe depending on usage)</td></tr>
 <tr><td>Po</td> <td>Other_Punctuation</td></tr>
 <tr><td>S</td> <td>Symbol</td></tr>
 <tr><td>Sm</td> <td>Math_Symbol</td></tr>
 <tr><td>Sc</td> <td>Currency_Symbol</td></tr>
 <tr><td>Sk</td> <td>Modifier_Symbol</td></tr>
 <tr><td>So</td> <td>Other_Symbol</td></tr>
 <tr><td>Z</td> <td>Separator</td></tr>
 <tr><td>Zs</td> <td>Space_Separator</td></tr>
 <tr><td>Zl</td> <td>Line_Separator</td></tr>
 <tr><td>Zp</td> <td>Paragraph_Separator</td></tr>
 <tr><td>C</td> <td>Other</td></tr>
 <tr><td>Cc</td> <td>Control (also cntrl)</td></tr>
 <tr><td>Cf</td> <td>Format</td></tr>
 <tr><td>Cs</td> <td>Surrogate</td></tr>
 <tr><td>Co</td> <td>Private_Use</td></tr>
 <tr><td>Cn</td> <td>Unassigned</td></tr>
</table> <p>For example <span class="code">&lt;:Lu> </span> matches a single, upper-case letter.</p>
 <p>Negation works as <span class="code">&lt;:!category> </span>, so <span class="code">&lt;:!Lu> </span> matches a single character that isn't an upper-case letter.</p>
 <p>Several categories can be combined with one of these infix operators:</p>
 <table>
<tr><th>Operator</th> <th>Meaning</th></tr>
<tr><td>+</td> <td>set union</td></tr>
 <tr><td>|</td> <td>set union</td></tr>
 <tr><td>&amp;</td> <td>set intersection</td></tr>
 <tr><td>-</td> <td>set difference (first minus second)</td></tr>
 <tr><td>^</td> <td>symmetric set intersection / XOR</td></tr>
</table> <p>So, to match either a lower-case letter or a number, one can write <span class="code">&lt;:Ll+:N> </span> or <span class="code">&lt;:Ll+:Number> </span> or <span class="code">&lt;+ :Lowercase_Letter + :Number> </span>.</p>
 <p>It is also possible to group categories and sets of categories with parentheses, e.g.:</p>
 <pre class="code">'perl6' ~~ m{\w+(&amp;lt;:Ll+:N&gt;)}  # 0 =&gt; ｢6｣</pre>
 <a name="t31.3.4"></a><h2 id="_language_regexes.pod6-Enumerated_character_classes_and_ranges">31.3.4 <a name="373"></a>Enumerated character classes and ranges</h2>
 <p>Sometimes the pre-existing wildcards and character classes are not enough. Fortunately, defining your own is fairly simple. Between <span class="code">&lt;[ ]> </span>, you can put any number of single characters and ranges of characters (expressed with two dots between the end points), with or without whitespace.</p>
 <pre class="code">"abacabadabacaba" ~~ / &amp;lt;[ a .. c 1 2 3 ]&gt; /</pre>
 <p>Between the <span class="code">&lt; > </span> you can also use the same operators for categories (<span class="code">+</span>, <span class="code">|</span>, <span class="code">&amp;</span>, <span class="code">-</span>, <span class="code">^</span>) to combine multiple range definitions and even mix in some of the unicode categories above. You are also allowed to write the backslashed forms for character classes between the <span class="code">[ ] </span>.</p>
 <pre class="code">/ &amp;lt;[\d] - [13579]&gt; /
# not quite the same as
/ &amp;lt;[02468]&gt; /
# because the first one also contains "weird" unicodey digits</pre>
 <p>To negate a character class, put a <span class="code">-</span> after the opening angle:</p>
 <pre class="code">say 'no quotes' ~~ /  &amp;lt;-[ " ]&gt; + /;  # matches characters except "</pre>
 <p>A common pattern for parsing quote-delimited strings involves negated character classes:</p>
 <pre class="code">say '"in quotes"' ~~ / '"' &amp;lt;-[ " ]&gt; * '"'/;</pre>
 <p>This first matches a quote, then any characters that aren't quotes, and then a quote again. The meaning of <span class="code">*</span> and <span class="code">+</span> in the examples above are explained in <a href="#30-Quantifiers">section Quantifier</a>.</p>
 <p>Just as you can use the <span class="code">-</span> for both set difference and negation of a single value, you can also explicitly put a <span class="code">+</span> in front:</p>
 <pre class="code">/ &amp;lt;+[123]&gt; /  # same as &amp;lt;[123]&gt;</pre>
 <a name="t31.4"></a><h1 id="_language_regexes.pod6-Quantifiers">31.4 Quantifiers</h1>
 <p>A quantifier makes a preceding atom match not exactly once, but rather a variable number of times. For example <span class="code">a+</span> matches one or more <span class="code">a</span> characters.</p>
 <p>Quantifiers bind tighter than concatenation, so <span class="code">ab+</span> matches one <span class="code">a</span> followed by one or more <span class="code">b</span>s. This is different for quotes, so <span class="code">'ab'+</span> matches the strings <span class="code">ab</span>, <span class="code">abab</span>, <span class="code">ababab</span> etc.</p>
 <a name="t31.4.1"></a><h2 id="_language_regexes.pod6-One_or_more:_+">31.4.1 <a name="376"></a>One or more: +</h2>
 <p>The <span class="code">+</span> quantifier makes the preceding atom match one or more times, with no upper limit.</p>
 <p>For example to match strings of the form <span class="code">key=value</span>, you can write a regex like this:</p>
 <pre class="code">/ \w+ '=' \w+ /</pre>
 <a name="t31.4.2"></a><h2 id="_language_regexes.pod6-Zero_or_more:_*">31.4.2 <a name="377"></a>Zero or more: *</h2>
 <p>The <span class="code">*</span> quantifier makes the preceding atom match zero or more times, with no upper limit.</p>
 <p>For example to allow optional whitespace between <span class="code">a</span> and <span class="code">b</span> you can write</p>
 <pre class="code">/ a \s* b /</pre>
 <a name="t31.4.3"></a><h2 id="_language_regexes.pod6-Zero_or_one_match:_?">31.4.3 <a name="378"></a>Zero or one match: ?</h2>
 <p>The <span class="code">?</span> quantifier makes the preceding atom match zero or once.</p>
 <a name="t31.4.4"></a><h2 id="_language_regexes.pod6-General_quantifier:_**_min..max">31.4.4 <a name="379"></a>General quantifier: ** min..max</h2>
 <p>To quantify an atom an arbitrary number of times, you can write e.g. <span class="code">a ** 2..5</span> to match the character <span class="code">a</span> at least twice and at most 5 times.</p>
 <pre class="code">    say so 'a' ~~ /a ** 2..5/;        # False 
     say so  'aaa' ~~ /a ** 2..5/;     # True 
</pre>
 <p>If the minimal and maximal number of matches are the same, a single integer is possible: <span class="code">a ** 5</span> matches <span class="code">a</span> exactly five times.</p>
 <pre class="code">    say so 'aaaaa' ~~ /a ** 5/;       # True 
</pre>
 <p>It is also possible to use non inclusive ranges using a caret:</p>
 <pre class="code">    say so 'a'    ~~ /a ** 1^..^6/;   # False 
     say so 'aaaa' ~~ /a ** 1^..^6/;   # True 
</pre>
 <p>This includes the numeric ranges starting from 0:</p>
 <pre class="code">    say so 'aaa' ~~ /a ** ^6/;        # True 
</pre>
 <p>or a Whatever operator for an infinite range with a non inclusive minimum:</p>
 <pre class="code">    say so 'aaaa' ~~ /a ** 1^..*/;    # True 
</pre>
 <a name="t31.4.5"></a><h2 id="_language_regexes.pod6-Modified_quantifier:_%">31.4.5 <a name="380"></a>Modified quantifier: %</h2>
 <p>To more easily match things like comma separated values, you can tack on a <span class="code">%</span> modifier to any of the above quantifiers to specify a separator that must occur between each of the matches. So, for example <span class="code">a+ % ','</span> will match <span class="code">a</span> or <span class="code">a,a</span> or <span class="code">a,a,a</span> or so on, but it will not match <span class="code">a,</span> or <span class="code">a,a,</span>. To match those as well, you may use <span class="code">%%</span> instead of <span class="code">%</span>.</p>
 <a name="t31.4.6"></a><h2 id="_language_regexes.pod6-Greedy_versus_frugal_quantifiers:_?">31.4.6 <a name="381"></a>Greedy versus frugal quantifiers: ?</h2>
 <p>By default, quantifiers request a greedy match:</p>
 <pre class="code">    'abababa' ~~ /a .* a/ &amp;amp;&amp;amp; say ~$/;  # abababa 
</pre>
 <p>You can attach a <span class="code">?</span> modifier to the quantifier to enable frugal matching:</p>
 <pre class="code">    'abababa' ~~ /a .*? a/ &amp;amp;&amp;amp; say ~$/; # aba 
</pre>
 <p>You can also explicitly request greedy matching with the <span class="code">!</span> modifier.</p>
 <a name="t31.4.7"></a><h2 id="_language_regexes.pod6-Preventing_backtracking:_:">31.4.7 <a name="382"></a>Preventing backtracking: :</h2>
 <p>You can prevent backtracking in regexes by attaching a <span class="code">:</span> modifier to the quantifier:</p>
 <pre class="code">    say so 'abababa' ~~ /a .* aba/   # True 
     say so 'abababa' ~~ /a .*: aba/  # False 
</pre>
 <a name="t31.5"></a><h1 id="_language_regexes.pod6-Alternation">31.5 <a name="383"></a>Alternation</h1>
 <p>To match one of several possible alternatives, separate them by <span class="code">||</span>; the first matching alternative wins.</p>
 <p>For example, <span class="code">ini</span> files have the following form:</p>
 <pre class="code">[section]
key = value</pre>
 <p>Hence, if you parse a single line of an <span class="code">ini</span> file, it can be either a section or a key-value pair and the regex would be (to a first approximation):</p>
 <pre class="code">/ '[' \w+ ']' || \S+ \s* '=' \s* \S* /</pre>
 <p>That is, either a word surrounded by square brackets, or a string of non-whitespace characters, followed by zero or more spaces, followed by the equals sign <span class="code">=</span>, followed again by optional whitespace, followed by another string of non-whitespace characters.</p>
 <a name="t31.6"></a><h1 id="_language_regexes.pod6-Longest_Alternation">31.6 <a name="386"></a>Longest Alternation</h1>
 <p>In regexes branches separated by <span class="code">|</span>, the longest match wins, independent of the lexical ordering in the regexes.</p>
 <pre class="code">say ('abc' ~~ / a | .b /).Str;    # ab</pre>
 <a name="t31.7"></a><h1 id="_language_regexes.pod6-Anchors">31.7 Anchors</h1>
 <p>The regex engine tries to find a match inside a string by searching from left to right.</p>
 <pre class="code">say so 'properly' ~~ / perl/;     # True
#          ^^^^</pre>
 <p>But sometimes this is not what you want. For instance, you might want to match the whole string, or a whole line, or one or several whole words. <i>Anchors</i> or <i>assertions</i> can help you with this by limiting where they match.</p>
 <p>Anchors need to match successfully in order for the whole regex to match but they do not use up characters while matching.</p>
 <a name="t31.7.1"></a><h2 id="_language_regexes.pod6-^,_Start_of_String_and_$,_End_of_String">31.7.1 <a name="387"></a> <span class="code">^</span> , Start of String and  <span class="code">$</span> , End of String</h2>
 <p>The <span class="code">^</span> assertion only matches at the start of the string:</p>
 <pre class="code">say so 'properly' ~~ /  perl/;    # True
say so 'properly' ~~ /^ perl/;    # False
say so 'perly'    ~~ /^ perl/;    # True
say so 'perl'     ~~ /^ perl/;    # True</pre>
 <p>The <span class="code">$</span> assertion only matches at the end of the string:</p>
 <pre class="code">say so 'use perl' ~~ /  perl  /;  # True
say so 'use perl' ~~ /  perl $/;  # True
say so 'perly'    ~~ /  perl $/;  # False</pre>
 <p>You can, of course, combine both anchors:</p>
 <pre class="code">say so 'use perl' ~~ /^ perl $/;  # False
say so 'perl'     ~~ /^ perl $/;  # True</pre>
 <p>Keep in mind, these anchors match end of <b>string</b>, not line:</p>
 <pre class="code">my $str = q:to/EOS/;
   Keep it secret
   and keep it safe
   EOS

say so $s ~~ /safe   $/;          # True
say so $s ~~ /secret $/;          # False
say so $s ~~ /^Keep   /;          # True
say so $s ~~ /^and    /;          # False</pre>
 <a name="t31.7.2"></a><h2 id="_language_regexes.pod6-^^,_Start_of_Line_and_$$,_End_of_Line">31.7.2 <a name="388"></a> <span class="code">^^</span> , Start of Line and  <span class="code">$$</span> , End of Line</h2>
 <p>The <span class="code">^^</span> assertion matches at the start of a logical line. That is, either at the start of the string, or after a newline character.</p>
 <p><span class="code">$$</span> matches only at the end of a logical line, that is, before a newline character, or at the end of the string when the last character is not a newline character.</p>
 <p>(To understand the following example, it is important to know that the <span class="code">q:to/EOS/...EOS</span> "heredoc" syntax removes leading indention to the same level as the <span class="code">EOS</span> marker, so that the first, second and last lines have no leading space and the third and fourth lines have two leading spaces each).</p>
 <pre class="code">    my $str = q:to/EOS/; 
         There was a young man of Japan 
         Whose limericks never would scan. 
           When asked why this was, 
           He replied "It's because 
         I always try to fit as many syllables into the last line as ever I possibly can." 
         EOS 
     say so $str ~~ /^^ There/;        # True  (start of string) 
     say so $str ~~ /^^ limericks/;    # False (not at the start of a line) 
     say so $str ~~ /^^ I/;            # True  (start of the last line) 
     say so $str ~~ /^^ When/;         # False (there are blanks between 
                                       #        start of line and the "When") 
 
     say so $str ~~ / Japan $$/;       # True  (end of first line) 
     say so $str ~~ / scan $$/;        # False (there is a . between "scan" 
                                       #        and the end of line) 
     say so $str ~~ / '."' $$/;        # True  (at the last line) 
</pre>
 <a name="t31.7.3"></a><h2 id="_language_regexes.pod6-&lt;&lt;__and_>>_,_left_and_right_word_boundary">31.7.3 <a name="389"></a> <span class="code">&lt;&lt; </span>  and  <span class="code">>> </span> , left and right word boundary</h2>
 <p><span class="code">&lt;&lt; </span> matches a left word boundary: it matches positions where there is a non-word character at the left (or the start of the string) and a word character to the right.</p>
 <p><span class="code">>> </span> matches a right word boundary: it matches positions where there is a word character at the left and a non-word character at the right (or the end of the string).</p>
 <pre class="code">my $str = 'The quick brown fox';
say so $str ~~ /br/;              # True
say so $str ~~ /&amp;lt;&amp;lt; br/;           # True
say so $str ~~ /br &gt;&gt;/;           # False
say so $str ~~ /own/;             # True
say so $str ~~ /&amp;lt;&amp;lt; own/;          # False
say so $str ~~ /own &gt;&gt;/;          # True</pre>
 <a name="t31.8"></a><h1 id="_language_regexes.pod6-Grouping_and_Capturing">31.8 <a name="390"></a>Grouping and Capturing</h1>
 <p>In regular (non-regex) Perl 6, you can use parentheses to group things together, usually to override operator precedence:</p>
 <pre class="code">say 1 + 4 * 2;      # 9, because it is parsed as 1 + (4 * 2)
say (1 + 4) * 2;    # 10</pre>
 <p>The same grouping facility is available in regexes:</p>
 <pre class="code">/ a || b c /        # matches 'a' or 'bc'
/ ( a || b ) c /    # matches 'ac' or 'bc'</pre>
 <p>The same grouping applies to quantifiers:</p>
 <pre class="code">/ a b+ /            # Matches an 'a' followed by one or more 'b's
/ (a b)+ /          # Matches one or more sequences of 'ab'
/ (a || b)+ /       # Matches a sequence of 'a's and 'b's, at least one long</pre>
 <p>An unquantified capture produces a <a href="#_type_Match.pod6">Match</a> object. When a capture is quantified (except with the <span class="code">?</span> quantifier) the capture becomes a list of <a href="#_type_Match.pod6">Match</a> objects instead.</p>
 <a name="t31.8.1"></a><h2 id="_language_regexes.pod6-Capturing">31.8.1 Capturing</h2>
 <p>The round parentheses don't just group, they also <i>capture</i>; that is, they make the string matched within the group available as a variable, and also as an element of the resulting <a href="#_type_Match.pod6">Match</a> object:</p>
 <pre class="code">my $str =  'number 42';
if $str ~~ /'number ' (\d+) / {
    say "The number is $0";         # the number is 42
    # or
    say "The number is $/[0]";      # the number is 42
}</pre>
 <p>Pairs of parentheses are numbered left to right, starting from zero.</p>
 <pre class="code">if 'abc' ~~ /(a) b (c)/ {
    say "0: $0; 1: $1";             # 0: a; 1: c
}</pre>
 <p>The <span class="code">$0</span> and <span class="code">$1</span> etc. syntax is actually just a shorthand; these captures are canonically available from the match object <span class="code">$/</span> by using it as a list, so <span class="code">$0</span> is actually syntax sugar for <span class="code">$/[0]</span>.</p>
 <p>Coercing the match object to a list gives an easy way to programmatically access all elements:</p>
 <pre class="code">if 'abc' ~~ /(a) b (c)/ {
    say $/.list.join: ', '  # a, c
}</pre>
 <a name="t31.8.2"></a><h2 id="_language_regexes.pod6-Non-capturing_grouping">31.8.2 Non-capturing grouping</h2>
 <p>The parentheses in regexes perform a double role: they group the regex elements inside and they capture what is matched by the sub-regex inside.</p>
 <p>To get only the grouping behavior, you can use square brackets <span class="code">[ ... ]</span> instead.</p>
 <pre class="code">if 'abc' ~~ / [a||b] (c) / {
    say ~$0;                # c
}</pre>
 <p>If you do not need the captures, using non-capturing groups provides three benefits: it communicates the intent more clearly, it makes it easier to count the capturing groups that you do care about and it is a bit faster.</p>
 <a name="t31.8.3"></a><h2 id="_language_regexes.pod6-Capture_numbers">31.8.3 Capture numbers</h2>
 <p>It is stated above that captures are numbered from left to right. While true in principle, this is also overly simplistic.</p>
 <p>The following rules are listed for the sake of completeness; when you find yourself using them regularly, it is worth considering named captures (and possibly subrules) instead.</p>
 <p>Alternations reset the capture count:</p>
 <pre class="code">/ (x) (y)  || (a) (.) (.) /
# $0  $1      $0  $1  $2</pre>
 <p>Example:</p>
 <pre class="code">if 'abc' ~~ /(x)(y) || (a)(.)(.)/ {
    say ~$1;            # b
}</pre>
 <p>If two (or more) alternations have a different number of captures, the one with the most captures determines the index of the next capture:</p>
 <pre class="code">$_ = 'abcd'; 
 
 if / a [ b (.) || (x) (y) ] (.) / { 
     #      $0     $0  $1    $2 
     say ~$2;            # d 
 } 
</pre>
 <p>Captures can be nested, in which case they are numbered per level</p>
 <pre class="code">if 'abc' ~~ / ( a (.) (.) ) / {
    say "Outer: $0";              # Outer: abc
    say "Inner: $0[0] and $0[1]"; # Inner: b and c
}</pre>
 <a name="t31.8.4"></a><h2 id="_language_regexes.pod6-Named_captures">31.8.4 Named captures</h2>
 <p>Instead of numbering captures, you can also give them names. The generic -- and slightly verbose -- way of naming captures is like this:</p>
 <pre class="code">if 'abc' ~~ / $&amp;lt;myname&gt; = [ \w+ ] / {
    say ~$&amp;lt;myname&gt;      # abc
}</pre>
 <p>The access to the named capture, <span class="code">$&lt;myname> </span>, is a shorthand for indexing the match object as a hash, in other words: <span class="code">$/{ 'myname' }</span> or <span class="code">$/&lt;myname> </span>.</p>
 <p>Named captures can also be nested using regular capture group syntax:</p>
 <pre class="code">if 'abc-abc-abc' ~~ / $&amp;lt;string&gt;=( [ $&amp;lt;part&gt;=[abc] ]* % '-' ) / {
    say ~$&amp;lt;string&gt;       # abc-abc-abc
    say ~$&amp;lt;string&gt;&amp;lt;part&gt; # [abc, abc, abc]
}</pre>
 <p>Coercing the match object to a hash gives you easy programmatic access to all named captures:</p>
 <pre class="code">if 'count=23' ~~ / $&amp;lt;variable&gt;=\w+ '=' $&amp;lt;value&gt;=\w+ / {
    my %h = $/.hash;
    say %h.keys.sort.join: ', ';        # value, variable
    say %h.values.sort.join: ', ';      # 23, count
    for %h.kv -&gt; $k, $v {
        say "Found value '$v' with key '$k'";
        # outputs two lines:
        #   Found value 'count' with key 'variable'
        #   Found value '23' with key 'value'
    }
}</pre>
 <p>There is a more convenient way to get named captures which is discussed in the section on Subrules.</p>
 <a name="t31.9"></a><h1 id="_language_regexes.pod6-Substitution">31.9 Substitution</h1>
 <p>Regular expressions can also be used to substitute one piece of text for another. You can use this for anything from correcting a spelling error (for instance, replacing 'Perl Jam' with 'Pearl Jam') to reformatting an ISO8601 date from <span class="code">yyyy-mm-ddThh:mm:ssZ</span> to <span class="code">mm-dd-yy h:m {AM,PM}</span> and beyond.</p>
 <p>Just like the search-and-replace editor's dialog box, the <span class="code">s/ / /</span> operator has two sides, a left and right side. The left side is where your matching expression goes, and the right-hand side is what you want to replace it with.</p>
 <a name="t31.9.1"></a><h2 id="_language_regexes.pod6-Lexical_conventions">31.9.1 <a name="391"></a>Lexical conventions</h2>
 <p>Substitutions are written similarly to matching, but the substitution operator has both an area for the text to substitute, and the text to be substituted:</p>
 <pre class="code">s/replace/with/;         # a substitution that is applied to $_
$str ~~ s/replace/with/; # a substitution applied to a scalar</pre>
 <p>The substitution operator allows delimiters other than the slash:</p>
 <pre class="code">s|replace|with|;
s!replace!with!;
s,replace,with,;</pre>
 <p>Note that neither the colon <span class="code">:</span> nor balancing delimiters such as <span class="code">{}</span> or <span class="code">()</span> can be delimiters. Colons clash with adverbs such as <span class="code">s:i/Foo/bar/</span> and the other delimiters are used for other purposes.</p>
 <p>Like the <span class="code">m//</span> operator, whitespace is ignored in general. Comments, as in Perl 6 in general, start with the hash character <span class="code">#</span> and go to the end of the current line.</p>
 <a name="t31.9.2"></a><h2 id="_language_regexes.pod6-Replacing_literals">31.9.2 Replacing literals</h2>
 <p>The simplest thing to replace is a literal string. The string you want to replace goes on the left-hand side of the substitution operator, and the string you want to replace it with goes on the right-hand side, like so:</p>
 <pre class="code">$_ = 'The Replacements';
s/Replace/Entrap/;
.say;                    # The Entrapments</pre>
 <p>Alphanumeric characters and the underscore are literal matches, just as in its cousin the <span class="code">m//</span> operator. All other characters must be escaped with a backslash <span class="code">\</span> or included in quotes:</p>
 <pre class="code">$_ = 'Space: 1999';
s/Space\:/Party like it's/;
.say                        # Party like it's 1999</pre>
 <p>Note that the matching restrictions only apply to the left-hand side of the substitution expression.</p>
 <p>By default, substitutions are only done once per string, this is to mitigate unexpected consequences:</p>
 <pre class="code">$_ = 'There can be twly two';
s/tw/on/;                     # Replace 'tw' with 'on' once
.say;                         # There can be only two</pre>
 <a name="t31.9.3"></a><h2 id="_language_regexes.pod6-Wildcards_and_character_classes">31.9.3 Wildcards and character classes</h2>
 <p>Anything that can go into the <span class="code">m//</span> operator can go into the left-hand side of the substitution operator, including wildcards and character classes. This is handy when the text you're matching isn't static, such as trying to match a number in the middle of a string:</p>
 <pre class="code">$_ = "Blake's 9";
s/\d+/7/;         # Replace any sequence of digits with '7'
.say;             # Blake's 7</pre>
 <p>Of course, you can use any of the <span class="code">+</span>, <span class="code">*</span> and <span class="code">?</span> modifiers, and they'll behave just as they would in the <span class="code">m//</span> operator's context.</p>
 <a name="t31.9.4"></a><h2 id="_language_regexes.pod6-Capturing_Groups">31.9.4 Capturing Groups</h2>
 <p>Just as in the match operator, capturing groups are allowed on the left-hand side, and the matched contents populate the <span class="code">$0</span>..<span class="code">$n</span> variables and the <span class="code">$/</span> object:</p>
 <pre class="code">$_ = '2016-01-23 18:09:00';
s/ (\d+)\-(\d+)\-(\d+) /today/; # Replace YYYY-MM-DD with 'today'
.say;                           # today 18:09:00
"$1-$2-$0".say;                 # 01-23-2016
"$/[1]-$/[2]-$/[0]".say;        # 01-23-2016</pre>
 <p>Any of these variables <span class="code">$0</span>, <span class="code">$1</span>, <span class="code">$/</span> can be used on the right-hand side of the operator as well, so you can manipulate what you've just matched. This way you can separate out the <span class="code">YYYY</span>, <span class="code">MM</span> and <span class="code">DD</span> parts of a date and reformat them into <span class="code">MM-DD-YYYY</span> order:</p>
 <pre class="code">$_ = '2016-01-23 18:09:00';
s/ (\d+)\-(\d+)\-(\d+) /$1-$2-$0/; # Transform YYYY-MM-DD to MM-DD-YYYY
.say;                              # 01-23-2016 18:09:00</pre>
 <p>Since the right-hand side is effectively a regular Perl 6 interpolated string, you can reformat the time from <span class="code">HH:MM</span> to <span class="code">h:MM {AM,PM}</span> like so:</p>
 <pre class="code">$_ = '18:38';
s/(\d+)\:(\d+)/{$0 % 12}\:$1 {$0 &amp;lt; 12 ?? 'AM' !! 'PM'}/;
.say;                                                    # 6:38 PM</pre>
 <p>Using the modulo <span class="code">%</span> operator above keeps the sample code under 80 characters, but is otherwise the same as <span class="code">$0 &lt; 12 ?? $0 !! $0 - 12 </span>. When combined with the power of the Parser Expression Grammars that <b>really</b> underly what you're seeing here, you can use "regular expressions" to parse pretty much any language out there.</p>
 <a name="t31.9.4.1"></a><h3 id="_language_regexes.pod6-Common_adverbs">31.9.4.1 Common adverbs</h3>
 <p>The full list of adverbs that you can apply to regular expressions can be found elsewhere in this document (<a href="#30-Adverbs">section Adverbs</a>), but the most common modifiers that you will use are probably <span class="code">:g</span> and <span class="code">:i</span>.</p>
 <ul><li><p>Global adverb <span class="code">:g</span></p>
</li></ul> <p>Ordinarily substitutions are only made once in a given string, but adding the <span class="code">:g</span> modifier overrides that behavior, so that replacements are made everywhere possible. Substitutions are non-recursive, so for instance:</p>
 <pre class="code">$_ = q{I can say "banana" but I don't know when to stop};
s:g/na/nana,/;  # Substitute 'nana,' for 'na'
.say;           # I can say "banana,nana," but I don't ...</pre>
 <p>Even though the substitution doubled the number of <span class="code">na</span>'s in the string, the substitution only took place twice. Which is to say the substitution only applies to the original string; the targeted string does not count.</p>
 <ul><li><p>Insensitive adverb <span class="code">:i</span></p>
</li></ul> <p>Substitutions are normally case-sensitive, so that <span class="code">s/foo/bar/</span> will only match <span class="code">'foo'</span> and not <span class="code">'Foo'</span>. The <span class="code">:i</span> adverb makes matching case-insensitive:</p>
 <pre class="code">$_ = 'STAR TREK Into Darkness';
s/'Trek Into'/TREK\: Into/;     # Someone forgot the colon?
.say;                           # STAR TREK Into Darkness
s:i/'Trek into'/TREK\: Into/;   # Thereifixedit
.say;                           # STAR TREK: Into Darkness</pre>
 <p>If you want more in-depth descriptions of what these adverbs are actually doing, look in the <a href="#30-Adverbs">section Adverbs</a> section of this document.</p>
 <p>These are just a few of the transformations you can apply with the substitution operator. Some of the simpler uses in the real world include removing personal data from log files, editing mySQL timestamps into PostgreSQL format, changing copyright information in HTML files and sanitizing form fields in a web application.</p>
 <p>As an aside, novices to regular expressions often get overwhelmed and think that their regular expression needs to match every piece of data in the line, including what they want to match. Write just enough to match the data you're looking for, no more, no less.</p>
 <a name="t31.10"></a><h1 id="_language_regexes.pod6-Subrules">31.10 <a name="392"></a>Subrules</h1>
 <p>Just like you can put pieces of code into subroutines, you can also put pieces of regex into named rules.</p>
 <pre class="code">my regex line { \N*\n }
if "abc\ndef" ~~ /&amp;lt;line&gt; def/ {
    say "First line: ", $&amp;lt;line&gt;.chomp;      # First line: abc
}</pre>
 <p>A named regex can be declared with <span class="code">my regex thename { body here }</span>, and called with <span class="code">&lt;thename> </span>. At the same time, calling a named regex installs a named capture with the same name.</p>
 <p>If the capture should be of a different name, this can be achieved with the syntax <span class="code">&lt;capturename=regexname> </span>. If no capture at all is desired, a leading dot will suppress it: <span class="code">&lt;.regexname> </span>.</p>
 <p>Here is a more complete (yet still fairly limited) code for parsing <span class="code">ini</span> files:</p>
 <pre class="code">my regex header { \s* '[' (\w+) ']' \h* \n+ }
my regex identifier  { \w+ }
my regex kvpair { \s* &amp;lt;key=identifier&gt; '=' &amp;lt;value=identifier&gt; \n+ }
my regex section {
    &amp;lt;header&gt;
    &amp;lt;kvpair&gt;*
}

my $contents = q:to/EOI/;
    [passwords]
        jack=password1
        joy=muchmoresecure123
    [quotas]
        jack=123
        joy=42
EOI

my %config;
if $contents ~~ /&amp;lt;section&gt;*/ {
    for $&amp;lt;section&gt;.list -&gt; $section {
        my %section;
        for $section&amp;lt;kvpair&gt;.list -&gt; $p {
            say $p&amp;lt;value&gt;;
            %section{ $p&amp;lt;key&gt; } = ~$p&amp;lt;value&gt;;
        }
        %config{ $section&amp;lt;header&gt;[0] } = %section;
    }
}
say %config.perl;
# ("passwords" =&gt; {"jack" =&gt; "password1", "joy" =&gt; "muchmoresecure123"},
#    "quotas" =&gt; {"jack" =&gt; "123", "joy" =&gt; "42"}).hash</pre>
 <p>Named regexes can and should be grouped in <a href="#_language_grammars.pod6">grammars</a>. A list of predefined subrules is listed in <a href="https://design.perl6.org/S05.html#Predefined_Subrules">S05</a>.</p>
 <a name="t31.11"></a><h1 id="_language_regexes.pod6-Adverbs">31.11 Adverbs</h1>
 <p>Adverbs modify how regexes work and give very convenient shortcuts for certain kinds of recurring tasks.</p>
 <p>There are two kinds of adverbs: regex adverbs apply at the point where a regex is defined and matching adverbs apply at the point that a regex matches against a string.</p>
 <p>This distinction often blurs, because matching and declaration are often textually close but using the method form of matching makes the distinction clear.</p>
 <p><span class="code">'abc' ~~ /../</span> is roughly equivalent to <span class="code">'abc'.match(/../)</span>, or even more clearly written in separate lines:</p>
 <pre class="code">my $regex = /../;           # definition
if 'abc'.match($regex) {    # matching
    say "'abc' has at least two characters";
}</pre>
 <p>Regex adverbs like <span class="code">:i</span> go into the definition line and matching adverbs like <span class="code">:overlap</span> are appended to the match call:</p>
 <pre class="code">my $regex = /:i . a/;
for 'baA'.match($regex, :overlap) -&gt; $m {
    say ~$m;
}
# output:
#     ba
#     aA</pre>
 <a name="t31.11.1"></a><h2 id="_language_regexes.pod6-Regex_Adverbs">31.11.1 <a name="395"></a>Regex Adverbs</h2>
 <p>Adverbs that appear at the time of a regex declaration are part of the actual regex and influence how the Perl 6 compiler translates the regex into binary code.</p>
 <p>For example, the <span class="code">:ignorecase</span> (<span class="code">:i</span>) adverb tells the compiler to ignore the distinction between upper case, lower case and title case letters.</p>
 <p>So <span class="code">'a' ~~ /A/</span> is false, but <span class="code">'a' ~~ /:i A/</span> is a successful match.</p>
 <p>Regex adverbs can come before or inside a regex declaration and only affect the part of the regex that comes afterwards, lexically.</p>
 <p>These two regexes are equivalent:</p>
 <pre class="code">my $rx1 = rx:i/a/;      # before
my $rx2 = rx/:i a/;     # inside</pre>
 <p>Whereas these two are not:</p>
 <pre class="code">my $rx3 = rx/a :i b/;   # matches only the b case insensitively
my $rx4 = rx/:i a b/;   # matches completely case insensitively</pre>
 <p>Brackets and parentheses limit the scope of an adverb:</p>
 <pre class="code">/ (:i a b) c /          # matches 'ABc' but not 'ABC'
/ [:i a b] c /          # matches 'ABc' but not 'ABC'</pre>
 <a name="t31.11.1.1"></a><h3 id="_language_regexes.pod6-Ratchet">31.11.1.1 <a name="397"></a>Ratchet</h3>
 <p>The <span class="code">:ratchet</span> or <span class="code">:r</span> adverb causes the regex engine not to backtrack.</p>
 <p>Without this adverb, parts of a regex will try different ways to match a string in order to make it possible for other parts of the regex to match. For example in <span class="code">'abc' ~~ /\w+ ./</span>, the <span class="code">\w+</span> first eats up the whole string, <span class="code">abc</span> but then the <span class="code">.</span> fails. Thus <span class="code">\w+</span> gives up a character, matching only <span class="code">ab</span>, and the <span class="code">.</span> can successfully match the string <span class="code">c</span>. This process of giving up characters (or in the case of alternations, trying a different branch) is known as backtracking.</p>
 <pre class="code">say so 'abc' ~~ / \w+ . /;        # True
say so 'abc' ~~ / :r \w+ . /;     # False</pre>
 <p>Ratcheting can be an optimization, because backtracking is costly. But more importantly, it closely corresponds to how humans parse a text. If you have a regex <span class="code">my regex identifier { \w+ }</span> and <span class="code">my regex keyword { if | else | endif }</span>, you intuitively expect the <span class="code">identifier</span> to gobble up a whole word and not have it give up its end to the next rule, if the next rule otherwise fails. For instance, you don't expect the word <span class="code">motif</span> to be parsed as the identifier <span class="code">mot</span> followed by the keyword <span class="code">if</span>; rather you expect <span class="code">motif</span> to be parsed as one identifier and if the parser expects an <span class="code">if</span> afterwards, rather have it fail than parse the input in a way you don't expect.</p>
 <p>Since ratcheting behavior is so often desirable in parsers, there is a shortcut to declaring a ratcheting regex:</p>
 <pre class="code">my token thing { .... }
# short for
my regex thing { :r ... }</pre>
 <a name="t31.11.1.2"></a><h3 id="_language_regexes.pod6-Sigspace">31.11.1.2 <a name="400"></a>Sigspace</h3>
 <p>The <b> <span class="code">:sigspace</span> </b> or <b> <span class="code">:s</span> </b> adverb makes whitespace significant in a regex.</p>
 <pre class="code">say so "I used Photoshop®"   ~~ m:i/   photo shop /; # True 
 say so "I used a photo shop" ~~ m:i &lt;b&gt;:s&lt;/b&gt; / photo shop /; # True 
 say so "I used Photoshop®"   ~~ m:i &lt;b&gt;:s&lt;/b&gt; / photo shop /; # False 
</pre>
 <p><span class="code">m:s/ photo shop /</span> acts just the same as if one had written <span class="code">m/ photo &lt;.ws> shop &lt;.ws> /</span>. By default, <span class="code">&lt;.ws> </span> makes sure that words are separated, so <span class="code">a b</span> and <span class="code">^&amp;</span> will match <span class="code">&lt;.ws> </span> in the middle, but <span class="code">ab</span> won't.</p>
 <p>Where whitespace in a regex turns into <span class="code">&lt;.ws></span> depends on what comes before the whitespace. In the above example, whitespace in the beginning of a regex doesn't turn into <span class="code">&lt;.ws></span>, but whitespace after characters does. In general, the rule is that if a term might match something, whitespace after it will turn into <span class="code">&lt;.ws></span>.</p>
 <p>In addition, if whitespace comes after a term, but <i>before</i> a quantifier (<span class="code">+</span>, <span class="code">*</span>, or <span class="code">?</span>), <span class="code">&lt;.ws></span> will be matched after every match of the term, so <span class="code">foo +</span> becomes <span class="code">[ foo &lt;.ws> ]+</span>. On the other hand, whitespace <i>after</i> a quantifier acts as normal significant whitespace, e.g., "<span class="code">foo+ </span>" becomes <span class="code">foo+ &lt;.ws></span>.</p>
 <p>In all, this code:</p>
 <pre class="code">rx :s { 
     ^^ 
     { 
         say "No sigspace after this"; 
     } 
     &amp;lt;.assertion_and_then_ws&gt; 
     characters_with_ws_after+ 
     ws_separated_characters * 
     [ 
     | some "stuff" .. . 
     | $$ 
     ] 
     :my $foo = "no ws after this"; 
     $foo 
 } 
</pre>
 <p>Becomes:</p>
 <pre class="code">rx { 
     ^^  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  
     { 
         say "No space after this"; 
     } 
     &amp;lt;.assertion_and_then_ws&gt;  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  
     characters_with_ws_after+  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  
     [ws_separated_characters  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt; ]*  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  
     [ 
     | some  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  "stuff"  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  ..  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  .  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  
     | $$  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  
     ]  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  
     :my $foo = "no ws after this"; 
     $foo  &lt;b&gt;&amp;lt;.ws&gt;&lt;/b&gt;  
 } 
</pre>
 <p>If a regex is declared with the <span class="code">rule</span> keyword, both the <span class="code">:sigspace</span> and <span class="code">:ratchet</span> adverbs are implied.</p>
 <p>Grammars provide an easy way to override what <span class="code">&lt;.ws></span> matches:</p>
 <pre class="code">grammar Demo {
    token ws {
        &amp;lt;!ww&gt;   # only match when not within a word
        \h*     # only match horizontal whitespace
    }
    rule TOP {  # called by Demo.parse;
        a b '.'
    }
}

# doesn't parse, whitespace required between a and b
say so Demo.parse("ab.");         # False
say so Demo.parse("a b.");        # True
say so Demo.parse("a\tb .");      # True
# \n is vertical whitespace, so no match
say so Demo.parse("a\tb\n.");     # False</pre>
 <p>When parsing file formats where some whitespace (for example vertical whitespace) is significant, it is advisable to override <span class="code">ws</span>.</p>
 <a name="t31.11.2"></a><h2 id="_language_regexes.pod6-Matching_adverbs">31.11.2 Matching adverbs</h2>
 <p>In contrast to regex adverbs, which are tied to the declaration of a regex, matching adverbs only make sense while matching a string against a regex.</p>
 <p>They can never appear inside a regex, only on the outside -- either as part of an <span class="code">m/.../</span> match or as arguments to a match method.</p>
 <a name="t31.11.2.1"></a><h3 id="_language_regexes.pod6-Continue">31.11.2.1 <a name="406"></a>Continue</h3>
 <p>The <span class="code">:continue</span> or short <span class="code">:c</span> adverb takes an argument. The argument is the position where the regex should start to search. By default, it searches from the start of the string, but <span class="code">:c</span> overrides that. If no position is specified for <span class="code">:c</span> it will default to <span class="code">0</span> unless <span class="code">$/</span> is set, in which case it defaults to <span class="code">$/.to</span>.</p>
 <pre class="code">given 'a1xa2' {
    say ~m/a./;         # a1
    say ~m:c(2)/a./;    # a2
}</pre>
 <a name="t31.11.2.2"></a><h3 id="_language_regexes.pod6-Exhaustive">31.11.2.2 Exhaustive</h3>
 <p>To find all possible matches of a regex -- including overlapping ones -- and several ones that start at the same position, use the <span class="code">:exhaustive</span> (short <span class="code">:ex</span>) adverb.</p>
 <pre class="code">given 'abracadabra' {
    for m:exhaustive/ a .* a / -&gt; $match {
        say ' ' x $match.from, ~$match;
    }
}</pre>
 <p>The above code produces this output:</p>
 <pre class="code">abracadabra 
 abracada 
 abraca 
 abra 
    acadabra 
    acada 
    aca 
      adabra 
      ada 
        abra 
</pre>
 <a name="t31.11.2.3"></a><h3 id="_language_regexes.pod6-Global">31.11.2.3 <a name="409"></a>Global</h3>
 <p>Instead of searching for just one match and returning a <a href="#_type_Match.pod6">Match object</a>, search for every non-overlapping match and return them in a <a href="#_type_List.pod6">List</a>. In order to do this use the <span class="code">:global</span> adverb:</p>
 <pre class="code">given 'several words here' {
    my @matches = m:global/\w+/;
    say @matches.elems;         # 3
    say ~@matches[2];           # here
}</pre>
 <p><span class="code">:g</span> is shorthand for <span class="code">:global</span>.</p>
 <a name="t31.11.2.4"></a><h3 id="_language_regexes.pod6-Pos">31.11.2.4 <a name="412"></a>Pos</h3>
 <p>Anchor the match at a specific position in the string:</p>
 <pre class="code">given 'abcdef' {
    my $match = m:pos(2)/.*/;
    say $match.from;        # 2
    say ~$match;            # cdef
}</pre>
 <p><span class="code">:p</span> is shorthand for <span class="code">:pos</span>.</p>
 <a name="t31.11.2.5"></a><h3 id="_language_regexes.pod6-Overlap">31.11.2.5 Overlap</h3>
 <p>To get several matches, including overlapping matches, but only one (the longest) from each starting position, specify the <span class="code">:overlap</span> (short <span class="code">:ov</span>) adverb:</p>
 <pre class="code">given 'abracadabra' {
    for m:overlap/ a .* a / -&gt; $match {
        say ' ' x $match.from, ~$match;
    }
}</pre>
 <p>produces</p>
 <pre class="code">abracadabra 
    acadabra 
      adabra 
        abra 
</pre>
 <a name="t31.12"></a><h1 id="_language_regexes.pod6-Look-around_assertions">31.12 Look-around assertions</h1>
 <a name="t31.12.1"></a><h2 id="_language_regexes.pod6-Lookahead_assertions">31.12.1 Lookahead assertions</h2>
 <p>To check that a pattern appears before another pattern, one can use a lookahead assertion via the <span class="code">before</span> assertion. This has the form:</p>
 <pre class="code">&amp;lt;?before pattern&gt;</pre>
 <p>Thus, to search for the string <span class="code">foo</span> which is immediately followed by the string <span class="code">bar</span>, one could use the following regexp:</p>
 <pre class="code">rx{ foo &amp;lt;?before bar&gt; }</pre>
 <p>which one could use like so:</p>
 <pre class="code">say "foobar" ~~ rx{ foo &amp;lt;?before bar&gt; };   #-&gt;  foo</pre>
 <p>However, if you want to search for a pattern which is <b>not</b> immediately followed by some pattern, then you need to use a negative lookahead assertion, this has the form:</p>
 <pre class="code">&amp;lt;!before pattern&gt;</pre>
 <p>Hence all occurrences of <span class="code">foo</span> which <i>is not</i> before <span class="code">bar</span> would be matched by</p>
 <pre class="code">rx{ foo &amp;lt;!before bar&gt; }</pre>
 <a name="t31.12.2"></a><h2 id="_language_regexes.pod6-Lookbehind_assertions">31.12.2 Lookbehind assertions</h2>
 <p>To check that a pattern appears before another pattern, one can use a lookbehind assertion via the <span class="code">after</span> assertion. This has the form:</p>
 <pre class="code">&amp;lt;?after pattern&gt;</pre>
 <p>Thus, to search for the string <span class="code">bar</span> which is immediately preceded by the string <span class="code">foo</span>, one could use the following regexp:</p>
 <pre class="code">rx{ &amp;lt;?after foo&gt; bar }</pre>
 <p>which one could use like so:</p>
 <pre class="code">say "foobar" ~~ rx{ &amp;lt;?after foo&gt; bar };   #-&gt;  bar</pre>
 <p>However, if you want to search for a pattern which is <b>not</b> immediately preceded by some pattern, then you need to use a negative lookbehind assertion, this has the form:</p>
 <pre class="code">&amp;lt;!after pattern&gt;</pre>
 <p>Hence all occurrences of <span class="code">bar</span> which <i>do not</i> have <span class="code">foo</span> before them would be matched by</p>
 <pre class="code">rx{ &amp;lt;!after foo&gt; bar }</pre>
 <a name="t31.13"></a><h1 id="_language_regexes.pod6-Best_practices_and_gotchas">31.13 Best practices and gotchas</h1>
 <p>Regexes and <a href="#_language_grammars.pod6">grammars</a> are a whole programming paradigm that you have to learn (if you don't already know it very well).</p>
 <p>To help you write robust regexes and grammars, here are some best practices that the authors have found useful. These range from small-scale code layout issues to what actually to match, and help to avoid common pitfalls and writing unreadable code.</p>
 <a name="t31.13.1"></a><h2 id="_language_regexes.pod6-Code_layout">31.13.1 Code layout</h2>
 <p>Without the <span class="code">:sigspace</span> adverb, whitespace is not significant in Perl 6 regexes. Use that to your own advantage and insert whitespace where it increases readability. Also insert comments where necessary.</p>
 <p>Compare the very compact</p>
 <pre class="code">my regex float { &amp;lt;[+-]&gt;?\d*'.'\d+[e&amp;lt;[+-]&gt;?\d+]? }</pre>
 <p>to the more readable</p>
 <pre class="code">my regex float {
     &amp;lt;[+-]&gt;?        # optional sign
     \d*            # leading digits, optional
     '.'
     \d+
     [              # optional exponent
        e &amp;lt;[+-]&gt;?  \d+
     ]?
}</pre>
 <p>As a rule of thumb, use whitespace around atoms and inside groups. Put quantifiers directly after the atom, without inserting a blank. Vertically align opening and closing brackets and parentheses.</p>
 <p>When you use a list of alternations inside a parenthesis or brackets, align the vertical bars:</p>
 <pre class="code">my regex example {
    &amp;lt;preamble&gt;
    [
    || &amp;lt;choice_1&gt;
    || &amp;lt;choice_2&gt;
    || &amp;lt;choice_3&gt;
    ]+
    &amp;lt;postamble&gt;
}</pre>
 <a name="t31.13.2"></a><h2 id="_language_regexes.pod6-Keep_it_small">31.13.2 Keep it small</h2>
 <p>Regexes come with very little boilerplate, so they are often more compact than regular code. Thus it is important to keep regexes short.</p>
 <p>When you can come up with name for a part of a regex, it is usually best to put it into a separate, named regex.</p>
 <p>For example you could take the float regex from earlier:</p>
 <pre class="code">my regex float {
     &amp;lt;[+-]&gt;?        # optional sign
     \d*            # leading digits, optional
     '.'
     \d+
     [              # optional exponent
        e &amp;lt;[+-]&gt;?  \d+
     ]?
}</pre>
 <p>And decompose it into parts:</p>
 <pre class="code">my token sign { &amp;lt;[+-]&gt; }
my token decimal { \d+ }
my token exponent { 'e' &amp;lt;sign&gt;? &amp;lt;decimal&gt; }
my regex float {
    &amp;lt;sign&gt;?
    &amp;lt;decimal&gt;?
    '.'
    &amp;lt;decimal&gt;
    &amp;lt;exponent&gt;?
}</pre>
 <p>That helps especially when the regex becomes more complicated. For example you might want to make the decimal point optional if an exponent is there.</p>
 <pre class="code">my regex float {
    &amp;lt;sign&gt;?
    [
    || &amp;lt;decimal&gt;?  '.' &amp;lt;decimal&gt; &amp;lt;exponent&gt;?
    || &amp;lt;decimal&gt; &amp;lt;exponent&gt;
    ]
}</pre>
 <a name="t31.13.3"></a><h2 id="_language_regexes.pod6-What_to_match">31.13.3 What to match</h2>
 <p>Often the input data format has no clear-cut specification, or the specification is not known to the programmer. Then it is good to be liberal in what you expect, but only as long as there are no ambiguities possible.</p>
 <p>For example in <span class="code">ini</span> files:</p>
 <pre class="code">[section]
key=value</pre>
 <p>What can be inside the section header? Allowing only a word might be too restrictive, somebody might write <span class="code">[two words]</span>, or use dashes, or so. Instead of asking what's allowed on the inside, it might be worth asking instead: <i>what's not allowed?</i></p>
 <p>Clearly, closing brackets are not allowed, because <span class="code">[a]b]</span> would be rather ambiguous. By the same argument, opening brackets should be forbidden. This leaves us with</p>
 <pre class="code">token header { '[' &amp;lt;-[ \[\] ]&gt;+ ']' }</pre>
 <p>which is fine if you are only processing one line. But if you're processing a whole file, suddenly the regex parses</p>
 <pre class="code">[with a
newline in between]</pre>
 <p>which might not be a good idea. A pragmatic compromise would be</p>
 <pre class="code">token header { '[' &amp;lt;-[ \[\] \n ]&gt;+ ']' }</pre>
 <p>and then, in the post-processing, strip leading and trailing spaces and tabs from the section header.</p>
 <a name="t31.13.4"></a><h2 id="_language_regexes.pod6-Matching_Whitespace">31.13.4 Matching Whitespace</h2>
 <p>The <span class="code">:sigspace</span> adverb (or using the <span class="code">rule</span> declarator instead of <span class="code">token</span> or <span class="code">regex</span>) is very handy for implicitly parsing whitespace that can appear in many places.</p>
 <p>Going back to the example of parsing <span class="code">ini</span> files, we have</p>
 <pre class="code">my regex kvpair { \s* &amp;lt;key=identifier&gt; '=' &amp;lt;value=identifier&gt; \n+ }</pre>
 <p>which is probably not as liberal as we want it to be. Since the user might put spaces around the equals sign, it should rather read</p>
 <pre class="code">my regex kvpair { \s* &amp;lt;key=identifier&gt; \s* '=' \s* &amp;lt;value=identifier&gt; \n+ }</pre>
 <p>That's growing unwieldy pretty quickly. So instead one can write</p>
 <pre class="code">my rule kvpair { &amp;lt;key=identifier&gt; '=' &amp;lt;value=identifier&gt; \n+ }</pre>
 <p>But wait! The implicit whitespace matching after the value uses up all whitespace, including newline characters, so the <span class="code">\n+</span> doesn't have anything left to match (and <span class="code">rule</span> also disables backtracking, so no luck here).</p>
 <p>Therefore it is important to redefine your definition of implicit whitespace to whitespace that is not significant in the input format.</p>
 <p>This works by redefining the token <span class="code">ws</span>, however it only works in <a href="#_language_grammars.pod6">grammars</a>:</p>
 <pre class="code">grammar IniFormat {
    token ws { &amp;lt;!ww&gt; \h* }
    rule header { \s* '[' (\w+) ']' \n+ }
    token identifier  { \w+ }
    rule kvpair { \s* &amp;lt;key=identifier&gt; '=' &amp;lt;value=identifier&gt; \n+ }
    token section {
        &amp;lt;header&gt;
        &amp;lt;kvpair&gt;*
    }

    token TOP {
        &amp;lt;section&gt;*
    }
}

my $contents = q:to/EOI/;
    [passwords]
        jack = password1
        joy = muchmoresecure123
    [quotas]
        jack = 123
        joy = 42
EOI
say so IniFormat.parse($contents);</pre>
 <p>Besides putting all regexes into a grammar and turning them into tokens (because they don't need to backtrack anyway) the interesting new bit is</p>
 <pre class="code">token ws { &amp;lt;!ww&gt; \h* }</pre>
 <p>which gets called for implicit whitespace parsing. It matches when it is not between two word characters (<span class="code">&lt;!ww> </span>, negated "within word" assertion), and zero or more horizontal space characters. The limitation to horizontal whitespace is important, because newlines (which are vertical whitespace) delimit records and shouldn't be matched implicitly.</p>
 <p>Still there is some whitespace-related trouble lurking. The regex <span class="code">\n+</span> won't match a string like <span class="code">"\n \n"</span>, because there is a blank between the two newlines. To allow such input strings, replace <span class="code">\n+</span> by <span class="code">\n\s*</span>.</p>
</div> <!-- /language/setbagmix.pod6 --><div class="pod-body"><a id="_language_setbagmix.pod6"></a><a name="t32"><h1 class="title">32 Sets, Bags, and Mixes</h1></a> <p class="subtitle">Unordered collections of unique and weighted objects in Perl 6</p> <p>Often you want to collect objects in a container but you do not care about the order of these objects. For such cases, Perl 6 provides the <i>unordered</i> collection types <a href="#_type_Set.pod6"> <b> <span class="code">Set</span> </b> </a>, <a href="#_type_SetHash.pod6"> <b> <span class="code">SetHash</span> </b> </a>, <a href="#_type_Bag.pod6"> <b> <span class="code">Bag</span> </b> </a>, <a href="#_type_BagHash.pod6"> <b> <span class="code">BagHash</span> </b> </a>, <a href="#_type_Mix.pod6"> <b> <span class="code">Mix</span> </b> </a>, and <a href="#_type_MixHash.pod6"> <b> <span class="code">MixHash</span> </b> </a>. Being unordered, these containers can be more efficient than <a href="#_type_List.pod6"> <b> <span class="code">Lists</span> </b> </a> for looking up elements or dealing with repeated items.</p>
 <p>If you want to get the contained objects (elements) without duplicates and you only care <i>whether</i> an element is in the collection or not, you can use a <a href="#_type_Set.pod6"> <b> <span class="code">Set</span> </b> </a> or <a href="#_type_SetHash.pod6"> <b> <span class="code">SetHash</span> </b> </a>. (If you want to get rid of duplicates but still preserve order, take a look at the <a href="#_routine_unique.pod6"> <span class="code">unique</span> </a> routine for <a href="#_type_List.pod6"> <b> <span class="code">Lists</span> </b> </a>.)</p>
 =defn  Set or SetHash
Collection of distinct objects
 <p>If you want to keep track of the number of times each object appeared, you can use a <a href="#_type_Bag.pod6"> <b> <span class="code">Bag</span> </b> </a> or <a href="#_type_BagHash.pod6"> <b> <span class="code">BagHash</span> </b> </a>. In these Baggy containers each element has a weight (an unsigned integer) indicating the number of times the same object has been included in the collection. The types <a href="#_type_Mix.pod6"> <b> <span class="code">Mix</span> </b> </a> and <a href="#_type_MixHash.pod6"> <b> <span class="code">MixHash</span> </b> </a> are similar, but they also allow fractional weights.</p>
 =defn  Bag or BagHash
Collection of distinct objects mapped to integer weights

=defn  Mix or MixHash
Collection of distinct objects mapped to real-number weights
 TODO: Partial type graph showing only QuantHash, Setty, Baggy, Mixy, Set,
      SetHash, Bag, BagHash, Mix, MixHash.
 <p><a href="#_type_Set.pod6"> <b> <span class="code">Set</span> </b> </a>, <a href="#_type_Bag.pod6"> <b> <span class="code">Bag</span> </b> </a>, and <a href="#_type_Mix.pod6"> <b> <span class="code">Mix</span> </b> </a> are <i>immutable</i> types. Use the mutable variants <a href="#_type_SetHash.pod6"> <b> <span class="code">SetHash</span> </b> </a>, <a href="#_type_BagHash.pod6"> <b> <span class="code">BagHash</span> </b> </a>, and <a href="#_type_MixHash.pod6"> <b> <span class="code">MixHash</span> </b> </a> if you want to add or remove elements after the container has been constructed.</p>
 <p>The six collection classes <span class="code">Set</span>, <span class="code">SetHash</span>, <span class="code">Bag</span>, <span class="code">BagHash</span>, <span class="code">Mix</span>, <span class="code">MixHash</span>, all share similar semantics.</p>
 <p>For one thing, as far as they are concerned, identical objects refer to the same element -- where identity is determined using the <a href="#_routine_WHICH.pod6">WHICH</a> methods (i.e. the same way that the <a href="===">===</a> operator checks identity). For value types like <span class="code">Str</span>, this means having the same value; for reference types like <span class="code">Array</span>, it means referring to the same object instance.</p>
 <p>Secondly, they provide a Hash-like interface where the actual elements of the collection (which can be objects of any type) are the 'keys', and the associated weights are the 'values':</p>
 <table>
<tr><th>type of $a</th> <th>value of $a{$b} if $b is an element</th> <th>value of $a{$b} if $b is not an element</th></tr>
<tr><td>Set / SetHash</td> <td>True</td> <td>False</td></tr>
 <tr><td>Bag / BagHash</td> <td>a positive integer</td> <td>0</td></tr>
 <tr><td>Mix / MixHash</td> <td>a non-zero real number</td> <td>0</td></tr>
</table> <a name="t32.1"></a><h1 id="_language_setbagmix.pod6-Set/Bag_Operators">32.1 Set/Bag Operators</h1>
 TODO: Update this after ab5tract's set/bag/mix operator redesign.
 <p>There are many infixes devoted to preforming common operations on <a href="#_type_Set.pod6"> <span class="code">Set</span> s</a>, such as unions and set differences. Other operations include boolean checks, like whether an object is an element of a <span class="code">Set</span>, or whether one <span class="code">Set</span> is a subset of another <span class="code">Set</span>.</p>
 <p>These infixes can be written using the UTF-8 character that represents the function (like <a href="∈"> <span class="code">∈</span> </a>, or <a href="∪"> <span class="code">∪</span> </a>), or they can be written with an equivalent ASCII version (like <a href="#_routine_(elem).pod6"> <span class="code">(elem)</span> </a> or <a href="(|)"> <span class="code">(|)</span> </a>).</p>
 <p>Most of the time, explicitly using <span class="code">Set</span> objects with these infixes is unnecessary. All of the infix operators will work on any objects of type <a href="#_type_Any.pod6"> <span class="code">Any</span> </a> for its arguments (e.g., <a href="#_type_List.pod6"> <span class="code">List</span> s</a>, <a href="#_type_Array.pod6"> <span class="code">Array</span> s</a>, <a href="#_type_Mix.pod6"> <span class="code">Mix</span> es</a>, etc.) and coerce them to <span class="code">Set</span>s where needed.</p>
 <p>In some cases, if the type of an argument is a <a href="#_type_Bag.pod6">Bag</a>, the infix operator will behave in a different but analogous way to the way it would behave with only <span class="code">Set</span> arguments.</p>
 <a name="t32.1.1"></a><h2 id="_language_setbagmix.pod6-Operators_that_return_Bool">32.1.1 Operators that return <span class="code">Bool</span></h2>
 <a name="t32.1.1.1"></a><h3 id="_language_setbagmix.pod6-infix_(elem)">32.1.1.1 infix (elem)</h3>
 <pre class="code">multi sub infix:&amp;lt;(elem)&gt;($a, Any $b --&gt; Bool)
multi sub infix:&amp;lt;(elem)&gt;($a, Set $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="393" name="">Membership operator</a></span>.</p>
 <p>Returns <span class="code">True</span> if <span class="code">$a</span> is an <b>element</b> of <span class="code">$b</span>.</p>
 <a name="t32.1.1.1.1"></a><h4 id="_language_setbagmix.pod6-infix_∈">32.1.1.1.1 infix ∈</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"∈"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="394" name="">Membership operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="#_routine_(elem).pod6">(elem)</a>, at codepoint U+2208 (ELEMENT OF).</p>
 <a name="t32.1.1.1.2"></a><h4 id="_language_setbagmix.pod6-infix_∉">32.1.1.1.2 infix ∉</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"∉"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="396" name="">Non-membership operator</a></span>.</p>
 <p>Equivalent to <span class="code">!(elem)</span>, i.e., returns <span class="code">True</span> if <span class="code">$a</span> is not an element of <span class="code">$b</span>, at codepoint U+2209 (NOT AN ELEMENT OF).</p>
 <a name="t32.1.1.2"></a><h3 id="_language_setbagmix.pod6-infix_(cont)">32.1.1.2 infix (cont)</h3>
 <pre class="code">multi sub infix:&amp;lt;(cont)&gt;(Any $a, $b --&gt; Bool)
multi sub infix:&amp;lt;(cont)&gt;(Set $a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="398" name="">Contains operator</a></span>.</p>
 <p>Returns <span class="code">True</span> if <span class="code">$a</span> <b>contains</b> <span class="code">$b</span> as an element.</p>
 <a name="t32.1.1.2.1"></a><h4 id="_language_setbagmix.pod6-infix_∋">32.1.1.2.1 infix ∋</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"∋"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="399" name="">Contains operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="#_routine_(cont).pod6">(cont)</a>, at codepoint U+220B (CONTAINS AS MEMBER).</p>
 <a name="t32.1.1.2.2"></a><h4 id="_language_setbagmix.pod6-infix_∌">32.1.1.2.2 infix ∌</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"∌"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="401" name="">Does not contain operator</a></span>.</p>
 <p>Equivalent to <span class="code">!(cont)</span>, i.e., returns <span class="code">True</span> if <span class="code">$a</span> does not contain <span class="code">$b</span>, at codepoint U+220C (DOES NOT CONTAIN AS MEMBER).</p>
 <a name="t32.1.1.3"></a><h3 id="_language_setbagmix.pod6-infix_(&lt;=)">32.1.1.3 infix (&lt;=)</h3>
 <pre class="code">multi sub infix:&amp;lt;&amp;lt;(&amp;lt;=)&gt;&gt;(Any $a, Any $b --&gt; Bool)
multi sub infix:&amp;lt;&amp;lt;(&amp;lt;=)&gt;&gt;(Setty $a, Setty $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="402" name="">Subset of or equal to operator</a></span>.</p>
 <p>Returns <span class="code">True</span> if <span class="code">$a</span> is a <b>subset</b> or is equal to <span class="code">$b</span>, i.e., if all the elements of <span class="code">$a</span> are elements of <span class="code">$b</span> and <span class="code">$a</span> is a smaller or equal sized set than <span class="code">$b</span>.</p>
 <a name="t32.1.1.3.1"></a><h4 id="_language_setbagmix.pod6-infix_⊆">32.1.1.3.1 infix ⊆</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊆"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="403" name="">Subset of or equal to operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(&amp;lt;=)">(&lt;=)</a>, at codepoint U+2286 (SUBSET OF OR EQUAL TO).</p>
 <a name="t32.1.1.3.2"></a><h4 id="_language_setbagmix.pod6-infix_⊈">32.1.1.3.2 infix ⊈</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊈"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="404" name="">Neither subset of nor equal to operator</a></span>.</p>
 <p>Equivalent to <span class="code">!(&lt;=)</span>, at codepoint U+2288 (NEITHER A SUBSET OF NOR EQUAL TO).</p>
 <a name="t32.1.1.4"></a><h3 id="_language_setbagmix.pod6-infix_(&lt;)">32.1.1.4 infix (&lt;)</h3>
 <pre class="code">multi sub infix:&amp;lt;&amp;lt;(&amp;lt;)&gt;&gt;(Any $a, Any $b --&gt; Bool)
multi sub infix:&amp;lt;&amp;lt;(&amp;lt;)&gt;&gt;(Setty $a, Setty $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="405" name="">Subset of operator</a></span>.</p>
 <p>Returns <span class="code">True</span> if <span class="code">$a</span> is a <b>strict subset</b> of <span class="code">$b</span>, i.e., that all the elements of <span class="code">$a</span> are elements of <span class="code">$b</span> but <span class="code">$a</span> is a smaller set than <span class="code">$b</span>.</p>
 <a name="t32.1.1.4.1"></a><h4 id="_language_setbagmix.pod6-infix_⊂">32.1.1.4.1 infix ⊂</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊂"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="407" name="">Subset of operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(&amp;lt;)">(&lt;)</a>, at codepoint U+2282 (SUBSET OF).</p>
 <a name="t32.1.1.4.2"></a><h4 id="_language_setbagmix.pod6-infix_⊄">32.1.1.4.2 infix ⊄</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊄"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="408" name="">Not a subset of operator</a></span>.</p>
 <p>Equivalent to <span class="code">!(&lt;)</span>, at codepoint U+2284 (NOT A SUBSET OF).</p>
 <a name="t32.1.1.5"></a><h3 id="_language_setbagmix.pod6-infix_(>=)">32.1.1.5 infix (>=)</h3>
 <pre class="code">multi sub infix:&amp;lt;&amp;lt;(&gt;=)&gt;&gt;(Any $a, Any $b --&gt; Bool)
multi sub infix:&amp;lt;&amp;lt;(&gt;=)&gt;&gt;(Setty $a, Setty $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="410" name="">Superset of or equal to operator</a></span>.</p>
 <p>Like <a href="(&amp;lt;=)">(&lt;=)</a> with reversed arguments. Returns <span class="code">True</span> if <span class="code">$a</span> is a <b>superset</b> of or equal to <span class="code">$b</span>.</p>
 <a name="t32.1.1.5.1"></a><h4 id="_language_setbagmix.pod6-infix_⊇">32.1.1.5.1 infix ⊇</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊇"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="411" name="">Superset of or equal to operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(&gt;=)">(>=)</a>, at codepoint U+2287 (SUPERSET OF OR EQUAL TO).</p>
 <a name="t32.1.1.5.2"></a><h4 id="_language_setbagmix.pod6-infix_⊉">32.1.1.5.2 infix ⊉</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊉"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="413" name="">Neither a superset of nor equal to operator</a></span>.</p>
 <p>Equivalent to <span class="code">!(>=)</span>, at codepoint U+2289 (NEITHER A SUPERSET OF NOR EQUAL TO).</p>
 <a name="t32.1.1.6"></a><h3 id="_language_setbagmix.pod6-infix_(>)">32.1.1.6 infix (>)</h3>
 <pre class="code">multi sub infix:&amp;lt;&amp;lt;(&gt;)&gt;&gt;(Any $a, Any $b --&gt; Bool)
multi sub infix:&amp;lt;&amp;lt;(&gt;)&gt;&gt;(Setty $a, Setty $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="414" name="">Superset of operator</a></span>.</p>
 <p>Like <a href="(&amp;lt;)">(&lt;)</a> with reversed arguments. Returns <span class="code">True</span> if <span class="code">$a</span> is a <b>strict superset</b> of <span class="code">$b</span>.</p>
 <a name="t32.1.1.6.1"></a><h4 id="_language_setbagmix.pod6-infix_⊃">32.1.1.6.1 infix ⊃</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊃"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="415" name="">Superset of operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(&gt;)">(>)</a>, at codepoint U+2283 (SUPERSET OF).</p>
 <a name="t32.1.1.6.2"></a><h4 id="_language_setbagmix.pod6-infix_⊅">32.1.1.6.2 infix ⊅</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊅"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="416" name="">Not a superset of operator</a></span>.</p>
 <p>Equivalent to <span class="code">!(>)</span>, at codepoint U+2285 (NOT A SUPERSET OF).</p>
 <a name="t32.1.1.7"></a><h3 id="_language_setbagmix.pod6-infix_(&lt;+)">32.1.1.7 infix (&lt;+)</h3>
 <pre class="code">multi sub infix:&amp;lt;&amp;lt;(&amp;lt;+)&gt;&gt;(Any $a, Any $b --&gt; Bool)
multi sub infix:&amp;lt;&amp;lt;(&amp;lt;+)&gt;&gt;(Baggy $a, Baggy $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="417" name="">Baggy subset of operator</a></span>.</p>
 <p>Returns <span class="code">True</span> if <span class="code">$a</span> is a Baggy <b>subset</b> of <span class="code">$b</span>, i.e., if all the elements of <span class="code">$a</span> are in <span class="code">$b</span> and each element of <span class="code">$b</span> is weighed at least as heavily as the element is in <span class="code">$a</span>.</p>
 <a name="t32.1.1.7.1"></a><h4 id="_language_setbagmix.pod6-infix_≼">32.1.1.7.1 infix ≼</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"≼"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="418" name="">Baggy subset of operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(&amp;lt;+)">(&lt;+)</a>, at codepoint U+227C (PRECEDES OR EQUAL TO).</p>
 <a name="t32.1.1.8"></a><h3 id="_language_setbagmix.pod6-infix_(>+)">32.1.1.8 infix (>+)</h3>
 <pre class="code">multi sub infix:&amp;lt;&amp;lt;(&gt;+)&gt;&gt;(Baggy $a, Baggy $b --&gt; Bool)
multi sub infix:&amp;lt;&amp;lt;(&gt;+)&gt;&gt;(Any $a, Any $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="419" name="">Baggy superset of operator</a></span>.</p>
 <p>Returns <span class="code">True</span> if <span class="code">$a</span> is a Baggy <b>superset</b> of <span class="code">$b</span>, i.e., if all the elements of <span class="code">$b</span> are in <span class="code">$a</span> and no element of <span class="code">$b</span> is weighted heavier than that element is in <span class="code">$a</span>.</p>
 <a name="t32.1.1.8.1"></a><h4 id="_language_setbagmix.pod6-infix_≽">32.1.1.8.1 infix ≽</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"≽"&gt;&gt;($a, $b --&gt; Bool)</pre>
 <p><span class="indexed"><a id="420" name="">Baggy superset of operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(&gt;+)">(>+)</a>, at codepoint U+227D (SUCCEEDS OR EQUAL TO).</p>
 <a name="t32.1.2"></a><h2 id="_language_setbagmix.pod6-Operators_that_return_Set_or_Bag">32.1.2 Operators that return <span class="code">Set</span> or <span class="code">Bag</span></h2>
 <a name="t32.1.2.1"></a><h3 id="_language_setbagmix.pod6-infix_(|)">32.1.2.1 infix (|)</h3>
 <pre class="code">only sub infix:&amp;lt;(|)&gt;(**@p)</pre>
 <p><span class="indexed"><a id="421" name="">Union operator</a></span>.</p>
 <p>Returns the <b>union</b> of all its arguments. Generally, this creates a new <span class="code">Set</span> that contains all the elements its arguments contain.</p>
 <pre class="code">&amp;lt;a a b c d&gt; (|) &amp;lt;h g f e d c&gt; (|) &amp;lt;i j&gt; === set &amp;lt;a b c d e f g h i j&gt;</pre>
 <p>If any of its arguments are <span class="code">Baggy</span>, it creates a new <span class="code">Bag</span> that contains all the elements of the arguments, each weighed by the highest weight that appeared for that element.</p>
 <pre class="code">bag(&amp;lt;a a b c a&gt;) (|) bag(&amp;lt;a a b c c&gt;) === bag(&amp;lt;a a a b c c&gt;)</pre>
 <a name="t32.1.2.1.1"></a><h4 id="_language_setbagmix.pod6-infix_∪">32.1.2.1.1 infix ∪</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"∪"&gt;&gt;(|p)</pre>
 <p><span class="indexed"><a id="422" name="">Union operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(|)">(|)</a>, at codepoint U+222A (UNION).</p>
 <a name="t32.1.2.2"></a><h3 id="_language_setbagmix.pod6-infix_(&amp;)">32.1.2.2 infix (&amp;)</h3>
 <pre class="code">only sub infix:&amp;lt;(&amp;amp;)&gt;(**@p)</pre>
 <p><span class="indexed"><a id="423" name="">Intersection operator</a></span>.</p>
 <p>Returns the <b>intersection</b> of all of its arguments. Generally, this creates a new <span class="code">Set</span> that contains only the elements common to all of the arguments.</p>
 <pre class="code">&amp;lt;a b c&gt; (&amp;amp;) &amp;lt;b c d&gt; === set &amp;lt;b c&gt;
&amp;lt;a b c d&gt; (&amp;amp;) &amp;lt;b c d e&gt; (&amp;amp;) &amp;lt;c d e f&gt; === set &amp;lt;c d&gt;</pre>
 <p>If any of the arguments are <span class="code">Baggy</span>, the result is a new <span class="code">Bag</span> containing the common elements, each weighted by the largest <i>common</i> weight (which is the minimum of the weights of that element over all arguments).</p>
 <pre class="code">bag(&amp;lt;a a b c a&gt;) (&amp;amp;) bag(&amp;lt;a a b c c&gt;) === bag(&amp;lt;a a b c&gt;)</pre>
 <a name="t32.1.2.2.1"></a><h4 id="_language_setbagmix.pod6-infix_∩">32.1.2.2.1 infix ∩</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"∩"&gt;&gt;(|p)</pre>
 <p><span class="indexed"><a id="424" name="">Intersection operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(&amp;amp;)">(&amp;)</a>, at codepoint U+2229 (INTERSECTION).</p>
 <a name="t32.1.2.3"></a><h3 id="_language_setbagmix.pod6-infix_(-)">32.1.2.3 infix (-)</h3>
 <pre class="code">only sub infix:&amp;lt;(-)&gt;(**@p)</pre>
 <p><span class="indexed"><a id="425" name="">Set difference operator</a></span>.</p>
 <p>Returns the <b>set difference</b> of all its arguments. Generally, this returns the <span class="code">Set</span> made up of all the elements the first argument has but the rest don't, i.e., of all the elements of the first argument, minus the elements from the other arguments.</p>
 <p>If the first argument is <span class="code">Baggy</span>, this returns a <span class="code">Bag</span> that contains each element of the first argument with its weight subtracted by the weight of that element in each of the other arguments.</p>
 <pre class="code">bag(&amp;lt;a a b c a d&gt;) (-) bag(&amp;lt;a a b c c&gt;) = bag(&amp;lt;a d&gt;)
bag(&amp;lt;a a a a c d d d&gt;) (-) bag(&amp;lt;a b d a&gt;) (-) bag(&amp;lt;d c&gt;) = bag(&amp;lt;a a d d&gt;)</pre>
 <a name="t32.1.2.3.1"></a><h4 id="_language_setbagmix.pod6-infix_∖">32.1.2.3.1 infix ∖</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"\x2216"&gt;&gt;(|p)</pre>
 <p><span class="indexed"><a id="426" name="">Set difference operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(-)">(-)</a>.</p>
 <a name="t32.1.2.4"></a><h3 id="_language_setbagmix.pod6-infix_(^)">32.1.2.4 infix (^)</h3>
 <pre class="code">multi sub infix:&amp;lt;(^)&gt;(Any $a, Any $b --&gt; Setty)
multi sub infix:&amp;lt;(^)&gt;(Set $a, Set $b --&gt; Setty)</pre>
 <p><span class="indexed"><a id="427" name="">Symmetric set difference operator</a></span>.</p>
 <p>Returns the <b>symmetric set difference</b> of all its arguments, i.e., a <span class="code">Set</span> made up of all the elements that <span class="code">$a</span> has but <span class="code">$b</span> doesn't and all the elements <span class="code">$b</span> has but <span class="code">$a</span> doesn't. Equivalent to <span class="code">($a ∖ $b) ∪ ($b ∖ $a)</span>.</p>
 <a name="t32.1.2.4.1"></a><h4 id="_language_setbagmix.pod6-infix_⊖">32.1.2.4.1 infix ⊖</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊖"&gt;&gt;($a, $b --&gt; Setty)</pre>
 <p><span class="indexed"><a id="428" name="">Symmetric set difference operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(^)">(^)</a>, at codepoint U+2296 (CIRCLED MINUS).</p>
 <a name="t32.1.2.5"></a><h3 id="_language_setbagmix.pod6-infix_(.)">32.1.2.5 infix (.)</h3>
 <pre class="code">only sub infix:&amp;lt;(.)&gt;(**@p)</pre>
 <p><span class="indexed"><a id="429" name="">Baggy multiplication operator</a></span>.</p>
 <p>Returns the Baggy <b>multiplication</b> of its arguments, i.e., a <span class="code">Bag</span> that contains each element of the arguments with the weights of the element across the arguments multiplied together to get the new weight.</p>
 <pre class="code">&amp;lt;a b c&gt; (.) &amp;lt;a b c d&gt; === bag &amp;lt;a b c&gt; # Since 1 * 0 == 0, in the case of 'd'
bag(&amp;lt;a a b c a d&gt;) (.) bag(&amp;lt;a a b c c&gt;) === bag(&amp;lt;a a a a a a b c c&gt;)</pre>
 <a name="t32.1.2.5.1"></a><h4 id="_language_setbagmix.pod6-infix_⊍">32.1.2.5.1 infix ⊍</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊍"&gt;&gt;(|p)</pre>
 <p><span class="indexed"><a id="430" name="">Baggy multiplication operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(.)">infix (.)</a>, at codepoint U+228D (MULTISET MULTIPLICATION).</p>
 <a name="t32.1.2.6"></a><h3 id="_language_setbagmix.pod6-infix_(+)">32.1.2.6 infix (+)</h3>
 <pre class="code">only sub infix:&amp;lt;(+)&gt;(**@p)</pre>
 <p><span class="indexed"><a id="431" name="">Baggy addition operator</a></span>.</p>
 <p>Returns the Baggy <b>addition</b> of its arguments, i.e., a <span class="code">Bag</span> that contains each element of the arguments with the weights of the element across the arguments added together to get the new weight.</p>
 <pre class="code">bag(&amp;lt;a a b c a d&gt;) (.) bag(&amp;lt;a a b c c&gt;) === bag(&amp;lt;a a a a a b b c c c d&gt;)</pre>
 <a name="t32.1.2.6.1"></a><h4 id="_language_setbagmix.pod6-infix_⊎">32.1.2.6.1 infix ⊎</h4>
 <pre class="code">only sub infix:&amp;lt;&amp;lt;"⊎"&gt;&gt;(|p)</pre>
 <p><span class="indexed"><a id="432" name="">Baggy addition operator</a></span> (alternate).</p>
 <p>Equivalent to <a href="(+)">(+)</a>, at codepoint U+228E (MULTISET UNION).</p>
 <a name="t32.1.2.7"></a><h3 id="_language_setbagmix.pod6-term_∅">32.1.2.7 term ∅</h3>
 <p>Equivalent to set(), aka <span class="indexed"><a id="433" name="">the empty set</a></span>, at codepoint U+2205 (EMPTY SET).</p>
</div> <!-- /language/subscripts.pod6 --><div class="pod-body"><a id="_language_subscripts.pod6"></a><a name="t33"><h1 class="title">33 Subscripts</h1></a> <p class="subtitle">Accessing data structure elements by index or key</p> <p>Often one needs to refer to a specific element (or specific slice of elements) of a collection or data structure. Borrowing from mathematical notation where the components of a vector <i>v</i> would be referred to as <i>v₁, v₂, v₃</i>, this concept is called "subscripting" (or "indexing") in Perl 6.</p>
 <a name="t33.1"></a><h1 id="_language_subscripts.pod6-Basics">33.1 Basics</h1>
 <p>Perl 6 provides two universal subscripting interfaces:</p>
 <table>
<tr><th></th> <th>elements are identified by</th> <th>interface name</th> <th>supported by</th></tr>
<tr><td>[ ]</td> <td>zero-based indices</td> <td>Positional</td> <td>Array, List, Buf, Match, ...</td></tr>
 <tr><td>{ }</td> <td>string or object keys</td> <td>Associative</td> <td>Hash, Bag, Mix, Match, ...</td></tr>
</table> <ul><li><p><b>Positional</b> subscripting (via <a href="#_language_operators.pod6-postcircumfix_[_]"> <span class="code">postcircumfix [ ]</span> </a>) addresses elements of an ordered collection by their position. Index 0 refers to the first element, index 1 to the second, and so on:</p>
 <pre class="code">my @chores = "buy groceries", "feed dog", "wash car";
say @chores[0];  #-&gt; buy groceries
say @chores[1];  #-&gt; feed dog
say @chores[2];  #-&gt; wash car</pre>
</li></ul> <ul><li><p><b>Associative</b> subscripting (via <a href="#_language_operators.pod6-postcircumfix_{_}"> <span class="code">postcircumfix { }</span> </a>), does not require the collection to keep its elements in any particular order - instead, it uses a unique key to address each value. The nature of the keys depends on the collection in question: For example a standard <a href="#_type_Hash.pod6">Hash</a> uses string keys, whereas a <a href="#_type_Mix.pod6">Mix</a> allows arbitrary objects as keys, etc.:</p>
 <pre class="code">my %grade = Zoe =&gt; "C", Ben =&gt; "B+";
say %grade{"Zoe"};  #-&gt; C
say %grade{"Ben"};  #-&gt; B+

my $stats = ( Date.today =&gt; 4.18, Date.new(2015,  4,  5) =&gt; 17.253 ).Mix;
say $stats{ Date.new(2015, 4, 4) + 1 };  #-&gt; 17.253</pre>
 <p>For passing single-word string keys to <span class="code">{ }</span>, you can also use the <a href="#_language_quoting.pod6-Word_quoting:_qw">angle-bracketed word quoting constructs</a> as if they were postcircumfix operators:</p>
 <pre class="code">say %grade&amp;lt;Zoe&gt;;    #-&gt; C
say %grade&amp;lt;Ben&gt;;    #-&gt; B+</pre>
 <p>This is really just syntactic sugar that gets turned into the corresponding <span class="code">{ }</span> form at compile-time:</p>
 <pre class="code">%hash&amp;lt;foo bar&gt;;     # same as %hash{ &amp;lt;foo bar&gt; }
%hash«foo $var»;    # same as %hash{ «foo $var» }
%hash&amp;lt;&amp;lt;foo $var&gt;&gt;;  # same as %hash{ &amp;lt;&amp;lt;foo $var&gt;&gt; }</pre>
 <p>You may have noted above that we avoided having to quote <span class="code">Zoe</span> by using the <span class="code">=> </span> operator, but that same operator did not just put invisible quotes around <span class="code">Date.new(2015, 4, 5)</span>, and we were able to find the same element using <span class="code">$stats{ Date.new(2015, 4, 4) + 1 }</span>. This is because <span class="code">=> </span> only puts invisible quotes around single words, and by "word" we mean an identifier/name. The <span class="code">=> </span> operator is there to prevent us from accidentally calling functions or using constants with that name.</p>
 <p>Hash subscripts do not do the same thing as <span class="code">=> </span>. The default <span class="code">Hash</span> has been made to behave the way new users have come to expect from using other languages, and for general ease of use. On a default <span class="code">Hash</span>, subscripts coerce keys into strings, as long as those keys produce something <span class="code">Cool</span>. You can use <span class="code">.perl</span> on a collection to be sure whether the keys are strings or objects:</p>
 <pre class="code">( 1  =&gt; 1 ).perl.say             #-&gt; 1 =&gt; 1
my %h; %h{1}   = 1; say %h.perl; #-&gt; { "1" =&gt; 1 }
( 1/2 =&gt; 1 ).perl.say            #-&gt; 0.5 =&gt; 1
my %h; %h{1/2} = 1; say %h.perl; #-&gt; { "0.5" =&gt; 1 }
( pi =&gt; 1 ).perl.say             #-&gt; :pi(1)
my %h; %h{pi}  = 1; say %h.perl; #-&gt; { "3.14159265358979" =&gt; 1 }</pre>
 <p>While the invisible quotes around single names is built into <span class="code">=> </span>, string conversion is not built into the curly braces: it is a behavior of the default <span class="code">Hash</span>. Not all types of hashes or collections do so:</p>
 <pre class="code">my %h := MixHash.new;
$h{pi} = 1; %h.perl.say;         #-&gt; (3.14159265358979e0=&gt;1).MixHash</pre>
 <p>(Any name that <span class="code">=> </span> would convert to a string can also be used to build a pair using "adverbial notation" and will appear that way when viewed through <span class="code">.perl</span>, which is why we see <span class="code">:pi(1)</span> above.)</p>
</li></ul> <p>Subscripts can be applied to any expression that returns a subscriptable object, not just to variables:</p>
 <pre class="code">say "__Hello__".match(/__(.*)__/)[0];   #-&gt; ｢Hello｣
say "__Hello__".match(/__(.*)__/).[0];  # same, in method notation</pre>
 <p>Positional and associative subscripting are not mutually exclusive - for example, <a href="#_type_Match.pod6">Match</a> objects support both (each accessing a different set of data). Also, to make list processing more convenient, class <a href="#_type_Any.pod6">Any</a> provides a fallback implementation for positional subscripts which simply treats the invocant as a list of one element. (But there's no such fallback for associative subscripts, so they throw a run-time error when applied to an object that does not implement support for them.)</p>
 <pre class="code">say 42[0];    #-&gt; 42
say 42&amp;lt;foo&gt;;  # ERROR: postcircumfix { } not defined for type Int</pre>
 <a name="t33.2"></a><h1 id="_language_subscripts.pod6-Nonexistent_elements">33.2 Nonexistent elements</h1>
 <p>What happens when a <i>nonexistent</i> element is addressed by a subscript, is up to the collection type in question. Standard <a href="#_type_Array.pod6">Array</a> and <a href="#_type_Hash.pod6">Hash</a> collections return the type object of their <a href="#_routine_of.pod6">value type constraint</a> (which, by default, is <a href="#_type_Any.pod6">Any</a>):</p>
 <pre class="code">my @array1;     say @array1[10];  #-&gt; (Any)
my Int @array2; say @array2[10];  #-&gt; (Int)

my %hash1;      say %hash1&amp;lt;foo&gt;;  #-&gt; (Any)
my Int %hash2;  say %hash2&amp;lt;foo&gt;;  #-&gt; (Int)</pre>
 <p>However, other types of collections may react differently to subscripts that address nonexistent elements:</p>
 <pre class="code">say (0, 10, 20)[3];           #-&gt; Nil
say bag(&amp;lt;a a b b b&gt;)&amp;lt;c&gt;;      #-&gt; 0
say array[uint8].new(1, 2)[2] #-&gt; 0</pre>
 <p>To silently skip nonexistent elements in a subscripting operation, see <a href="#32-Truncating slices">#Truncating slices</a> and the <a href="#32-:v">#:v</a> adverb.</p>
 <a name="t33.3"></a><h1 id="_language_subscripts.pod6-From_the_end">33.3 From the end</h1>
 <p>Positional indices are counted from the start of the collection, but there's also a notation for addressing elements by their position relative to the end: <span class="code">*-1</span> refers to the last element, <span class="code">*-2</span> to the second-to-last element, and so on.</p>
 <pre class="code">my @alphabet = 'A' .. 'Z';
say @alphabet[*-1];  #-&gt; Z
say @alphabet[*-2];  #-&gt; Y
say @alphabet[*-3];  #-&gt; X</pre>
 <p>Note: The asterisk is important. Passing a bare negative integer (e.g. <span class="code">@alphabet[-1]</span>) like you would do in many other programming languages, throws an error in Perl 6.</p>
 <p>What actually happens here, is that an expression like <span class="code">*-1</span> declares a code object via <a href="#_type_Whatever.pod6">Whatever</a>-currying - and the <span class="code">[ ]</span> subscript reacts to being given a code object as an index, by calling it with the length of the collection as argument and using the result value as the actual index. In other words, <span class="code">@alphabet[*-1]</span> becomes <span class="code">@alphabet[@alphabet.elems - 1]</span>.</p>
 <p>This means that you can use arbitrary expressions which depend on the size of the collection:</p>
 <pre class="code">say @array[* div 2];  # select the middlemost element
say @array[$i % *];   # wrap around a given index ("modular arithmetic")
say @array[ -&gt; $size { $i % $size } ];  # same as previous</pre>
 <a name="t33.4"></a><h1 id="_language_subscripts.pod6-Slices">33.4 Slices</h1>
 <p>When multiple elements of a collection need to be accessed, there's a shortcut to doing multiple separate subscripting operations: Simply specify a <i>list</i> of indices/keys in the subscript, to get back a <i>list</i> of elements - also called a "slice" - in the same order.</p>
 <p>For positional slices, you can mix normal indices with <a href="#32-From the end">from-the-end</a> ones:</p>
 <pre class="code">my @alphabet = 'a' .. 'z';
dd @alphabet[15, 4, *-9, 11];  #-&gt; ("p", "e", "r", "l")</pre>
 <p>For associative slices, the angle-brackets form often comes in handy:</p>
 <pre class="code">my %color = kiwi =&gt; "green", banana =&gt; "yellow", cherry =&gt; "red";
dd %color{"cherry", "kiwi"};  #-&gt; ("red", "green")
dd %color&amp;lt;cherry kiwi&gt;;       #-&gt; ("red", "green")
dd %color{*};                 #-&gt; ("green", "red", "yellow")</pre>
 <p>Be aware that slices are controlled by the <i>type</i> of what is passed to (<a href="#32-Multiple dimensions">one dimension of</a>) the subscript, not its length:</p>
 <table>
<tr><th>subscript</th> <th>result</th></tr>
<tr><td>any Iterable not mentioned below</td> <td>normal slice</td></tr>
 <tr><td>a Range</td> <td>L&lt;truncates|#Truncating slices> in [ ]</td></tr>
 <tr><td>a lazy Iterable</td> <td>L&lt;truncates|#Truncating slices> in [ ]</td></tr>
 <tr><td>* (Whatever-star)</td> <td>full slice (as if all keys/indices were specified)</td></tr>
 <tr><td>any other object</td> <td>single-element access rather than a slice</td></tr>
 <tr><td>empty</td> <td>L&lt;Zen slice|#Zen slices></td></tr>
</table> <p>So even a one-element list returns a slice, whereas a bare scalar value doesn't:</p>
 <pre class="code">dd @alphabet[2,];  #-&gt; ("c",)
dd @alphabet[2];   #-&gt; "c"</pre>
 <p>(The angle-bracket form for associative subscripts works out because <a href="#_language_quoting.pod6-Word_quoting:_qw">word quoting</a> conveniently returns a <a href="#_type_Str.pod6">Str</a> in case of a single word, but a <a href="#_type_List.pod6">List</a> in case of multiple words.)</p>
 <p>In fact, the list structure of (<a href="#32-Multiple
dimensions">the current dimension of</a>) the subscript is preserved across the slice operation (but the kind of Iterable is not -- the result is always just lists.)</p>
 <pre class="code">dd @alphabet[0, (1..2, (3,))];  #-&gt; ("a", (("b", "c"), ("d",)))
dd @alphabet[0, (1..2, [3,])];  #-&gt; ("a", (("b", "c"), ("d",)))
dd @alphabet[flat 0, (1..2, (3,))];  #-&gt; ("a", "b", "c", "d")
dd flat @alphabet[0, (1..2, (3,))];  #-&gt; ("a", "b", "c", "d")</pre>
 <a name="t33.4.1"></a><h2 id="_language_subscripts.pod6-Truncating_slices">33.4.1 Truncating slices</h2>
 <p>Normally, referring to nonexistent elements in a slice subscript causes the output list to contain undefined values (or <a href="#32-Nonexistent elements">whatever else</a> the collection in question chooses to return for nonexistent elements). However if the outer object passed to (<a href="#32-Multiple dimensions">one dimension of</a>) of a positional subscript is a <a href="#_type_Range.pod6">Range</a>, it will be automatically truncated to the actual size of the collection:</p>
 <pre class="code">my @letters = &amp;lt;a b c d e f&gt;;
dd @letters[3, 4, 5, 6, 7];  #-&gt; ("d", "e", "f", Any, Any)
dd @letters[3 .. 7];         #-&gt; ("d", "e", "f")</pre>
 <p><a href="#32-From the end">From-the-end</a> indices are allowed as range end-points.</p>
 <pre class="code">say @array[*-3 .. *];       # select the last three elements</pre>
 <p>A similar thing is done for lazy sequences, but it is often impossible to determine whether the sequence is infinite. Just as often, the first part of the sequence is already known, and it would be silly to pretend we did not know it. As a stopgap measure to prevent runaway generation of huge lists, a lazy subscript will not truncate as long as it does not have to lazily generate values, but once it starts generating values lazily, it will stop if it generates a value that points to a nonexistent index.</p>
 <pre class="code">dd @letters[0, 2, 4 ... *];     # Every other element of the array.</pre>
 <p>This feature is more for protection against accidental out-of-memory problems than for actual use. Since some lazy sequences cache their results, every time they are used in a truncation, they accumulate one more known element. Things like this should probably be avoided rather than used for effect:</p>
 <pre class="code">my @a = 2, 3 ... *;
dd flat @letters[0, 7, @a]; #-&gt; ("a", Any, "c", "d", "e", "f")
dd flat @letters[0, 7, @a]; #-&gt; ("a", Any, "c", "d", "e", "f", Any)</pre>
 <p>The runaway protection is not perfect. The indices are eagerly evaluated, with the only stop condition being truncation. This is to provide mostly consistent results when there is self-reference/mutation inside the indices. As such, the following will most likely hang until all memory has been consumed:</p>
 <pre class="code">@letters[0 xx *];</pre>
 <p>So, to safely use lazy indices, they should be one-shot things which are guaranteed to overrun the array. The following alternate formulation will produce a fully lazy result (but will not truncate):</p>
 <pre class="code">my $a = (0 xx *).map({ @letters[$_] }); # "a", "a", "a" ... forever</pre>
 <p>If you <i>don't</i> want to specify your slice as a range/sequence but still want to silently skip nonexistent elements, you can use the <a href="#32-:v">#:v</a> adverb.</p>
 <a name="t33.4.2"></a><h2 id="_language_subscripts.pod6-Zen_slices">33.4.2 Zen slices</h2>
 <p>If you write a subscript without specifying any indices/keys at all, it simply returns the subscripted object itself. Since it is empty but returns everything, it is known as a "Zen slice".</p>
 <p>It is different both from passing a Whatever-star (which, like a normal slice, always returns a List of elements no matter the type of the original object) and from passing an empty list (which returns an empty slice):</p>
 <pre class="code">my %bag := ("orange" =&gt; 1, "apple" =&gt; 3).Bag;
dd %bag&amp;lt;&gt;;    #-&gt; ("orange"=&gt;1,"apple"=&gt;3).Bag
dd %bag{};    #-&gt; ("orange"=&gt;1,"apple"=&gt;3).Bag
dd %bag{*};   #-&gt; (1, 3)
dd %bag{()};  #-&gt; ()</pre>
 <p>It is usually used to <a href="#_language_quoting.pod6-Interpolation:_qq">interpolate</a> entire arrays / hashes into strings:</p>
 <pre class="code">my @words = "cruel", "world";
say "Hello, @words[]!"  #-&gt; Hello, cruel world!</pre>
 <a name="t33.5"></a><h1 id="_language_subscripts.pod6-Multiple_dimensions">33.5 Multiple dimensions</h1>
 <p>Dimensions in subscripts are separated by a semicolon, allowing to mix lists of elements and dimensions.</p>
 <pre class="code">my @twodim = (&amp;lt;a b c&gt;, (1, 2, 3));
dd @twodim;
# OUTPUT«Array @twodim = [("a", "b", "c"), (1, 2, 3)]␤»
dd @twodim[0,1;1]; # 2nd element of both lists
# OUTPUT«("b", 2)␤»</pre>
 <p>Multidimensional subscripts can be used to flatten nested lists.</p>
 <pre class="code">my @toomany = [[&amp;lt;a b&gt;], [1, 2]];
dd @toomany;
# OUTPUT«Array @toomany = [["a", "b"], [1, 2]]␤»
dd @toomany[*;*];
# OUTPUT«("a", "b", 1, 2)␤»</pre>
 <a name="t33.6"></a><h1 id="_language_subscripts.pod6-Modifying_elements">33.6 Modifying elements</h1>
 TODO
 <a name="t33.7"></a><h1 id="_language_subscripts.pod6-Autovivification">33.7 Autovivification</h1>
 <p>Subscripts participate in "autovivification", i.e. the process by which arrays and hashes automatically spring into existence when needed, so that you can build nested data structures without having to pre-declare the collection type at each level:</p>
 <pre class="code">my $beatles;

$beatles{"White Album"}[0] = "Back in the U.S.S.R.";  # autovivification!

say $beatles.perl;  #-&gt; {"White Album" =&gt; ["Back in the U.S.S.R."]}</pre>
 <p><span class="code">$beatles</span> started out undefined, but became a <a href="#_type_Hash.pod6">Hash</a> object because it was subscripted with <span class="code">{ }</span> in the assignment. Similarly, <span class="code">$beatles{"White Album"}</span> became an <a href="#_type_Array.pod6">Array</a> object due to being subscripted with <span class="code">[ ]</span> in the assignment.</p>
 <p>Note that the subscripting itself does not cause autovivification: It only happens when the result of the subscripting chain is <i>assigned</i> to (or otherwise mutated).</p>
 TODO: Add expanded documentation on autovivification (which affects
               more than just subscripts, i.e. also routines like `push`), at
               /language/datastructures.html, and link to it from here.
 <a name="t33.8"></a><h1 id="_language_subscripts.pod6-Binding">33.8 Binding</h1>
 <p>A subscripting expression may also be used as the left-hand-side of a binding statement. If supported by the subscripted collection's type, this replaces whatever value container would be naturally found at that "slot" of the collection, with the specified container.</p>
 <p>The built-in <a href="#_type_Array.pod6">Array</a> and <a href="#_type_Hash.pod6">Hash</a> types support this in order to allow building complex linked data structures:</p>
 <pre class="code">my @a = 10, 11, 12, 13;
my $x = 1;

@a[2] := $x;  # binding! (@a[2] and $x refer to the same container now.)

$x++; @a[2]++;

dd @a;  #-&gt; [10, 11, 3, 13]&amp;lt;&gt;
dd $x;  #-&gt; 3</pre>
 TODO: Come up with a more practical/motivational example snippet.
 TODO: Add expanded documentation on building complex data structures
               at /language/datastructures.html, and link to it from here.
 <p>See <a href="#32-method BIND-POS">#method BIND-POS</a> and <a href="#32-method BIND-KEY">#method BIND-KEY</a> for the underlying mechanism.</p>
 <a name="t33.9"></a><h1 id="_language_subscripts.pod6-Adverbs">33.9 Adverbs</h1>
 <p>The return value and possible side-effect of a subscripting operation can be controlled using adverbs.</p>
 <p>Beware of the relatively loose precedence of operator adverbs, which may require you to add parens in compound expressions:</p>
 <pre class="code">if $foo || %hash&amp;lt;key&gt;:exists { ... }    # WRONG, tries to adverb the || op
if $foo || (%hash&amp;lt;key&gt;:exists) { ... }  # correct
if $foo or %hash&amp;lt;key&gt;:exists { ... }    # also correct</pre>
 <p>The supported adverbs are:</p>
 <a name="t33.9.1"></a><h2 id="_language_subscripts.pod6-:exists">33.9.1 <a name="434"></a>:exists</h2>
 <p>Return whether or not the requested element exists, instead of returning the element's actual value. This can be used to distinguish between elements with an undefined value, and elements that aren't part of the collection at all:</p>
 <pre class="code">my @foo = Any, 10;
dd @foo[0].defined;    #-&gt; False
dd @foo[0]:exists;     #-&gt; True
dd @foo[2]:exists;     #-&gt; False
dd @foo[0, 2]:exists;  #-&gt; (True, False)

my %fruit = apple =&gt; Any, orange =&gt; 10;
dd %fruit&amp;lt;apple&gt;.defined;       #-&gt; False
dd %fruit&amp;lt;apple&gt;:exists;        #-&gt; True
dd %fruit&amp;lt;banana&gt;:exists;       #-&gt; False
dd %fruit&amp;lt;apple banana&gt;:exists; #-&gt; (True, False)</pre>
 <p>May also be negated to test for non-existence:</p>
 <pre class="code">dd %fruit&amp;lt;apple banana&gt;:!exists; #-&gt; (False, True)</pre>
 <p>To check if <i>all</i> elements of a slice exist, use an <a href="#_routine_all.pod6">all</a> junction:</p>
 <pre class="code">if all %fruit&amp;lt;apple orange banana&gt;:exists { ... }</pre>
 <p><span class="code">:exists</span> can be combined with the <a href="#32-:delete">#:delete</a> and <a href="#32-:p">#:p</a>/<a href="#32-:kv">#:kv</a> adverbs - in which case the behavior is determined by those adverbs, except that any returned element <i>value</i> is replaced with the corresponding <a href="#_type_Bool.pod6">Bool</a> indicating element <i>existence</i>.</p>
 <p>See <a href="#32-method EXISTS-POS">#method EXISTS-POS</a> and <a href="#32-method EXISTS-KEY">#method EXISTS-KEY</a> for the underlying mechanism.</p>
 <a name="t33.9.2"></a><h2 id="_language_subscripts.pod6-:delete">33.9.2 <a name="435"></a>:delete</h2>
 <p>Delete the element from the collection or, if supported by the collection, creates a hole at the given index, in addition to returning its value.</p>
 <pre class="code">my @tens = 0, 10, 20, 30;
dd @tens[3]:delete;     #-&gt; 30
dd @tens;               #-&gt; [0, 10, 20]&amp;lt;&gt;

my %fruit = apple =&gt; 5, orange =&gt; 10, banana =&gt; 4, peach =&gt; 17;
dd %fruit&amp;lt;apple&gt;:delete;         #-&gt; 5
dd %fruit&amp;lt;peach orange&gt;:delete;  #-&gt; (17, 10)
dd %fruit;                       #-&gt; {banana =&gt; 4}&amp;lt;&gt;</pre>
 <p>Note that assigning <span class="code">Nil</span> will revert the container at the given index to it's default value. It will not create a hole. The created holes can be tested for with <span class="code">:exists</span> but iteration will not skip them and produce undefined values instead.</p>
 <pre class="code">my @a = 1, 2, 3;
@a[1]:delete;
say @a[1]:exists;
# OUTPUT«False␤»
.say for @a;
# OUTPUT«1␤(Any)␤3␤»</pre>
 <p>With the negated form of the adverb, the element is not actually deleted. This means you can pass a flag to make it conditional:</p>
 <pre class="code">dd %fruit&amp;lt;apple&gt; :delete($flag);  # deletes the element only if $flag is
                                  # true, but always returns the value.</pre>
 <p>Can be combined with the <a href="#32-:exists">#:exists</a> and <a href="#32-:p">#:p</a>/<a href="#32-:kv">#:kv</a>/<a href="#32-:k">#:k</a>/<a href="#32-:v">#:v</a> adverbs - in which case the return value will be determined by those adverbs, but the element will at the same time also be deleted.</p>
 <p>See <a href="#32-method DELETE-POS">#method DELETE-POS</a> and <a href="#32-method DELETE-KEY">#method DELETE-KEY</a> for the underlying mechanism.</p>
 <a name="t33.9.3"></a><h2 id="_language_subscripts.pod6-:p">33.9.3 <a name="436"></a>:p</h2>
 <p>Return both the index/key and the value of the element, in the form of a <a href="#_type_Pair.pod6">Pair</a>, and silently skip nonexistent elements:</p>
 <pre class="code">my @tens = 0, 10, 20, 30;
dd @tens[1]:p;        #-&gt; 1 =&gt; 10
dd @tens[0, 4, 2]:p;  #-&gt; (0 =&gt; 0, 2 =&gt; 20)

my %month = Jan =&gt; 1, Feb =&gt; 2, Mar =&gt; 3;
dd %month&amp;lt;Feb&gt;:p;          #-&gt; "Feb" =&gt; 2
dd %month&amp;lt;Jan Foo Mar&gt;:p;  #-&gt; ("Jan" =&gt; 1, "Mar" =&gt; 3)</pre>
 <p>If you <i>don't</i> want to skip nonexistent elements, use the negated form:</p>
 <pre class="code">dd %month&amp;lt;Jan Foo Mar&gt;:!p;  #-&gt; ("Jan" =&gt; 1, "Foo" =&gt; Any, "Mar" =&gt; 3)</pre>
 <p>Can be combined with the <a href="#32-:exists">#:exists</a> and <a href="#32-:delete">#:delete</a> adverbs.</p>
 <p>See also the <a href="#_routine_pairs.pod6">pairs</a> routine.</p>
 <a name="t33.9.4"></a><h2 id="_language_subscripts.pod6-:kv">33.9.4 <a name="437"></a>:kv</h2>
 <p>Return both the index/key and the value of the element, in the form of a <a href="#_type_List.pod6">List</a>, and silently skip nonexistent elements. When used on a <a href="#32-Slices">slice</a>, the return value is a single flat list of interleaved keys and values:</p>
 <pre class="code">my @tens = 0, 10, 20, 30;
dd @tens[1]:kv;        #-&gt; (1, 10)
dd @tens[0, 4, 2]:kv;  #-&gt; (0, 0, 2, 20)

my %month = Jan =&gt; 1, Feb =&gt; 2, Mar =&gt; 3;
dd %month&amp;lt;Feb&gt;:kv;          #-&gt; ("Feb", 2)
dd %month&amp;lt;Jan Foo Mar&gt;:kv;  #-&gt; ("Jan", 1, "Mar", 3)</pre>
 <p>If you <i>don't</i> want to skip nonexistent elements, use the negated form:</p>
 <pre class="code">dd %month&amp;lt;Jan Foo Mar&gt;:!kv;  #-&gt; ("Jan", 1, "Foo", Any, "Mar", 3)</pre>
 <p>This adverb is commonly used to iterate over slices:</p>
 <pre class="code">for %month&amp;lt;Feb Mar&gt;:kv -&gt; $month, $i {
    say "$month had {Date.new(2015, $i, 1).days-in-month} days in 2015"
}</pre>
 <p>Can be combined with the <a href="#32-:exists">#:exists</a> and <a href="#32-:delete">#:delete</a> adverbs.</p>
 <p>See also the <a href="#_routine_kv.pod6">kv</a> routine.</p>
 <a name="t33.9.5"></a><h2 id="_language_subscripts.pod6-:k">33.9.5 <a name="438"></a>:k</h2>
 <p>Return only the index/key of the element, rather than its value, and silently skip nonexistent elements:</p>
 <pre class="code">my @tens = 0, 10, 20, 30;
dd @tens[1]:k;        #-&gt; 1
dd @tens[0, 4, 2]:k;  #-&gt; (0, 2)

my %month = Jan =&gt; 1, Feb =&gt; 2, Mar =&gt; 3;
dd %month&amp;lt;Feb&gt;:k;          #-&gt; "Feb"
dd %month&amp;lt;Jan Foo Mar&gt;:k;  #-&gt; ("Jan", "Mar")</pre>
 <p>If you <i>don't</i> want to skip nonexistent elements, use the negated form:</p>
 <pre class="code">dd %month&amp;lt;Jan Foo Mar&gt;:!k;  #-&gt; ("Jan", "Foo", "Mar")</pre>
 <p>See also the <a href="#_routine_keys.pod6">keys</a> routine.</p>
 <a name="t33.9.6"></a><h2 id="_language_subscripts.pod6-:v">33.9.6 <a name="439"></a>:v</h2>
 <p>Return the bare value of the element (rather than potentially returning a mutable value container), and silently skip nonexistent elements:</p>
 <pre class="code">my @tens = 0, 10, 20, 30;
dd @tens[1]:v;        #-&gt; 10
dd @tens[0, 4, 2]:v;  #-&gt; (0, 20)
@tens[3] = 31;        # OK
@tens[3]:v = 31;      # ERROR, cannot assign to immutable integer value

my %month = Jan =&gt; 1, Feb =&gt; 2, Mar =&gt; 3;
dd %month&amp;lt;Feb&gt;:v;          #-&gt; 2
dd %month&amp;lt;Jan Foo Mar&gt;:v;  #-&gt; (1, 3)</pre>
 <p>If you <i>don't</i> want to skip nonexistent elements, use the negated form:</p>
 <pre class="code">dd %month&amp;lt;Jan Foo Mar&gt;:!v;  #-&gt; (1, Any, 3)</pre>
 <p>See also the <a href="#_routine_values.pod6">values</a> routine.</p>
 <a name="t33.10"></a><h1 id="_language_subscripts.pod6-Custom_types">33.10 Custom types</h1>
 <p>The subscripting interfaces described on this page are not meant to be exclusive to Perl 6's built-in collection types - you can (and should) reuse them for any custom type that wants to provide access to data by index or key.</p>
 <p>You don't have to manually overload the <a href="#_routine_[ ].pod6-postcircumfix_[_]"> <span class="code">postcircumfix [ ]</span> </a> and <a href="#_routine_{ }.pod6-postcircumfix_{_}"> <span class="code">postcircumfix { }</span> </a> operators and re-implement all their magic, to achieve that - instead, you can rely on the fact that their standard implementation dispatches to a well-defined set of low-level methods behind the scenes. For example:</p>
 <table>
<tr><th>when you write:</th> <th>this gets called behind the scenes:</th></tr>
<tr><td>%foo&lt;aa></td> <td>%foo.AT-KEY("aa")</td></tr>
 <tr><td>%foo&lt;aa>:delete</td> <td>%foo.DELETE-KEY("aa")</td></tr>
 <tr><td>@foo[3, 4, 5]</td> <td>@foo.AT-POS(3), @foo.AT-POS(4), @foo.AT-POS(5)</td></tr>
 <tr><td>@foo[*-1]</td> <td>@foo.AT-POS(@foo.elems - 1)</td></tr>
</table> <p>So in order to make subscripting work, you only have to implement or delegate those low-level methods (<a href="#32-Methods_to_implement_for_positional_subscripting">detailed below</a>) for your custom type.</p>
 <p>If you do, you should also let your type compose the <a href="#_type_Positional.pod6"> <span class="code">Positional</span> </a> or <a href="#_type_Associative.pod6"> <span class="code">Associative</span> </a> role, respectively. This doesn't add any functionality per se, but announces (and may be used to check) that the type implements the corresponding subscripting interface.</p>
 <a name="t33.10.1"></a><h2 id="_language_subscripts.pod6-Custom_type_example">33.10.1 Custom type example</h2>
 TODO: Maybe factor this out into a tutorial page
 <p>Imagine a HTTP::Header type which, despite being a custom class with special behavior, can be indexed like a hash:</p>
 <pre class="code">my $request = HTTP::Request.new(GET =&gt; "perl6.org");
say $request.header.WHAT;  #-&gt; (HTTP::Header)

$request.header&amp;lt;Accept&gt; = "text/plain";
$request.header{'Accept-' X~ &amp;lt;Charset Encoding Language&gt;} = &amp;lt;utf-8 gzip en&gt;;
$request.header.push('Accept-Language' =&gt; "fr");  # like .push on a Hash

say $request.header&amp;lt;Accept-Language&gt;.perl;  #-&gt; ["en", "fr"]

my $rawheader = $request.header.Str;  # stringify according to HTTP spec</pre>
 <p>The simplest way to implement this class, would be to give it an attribute of type <a href="#_type_Hash.pod6">Hash</a>, and delegate all subscripting and iterating related functionality to that attribute (using a custom type constraint to make sure users don't insert anything invalid into it):</p>
 <pre class="code">class HTTP::Header does Associative is Iterable {
    subset StrOrArrayOfStr where Str | ( Array &amp;amp; {.all ~~ Str} );

    has %!fields of StrOrArrayOfStr
                 handles &amp;lt;AT-KEY EXISTS-KEY DELETE-KEY push
                          iterator list kv keys values&gt;;

    method Str { #`[not shown, for brevity] }
}</pre>
 <p>However, HTTP header field names are supposed to be case-insensitive (and preferred in camel-case). We can accommodate this by taking the <span class="code">*-KEY</span> and <span class="code">push</span> methods out of the <span class="code">handles</span> list, and implementing them separately like this:</p>
 <pre class="code">method AT-KEY     ($key) is rw { %!fields{normalize-key $key}        }
method EXISTS-KEY ($key)       { %!fields{normalize-key $key}:exists }
method DELETE-KEY ($key)       { %!fields{normalize-key $key}:delete }
method push(*@_) { #`[not shown, for brevity] }

sub normalize-key ($key) { $key.subst(/\w+/, *.tc, :g) }</pre>
 <p>Note that subscripting <span class="code">%!fields</span> returns an appropriate rw container, which our <span class="code">AT-KEY</span> can simply pass on.</p>
 <p>However, we may prefer to be less strict about user input and instead take care of sanitizing the field values ourselves. In that case, we can remove the <span class="code">StrOrArrayOfStr</span> type constraint on <span class="code">%!fields</span>, and replace our <span class="code">AT-KEY</span> implementation with one that returns a custom <span class="code">Proxy</span> container which takes care of sanitising values on assignment:</p>
 <pre class="code">multi method AT-KEY (::?CLASS:D: $key) is rw {
    my $element := %!fields{normalize-key $key};

    Proxy.new(
        FETCH =&gt; method () { $element },

        STORE =&gt; method ($value) {
            $element = do given $value».split(/',' \s+/).flat {
                when 1  { .[0] }    # a single value is stored as a string
                default { .Array }  # multiple values are stored as an array
            }
        }
    );
}</pre>
 <p>Note that declaring the method as <span class="code">multi</span> and restricting it to <span class="code">:D</span> (defined invocants) makes sure that the undefined case is passed through to the default implementation provided by <span class="code">Any</span> (which is involved in auto-vivification).</p>
 <a name="t33.10.2"></a><h2 id="_language_subscripts.pod6-Methods_to_implement_for_positional_subscripting">33.10.2 Methods to implement for positional subscripting</h2>
 <p>In order to make index-based subscripting via <a href="#_routine_[ ].pod6-postcircumfix_[_]"> <span class="code">postcircumfix [ ]</span> </a> work for your custom type, you should implement at least <span class="code">elems</span>, <span class="code">AT-POS</span> and <span class="code">EXISTS-POS</span> - and optionally others as detailed below.</p>
 <a name="t33.10.2.1"></a><h3 id="_language_subscripts.pod6-method_elems">33.10.2.1 method elems</h3>
 <pre class="code">multi method elems(::?CLASS:D:)</pre>
 <p>Expected to return a number indicating how many subscriptable elements there are in the object. May be called by users directly, and is also called by <a href="#_routine_[ ].pod6-postcircumfix_[_]"> <span class="code">postcircumfix [ ]</span> </a> when indexing elements from the end, as in <span class="code">@foo[*-1]</span>.</p>
 <p>If not implemented, your type will inherit the default implementation from <span class="code">Any</span> that always returns <span class="code">1</span> for defined invocants - which is most likely not what you want. So if the number of elements cannot be known for your positional type, add an implementation that <a href="#_routine_fail.pod6">fail</a>s or <a href="#_routine_die.pod6">die</a>s, to avoid silently doing the wrong thing.</p>
 <a name="t33.10.2.2"></a><h3 id="_language_subscripts.pod6-method_AT-POS">33.10.2.2 method AT-POS</h3>
 When modifying this section, please also adapt the AT-KEY
         section accordingly as they are very similar.
 <pre class="code">multi method AT-POS (::?CLASS:D: $index)</pre>
 TODO: Cover the case of multi-dim indices (also for all the other
               methods below), after jnthn's ongoing refactor is finished.
 <p>Expected to return the element at position <span class="code">$index</span>. This is what <a href="#_routine_[ ].pod6-postcircumfix_[_]"> <span class="code">postcircumfix [ ]</span> </a> normally calls.</p>
 <p>If you want an element to be mutable (like they are for the built-in <a href="#_type_Array.pod6">Array</a> type), you'll have to make sure to return it in the form of an item container that evaluates to the element's value when read, and updates it when assigned to. (Remember to use <span class="code">return-rw</span> or the <span class="code">is rw</span> routine trait to make that work; see the <a href="#_language_subscripts.pod6-Custom_type_example">example</a>.)</p>
 <a name="t33.10.2.3"></a><h3 id="_language_subscripts.pod6-method_EXISTS-POS">33.10.2.3 method EXISTS-POS</h3>
 When modifying this section, please also adapt the EXISTS-KEY
         section accordingly as they are very similar.
 <pre class="code">multi method EXISTS-POS (::?CLASS:D: $index)</pre>
 <p>Expected to return a Bool indicating whether or not there is an element at position <span class="code">$index</span>. This is what <a href="#_routine_[ ].pod6-postcircumfix_[_]"> <span class="code">postcircumfix [ ]</span> </a> calls when invoked like <span class="code">@foo[42]:exists</span>.</p>
 <p>What "existence" of an element means, is up to your type.</p>
 <p>If you don't implement this, your type will inherit the default implementation from <span class="code">Any</span>, which returns True for 0 and False for any other index - which is probably not what you want. So if checking for element existence cannot be done for your type, add an implementation that <a href="#_routine_fail.pod6">fail</a>s or <a href="#_routine_die.pod6">die</a>s, to avoid silently doing the wrong thing.</p>
 <a name="t33.10.2.4"></a><h3 id="_language_subscripts.pod6-method_DELETE-POS">33.10.2.4 method DELETE-POS</h3>
 When modifying this section, please also adapt the DELETE-KEY
         section accordingly as they are very similar.
 <pre class="code">multi method DELETE-POS (::?CLASS:D: $index)</pre>
 <p>Expected to delete the element at position <span class="code">$index</span>, and return the value it had. This is what <a href="#_routine_[ ].pod6-postcircumfix_[_]"> <span class="code">postcircumfix [ ]</span> </a> calls when invoked like <span class="code">@foo[42]:delete</span>.</p>
 <p>What "deleting" an element means, is up to your type.</p>
 <p>Implementing this method is optional; if you don't, users trying to delete elements from an object of this type will get an appropriate error message.</p>
 <a name="t33.10.2.5"></a><h3 id="_language_subscripts.pod6-method_ASSIGN-POS">33.10.2.5 method ASSIGN-POS</h3>
 When modifying this section, please also adapt the ASSIGN-KEY
         section accordingly as they are very similar.
 <pre class="code">multi method ASSIGN-POS (::?CLASS:D: $index, $new)</pre>
 <p>Expected to set the element at position <span class="code">$index</span> to the value <span class="code">$new</span>. Implementing this is entirely optional; if you don't, <span class="code">self.AT-POS($index) = $new</span> is used instead, and if you do, you should make sure it has the same effect.</p>
 <p>This is meant as an opt-in performance optimization, so that simple assignments like <span class="code">@numbers[5] = "five"</span> can operate without having to call <span class="code">AT-POS</span> (which would have to create and return a potentially expensive container object).</p>
 <p>Note that implementing <span class="code">ASSIGN-POS</span> does <i>not</i> relieve you from making <span class="code">AT-POS</span> an <span class="code">rw</span> method though, because less trivial assignments/modifications such as <span class="code">@numbers[5]++</span> will still use <span class="code">AT-POS</span>.</p>
 <a name="t33.10.2.6"></a><h3 id="_language_subscripts.pod6-method_BIND-POS">33.10.2.6 method BIND-POS</h3>
 When modifying this section, please also adapt the BIND-KEY
         section accordingly as they are very similar.
 <pre class="code">multi method BIND-POS (::?CLASS:D: $index, \new)</pre>
 <p>Expected to bind the value or container <span class="code">new</span> to the slot at position <span class="code">$index</span>, replacing any container that would be naturally found there. This is what is called when you write:</p>
 <pre class="code">my $x = 10;
@numbers[5] := $x;</pre>
 <p>The generic <a href="#_type_Array.pod6">Array</a> class supports this in order to allow building complex linked data structures, but for more domain-specific types it may not make sense, so don't feel compelled to implement it. If you don't, users will get an appropriate error message when they try to bind to a positional slot of an object of this type.</p>
 <a name="t33.10.3"></a><h2 id="_language_subscripts.pod6-Methods_to_implement_for_associative_subscripting">33.10.3 Methods to implement for associative subscripting</h2>
 <p>In order to make key-based subscripting via <a href="#_routine_{ }.pod6-postcircumfix_{_}"> <span class="code">postcircumfix { }</span> </a> work for your custom type, you should implement at least <span class="code">AT-KEY</span> and <span class="code">EXISTS-KEY</span> - and optionally others as detailed below.</p>
 <a name="t33.10.3.1"></a><h3 id="_language_subscripts.pod6-method_AT-KEY">33.10.3.1 method AT-KEY</h3>
 When modifying this section, please also adapt the AT-POS
         section accordingly as they are very similar.
 <pre class="code">multi method AT-KEY (::?CLASS:D: $key)</pre>
 <p>Expected to return the element associated with <span class="code">$key</span>. This is what <a href="#_routine_{ }.pod6-postcircumfix_{_}"> <span class="code">postcircumfix { }</span> </a> normally calls.</p>
 <p>If you want an element to be mutable (like they are for the built-in <a href="#_type_Hash.pod6">Hash</a> type), you'll have to make sure to return it in the form of an item container that evaluates to the element's value when read, and updates it when assigned to. (Remember to use <span class="code">return-rw</span> or the <span class="code">is rw</span> routine trait to make that work; see the <a href="#_language_subscripts.pod6-Custom_type_example">example</a>.)</p>
 <p>On the other hand if you want your collection to be read-only, feel free to return non-container values directly.</p>
 <a name="t33.10.3.2"></a><h3 id="_language_subscripts.pod6-method_EXISTS-KEY">33.10.3.2 method EXISTS-KEY</h3>
 When modifying this section, please also adapt the EXISTS-POS
         section accordingly as they are very similar.
 <pre class="code">multi method EXISTS-KEY (::?CLASS:D: $key)</pre>
 <p>Expected to return a Bool indicating whether or not there is an element associated with <span class="code">$key</span>. This is what <a href="#_routine_{ }.pod6-postcircumfix_{_}"> <span class="code">postcircumfix { }</span> </a> calls when invoked like <span class="code">%foo&lt;aa>:exists </span>.</p>
 <p>What "existence" of an element means, is up to your type.</p>
 <p>If you don't implement this, your type will inherit the default implementation from <span class="code">Any</span>, which always returns False - which is probably not what you want. So if checking for element existence cannot be done for your type, add an implementation that <a href="#_routine_fail.pod6">fail</a>s or <a href="#_routine_die.pod6">die</a>s, to avoid silently doing the wrong thing.</p>
 <a name="t33.10.3.3"></a><h3 id="_language_subscripts.pod6-method_DELETE-KEY">33.10.3.3 method DELETE-KEY</h3>
 When modifying this section, please also adapt the DELETE-POS
         section accordingly as they are very similar.
 <pre class="code">multi method DELETE-KEY (::?CLASS:D: $key)</pre>
 <p>Expected to delete the element associated with <span class="code">$key</span>, and return the value it had. This is what <a href="#_routine_{ }.pod6-postcircumfix_{_}"> <span class="code">postcircumfix { }</span> </a> calls when invoked like <span class="code">%foo&lt;aa>:delete </span>.</p>
 <p>What "deleting" an element means, is up to your type - though it should usually cause <span class="code">EXISTS-KEY</span> to become <span class="code">False</span> for that key.</p>
 <p>Implementing this method is optional; if you don't, users trying to delete elements from an object of this type will get an appropriate error message.</p>
 <a name="t33.10.3.4"></a><h3 id="_language_subscripts.pod6-method_ASSIGN-KEY">33.10.3.4 method ASSIGN-KEY</h3>
 When modifying this section, please also adapt the ASSIGN-POS
         section accordingly as they are very similar.
 <pre class="code">multi method ASSIGN-KEY (::?CLASS:D: $key, $new)</pre>
 <p>Expected to set the element associated with <span class="code">$key</span> to the value <span class="code">$new</span>. Implementing this is entirely optional; if you don't, <span class="code">self.AT-KEY($key) = $new</span> is used instead, and if you do, you should make sure it has the same effect.</p>
 <p>This is meant as an opt-in performance optimization, so that simple assignments <span class="code">%age&lt;Claire> = 29 </span> can operate without having to call <span class="code">AT-KEY</span> (which would have to create and return a potentially expensive container object).</p>
 <p>Note that implementing <span class="code">ASSIGN-KEY</span> does <i>not</i> relieve you from making <span class="code">AT-KEY</span> an <span class="code">rw</span> method though, because less trivial assignments/modifications such as <span class="code">%age&lt;Claire>++ </span> will still use <span class="code">AT-KEY</span>.</p>
 <a name="t33.10.3.5"></a><h3 id="_language_subscripts.pod6-method_BIND-KEY">33.10.3.5 method BIND-KEY</h3>
 When modifying this section, please also adapt the BIND-POS
         section accordingly as they are very similar.
 <pre class="code">multi method BIND-KEY (::?CLASS:D: $key, \new)</pre>
 <p>Expected to bind the value or container <span class="code">new</span> to the slot associated with <span class="code">$key</span>, replacing any container that would be naturally found there. This is what is called when you write:</p>
 <pre class="code">my $x = 10;
%age&amp;lt;Claire&gt; := $x;</pre>
 <p>The generic <a href="#_type_Hash.pod6">Hash</a> class supports this in order to allow building complex linked data structures, but for more domain-specific types it may not make sense, so don't feel compelled to implement it. If you don't, users will get an appropriate error message when they try to bind to an associative slot of an object of this type.</p>
</div> <!-- /language/syntax.pod6 --><div class="pod-body"><a id="_language_syntax.pod6"></a><a name="t34"><h1 class="title">34 Syntax</h1></a> <p class="subtitle">General rules of Perl 6 syntax</p> <p>Perl 6 borrows many concepts from human language. Which is not surprising, considering it was designed by a linguist.</p>
 <p>It reuses common elements in different contexts, has the notion of nouns (terms) and verbs (operators), is context-sensitive (in the every day sense, not necessarily in the Computer Science interpretation), so a symbol can have a different meaning depending on whether a noun or a verb is expected.</p>
 <p>It is also self-clocking, so that the parser can detect most of the common errors and give good error messages.</p>
 <a name="t34.1"></a><h1 id="_language_syntax.pod6-Lexical_Conventions">34.1 Lexical Conventions</h1>
 <p>Perl 6 code is Unicode text, current implementations support UTF-8 as the input encoding.</p>
 <a name="t34.1.1"></a><h2 id="_language_syntax.pod6-Free_Form">34.1.1 Free Form</h2>
 <p>It is free-form, in the sense that you are mostly free to chose the amount of whitespace you chose, though in some cases, the presence or absence of whitespace carries meaning.</p>
 <p>So you can write</p>
 <pre class="code">if True { 
     say "Hello"; 
 } 
</pre>
 <p>or</p>
 <pre class="code">    if True { 
 say "Hello"; 
         } 
</pre>
 <p>or</p>
 <pre class="code">if True { say "Hello" } 
</pre>
 <p>or even</p>
 <pre class="code">if True {say "Hello"} 
</pre>
 <p>though you can't leave out any of the remaining whitespace.</p>
 <a name="t34.1.2"></a><h2 id="_language_syntax.pod6-Unspace">34.1.2 Unspace</h2>
 <p>In many places where the compiler would not allow a space you can use any whitespace that is quoted with a backslash. Unspaces in tokens are not supported. Newlines that are unspaced still count when the compiler produces line numbers. Usecases for unspace are separation of postfix operators and routine argument lists.</p>
 <pre class="code">sub alignment(+@l) { +@l };$
sub long-name-alignment(+@l) { +@l };$
alignment\         (1,2,3,4)&gt;&gt;.say;$
long-name-alignment(3,5)\   &gt;&gt;.say;$</pre>
 <a name="t34.1.3"></a><h2 id="_language_syntax.pod6-Separating_Statements">34.1.3 Separating Statements</h2>
 <p>A Perl 6 program is a list of statements, separated by semicolons <span class="code">;</span>. A semicolon after the final statement (or after the final statement inside a block) is optional, though it's good form to include it.</p>
 <p>A closing curly brace followed by a newline character implies a statement separator, which is why you don't need to write a semicolon after an <span class="code">if</span> statement block.</p>
 <pre class="code">if True { 
     say "Hello"; 
 } 
 say "world"; 
</pre>
 <p>Both semicolons are optional here, but leaving them out increases the chance of syntax errors when adding more lines later.</p>
 <p>You do need to include a semicolon between the <span class="code">if</span> block and the say statement if you want them all on one line.</p>
 <pre class="code">if True { say "Hello" }; say "world"; 
 #                     ^^^ this ; is required 
</pre>
 <a name="t34.1.4"></a><h2 id="_language_syntax.pod6-Comments">34.1.4 Comments</h2>
 <p>Comments are parts of the program text only intended for human readers, and the Perl 6 compilers does not evaluate them as program text.</p>
 <p>Comments count as whitespace in places where the absence of presence of whitespace disambiguates possible parses.</p>
 <a name="t34.1.4.1"></a><h3 id="_language_syntax.pod6-Single-line_comments">34.1.4.1 Single-line comments</h3>
 <p>The most common form of comments in Perl 6 starts with a single hash character <span class="code">#</span> and goes until the end of the line.</p>
 <pre class="code">if $age &gt; 250 {     # catch obvious outliers 
     # this is another comment! 
     die "That doesn't look right" 
 } 
</pre>
 <a name="t34.1.4.2"></a><h3 id="_language_syntax.pod6-Multi-line_/_embedded_comments">34.1.4.2 Multi-line / embedded comments</h3>
 <p>Multi-line and embedded comments start with a hash character, followed by a backtick, and then some opening bracketing character, and end with the matching closing bracketing character. The content can not only span multiple lines, but can also be embedded inline.</p>
 <pre class="code">if #`( why would I ever write an inline comment here? ) True { 
     say "something stupid"; 
 } 
</pre>
 <p>Brackets inside the comment can be nested, so in <span class="code">#`{ a { b } c }</span>, the comment goes until the very end of the string. You may also use more complex brackets, such as <span class="code">#`{{ double-curly-brace }}</span>, which might help disambiguate from nested brackets.</p>
 <a name="t34.1.4.3"></a><h3 id="_language_syntax.pod6-Pod_comments">34.1.4.3 Pod comments</h3>
 <p>Pod syntax can be used for multi-line comments</p>
 <pre class="code">say "this is code"; 
 
 =begin comment 
 
 Here are several 
 lines 
 of comment 
 
 =end comment 
 
 say 'code again'; 
</pre>
 <a name="t34.1.5"></a><h2 id="_language_syntax.pod6-Identifiers">34.1.5 Identifiers</h2>
 <p>Identifiers are a grammatical building block that occur in several places. An identifier is a primitive name, and must start with an alphabetic character (or an underscore), followed by zero or more word characters (alphabetic, underscore or number). You can also embed dashes <span class="code">-</span> or single quotes <span class="code">'</span> in the middle, but not two in a row, and only if followed immediately by an alphabetic character.</p>
 <pre class="code"># valid identifiers:
x
something-longer
with-numbers1234
don't
fish-food

# not valid identifiers:
with-numbers1234-5
42
is-prime?
fish--food</pre>
 <p>Names of constants, types (including classes and modules) and routines (subs and methods) are identifiers, and they also appear in variable names (usually proceeded by a sigil; see <a href="#_language_variables.pod6">variables</a> for more details.)</p>
 <p>Namespaces are provided by <a href="#_language_packages.pod6">packages</a>. By separating identifiers with double colons, the right most name is inserted into existing or automatically created packages.</p>
 <pre class="code">my Int $Foo::Bar::buzz = 42;
dd $Foo::Bar::buzz; # OUTPUT«Int $v = 42␤»</pre>
 <a name="t34.2"></a><h1 id="_language_syntax.pod6-Statements_and_Expressions">34.2 Statements and Expressions</h1>
 <p>Perl 6 programs are made of lists of statements. A special case of a statement is an <i>expression</i>, which returns a value. For example <span class="code">if True { say 42 }</span> is syntactically a statement, but not an expression, whereas <span class="code">1 + 2</span> is an expression (and thus also a statement).</p>
 <p>The <span class="code">do</span> prefix turns statements into expressions. So while</p>
 <pre class="code">my $x = if True { 42 };     # Syntax error!</pre>
 <p>is an error,</p>
 <pre class="code">my $x = do if True { 42 };</pre>
 <p>assigns the return value of the if statement (here <span class="code">42</span>) to the variable <span class="code">$x</span>.</p>
 <a name="t34.3"></a><h1 id="_language_syntax.pod6-Terms">34.3 Terms</h1>
 <p>Terms are the basic nouns that, optionally together with operators, can form expressions. Examples for terms are variables (<span class="code">$x</span>), barewords such as type names (<span class="code">Int</span>), literals (<span class="code">42</span>), declarations (<span class="code">sub f() { }</span>) and calls (<span class="code">f()</span>).</p>
 <p>For example, in the expression <span class="code">2 * $salary</span>, <span class="code">2</span> and <span class="code">$salary</span> are two terms (an <a href="#_type_Int.pod6">integer</a> literal and a <a href="#_language_variables.pod6">variable</a>).</p>
 <a name="t34.3.1"></a><h2 id="_language_syntax.pod6-Variables">34.3.1 Variables</h2>
 <p>Variables typically start with a special character called the <i>sigil</i>, and are followed by an identifier. Variables must be declared before you can use them.</p>
 <pre class="code"># declaration:
my $number = 21;
# usage:
say $number * 2;</pre>
 <p>See the <a href="#_language_variables.pod6">documentation on variables</a> for more details.</p>
 <a name="t34.3.2"></a><h2 id="_language_syntax.pod6-Barewords_(Constants,_Type_Names)">34.3.2 Barewords (Constants, Type Names)</h2>
 <p>Pre-declared identifiers can be terms on their own. Those are typically type names or constants, but also the term <span class="code">self</span> which refers to an object that a method was called on (see <a href="#_language_objects.pod6">objects</a>), and sigiless variables:</p>
 <pre class="code">say Int;                # (Int)
#   ^^^ type name (built in)

constant answer = 42;
say answer;
#   ^^^^^^ constant

class Foo {
    method type-name {
        self.^name;
      # ^^^^ built-in term 'self'
    }
}
say Foo.type-name;     # Foo
#   ^^^ type name</pre>
 <a name="t34.3.3"></a><h2 id="_language_syntax.pod6-Packages_and_Qualified_Names">34.3.3 Packages and Qualified Names</h2>
 <p>Named entities, such as variables, constants, classes, modules, subs, etc, are part of a namespace. Nested parts of a name use <span class="code">::</span> to separate the hierarchy. Some examples:</p>
 <pre class="code">$foo                # simple identifiers
$Foo::Bar::baz      # compound identifiers separated by ::
$Foo::($bar)::baz   # compound identifiers that perform interpolations
Foo::Bar::bob(23)   # function invocation given qualified name</pre>
 <p>See the <a href="#_language_packages.pod6">documentation on packages</a> for more details.</p>
 <a name="t34.3.4"></a><h2 id="_language_syntax.pod6-Literals">34.3.4 Literals</h2>
 <p>A <a href="https://en.wikipedia.org/wiki/Literal_%28computer_programming%29">literal</a> is a representation of a constant value in source code. Perl 6 has literals for several built-in types, like <a href="#_type_Str.pod6">strings</a>, several numeric types, <a href="#_type_Pair.pod6">pairs</a> and more.</p>
 <a name="t34.3.4.1"></a><h3 id="_language_syntax.pod6-String_literals">34.3.4.1 String literals</h3>
 <p>String literals are surrounded by quotes:</p>
 <pre class="code">say 'a string literal';
say "a string literal\nthat interprets escape sequences";</pre>
 <p>See <a href="#_language_quoting.pod6">quoting</a> for many more options.</p>
 <a name="t34.3.4.2"></a><h3 id="_language_syntax.pod6-Number_literals">34.3.4.2 Number literals</h3>
 <p>Number literals are generally specified in base ten, unless a prefix like <span class="code">0x</span> (he<b>x</b>adecimal, base 16), <span class="code">0o</span> (<b>o</b>ctal, base 8) or <span class="code">0b</span> (<b>b</b>inary, base 2) or an explicit base in adverbial notation like <span class="code">:16&lt;A0> </span> specifies it otherwise. Unlike other programming languages, leading zeros do <i>not</i> indicate base 8; instead a compile-time warning is issued</p>
 <p>In all literal formats, you can use underscores to group digits; they don't carry any semantic; the following literals all evaluate to the same number:</p>
 <pre class="code">1000000
1_000_000
10_00000
100_00_00</pre>
 <a name="t34.3.4.2.1"></a><h4 id="_language_syntax.pod6-Int_literals">34.3.4.2.1 Int literals</h4>
 <p>Integers default to signed base-10, but you can use other bases. For details, see <a href="#_type_Int.pod6">Int</a>.</p>
 <pre class="code">-2
12345
0xBEEF      # base 16
0o755       # base 8
:3&amp;lt;1201&gt;    # arbitrary base, here base 3</pre>
 <a name="t34.3.4.2.2"></a><h4 id="_language_syntax.pod6-Rat_literals">34.3.4.2.2 Rat literals</h4>
 <p><a href="#_type_Rat.pod6">Rat</a> literals (rationals) are very common, and take the place of decimals or floats in many other languages. Integer division also results in a <span class="code">Rat</span>.</p>
 <pre class="code">1.0
3.14159
-2.5
:3&amp;lt;21.0012&gt; # Base 3 rational
2/3         # Not actually a literal, but still a Rat</pre>
 <a name="t34.3.4.2.3"></a><h4 id="_language_syntax.pod6-Num_literals">34.3.4.2.3 Num literals</h4>
 <p>Scientific notation with an exponent to base ten after an <span class="code">e</span> produces <a href="#_type_Num.pod6">floating point number</a>:</p>
 <pre class="code">1e0
6.022e23
1e-9
-2e48</pre>
 <a name="t34.3.4.2.4"></a><h4 id="_language_syntax.pod6-Complex_literals">34.3.4.2.4 Complex literals</h4>
 <p><a href="#_type_Complex.pod6">Complex</a> numbers are written either as an imaginary number (which is just a rational number with postfix <span class="code">i</span> appended), or as a sum of a real and an imaginary number:</p>
 <pre class="code">1+2i
6.123e5i</pre>
 <a name="t34.3.4.3"></a><h3 id="_language_syntax.pod6-Pair_literals">34.3.4.3 Pair literals</h3>
 <p><a href="#_type_Pair.pod6">Pairs</a> are made of a key and a value, and there are two basic forms for constructing them: <span class="code">key => 'value' </span> and <span class="code">:key('value')</span>.</p>
 <a name="t34.3.4.3.1"></a><h4 id="_language_syntax.pod6-Arrow_pairs">34.3.4.3.1 Arrow pairs</h4>
 <p>Arrow pairs can have an expression or an identifier on the left-hand side:</p>
 <pre class="code">identifier =&gt; 42
"identifier" =&gt; 42
('a' ~ 'b') =&gt; 1</pre>
 <a name="t34.3.4.3.2"></a><h4 id="_language_syntax.pod6-Adverbial_pairs_(colon_pairs)">34.3.4.3.2 Adverbial pairs (colon pairs)</h4>
 <p>Short forms without explicit values:</p>
 <pre class="code">my $thing = 42;
:$thing                 # same as  thing =&gt; $thing
:thing                  # same as  thing =&gt; True
:!thing                 # same as  thing =&gt; False</pre>
 <p>The variable form also works with other sigils, like <span class="code">:&amp;callback</span> or <span class="code">:@elements</span>.</p>
 <p>Long forms with explicit values:</p>
 <pre class="code">:thing($value)              # same as  thing =&gt; $value
:thing&amp;lt;quoted list&gt;         # same as  thing =&gt; &amp;lt;quoted list&gt;
:thing['some', 'values']    # same as  thing =&gt; ['some', 'values']
:thing{a =&gt; 'b'}            # same as  thing =&gt; { a =&gt; 'b' }</pre>
 <a name="t34.3.4.4"></a><h3 id="_language_syntax.pod6-Array_literals">34.3.4.4 Array literals</h3>
 <p>A pair of square brackets can surround an expression to form an itemized <a href="#_type_Array.pod6">Array</a> literal; typically there is a comma-delimited list inside:</p>
 <pre class="code">say ['a', 'b', 42].join(' ');   # a b 42
#   ^^^^^^^^^^^^^^ Array constructor</pre>
 <p>The array constructor flattens non-itemized arrays and lists, but not itemized arrays themselves:</p>
 <pre class="code">my @a = 1, 2;
# flattens:
say [@a, 3, 4].elems;       # 4

# does not flatten:
say [[@a], [3, 4]].elems;   # 2</pre>
 <a name="t34.3.4.5"></a><h3 id="_language_syntax.pod6-Hash_literals">34.3.4.5 Hash literals</h3>
 <p>A pair of curly braces can surround a list of pairs to form a <a href="#_type_Hash.pod6">Hash</a> literal; typically there is a comma-delimited list of pairs inside. If a non-pair is used, it is assumed to be a key and the next element is the value. Most often this is used with simple arrow pairs.</p>
 <pre class="code">say { a =&gt; 3, b =&gt; 23, :foo, :dog&amp;lt;cat&gt;, "french", "fries" };
# a =&gt; 3, b =&gt; 23, dog =&gt; cat, foo =&gt; True, french =&gt; fries

say {a =&gt; 73, foo =&gt; "fish"}.keys.join(" ");   # a foo
#   ^^^^^^^^^^^^^^^^^^^^^^^^ Hash constructor</pre>
 <p>When assigning to a <span class="code">%</span> sigil variable, the curly braces are optional.</p>
 <pre class="code">my %ages = fred =&gt; 23, jean =&gt; 87, ann =&gt; 4;</pre>
 <p>By default keys in <span class="code">{ }</span> are forced to strings. To compose a hash with non-string keys, use a colon prefix:</p>
 <pre class="code">my $when = :{ (now) =&gt; "Instant", (DateTime.now) =&gt; "DateTime" };</pre>
 <p>Note that with objects as keys, you cannot access non-string keys as strings:</p>
 <pre class="code">:{ -1 =&gt; 41, 0 =&gt; 42, 1 =&gt; 43 }&amp;lt;0&gt;  # Any
:{ -1 =&gt; 41, 0 =&gt; 42, 1 =&gt; 43 }{0}  # 42</pre>
 <a name="t34.3.4.6"></a><h3 id="_language_syntax.pod6-Regex_literals">34.3.4.6 Regex literals</h3>
 <p>A <a href="#_type_Regex.pod6">Regex</a> is declared with slashes like <span class="code">/foo/</span>. Note that this <span class="code">//</span> syntax is shorthand for the full <span class="code">rx//</span> syntax.</p>
 <pre class="code">/foo/          # Short version
rx/foo/        # Longer version
Q :regex /foo/ # Even longer version

my $r = /foo/; # Regexes can be assigned to variables</pre>
 <a name="t34.3.4.7"></a><h3 id="_language_syntax.pod6-Signature_literals">34.3.4.7 Signature literals</h3>
 <p>Signatures can be used standalone for pattern matching, in addition to the typical usage in sub and block declarations. A standalone signature is declared starting with a colon:</p>
 <pre class="code">say "match!" if 5, "fish" ~~ :(Int, Str) #=&gt; match!

my $sig = :(Int $a, Str);
say "match!" if (5, "fish") ~~ $sig; #=&gt; match!

given "foo", 42 {
  when :(Str, Str) { "This won't match" }
  when :(Str, Int $n where $n &gt; 20) { "This will!" }
}</pre>
 <p>See the <a href="#_type_Signature.pod6">Signatures</a> documentation for more about signatures.</p>
 <a name="t34.3.5"></a><h2 id="_language_syntax.pod6-Declarations">34.3.5 Declarations</h2>
 <a name="t34.3.5.1"></a><h3 id="_language_syntax.pod6-Variable_declaration">34.3.5.1 Variable declaration</h3>
 <pre class="code">my $x;                          # simple lexical variable
my $x = 7;                      # initialize the variable
my Int $x = 7;                  # declare the type
my Int:D $x = 7;                # specify that the value must be defined (not undef)
my Int $x where { $_ &gt; 3 } = 7; # constrain the value based on a function
my Int $x where * &gt; 3 = 7;      # same constraint, but using L&amp;lt;Whatever&gt; short-hand</pre>
 <p>See <a href="#_language_variables.pod6-Variable_Declarators_and_Scope">Variable Declarators and Scope</a> for more details on other scopes (our, has).</p>
 <a name="t34.3.5.2"></a><h3 id="_language_syntax.pod6-Subroutine_declaration">34.3.5.2 Subroutine declaration</h3>
 <pre class="code"># The signature is optional
sub foo { say "Hello!" }

sub say-hello($to-whom) { say "Hello $to-whom!" }</pre>
 <p>You can also assign subroutines to variables.</p>
 <pre class="code">my &amp;amp;f = sub { say "Hello!" } # Un-named sub
my &amp;amp;f = -&gt; { say "Hello!" }  # Lambda style syntax. The &amp;amp; sigil indicates the variable holds a function
my $f = -&gt; { say "Hello!" }  # Functions can also be put into scalars</pre>
 <a name="t34.3.5.3"></a><h3 id="_language_syntax.pod6-Module,_Class,_Role,_and_Grammar_declaration">34.3.5.3 Module, Class, Role, and Grammar declaration</h3>
 <p>There are several types of compilation units (packages), each declared with a keyword, a name, some optional traits, and a body of functions.</p>
 <pre class="code">module Gar { }

class Foo { }

role Bar { }

grammar Baz { }</pre>
 <p>You can declare a unit of things without explicit curly brackets.</p>
 <pre class="code">unit module Gar;
# ... stuff goes here instead of in {}'s</pre>
 <a name="t34.3.5.4"></a><h3 id="_language_syntax.pod6-Multi-dispatch_declaration">34.3.5.4 Multi-dispatch declaration</h3>
 <p>See also <a href="#_language_functions.pod6-Multi-dispatch">Multi-dispatch</a>.</p>
 <p>Subroutines can be declared with multiple signatures.</p>
 <pre class="code">multi sub foo() { say "Hello!" }
multi sub foo($name) { say "Hello $name!" }</pre>
 <p>Inside of a class, you can also declare multi-dispatch methods.</p>
 <pre class="code">multi method greet { }
multi method greet(Str $name) { }</pre>
 <a name="t34.4"></a><h1 id="_language_syntax.pod6-Subroutine_calls">34.4 Subroutine calls</h1>
 <p>See <a href="#_language_functions.pod6">functions</a>.</p>
 TODO
 <pre class="code">foo;   # Invoke the function foo with no arguments
foo(); # Invoke the function foo with no arguments
&amp;amp;f();  # Invoke &amp;amp;f, which contains a function
&amp;amp;f.(); # Same as above, needed to make the following work
my @functions = ({say 1}, {say 2}, {say 3});
@functions&gt;&gt;.();

# Method invocation. Object (instance) is $person, method is set-name-age
$person.set-name-age('jane', 98);  # Most common way
$person.set-name: 'jane', 98;      # Precedence drop
set-name($person: 'jane', 98);     # Invocant marker</pre>
 <a name="t34.5"></a><h1 id="_language_syntax.pod6-Operators">34.5 Operators</h1>
 <p>See <a href="#_language_operators.pod6">Operators</a> for lots of details.</p>
 <p>Operators are functions with a more symbol heavy and composable syntax. Like other functions, operators can be multi-dispatch to allow for context-specific usage.</p>
 <p>There are five types (arrangements) for operators, each taking either one or two arguments.</p>
 <pre class="code">++$x           # prefix, operator comes before single input
5 + 3          # infix, operator is between two inputs
$x++           # postfix, operator is after single input
&amp;lt;the blue sky&gt; # circumfix, operator surrounds single input
%foo&amp;lt;bar&gt;      # postcircumfix, operator comes after first input and surrounds second</pre>
 <a name="t34.5.1"></a><h2 id="_language_syntax.pod6-Meta_Operators">34.5.1 Meta Operators</h2>
 <p>Operators can be composed. A common example of this is combining an infix (binary) operator with assignment. You can combine assignment with any binary operator.</p>
 <pre class="code">$x += 5     # Adds 5 to $x, same as $x = $x + 5
$x min= 3   # Sets $x to the smaller of $x and 3, same as $x = $x min 3
$x .= child # Equivalent to $x = $x.child</pre>
 <p>Wrap an infix operator in <span class="code">[ ]</span> to create a new reduction operator that works on a single list of inputs, resulting in a single value.</p>
 <pre class="code">[+] &amp;lt;1 2 3 4 5&gt;         # 15
(((1 + 2) + 3) + 4) + 5 # equivalent expanded version</pre>
 <p>Wrap an infix operator in <span class="code">« »</span> (or the ASCII equivalent <span class="code"></span>) to create a new hyper operator that works pairwise on two lists.</p>
 <pre class="code">&amp;lt;1 2 3&gt; «+» &amp;lt;4 5 6&gt; # &amp;lt;5 7 9&gt;</pre>
 <p>The direction of the arrows indicates what to do when the lists are not the same size.</p>
 <pre class="code">@a «+« @b # Result is the size of @b, elements from @a will be re-used
@a »+» @b # Result is the size of @a, elements from @b will be re-used
@a «+» @b # Result is the size of the biggest input, the smaller one is re-used
@a »+« @b # Exception if @a and @b are different sizes</pre>
 <p>You can also wrap a unary operator with a hyper operator.</p>
 <pre class="code">-« &amp;lt;1 2 3&gt; # &amp;lt;-1 -2 -3&gt;</pre>
</div> <!-- /language/tables.pod6 --><div class="pod-body"><a id="_language_tables.pod6"></a><a name="t35"><h1 class="title">35 Pod 6 Tables</h1></a> <p class="subtitle">The Good, the Bad, and the Ugly</p> <p>The official specification for Perl 6 POD tables is located in the Documentation specification here: <a href="https://raw.githubusercontent.com/perl6/specs/master/S26-documentation.pod">Tables</a>. Although Pod 6 specifications are not completely handled properly yet, several projects are ongoing to correct the situation; one such project is ensuring the proper handling of Pod 6 tables.</p>
 <p>As part of that effort, this document explains the current state of Pod 6 tables by example: valid tables, invalid tables, and ugly tables (i.e., valid tables that, because of sloppy construction, may result in something different than the user expects).</p>
 <a name="t35.1"></a><h1 id="_language_tables.pod6-Restrictions">35.1 Restrictions</h1>
 <p>1. The only valid column separators are either visible (' | ' or ' + ') (note at least one space is required before and after the visible column separators) or invisible [two or more contiguous whitespace (WS) characters (e.g., ' ')].</p>
 <p>2. Mixing visible and invisible column separators in the same table is illegal.</p>
 <p>3. The only valid row separator characters are '_', '-', '+', ' ', '|', and '='.</p>
 <p>4. Consecutive row separator lines are illegal.</p>
 <p>5. Having unequal numbers of columns in table rows is illegal.</p>
 <a name="t35.2"></a><h1 id="_language_tables.pod6-Best_Practices">35.2 Best Practices</h1>
 <p>1. Use of WS for column separators is fragile, and they should only be used for simple tables. The <span class="code">Ugly Tables</span> section below illustrates the problem.</p>
 <p>2. Align table columns and rows carefully. See the examples in later best practices.</p>
 <p>3. For tables with a heading and single- or multi-line content, use one or more contiguous equal signs ('=') as the row separator after the heading, and use one or more contiguous hyphens ('-') as the row separator in the content portion of the table. For example,</p>
 <ul><li><p>Heading and single- or multi-line content</p>
</li></ul> <pre class="code">=begin table 
  hdr col 0 | hdr col 1 
  ====================== 
  row 0     | row 0 
  col 0     | col 1 
  ---------------------- 
  row 1     | row 1 
  col 0     | col 1 
  ---------------------- 
 =end table 
</pre>
 <ul><li><p>Heading and single-line content</p>
</li></ul> <pre class="code">=begin table 
  hdr col 0 | hdr col 1 
  ====================== 
  row 0     | row 0 
  col 0     | col 1 
 =end table 
</pre>
 <p>4. For tables with no header and multi-line content, use one or more contiguous hyphens ('-') as the row separator in the content portion of the table. For example,</p>
 <pre class="code">=begin table 
  row 0       | row 0 
  col 0       | col 1 
  ---------------------- 
  row 1 col 0 | row 1 col 1 
 =end table 
</pre>
 <p>5. For tables with many rows and no multi-line content, blank line row separators are fine. However, with one or more rows with multi-line content, it is easier to ensure proper results by using a visible row separator line between every content row.</p>
 <a name="t35.3"></a><h1 id="_language_tables.pod6-Good_Tables">35.3 Good Tables</h1>
 <p>Following are examples of valid (Good) tables (taken from the current <a href="https://github.com/perl6/roast">Specification Tests</a>).</p>
 <pre class="code">=begin table 
         The Shoveller   Eddie Stevens     King Arthur's singing shovel 
         Blue Raja       Geoffrey Smith    Master of cutlery 
         Mr Furious      Roy Orson         Ticking time bomb of fury 
         The Bowler      Carol Pinnsler    Haunted bowling ball 
 =end table 
</pre>
 <pre class="code">=table 
     Constants           1 
     Variables           10 
     Subroutines         33 
     Everything else     57 
 
</pre>
 <pre class="code">=for table 
     mouse    | mice 
     horse    | horses 
     elephant | elephants 
 
</pre>
 <pre class="code">=table 
     Animal | Legs |    Eats 
     ======================= 
     Zebra  +   4  + Cookies 
     Human  +   2  +   Pizza 
     Shark  +   0  +    Fish 
 
</pre>
 <pre class="code">=table 
         Superhero     | Secret          | 
                       | Identity        | Superpower 
         ==============|=================|================================ 
         The Shoveller | Eddie Stevens   | King Arthur's singing shovel 
 
</pre>
 <pre class="code">=begin table 
 
                         Secret 
         Superhero       Identity          Superpower 
         =============   ===============   =================== 
         The Shoveller   Eddie Stevens     King Arthur's 
                                           singing shovel 
 
         Blue Raja       Geoffrey Smith    Master of cutlery 
 
         Mr Furious      Roy Orson         Ticking time bomb 
                                           of fury 
 
         The Bowler      Carol Pinnsler    Haunted bowling ball 
 
 =end table 
</pre>
 <pre class="code">=table 
     X | O | 
    ---+---+--- 
       | X | O 
    ---+---+--- 
       |   | X 
 
</pre>
 <pre class="code">=table 
     X   O 
    =========== 
         X   O 
    =========== 
             X 
 
</pre>
 <pre class="code">=begin table 
 
 foo 
 bar 
 
 =end table 
</pre>
 <a name="t35.4"></a><h1 id="_language_tables.pod6-Bad_Tables">35.4 Bad Tables</h1>
 <p>Following are examples of invalid (Bad) tables, and they should trigger an unhandled exception during parsing. They are taken from tests used in the table-pod-fix project mentioned above. After acceptance of the project's code into the Rakudo source, they will be added to the current <span class="code">Specification Tests</span>. Note they may not trigge an exception at the moment, but they will after the project's code is integrated.</p>
 <ul><li><p>Mixed column separator types in the same row are not allowed:</p>
</li></ul> <pre class="code">=begin table 
 r0c0 +  r0c1 | r0c3 
 =end table 
</pre>
 <ul><li><p>Mixed visual and whitespace column separator type in the same table are not allowed:</p>
</li></ul> <pre class="code">=begin table 
 r0c0 +  r0c1 | r0c3 
 r1c0    r0c1   r0c3 
 =end table 
</pre>
 <ul><li><p>Different numbers of columns in two or more rows are not allowed:</p>
</li></ul> <pre class="code">=begin table 
 r0c0 |  r0c1 
 r1c0 |  r1c1 |  r1c3 
 =end table 
</pre>
 <ul><li><p>Two consecutive row separators are not allowed:</p>
</li></ul> <pre class="code">=begin table 
 r0c0 |  r0c1 
 ============ 
 ============ 
 r1c0 |  r1c1 
 =end table 
</pre>
 <a name="t35.5"></a><h1 id="_language_tables.pod6-Ugly_Tables">35.5 Ugly Tables</h1>
 <p>Following are examples of valid tables that are probably intended to be two columns, but the columns are not aligned well so the tables will either parse as a single-column table or trigger an exception depending on whether the table uses WS column seprartors or visible column separators.</p>
 <ul><li><p>Unaligned columns with WS column separators:</p>
</li></ul> <p>Notice the second row has the two words separated by only <b>one</b> WS character, while it takes at least <b>two</b> adjacent WS characters to define a column separation. <b>This is a valid table but will be parsed as a single-column table</b>.</p>
 <pre class="code">=begin table 
 r0c0    r0c1 
  r1c0 r0c1 
 =end table 
</pre>
 <ul><li><p>Unaligned columns with visual column separators:</p>
</li></ul> <p>Notice the second row has the two words separated by a visible character ('|') but the character is not recognized as a column separator because it doen't have an adjacent WS character on both sides of it. <b>This is an invalid table because the first row has two columns while the second row has only one column, and it will trigger an exception.</b>.</p>
 <pre class="code">=begin table 
 r0c0  |  r0c1 
  r1c0 |r0c1 
 =end table 
</pre>
</div> <!-- /language/terms.pod6 --><div class="pod-body"><a id="_language_terms.pod6"></a><a name="t36"><h1 class="title">36 Terms</h1></a> <p class="subtitle">Perl 6 Terms</p> <p>Most syntactic constructs in Perl 6 can be categorized in <i>terms</i> and <a href="#_language_operators.pod6">operators</a>.</p>
 <p>Here you can find an overview of different kinds of terms.</p>
 <a name="t36.1"></a><h1 id="_language_terms.pod6-Literals">36.1 Literals</h1>
 <a name="t36.1.1"></a><h2 id="_language_terms.pod6-Int">36.1.1 Int</h2>
 <pre class="code">42
12_300_00
:16&amp;lt;DEAD_BEEF&gt;</pre>
 <p><a href="#_type_Int.pod6">Int</a> literals consist of digits and can contain underscores between any two digits.</p>
 <p>To specify a base other than ten, use the colonpair form <span class="code">:radix&lt;number> </span>.</p>
 <a name="t36.1.2"></a><h2 id="_language_terms.pod6-Rat">36.1.2 Rat</h2>
 <pre class="code">12.34
1_200.345_678</pre>
 <p><a href="#_type_Rat.pod6">Rat</a> literals (rational numbers) contain two integer parts joined by a dot.</p>
 <p>Note that trailing dots are not allowed, so you have to write <span class="code">1.0</span> instead of <span class="code">1.</span> (this rule is important because there are infix operators starting with a dot, for example the <span class="code">..</span> <a href="#_type_Range.pod6">Range</a> operator).</p>
 <a name="t36.1.3"></a><h2 id="_language_terms.pod6-Num">36.1.3 Num</h2>
 <pre class="code">12.3e-32
3e8</pre>
 <p><a href="#_type_Num.pod6">Num</a> literals (floating point numbers) consist of <a href="#_type_Rat.pod6">Rat</a> or <a href="#_type_Int.pod6">Int</a> literals followed by an <span class="code">e</span> and a (possibly negative) exponent. <span class="code">3e8</span> constructs a <a href="#_type_Num.pod6">Num</a> with value <span class="code">3 * 10**8</span>.</p>
 <a name="t36.1.4"></a><h2 id="_language_terms.pod6-Str">36.1.4 Str</h2>
 <pre class="code">'a string'
'I\'m escaped!'
"I don't need to be"
"\"But I still can be,\" he said."
q|Other delimiters can be used too!|</pre>
 <p>String literals are most often created with <span class="code">'</span> or <span class="code">"</span>, however strings are actually a powerful sub-language of Perl 6. See <a href="#_language_quoting.pod6">Quoting Constructs</a>.</p>
 <a name="t36.1.5"></a><h2 id="_language_terms.pod6-Regex">36.1.5 Regex</h2>
 <pre class="code">/ match some text /
rx/slurp \s rest (.*) $/</pre>
 <p>These forms produce regex literals. See <a href="#_language_quoting.pod6">Quoting Constructs</a>.</p>
 <a name="t36.1.6"></a><h2 id="_language_terms.pod6-Pair">36.1.6 Pair</h2>
 <pre class="code">a =&gt; 1
'a' =&gt; 'b'
:identifier
:!identifier
:identifier&amp;lt;value&gt;
:identifier&amp;lt;value1 value2&gt;
:identifier($value)
:identifier['val1', 'val2']
:identifier{key1 =&gt; 'val1', key2 =&gt; 'value2'}
:$item
:@array
:%hash
:&amp;amp;callable</pre>
 <p><a href="#_type_Pair.pod6">Pair</a> objects can be created either with <span class="code">infix:«=>» </span> (which auto-quotes the left-hand side if it is an identifier), or with the various colon-pair forms. Those always start with a colon and then are followed either by an identifier or the name of an already existing variable (whose name without the sigil is used as the key and value of the variable is used as the value of the pair).</p>
 <p>In the identifier form of a colon-pair, the optional value can be any circumfix. If it is left blank, the value is <span class="code">Bool::True</span>. The value of the <span class="code">:!identifier</span> form is <span class="code">Bool::False</span>.</p>
 <p>If used in an argument list, all of these forms count as named arguments, with the exception of <span class="code">'quoted string' => $value </span>.</p>
 <a name="t36.1.7"></a><h2 id="_language_terms.pod6-List">36.1.7 List</h2>
 <pre class="code">()
1, 2, 3
&amp;lt;a b c&gt;
«a b c»
qw/a b c/</pre>
 <p><a href="#_type_List.pod6">List</a> literals are: the empty pair of parens <span class="code">()</span>, a comma-separated list, or several quoting constructs.</p>
 <a name="t36.1.8"></a><h2 id="_language_terms.pod6-term_*">36.1.8 term *</h2>
 <p>Creates an object of type <span class="code">Whatever</span>. See <a href="#_type_Whatever.pod6">Whatever</a> documentation for more details.</p>
 <a name="t36.2"></a><h1 id="_language_terms.pod6-Identifier_terms">36.2 Identifier terms</h1>
 <p>There are built-in identifier terms in Perl 6, which are listed below. In addition one can add new identifier terms with the syntax:</p>
 <pre class="code">sub term:&amp;lt;forty-two&gt; { 42 };
say forty-two</pre>
 <p>or as constants:</p>
 <pre class="code">constant forty-two = 42;
say forty-two;</pre>
 <a name="t36.2.1"></a><h2 id="_language_terms.pod6-term_self">36.2.1 term self</h2>
 <p>Inside a method, <span class="code">self</span> refers to the invocant (i.e. the object the method was called on). If used in a context where it doesn't make sense, a compile-time exception of type <a href="#_type_X::Syntax::NoSelf.pod6">X::Syntax::NoSelf</a> is thrown.</p>
 <a name="t36.2.2"></a><h2 id="_language_terms.pod6-term_now">36.2.2 term now</h2>
 <p>Returns an <a href="#_type_Instant.pod6">Instant</a> object representing the current time.</p>
 <a name="t36.2.3"></a><h2 id="_language_terms.pod6-term_time">36.2.3 term time</h2>
 <p>Returns the current POSIX time as an <a href="#_type_Int.pod6">Int</a>.</p>
 <a name="t36.2.4"></a><h2 id="_language_terms.pod6-term_rand">36.2.4 term rand</h2>
 <p>Returns a pseudo-random <a href="#_type_Num.pod6">Num</a> in the range <span class="code">0..^1</span>.</p>
 <a name="t36.2.5"></a><h2 id="_language_terms.pod6-term_π">36.2.5 term π</h2>
 <p>Returns the number <span class="code">π</span>, i.e., the ratio between circumference and diameter of a circle. The Texas (ASCII) equivalent of <span class="code">π</span> is <span class="code">pi</span>.</p>
 <a name="t36.2.6"></a><h2 id="_language_terms.pod6-term_pi">36.2.6 term pi</h2>
 <p>Returns the number <span class="code">π</span>, i.e., the ratio between circumference and diameter of a circle. <span class="code">pi</span> is the Texas (ASCII) equivalent of <span class="code">π</span>.</p>
 <a name="t36.2.7"></a><h2 id="_language_terms.pod6-term_τ">36.2.7 term τ</h2>
 <p>Returns the number <span class="code">τ</span>, i.e., the ratio between circumference and radius of a circle. The Texas (ASCII) equivalent of <span class="code">τ</span> is <span class="code">tau</span>.</p>
 <a name="t36.2.8"></a><h2 id="_language_terms.pod6-term_tau">36.2.8 term tau</h2>
 <p>Returns the number <span class="code">τ</span>, i.e., the ratio between circumference and radius of a circle. <span class="code">tau</span> is the Texas (ASCII) equivalent of <span class="code">τ</span>.</p>
 <a name="t36.2.9"></a><h2 id="_language_terms.pod6-term_e">36.2.9 term e</h2>
 <p>Returns Euler's number.</p>
 <a name="t36.2.10"></a><h2 id="_language_terms.pod6-term_i">36.2.10 term i</h2>
 <p>Returns the imaginary unit (for <a href="#_type_Complex.pod6">Complex</a> numbers).</p>
 <a name="t36.3"></a><h1 id="_language_terms.pod6-Variables">36.3 Variables</h1>
 <p>Variables are discussed in the <a href="#_language_variables.pod6">variable language docs</a>.</p>
 <a name="t36.4"></a><h1 id="_language_terms.pod6-Constants">36.4 Constants</h1>
 <p><span class="indexed"><a id="449" name="constant (Terms)"></a></span> Constants are declared with <span class="code">constant</span> and do not require a sigil. The RHS is evaluated at compile time, what may be too early to make sense.</p>
 <pre class="code">constant Pi = 3.123; # if you happen to be Babylonian</pre>
</div> <!-- /language/testing.pod6 --><div class="pod-body"><a id="_language_testing.pod6"></a><a name="t37"><h1 class="title">37 Testing</h1></a> <p class="subtitle">Writing and running tests in Perl 6</p> <p>Testing code is an integral part of software development. For instance, how can one be sure the code works if there isn't some way to verify it behaves as desired? This is the role of tests: to provide automated, repeatable verifications of code behaviour.</p>
 <p>In Perl 6, the <a href="https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm6">Test</a> module provides a testing framework similar to the traditional Perl 5 <a href="http://perldoc.perl.org/Test/More.html">Test::More</a> module. Thus, anyone familiar with <span class="code">Test::More</span> (and friends) should be comfortable with Perl 6's <span class="code">Test</span> module. The <span class="code">Test</span> module is the testing module used by the official spectest suite.</p>
 <p>The testing functions emit output conforming to the <a href="http://testanything.org">Test Anything Protocol</a>.</p>
 <a name="t37.1"></a><h1 id="_language_testing.pod6-Writing_tests">37.1 Writing tests</h1>
 <p>As with any Perl project, the tests live under the <span class="code">t</span> directory in the project's base directory.</p>
 <p>A typical test file looks something like this:</p>
 <pre class="code">use v6;
use Test;      # a Standard module included with Rakudo
use lib 'lib';

plan $num-tests;

# .... tests</pre>
 <p>We ensure that we're using Perl 6, via the <span class="code">use v6</span> pragma, then we load the <span class="code">Test</span> module and specify where our libraries are. We then specify how many tests we <i>plan</i> to run (such that the testing framework can tell us if more or fewer tests were run than we expected) and when finished with the tests, we tell the framework that we are <i>done</i> testing.</p>
 <a name="t37.2"></a><h1 id="_language_testing.pod6-Running_tests">37.2 Running tests</h1>
 <p>One can run tests individually by specifying the test filename on the command line:</p>
 <pre class="code">$ perl6 t/test-filename.t</pre>
 <p>Or via the <a href="http://perldoc.perl.org/prove.html">prove</a> command from Perl 5, where one specifies <span class="code">perl6</span> as the executable to run the tests:</p>
 <pre class="code">$ prove --exec perl6 -r t</pre>
 <a name="t37.3"></a><h1 id="_language_testing.pod6-Test_plans">37.3 Test plans</h1>
 <ul><li><p><span class="indexed"><a id="440" name="plan">plan($count)</a></span></p>
</li></ul> <p>Specify the total number of tests. Usually written at the beginning of a test file.</p>
 <pre class="code">plan 15;   # expect to run 15 tests</pre>
 <p>In <span class="code">subtest</span>s, <span class="code">plan</span> is used to specify the total number of tests within the subtest.</p>
 <p>If a <span class="code">plan</span> is used, it is not necessary to denote the end of testing with <span class="code">done-testing</span>.</p>
 <ul><li><p><span class="indexed"><a id="441" name="">done-testing</a></span></p>
</li></ul> <p>Specify that testing has finished. Use this function when you do not as yet have a <span class="code">plan</span> for the number of tests to run. A <span class="code">plan</span> is thus not required when using <span class="code">done-testing</span>.</p>
 <a name="t37.4"></a><h1 id="_language_testing.pod6-Testing_return_values">37.4 Testing return values</h1>
 <p>The <span class="code">Test</span> module exports various functions that check the return value of a given expression, and produce standardized test output accordingly.</p>
 <p>In practice, the expression will often be a call to a function or method that you want to unit-test.</p>
 <a name="t37.4.1"></a><h2 id="_language_testing.pod6-By_truthiness">37.4.1 By truthiness</h2>
 <ul><li><p><span class="indexed"><a id="442" name="ok nok">ok($value, $description?), nok($condition, $description?)</a></span></p>
</li></ul> <p>The <span class="code">ok</span> function marks a test as passed if the given <span class="code">$value</span> evaluates to <span class="code">True</span> in a boolean context. The <span class="code">nok</span> function marks a test as passed if the given value evaluates to <span class="code">False</span>. Both functions accept an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">ok  $response.success, 'HTTP response was successful';
nok $query.error,      'Query completed without error';</pre>
 <p>In principle you could use <span class="code">ok</span> for every kind of comparison test, by including the comparison in the expression passed to <span class="code">$value</span>:</p>
 <pre class="code">ok factorial(6) == 720, 'Factorial - small integer';</pre>
 <p>However, where possible it is better to use one of the specialized comparison test functions below, because they can print more helpful diagnostics output in case the comparison fails.</p>
 <a name="t37.4.2"></a><h2 id="_language_testing.pod6-By_string_comparison">37.4.2 By string comparison</h2>
 <p><span class="indexed"><a id="443" name="is testing"></a></span></p>
 <ul><li><p>is($value, $expected, $description?)</p>
</li></ul> <p>Marks a test as passed if <span class="code">$value</span> and <span class="code">$expected</span> compare positively with the <a href="#_routine_eq.pod6">eq operator</a>. The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">is $pdf-document.author, "Joe", 'Retrieving the author field';
is factorial(6),         720,   'Factorial - small integer';</pre>
 <p>As a special case, if <span class="code">$expected</span> is a type object, the comparison uses the <span class="code">===</span> operator instead:</p>
 <pre class="code">my Int $a;
is $a, Int, 'The variable $a is an unassigned Int';</pre>
 <ul><li><p><span class="indexed"><a id="444" name="isnt">isnt($value, $expected, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if <span class="code">$value</span> and <span class="code">$expected</span> are <b>not</b> equal using the same rules as <span class="code">is()</span>. The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">isnt pi, 3, 'The constant π is not equal to 3';

my Int $a = 23;
$a = Nil;
isnt $a, Nil, 'Nil should not survive being put in a container';</pre>
 <a name="t37.4.3"></a><h2 id="_language_testing.pod6-By_approximate_numeric_comparison">37.4.3 By approximate numeric comparison</h2>
 <ul><li><p><span class="indexed"><a id="445" name="is-approx">is-approx($value, $expected, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if the <span class="code">$value</span> and <span class="code">$expected</span> numerical values are approximately equal to each other. The subroutine can be called in numerous ways that let you test using relative tolerance (<span class="code">$rel-tol</span>) or absolute tolerance (<span class="code">$abs-tol</span>) of different values.</p>
 <p>If no tolerance is set, it will default to an absolute tolerance of <span class="code">1e-5</span>.</p>
 <pre class="code">my Numeric ($value, $expected, $abs-tol, $rel-tol) = ...

is-approx $value, $expected;
is-approx $value, $expected, 'test description';

is-approx $value, $expected, $abs-tol;
is-approx $value, $expected, $abs-tol, 'test description';

is-approx $value, $expected, :$rel-tol;
is-approx $value, $expected, :$rel-tol, 'test description';

is-approx $value, $expected, :$abs-tol;
is-approx $value, $expected, :$abs-tol, 'test description';

is-approx $value, $expected, :$abs-tol, :$rel-tol;
is-approx $value, $expected, :$abs-tol, :$rel-tol, 'test description';</pre>
 <a name="t37.4.3.1"></a><h3 id="_language_testing.pod6-Absolute_Tolerance">37.4.3.1 Absolute Tolerance</h3>
 <p>When an absolute tolerance is set, it's used as the actual maximum value by which the <span class="code">$value</span> and <span class="code">$expected</span> can differ. For example:</p>
 <pre class="code">is-approx 3, 4, 2; # success
is-approx 3, 6, 2; # fail

is-approx 300, 302, 2; # success
is-approx 300, 400, 2; # fail
is-approx 300, 600, 2; # fail</pre>
 <p>Regardless of values given, the difference between them cannot be more than <span class="code">2</span>.</p>
 <a name="t37.4.3.2"></a><h3 id="_language_testing.pod6-Relative_Tolerance">37.4.3.2 Relative Tolerance</h3>
 <p>When a relative tolerance is set, the test checks the relative difference between values. Given the same tolerance, the larger the numbers given, the larger the value they can differ by can be.</p>
 <p>For example:</p>
 <pre class="code">is-approx 10, 10.5, :rel-tol&amp;lt;0.1&gt;; # success
is-approx 10, 11.5, :rel-tol&amp;lt;0.1&gt;; # fail

is-approx 100, 105, :rel-tol&amp;lt;0.1&gt;; # success
is-approx 100, 115, :rel-tol&amp;lt;0.1&gt;; # fail</pre>
 <p>Both versions use <span class="code">0.1</span> for relative tolerance, yet the first can differ by about <span class="code">1</span> while the second can differ by about <span class="code">10</span>. The function used to calculate the difference is:</p>
 <pre class="code">              |value - expected| 
 ⁣rel-diff = ──────────────────────── 
            max(|value|, |expected|) 
</pre>
 <p>and the test will fail if <span class="code">rel-diff</span> is higher than <span class="code">$rel-tol</span>.</p>
 <a name="t37.4.3.3"></a><h3 id="_language_testing.pod6-Both_Absolute_and_Relative_Tolerance_Specified">37.4.3.3 Both Absolute and Relative Tolerance Specified</h3>
 <pre class="code">is-approx $value, $expected, :rel-tol&amp;lt;.5&gt;, :abs-tol&amp;lt;10&gt;;</pre>
 <p>When both absolute and relative tolerances are specified, each will be tested independently, and the <span class="code">is-approx</span> test will succeed only if both pass.</p>
 <a name="t37.4.4"></a><h2 id="_language_testing.pod6-By_structural_comparison">37.4.4 By structural comparison</h2>
 <ul><li><p><span class="indexed"><a id="446" name="is-deeply">is-deeply($value, $expected, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if <span class="code">$value</span> and <span class="code">$expected</span> compare positively with the <a href="#_routine_eqv.pod6">eqv operator</a>. This is the best way to check for equality of (deep) data structures. The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">use v6; 
 use Test; 
 plan 1; 
 
 sub count-chars(Str() $x) { 
     my %chars; 
     %chars{$_}++ for $x.comb; 
     return %chars; 
 } 
 my %expected = 
     f   =&gt; 1, 
     l   =&gt; 1, 
     e   =&gt; 3, 
     c   =&gt; 1, 
     ; 
 is-deeply count-chars('fleece'), %expected, 'count-chars works on "fleece"'; 
</pre>
 <p>Note that string comparison here would have been fragile, because hashes are not sorted, and converting a <a href="#_type_Hash.pod6">Hash</a> to a string loses information.</p>
 <a name="t37.4.5"></a><h2 id="_language_testing.pod6-By_arbitrary_comparison">37.4.5 By arbitrary comparison</h2>
 <ul><li><p><span class="indexed"><a id="447" name="cmp-ok">cmp-ok($value, $comparison, $expected, $description?)</a></span></p>
</li></ul> <p>Compares <span class="code">$value</span> and <span class="code">$expected</span> with the given <span class="code">$comparison</span> comparator and passes the test if the comparison yields a <span class="code">True</span> value. The <span class="code">$description</span> of the test is optional.</p>
 <p>The <span class="code">$comparison</span> comparator can be either a <a href="#_type_Callable.pod6">Callable</a> or a <a href="#_type_Str.pod6">Str</a> containing an infix operator, such as <span class="code">'=='</span>, a <span class="code">'~~'</span>, or a user-defined infix.</p>
 <pre class="code">cmp-ok 'my spelling is apperling', '~~', /perl/, "bad speller";</pre>
 <p>A <a href="#_type_Callable.pod6">Callable</a> <span class="code">$comparison</span> lets you use custom comparisons:</p>
 <pre class="code">sub my-comp { $^a / $^b  &amp;lt; rand };
cmp-ok 1, &amp;amp;my-comp, 2, 'the dice giveth and the dice taketh away'

cmp-ok 2, -&gt; $a, $b { $a.is-prime and $b.is-prime and $a &amp;lt; $b }, 7,
    'we got primes, one larger than the other!';</pre>
 <a name="t37.4.6"></a><h2 id="_language_testing.pod6-By_object_type">37.4.6 By object type</h2>
 <ul><li><p><span class="indexed"><a id="448" name="isa-ok">isa-ok($value, $expected-type, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if the given object <span class="code">$value</span> is, or inherits from, the given <span class="code">$expected-type</span>. For convenience, types may also be specified as a string. The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">class Womble {}
class GreatUncleBulgaria is Womble {}
my $womble = GreatUncleBulgaria.new;

isa-ok $womble, Womble, "Great Uncle Bulgaria is a womble";
isa-ok $womble, 'Womble';     # equivalent</pre>
 <a name="t37.4.7"></a><h2 id="_language_testing.pod6-By_method_name">37.4.7 By method name</h2>
 <ul><li><p><span class="indexed"><a id="450" name="can-ok">can-ok($variable, $method-name, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if the given <span class="code">$variable</span> can run the given <span class="code">$method-name</span>. The function accepts an optional <span class="code">$description</span>. For instance:</p>
 <pre class="code">my $womble = Womble.new;

# with automatically generated test description
can-ok $womble, 'collect-rubbish';
#  =&gt; An object of type 'Womble' can do the method 'collect-rubbish'

# with human-generated test description
can-ok $womble, 'collect-rubbish', "Wombles can collect rubbish";
#  =&gt; Wombles can collect rubbish</pre>
 <a name="t37.4.8"></a><h2 id="_language_testing.pod6-By_role">37.4.8 By role</h2>
 <ul><li><p><span class="indexed"><a id="451" name="does-ok">does-ok($variable, $role, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if the given <span class="code">$variable</span> can do the given <span class="code">$role</span>. The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code"># create a Womble who can invent
role Invent {
    method brainstorm { say "Aha!" }
}
class Womble {}
class Tobermory is Womble does Invent {}

# ... and later in the tests
use Test;

my $tobermory = Tobermory.new;

# with automatically generated test description
does-ok $tobermory, Invent;
#  =&gt; The object does role Type

does-ok $tobermory, Invent, "Tobermory can invent";
#  =&gt; Tobermory can invent</pre>
 <a name="t37.4.9"></a><h2 id="_language_testing.pod6-By_regex">37.4.9 By regex</h2>
 <ul><li><p><span class="indexed"><a id="452" name="like">like($value, $expected-regex, $description?)</a></span></p>
</li></ul> <pre class="code">like 'foo', /fo/, 'foo looks like fo';</pre>
 <p>Marks a test as passed if the <span class="code">$value</span>, when coerced to a string, matches the <span class="code">$expected-regex</span>. The function accepts an optional <span class="code">$description</span> of the test.</p>
 <ul><li><p><span class="indexed"><a id="453" name="unlike">unlike($value, $expected-regex, $description?)</a></span></p>
</li></ul> <pre class="code">unlike 'foo', /bar/, 'foo does not look like bar';</pre>
 <p>Marks a test as passed if the <span class="code">$value</span>, when coerced to a string, does <b>not</b> match the <span class="code">$expected-regex</span>. The function accepts an optional <span class="code">$description</span> of the test.</p>
 <a name="t37.5"></a><h1 id="_language_testing.pod6-Testing_modules">37.5 Testing modules</h1>
 <ul><li><p><span class="indexed"><a id="454" name="use-ok">use-ok($module)</a></span></p>
</li></ul> <p>Marks a test as passed if the given <span class="code">$module</span> is correctly loaded.</p>
 <pre class="code">use-ok 'Full::Qualified::ModuleName';</pre>
 <a name="t37.6"></a><h1 id="_language_testing.pod6-Testing_exceptions">37.6 Testing exceptions</h1>
 <ul><li><p><span class="indexed"><a id="455" name="dies-ok">dies-ok($code, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if the given <span class="code">$code</span> throws an exception.</p>
 <p>The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">sub saruman(Bool :$ents-destroy-isengard) { 
     die "Killed by Wormtongue" if $ents-destroy-isengard; 
 } 
 
 dies-ok { saruman(ents-destroy-isengard =&gt; True) }, "Saruman dies"; 
</pre>
 <ul><li><p><span class="indexed"><a id="456" name="lives-ok">lives-ok($code, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if the given <span class="code">$code</span> <b>does not</b> throw an exception.</p>
 <p>The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">sub frodo(Bool :$destroys-ring) { 
     die "Oops, that wasn't supposed to happen" unless $destroys-ring; 
 } 
 
 lives-ok { frodo(destroys-ring =&gt; True) }, "Frodo survives"; 
</pre>
 <ul><li><p><span class="indexed"><a id="457" name="eval-dies-ok">eval-dies-ok($string, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if the given <span class="code">$string</span> throws an exception when <span class="code">eval</span>ed as code.</p>
 <p>The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">eval-dies-ok q[my $joffrey = "nasty"; 
                die "bye bye Ned" if $joffrey ~~ /nasty/], 
     "Ned Stark dies"; 
</pre>
 <ul><li><p><span class="indexed"><a id="458" name="eval-lives-ok">eval-lives-ok($string, $description?)</a></span></p>
</li></ul> <p>Marks a test as passed if the given <span class="code">$string</span> <b>does not</b> throw an exception when <span class="code">eval</span>ed as code.</p>
 <p>The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">eval-lives-ok q[my $daenerys-burns = False; 
                 die "Oops, Khaleesi now ashes" if $daenerys-burns], 
     "Dany is blood of the dragon"; 
</pre>
 <ul><li><p><span class="indexed"><a id="459" name="throws-like">throws-like($code, $expected-exception, $description?, *%matcher)</a></span></p>
</li></ul> <p>Marks a test as passed if the given <span class="code">$code</span> throws the specific exception <span class="code">$expected-exception</span>. The code <span class="code">$code</span> may be specified as something <span class="code">Callable</span>, or as a string to be <span class="code">EVAL</span>ed. The exception may be specified as a type object, or as a string containing its type name.</p>
 <p>If an exception was thrown, it will also try to match the matcher hash, in which the key is the name of the method to be called on the exception, and the value is the value it should have to pass. For example:</p>
 <pre class="code">sub frodo { fail "Oops. Frodo dies" unless $destroys-ring }; 
 throws-like { frodo }, Exception, message =&gt; /dies/; 
</pre>
 Someone needs to clarify the preceding paragraph, because I have
         no idea what it is talking about... ;)
 <p>The function accepts an optional <span class="code">$description</span> of the test.</p>
 <p>Please note that you can only use the string form (for <span class="code">EVAL</span>) if you are not referencing any symbols in the surrounding scope. If you are, you should encapsulate your string with a block and an EVAL instead. For instance:</p>
 <pre class="code">throws-like { EVAL q[ fac("foo") ] }, X::TypeCheck::Argument;</pre>
 <a name="t37.7"></a><h1 id="_language_testing.pod6-Grouping_tests">37.7 Grouping tests</h1>
 <p>The result of a group of subtests is only <span class="code">ok</span> if all subtests are <span class="code">ok</span>.</p>
 <ul><li><p><span class="indexed"><a id="460" name="subtest">subtest(&amp;subtests, $description?)</a></span></p>
</li></ul> <p>The <span class="code">subtest</span> function executes the given block, consisting of usually more than one test, possibly including a <span class="code">plan</span> or <span class="code">done</span>, and counts as <i>one</i> test in <span class="code">plan</span>, <span class="code">todo</span>, or <span class="code">skip</span> counts. It will pass the test only if <b>all</b> tests in the block, pass. The function accepts an optional <span class="code">$description</span> of the test.</p>
 <pre class="code">class Womble {} 
 
 class GreatUncleBulgaria is Womble { 
     has $.location = "Wimbledon Common"; 
     has $.spectacles = True; 
 } 
 
 subtest { 
     my $womble = GreatUncleBulgaria.new; 
 
     isa-ok $womble,            Womble,             "Correct type"; 
     is     $womble.location,   "Wimbledon Common", "Correct location"; 
     ok     $womble.spectacles,                     "Correct eyewear"; 
 
 }, "Check Great Uncle Bulgaria"; 
</pre>
 <p>You can also place description as the first positional argument, or use a <span class="code">Pair</span> with description as key and subtest's code as value. This can be useful for subtests with large bodies.</p>
 <pre class="code">subtest 'A bunch of tests', { 
     plan 42; 
     ... 
     ... 
 } 
 
 subtest 'Another bunch of tests' =&gt; { 
     plan 72; 
     ... 
     ... 
 } 
</pre>
 <a name="t37.8"></a><h1 id="_language_testing.pod6-Skipping_tests">37.8 Skipping tests</h1>
 <p>Sometimes tests just aren't ready to be run, for instance a feature might not yet be implemented, in which case tests can be marked as <span class="code">todo</span>. Or it could be the case that a given feature only works on a particular platform - in which case one would <span class="code">skip</span> the test on other platforms.</p>
 <ul><li><p><span class="indexed"><a id="461" name="todo">todo($reason, $count = 1)</a></span></p>
</li></ul> <p>Mark <span class="code">$count</span> tests as TODO, giving a <span class="code">$reason</span> as to why. By default only one test will be marked TODO.</p>
 <pre class="code">sub my-custom-pi { 3 };

todo 'not yet precise enough';         # Mark the test as TODO.
is my-custom-pi(), pi, 'my-custom-pi'; # Run the test, but don't report
                                       # failure in test harness.</pre>
 <p>The result from the test code above will be something like:</p>
 <pre class="code">not ok 1 - my-custom-pi# TODO not yet precise enough

# Failed test 'my-custom-pi'
# at test-todo.t line 7
# expected: '3.14159265358979'
#      got: '3'</pre>
 <ul><li><p><span class="indexed"><a id="462" name="skip">skip($reason, $count = 1)</a></span></p>
</li></ul> <p>Skip <span class="code">$count</span> tests, giving a <span class="code">$reason</span> as to why. By default only one test will be skipped. Use such functionality when a test (or tests) would die if run.</p>
 <pre class="code">if $*KERNEL ~~ 'linux' { 
     is num-forward-slashes("/a/b"),             2; 
     is num-forward-slashes(normalize("/a//b")), 2; 
 } 
 else { 
     skip "Can't use forward slashes on Windows", 2; 
 } 
</pre>
 <p>Note that if you mark a test as skipped, you must also prevent that test from running.</p>
 <ul><li><p><span class="indexed"><a id="463" name="skip-rest">skip-rest($reason?)</a></span></p>
</li></ul> <p>Skip the remaining tests. If the remainder of the tests in the test file would all fail due to some condition, use this function to skip them, providing an optional <span class="code">$reason</span> as to why.</p>
 <pre class="code">unless $location ~~ "Wimbledon Common" { 
     skip-rest "We can't womble, the remaining tests will fail"; 
     exit; 
 } 
 
 # tests requiring functional wombling 
 ok womble(); 
 # ... 
</pre>
 <p>Note that <span class="code">skip-rest</span> requires a <span class="code">plan</span> to be set, otherwise the <span class="code">skip-rest</span> call will throw an error. If no plan was set, you can use <span class="code">done</span> to indicate the end of the test run (though of course the test summary will not count skipped tests). Note also the <span class="code">exit</span> is required in the example to prevent the skipped tests from running. Alternatively, you could enclose the remaining tests in an <span class="code">else</span> branch.</p>
 <ul><li><p><span class="indexed"><a id="464" name="bail-out">bail-out($reason?)</a></span></p>
</li></ul> <p>If you already know the tests will fail, you can bail out of the test run using <span class="code">bail-out()</span>:</p>
 <pre class="code">    $has-db-connection or bail-out 'Must have database connection for testing'; 
</pre>
 <p>The function aborts the current test run, signaling failure to the harness. Takes an optional reason for bailing out. The subroutine will call <span class="code">exit()</span>, so if you need to do a clean-up, do it before calling <span class="code">bail-out()</span>.</p>
 <a name="t37.9"></a><h1 id="_language_testing.pod6-Manual_control">37.9 Manual control</h1>
 <p>If the convenience functionality documented above does not suit your needs, you can instead use the following functions to direct the test harness output manually.</p>
 <ul><li><p><span class="indexed"><a id="465" name="pass flunk">pass($description?), flunk($description?)</a></span></p>
</li></ul> <p>The <span class="code">pass</span> function marks a test as passed. <span class="code">flunk</span> marks a test as <b>not</b> passed. Both functions accept an optional test <span class="code">$description</span>.</p>
 <pre class="code">pass "Actually, this test has passed";

flunk "But this one hasn't passed";</pre>
 <p>Since these subroutines do not provide indication of what value was received and what was expected, they should be used sparingly, such as when evaluating a complex test condition.</p>
 <ul><li><p><span class="indexed"><a id="466" name="diag">diag($message)</a></span></p>
</li></ul> <p>Display diagnostic information in a TAP-compatible manner on the standard error stream. It is usually used when a particular test has failed to provide information that the test itself did not provide. Or it can be used to provide visual markers on how the testing of a test-file is progressing (which can be important when doing stress testing).</p>
 <pre class="code">diag "Yay!  The tests got to here!";</pre>
</div> <!-- /language/traps.pod6 --><div class="pod-body"><a id="_language_traps.pod6"></a><a name="t38"><h1 class="title">38 Traps to avoid</h1></a> <p class="subtitle">Traps to avoid when getting started with Perl 6</p> <p>When learning a programming language, possibly with the background of being familiar with another programming language, there are always some things that can surprise you and might cost valuable time in debugging and discovery.</p>
 <p>This document aims to show common misconceptions.</p>
 <p>During the making of Perl 6 great pains were taken to get rid of warts in the syntax. When you whack one wart, though, sometimes another pops up. So a lot of time was spent finding the minimum number of warts or trying to put them where they would rarely be seen. Because of this, Perl 6's warts are in different places than you may expect them to be when coming from another language.</p>
 <a name="t38.1"></a><h1 id="_language_traps.pod6-Objects">38.1 Objects</h1>
 <a name="t38.1.1"></a><h2 id="_language_traps.pod6-Assigning_to_attributes">38.1.1 Assigning to attributes</h2>
 <p>Newcomers often think that, because attributes with accessors are declared as <span class="code">has $.x</span>, they can assign to <span class="code">$.x</span> inside the class. That's not the case.</p>
 <p>For example</p>
 <pre class="code">use v6;
class Point {
    has $.x;
    has $.y;
    method double {
        $.x *= 2;   # WRONG
        $.y *= 2;   # WRONG
        self;
    }
}

say Point.new(x =&gt; 1, y =&gt; -2).double.x</pre>
 <p>dies with</p>
 <pre class="code">Cannot modify an immutable Int</pre>
 <p>in the first line marked with <span class="code"># WRONG</span>, because <span class="code">$.x</span>, short for <span class="code">$( self.x )</span>, is a call to a read-only accessor.</p>
 <p>The syntax <span class="code">has $.x</span> is short for something like <span class="code">has $!x; method x() { $!x }</span>, so the actual attribute is called <span class="code">$!x</span>, and a read-only accessor method is automatically generated.</p>
 <p>Thus the correct way to write method <span class="code">double</span> is</p>
 <pre class="code">method double {
    $!x *= 2;
    $!y *= 2;
    self;
}</pre>
 <p>which operates on the attributes directly.</p>
 <a name="t38.1.2"></a><h2 id="_language_traps.pod6-BUILD_prevents_automatic_attribute_initialization_from_constructor_arguments">38.1.2 BUILD prevents automatic attribute initialization from constructor arguments</h2>
 <p>When you define your own <span class="code">BUILD</span> submethod, you must take care of initializing all attributes yourself. For example</p>
 <pre class="code">use v6;
class A {
    has $.x;
    has $.y;
    submethod BUILD {
        $!y = 18;
    }
}

say A.new(x =&gt; 42).x;       # Any</pre>
 <p>leaves <span class="code">$!x</span> uninitialized, because the custom <span class="code">BUILD</span> doesn't initialize it.</p>
 <p>One possible remedy is to explicitly initialize the attribute in <span class="code">BUILD</span>:</p>
 <pre class="code">submethod BUILD(:$x) {
    $!y = 18;
    $!x := $x;
}</pre>
 <p>which can be shortened to:</p>
 <pre class="code">submethod BUILD(:$!x) {
    $!y = 18;
}</pre>
 <p>Another, more general approach is to leave <span class="code">BUILD</span> alone, and hook into the <span class="code">BUILDALL</span> mechanism instead:</p>
 <pre class="code">use v6;
class A {
    has $.x;
    has $.y;
    method BUILDALL(|c) {
        callsame;
        $!y = 18;
        self
    }
}

say A.new(x =&gt; 42).x;       # 42</pre>
 <p>(Note that <span class="code">BUILDALL</span> is a method, not a submethod. That's because by default, there is only one such method per class hierarchy, whereas <span class="code">BUILD</span> is explicitly called per class. Which also explains why you need the <span class="code">nextsame</span> inside <span class="code">BUILDALL</span>, but not inside <span class="code">BUILD</span>).</p>
 <a name="t38.2"></a><h1 id="_language_traps.pod6-Regexes">38.2 Regexes</h1>
 <a name="t38.2.1"></a><h2 id="_language_traps.pod6-Whitespace_in_Regexes_does_not_match_literally">38.2.1 Whitespace in Regexes does not match literally</h2>
 <pre class="code">$ perl6 -e "say 'a b' ~~ /a b/"
False</pre>
 <p>Whitespace in regexes is, by default, considered an optional filler without semantics, just like in the rest of the Perl 6 language.</p>
 <p>Ways to match whitespace:</p>
 <ul><li><p><span class="code">\s</span> to match any one whitespace, <span class="code">\s+</span> to match at least one</p>
</li></ul> <ul><li><p><span class="code">' '</span> (a blank in quotes) to match a single blank</p>
</li></ul> <ul><li><p><span class="code">\t</span>, <span class="code">\n</span> for specific whitespace (tab, newline)</p>
</li></ul> <ul><li><p><span class="code">\h</span>, <span class="code">\v</span> for horizontal, vertical whitespace</p>
</li></ul> <ul><li><p><span class="code">.ws</span>, a built-in rule for whitespace that oftentimes does what you actually want it to do</p>
</li></ul> <ul><li><p>with <span class="code">m:s/a b/</span> or <span class="code">m:sigspace/a b/</span>, the blank in the regexes matches arbitrary whitespace</p>
</li></ul> <a name="t38.3"></a><h1 id="_language_traps.pod6-Captures">38.3 Captures</h1>
 <a name="t38.3.1"></a><h2 id="_language_traps.pod6-Containers_versus_values_in_a_Capture">38.3.1 Containers versus values in a Capture</h2>
 <p>Beginners might expect a variable in a <span class="code">Capture</span> to supply its current value when that <span class="code">Capture</span> is later used. For example:</p>
 <pre class="code">$ perl6 -e 'my $a = 2; say join ",", ($a, ++$a)'
3,3</pre>
 <p>Here the <span class="code">Capture</span> contained the <b>container</b> pointed to by <span class="code">$a</span> and the <b>value</b> of the result of the expression <span class="code">++$a</span>. Since the <span class="code">Capture</span> must be reified before <span class="code">&amp;say</span> can use it, the <span class="code">++$a</span> may happen before <span class="code">&amp;say</span> looks inside the container in <span class="code">$a</span> and so it may already be incremented.</p>
 <p>Instead, use an expression that produces a value when you want a value.</p>
 <pre class="code">$ perl6 -e 'my $a = 2; say join ",", (+$a, ++$a)'
2,3</pre>
 <a name="t38.4"></a><h1 id="_language_traps.pod6-Arrays">38.4 Arrays</h1>
 <a name="t38.4.1"></a><h2 id="_language_traps.pod6-Referencing_the_last_element_of_an_array">38.4.1 Referencing the last element of an array</h2>
 <p>In Perl 5 one could reference the last element of an array by asking for the "-1th" element of the array, e.g.:</p>
 <pre class="code">my @array = qw{victor alice bob charlie eve};
say @array[-1];    #-&gt;  eve</pre>
 <p>In Perl 6 it is not possible to use negative subscripts, however the same is achieved by actually using a function, namely <span class="code">*-1</span>. Thus accessing the last element of an array becomes:</p>
 <pre class="code">my @array = qw{victor alice bob charlie eve};
say @array[*-1];   #-&gt;  eve</pre>
 <a name="t38.4.2"></a><h2 id="_language_traps.pod6-Typed_Array_parameters">38.4.2 Typed Array parameters</h2>
 <p>Quite often new users will happen to write something like:</p>
 <pre class="code">sub foo(Array @a) { ... }</pre>
 <p>...before they have gotten far enough in the documentation to realize that this is asking for an Array of Arrays. To say that <span class="code">@a</span> should only accept Arrays, use instead:</p>
 <pre class="code">sub foo(@a where Array) { ... }</pre>
 <p>It is also common to expect this to work, when it does not:</p>
 <pre class="code">sub bar(Int @a) { 42.say };
bar([1, 2, 3]);             #-&gt; expected Positional[Int] but got Array</pre>
 <p>The problem here is that [1, 2, 3] is not an <span class="code">Array[Int]</span>, it is a plain old Array that just happens to have Ints in it. To get it to work, the argument must also be an <span class="code">Array[Int]</span>.</p>
 <pre class="code">my Int @b = 1, 2, 3;
bar(@b);                    #-&gt; 42
bar(Array[Int].new(1, 2, 3));</pre>
 <p>This may seem inconvenient, but on the upside it moves the type-check on what is assigned to <span class="code">@b</span> to where the assignment happens, rather than requiring every element to be checked on every call.</p>
 <a name="t38.5"></a><h1 id="_language_traps.pod6-Strings">38.5 Strings</h1>
 <a name="t38.5.1"></a><h2 id="_language_traps.pod6-Capitalizing_a_string">38.5.1 Capitalizing a string</h2>
 <p>In Perl 5 one could capitalize a string by using the <span class="code">ucfirst</span> function</p>
 <pre class="code">say ucfirst "alice"; #-&gt; Alice</pre>
 <p>The <span class="code">ucfirst</span> function does not exist in Perl 6; one needs to use the <span class="code">tc</span> method:</p>
 <pre class="code">say "alice".tc;      #-&gt; Alice</pre>
 <p>which is equivalent to</p>
 <pre class="code">say tc "alice";      #-&gt; Alice</pre>
 <p>Here, <span class="code">tc</span> means "title case".</p>
 <a name="t38.5.2"></a><h2 id="_language_traps.pod6-Quotes_and_interpolation">38.5.2 Quotes and interpolation</h2>
 <p>Interpolation in string literals can be too clever for your good.</p>
 <pre class="code">"$foo&amp;lt;html&gt;&amp;lt;/html&gt;" # Perl 6 understands that as:
$foo&amp;lt;html&gt; ~ '&amp;lt;/html&gt;'

"$foo(" ~ @args ~ ")" # Perl 6 understands that as:
$foo( ~ @args ~ ")"   # and will produce very confusing error messages</pre>
 <p>You can avoid those problems by surrounding all variables with <span class="code">{}</span>, with or without using <span class="code">Q:c</span> as your quoting construct.</p>
 <pre class="code">my $a = 1;
say Q:c«{$a}()$b()»;
OUTPUT«1()$b()␤»</pre>
 <a name="t38.5.3"></a><h2 id="_language_traps.pod6-Strings_are_not_iterable">38.5.3 Strings are not iterable</h2>
 <p>There are methods that Str inherits from Any that work on iterables like lists. Iterators on Strings contain one element that is the whole string. To use <span class="code">sort</span>, <span class="code">reverse</span> and friends, you need to split the string into a list first.</p>
 <pre class="code">say "cba".sort;              #   cba (what is wrong)
say "cba".comb.sort.join;    #   abc</pre>
 <a name="t38.6"></a><h1 id="_language_traps.pod6-Operators">38.6 Operators</h1>
 <p>Some operators commonly shared among other languages were repurposed in Perl 6 for other, more common, things:</p>
 <a name="t38.6.1"></a><h2 id="_language_traps.pod6-Junctions">38.6.1 Junctions</h2>
 <p>The <span class="code">^</span>, <span class="code">|</span>, and <span class="code">&amp;</span> are <i>not</i> bitwise operators, they create <a href="#_type_Junction.pod6">Junctions</a>. The corresponding bitwise operators in Perl 6 are: <span class="code">+^</span>, <span class="code">+|</span>, <span class="code">+&amp;</span> for integers and <span class="code">?^</span>, <span class="code">?|</span>, <span class="code">?&amp;</span> for booleans.</p>
 <a name="t38.6.2"></a><h2 id="_language_traps.pod6-String_Ranges/Sequences">38.6.2 String Ranges/Sequences</h2>
 <p>In some languages, using strings as range end points, considers the entire string when figuring out what the next string should be; loosely treating the strings as numbers in a large base. Here's Perl 5 version:</p>
 <pre class="code">say join ", ", "az".."bc"
az, ba, bb, bc</pre>
 <p>Such a range in Perl 6 will produce a different result, where <i>each letter</i> will be ranged to a corresponding letter in the end point, producing more complex sequences:</p>
 <pre class="code">say join ", ", "az".."bc"'
az, ay, ax, aw, av, au, at, as, ar, aq, ap, ao, an, am, al, ak, aj, ai, ah, ag, af, ae, ad, ac, bz, by, bx, bw, bv,
bu, bt, bs, br, bq, bp, bo, bn, bm, bl, bk, bj, bi, bh, bg, bf, be, bd, bc

say join ", ", "r2".."t3"
r2, r3, s2, s3, t2, t3</pre>
 <p>To achieve simpler behaviour, similar to the Perl 5 example above, use a sequence operator that calls <span class="code">.succ</span> method on the starting string:</p>
 <pre class="code">say join ", ", ("az", *.succ ... "bc")
az, ba, bb, bc</pre>
 <a name="t38.7"></a><h1 id="_language_traps.pod6-Common_Precedence_Mistakes">38.7 Common Precedence Mistakes</h1>
 <a name="t38.7.1"></a><h2 id="_language_traps.pod6-Adverbs_and_Precedence">38.7.1 Adverbs and Precedence</h2>
 <p>Adverbs do have a precedence that may not follow the order of operators that is displayed on your screen. If two operators of equal precedence are followed by an adverb it will pick the first operator it finds in the abstract syntax tree. Use parentheses to help Perl 6 understand what you mean or use operators with looser precedence.</p>
 <pre class="code">my %x = a =&gt; 42;
say !%x&amp;lt;b&gt;:exists;            # dies with X::AdHoc
say %x&amp;lt;b&gt;:!exists;            # this works
say !(%x&amp;lt;b&gt;:exists);          # works too
say not %x&amp;lt;b&gt;:exists;         # works as well
say True unless %x&amp;lt;b&gt;:exists; # avoid negation altogether</pre>
 <a name="t38.7.2"></a><h2 id="_language_traps.pod6-Ranges_and_Precedence">38.7.2 Ranges and Precedence</h2>
 <p>The loose precedence of <span class="code">..</span> can lead to some errors. It is usually best to parenthesize ranges when you want to operate on the entire range.</p>
 <pre class="code">1..3.say    # says "3" (and warns about useless "..")
(1..3).say  # says "1..3"</pre>
 <a name="t38.7.3"></a><h2 id="_language_traps.pod6-Loose_boolean_operators">38.7.3 Loose boolean operators</h2>
 <p>The precedence of <span class="code">and</span>, <span class="code">or</span>, etc. is looser then routine calls. This can have surprising results for calls to routines that would be operators or statements in other languages like <span class="code">return</span>, <span class="code">last</span> and many others.</p>
 <pre class="code">sub f {
    return True and False;
    # this is actually
    # (return True) and False;
}
say f; # OUTPUT«True␤»</pre>
 <a name="t38.8"></a><h1 id="_language_traps.pod6-Subroutine_and_method_calls">38.8 Subroutine and method calls</h1>
 <p>Subroutine and method calls can be made using one of two forms:</p>
 <pre class="code">foo(...); # function call form, where ... represent the required arguments
foo ...;  # list op form, where ... represent the required arguments</pre>
 <p>The function call form can cause problems for the unwary when whitespace is added after the function or method name and before the opening parenthesis.</p>
 <p>First we consider functions with zero or one parameter:</p>
 <pre class="code">sub foo() { say 'no arg' }
sub bar($a) { say "one arg: $a" }</pre>
 <p>Then execute each with and without a space after the name:</p>
 <pre class="code">foo();    # okay: no arg
foo ();   # FAIL: Too many positionals passed; expected 0 arguments but got 1
bar($a);  # okay: one arg: 1
bar ($a); # okay: one arg: 1</pre>
 <p>Now declare a function of two parameters:</p>
 <pre class="code">sub foo($a, $b) { say "two args: $a, $b" }</pre>
 <p>Execute it with and without the space after the name:</p>
 <pre class="code">foo($a, $b);  # okay: two args: 1, 2
foo ($a, $b); # FAIL: Too few positionals passed; expected 2 arguments but got 1</pre>
 <p>The lesson is: "be careful with spaces following sub and method names when using the function call format." As a general rule, good practice might be to avoid the space after a function name when using the function call format.</p>
 <p>Note that there are clever ways to eliminate the error with the function call format and the space, but that is bordering on hackery and will not be mentioned here. For more information, consult <a href="#_language_functions.pod6-Functions">Functions</a>.</p>
 <p>Finally, note that, currently, when declaring the functions whitespace may be used between a function or method name and the parentheses surrounding the parameter list without problems.</p>
 <a name="t38.8.1"></a><h2 id="_language_traps.pod6-Named_Parameters">38.8.1 Named Parameters</h2>
 <p>Many built-in subroutines and method calls accept named parameters and your own code may accept them as well, but be sure the arguments you pass when calling your routines are actually named parameters:</p>
 <pre class="code">sub foo($a, :$b) { ... }
foo(1, 'b' =&gt; 2); # FAIL: Too many positionals passed; expected 1 argument but got 2</pre>
 <p>What happened? That second argument is not a named parameter argument, but a <a href="#_type_Pair.pod6">Pair</a> passed as a positional argument. If you want a named parameter it has to look like a name to Perl:</p>
 <pre class="code">foo(1, b =&gt; 2); # okay
foo(1, :b(2);   # okay
foo(1, :b&amp;lt;it&gt;); # okay

my $b = 2;
foo(1, :b($b)); # okay, but redundant
foo(1, :$b);    # okay

# Or even...
my %arg = 'b' =&gt; 2;
foo(1, |%arg);  # okay too</pre>
 <p>That last one may be confusing, but since it uses the <span class="code">|</span> prefix on a <a href="#_type_Hash.pod6">Hash</a>, it means "treat this hash as holding named arguments."</p>
 <p>If you really do want to pass them as pairs you should use a <a href="#_type_List.pod6">List</a> or <a href="#_type_Capture.pod6">Capture</a> instead:</p>
 <pre class="code">my $list = ('b' =&gt; 2); # this is a List containing a single Pair
foo(|$arg, :$b); # okay: we passed the pair 'b' =&gt; 2 to the first argument
foo(1, |$arg);   # FAIL: Too many positionals passed; expected 1 argument but got 2

my $cap = \('b' =&gt; 2); # a Capture with a single positional value
foo(|$cap, :$b); # okay: we passed the pair 'b' =&gt; 2 to the first argument
foo(1, |$cap);   # FAIL: Too many positionals passed; expected 1 argument but got 2</pre>
 <p>A Capture is usually the best option for this as it works exactly like the usual capturing of routine arguments during a regular call.</p>
 <p>The nice thing about the distinction here is that it gives the developer the option of passing pairs as either named or positional arguments, which can be handy in various instances.</p>
</div> <!-- /language/typesystem.pod6 --><div class="pod-body"><a id="_language_typesystem.pod6"></a><a name="t39"><h1 class="title">39 Typesystem</h1></a> <p class="subtitle">Introduction to the type system of Perl 6</p> <a name="t39.1"></a><h1 id="_language_typesystem.pod6-Definition_of_a_Perl_6_Type">39.1 Definition of a Perl 6 Type</h1>
 <a name="t39.1.1"></a><h2 id="_language_typesystem.pod6-Type_objects">39.1.1 Type objects</h2>
 <p>To test if an object is a type object, test for definedness and check for identity between the object and it's <span class="code">.WHAT</span> pseudo-method. Note that the method <span class="code">.defined</span> can be overloaded and may provide false information.</p>
 <pre class="code">my $a = Int;
say so $a // $a === $a.WHAT;
# OUTPUT«True␤»</pre>
 <a name="t39.2"></a><h1 id="_language_typesystem.pod6-Type_Declarators">39.2 Type Declarators</h1>
 <p>TODO</p>
 <a name="t39.2.1"></a><h2 id="_language_typesystem.pod6-class">39.2.1 <span class="code">class</span></h2>
 <p>TODO</p>
 <a name="t39.2.1.1"></a><h3 id="_language_typesystem.pod6-Methods">39.2.1.1 Methods</h3>
 <a name="t39.2.1.1.1"></a><h4 id="_language_typesystem.pod6-Reserved_Method_Names">39.2.1.1.1 Reserved Method Names</h4>
 <p><span class="indexed"><a id="467" name="WHAT (reserved method)"></a></span><span class="indexed"><a id="468" name="WHO (reserved method)"></a></span><span class="indexed"><a id="469" name="HOW (reserved method)"></a></span><span class="indexed"><a id="470" name="VAR (reserved method)"></a></span> Some built-in introspection methods are actually special syntax provided by the compiler, namely <span class="code">WHAT</span>, <span class="code">WHO</span>, <span class="code">HOW</span> and <span class="code">VAR</span>. Declaring methods with those names will silently fail. A dynamic call will work, what allows to call methods from foreign objects.</p>
 <pre class="code">class A {
    method WHAT { "ain't gonna happen" }
};

say A.new.WHAT; # OUTPUT«(A)␤»
say A.new."WHAT"() # OUTPUT«ain't gonna happen␤»</pre>
 <a name="t39.2.1.1.2"></a><h4 id="_language_typesystem.pod6-Setting_Attributes_with_Namesake_Variables_and_Methods">39.2.1.1.2 Setting Attributes with Namesake Variables and Methods</h4>
 <p>Instead of writing <span class="code">attr => $attr </span> or <span class="code">:attr($attr)</span>, you can save some typing if the variable (or method call) you're setting the attribute with shares the name with the attribute:</p>
 <pre class="code">class A { has $.i = 42 };
class B {
    has $.i = "answer";
    method m() { A.new(:$.i) }
};
my $a = B.new.m;
say $a.i; # OUTPUT«answer␤»</pre>
 <p>Since <span class="code">$.i</span> method call is named <span class="code">i</span> and the attribute is named <span class="code">i</span>, Perl 6 lets us shortcut. The same applies to <span class="code">:$var</span>, <span class="code">:$!private-attribute</span>, <span class="code">:&amp;attr-with-code-in-it</span>, and so on.</p>
 <a name="t39.2.1.1.3"></a><h4 id="_language_typesystem.pod6-trait_is_nodal">39.2.1.1.3 trait <span class="code">is nodal</span></h4>
 <p>Mark a method for hyperoperators as to be avoided for decending into.</p>
 <pre class="code">dd [[1,2,3],[4,5]]&gt;&gt;.elems;
# OUTPUT«(3, 2)␤»</pre>
 <a name="t39.2.1.2"></a><h3 id="_language_typesystem.pod6-trait_handles">39.2.1.2 trait <a name="471"></a> <span class="code">handles</span> </h3>
 <p>Defined as:</p>
 <pre class="code">multi sub trait_mod:&amp;lt;handles&gt;(Attribute:D $target, $thunk)</pre>
 <p>The trait <span class="code">handles</span> applied to an attribute of a class will delegate all calls to the provided method name to the method with the same name of the attribute. The object referenced by the attribute must be initialized. A type constraint for the object that the call is delegated to can be provided.</p>
 <pre class="code">class A      { method m(){ 'A::m has been called.' } }
class B is A { method m(){ 'B::m has been called.' } }
class C {
    has A $.delegate handles 'm';
    method new($delegate){ self.bless(delegate =&gt; $delegate) }
};
say C.new(B.new).m(); # OUTPUT«B::m has been called.␤»</pre>
 <p>Instead of a method name a list of names, a <span class="code">Regex</span> or a <span class="code">Whatever</span> can be provided. In the latter case existing methods, both in the class itself and it's inheritance chain, will take precedence. If even local <span class="code">FALLBACK</span>s should be searched use a <span class="code">HyperWhatever</span>.</p>
 <pre class="code">class A {
    method m1(){}
    method m2(){}
}

class C {
    has $.delegate handles &amp;lt;m1 m2&gt; = A.new()
}
C.new.m2;

class D {
    has $.delegate handles /m\d/ = A.new()
}
D.new.m1;</pre>
 <a name="t39.2.1.3"></a><h3 id="_language_typesystem.pod6-trait_is">39.2.1.3 trait <span class="code">is</span></h3>
 <p>Defined as:</p>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Mu:U $child, Mu:U $parent)</pre>
 <p>The trait <span class="indexed"><a id="472" name="is (inheritance)"> <span class="code">is</span> </a></span> accepts a type object to be added as a parent class of a class in it's definition. To allow multiple inheritance the trait can be applied more then once. Adding parents to a class will import their methods into the target class. If the same method name occurs in multiple parents, the first added parent will win.</p>
 <p>If no <span class="code">is</span> trait is provided the default of <a href="#_type_Any.pod6"> <span class="code">Any</span> </a> will be used as a parent class. This forces all Perl 6 objects to have the same set of basic methods to provide an interface for introspection and coercion to basic types.</p>
 <pre class="code">class A {
    multi method from-a(){ 'A::from-a' }
}
dd A.new.^parents(:all);
# OUTPUT«(Any, Mu)␤»

class B {
    method from-b(){ 'B::from-b ' }
    multi method from-a(){ 'B::from-A' }
}

class C is A is B {}
dd C.new.from-a();
# OUTPUT«"A::from-a"␤»</pre>
 <a name="t39.2.1.4"></a><h3 id="_language_typesystem.pod6-trait_is_rw">39.2.1.4 trait <a name="473"></a> <span class="code">is rw</span> </h3>
 <p>Defined as:</p>
 <pre class="code">sub trait_mod:&amp;lt;is&gt;(Mu:U $type, :$rw!)</pre>
 <p>The trait <span class="code">is rw</span> on a class will create writeable accessor methods on all public attributes of that class.</p>
 <pre class="code">class C is rw {
    has $.a;
};
my $c = C.new.a = 42;
dd $c; # OUTPUT«Int $c = 42␤»</pre>
 <a name="t39.2.1.5"></a><h3 id="_language_typesystem.pod6-trait_is_required">39.2.1.5 trait <span class="code">is required</span></h3>
 <p>TODO</p>
 <a name="t39.2.1.6"></a><h3 id="_language_typesystem.pod6-trait_does">39.2.1.6 trait <span class="code">does</span></h3>
 <p>TODO</p>
 <a name="t39.2.1.7"></a><h3 id="_language_typesystem.pod6-trait_hides">39.2.1.7 trait <span class="code">hides</span></h3>
 <p>TODO</p>
 <a name="t39.2.1.8"></a><h3 id="_language_typesystem.pod6-trait_trusts">39.2.1.8 trait <span class="code">trusts</span></h3>
 <p>TODO</p>
 <a name="t39.2.1.9"></a><h3 id="_language_typesystem.pod6-Versioning_and_Authership">39.2.1.9 Versioning and Authership</h3>
 <p>Versioning and authership can be applied via adverbs <span class="code">:ver&lt;></span> and <span class="code">:auth&lt;>. Both take a string as argument, for C&lt;:ver> the string is converted to a L&lt;Version|/type/Version> object. To query a class version and auther use C&lt;.^ver> and C&lt;^.auth>. class C:ver&lt;4.2.3>:auth&lt;me@here.local> {} say [C.^ver, C.^auth]; # OUTPUT«[v4.2.3 me@here.local]␤</span></p>
 <a name="t39.2.2"></a><h2 id="_language_typesystem.pod6-role">39.2.2 <span class="code">role</span></h2>
 <p>TODO</p>
 <p>Versioning and authership can be applied via adverbs <span class="code">:ver&lt;></span> and <span class="code">:auth&lt;>. Both take a string as argument, for C&lt;:ver> the string is converted to a L&lt;Version|/type/Version> object. To query a roles version and auther use C&lt;.^ver> and C&lt;^.auth>. class R:ver&lt;4.2.3>:auth&lt;me@here.local> {} say [R.^ver, R.^auth]; # OUTPUT«[v4.2.3 me@here.local]␤</span></p>
 <a name="t39.2.3"></a><h2 id="_language_typesystem.pod6-enum">39.2.3 <span class="code">enum</span></h2>
 <p><span class="indexed"><a id="474" name="Enumeration  Enums  enum"></a></span></p>
 <p>Enumerations provide constant key-value-pairs with an associated type. Any key is of that type and injected as a symbol into the current scope. If the symbol is used, it is treated as a constant expression and the symbol is replaced with the value of the enum-pair. Any Enumeration inherits methods from the role <span class="code">Enumeration</span>. Complex expressions for generating key-value-pairs are not supported.</p>
 <p>Stringification of the symbol will provide the key of the enum-pair.</p>
 <pre class="code">enum Names ( name1 =&gt; 1, name2 =&gt; 2 );
say name1, ' ', name2; # OUTPUT«name1 name2»
say name1.value, ' ', name2.value; # OUTPUT«1 2␤»</pre>
 <p>Comparing symbols will use type information and the value of the enum-pair. As value types <span class="code">Numerical</span> an <span class="code">Str</span> are supported.</p>
 <pre class="code">sub same(Names $a, Names $b){
   $a eqv $b
}

say same(name1, name1); # OUTPUT«True␤»
say same(name1, name2); # OUTPUT«False␤»
my $a = name1;
say $a ~~ Names; # OUTPUT«True␤»
say $a.WHAT; # OUTPUT«Names␤»</pre>
 <p>All keys have to be of the same type.</p>
 <pre class="code">enum Mass ( mg =&gt; 1/1000, g =&gt; 1/1, kg =&gt; 1000/1 );
dd Mass.enums; # OUTPUT«{:g(1.0), :kg(1000.0), :mg(0.001)}␤»</pre>
 <p>If no value is given <span class="code">Int</span> will be assumed as the values type and incremented by one per key starting at zero.</p>
 <pre class="code">enum Numbers &amp;lt;one two three four&gt;;
dd Numbers.enums; # OUTPUT«{:four(3), :one(0), :three(2), :two(1)}␤»</pre>
 <p>A different starting value can be provided.</p>
 <pre class="code">enum Numbers «:one(1) two three four»;
dd Numbers.enums; # OUTPUT«{:four(4), :one(1), :three(3), :two(2)}␤»</pre>
 <p>Enums can be anonymous. They will be no type created, resulting in a lack of introspectiveness. The returned object is of type <span class="code">Map</span>.</p>
 <pre class="code">my $e = enum &amp;lt;one two three&gt;;
say two; # OUTPUT«two()(Map)␤»
say one.WHAT; # OUTPUT«()␤»
say $e.WHAT; # OUTPUT«(Map)␤»</pre>
 <a name="t39.2.3.1"></a><h3 id="_language_typesystem.pod6-Methods">39.2.3.1 Methods</h3>
 <a name="t39.2.3.1.1"></a><h4 id="_language_typesystem.pod6-method_enums">39.2.3.1.1 method enums</h4>
 <p>Defined as:</p>
 <pre class="code">method enums()</pre>
 <p>Returns the list of enum-pairs. Works both on the enum type and any key.</p>
 <pre class="code">enum Mass ( mg =&gt; 1/1000, g =&gt; 1/1, kg =&gt; 1000/1 );
say Mass.enums, g.enums; # OUTPUT«{g =&gt; 1, kg =&gt; 1000, mg =&gt; 0.001}{g =&gt; 1, kg =&gt; 1000, mg =&gt; 0.001}␤»</pre>
 <a name="t39.2.3.1.2"></a><h4 id="_language_typesystem.pod6-method_key">39.2.3.1.2 method key</h4>
 <p>Returns the key of an enum-pair.</p>
 <pre class="code">say g.key; # OUTPUT«g␤»</pre>
 <a name="t39.2.3.1.3"></a><h4 id="_language_typesystem.pod6-method_value">39.2.3.1.3 method value</h4>
 <p>Returns the value of an enum-pair.</p>
 <pre class="code">say g.value; # OUTPUT«1␤»</pre>
 <a name="t39.2.3.1.4"></a><h4 id="_language_typesystem.pod6-method_pair">39.2.3.1.4 method pair</h4>
 <p>Defined as:</p>
 <pre class="code">method pair(::?CLASS:D:)</pre>
 <p>Returns a <span class="code">Pair</span> of the enum-pair.</p>
 <pre class="code">say g.pair; # OUTPUT«g =&gt; 1␤»</pre>
 <a name="t39.2.3.1.5"></a><h4 id="_language_typesystem.pod6-method_kv">39.2.3.1.5 method kv</h4>
 <p>Defined as:</p>
 <pre class="code">multi method kv(::?CLASS:D:)</pre>
 <p>Returns a list with key and value of the enum-pair.</p>
 <pre class="code">say g.kv; # OUTPUT«(g 1)␤»</pre>
 <a name="t39.2.4"></a><h2 id="_language_typesystem.pod6-module">39.2.4 <span class="code">module</span></h2>
 <p>TODO</p>
 <a name="t39.2.4.1"></a><h3 id="_language_typesystem.pod6-Versioning_and_Authorship">39.2.4.1 Versioning and Authorship</h3>
 <p>Versioning and authorship can be applied via adverbs <span class="code">:ver&lt;></span> and <span class="code">:auth&lt;>. Both take a string as argument, for C&lt;:ver> the string is converted to a L&lt;Version|/type/Version> object. To query a modules version and author use C&lt;.^ver> and C&lt;^.auth>. module M:ver&lt;4.2.3>:auth&lt;me@here.local> {} say [M.^ver, M.^auth]; # OUTPUT«[v4.2.3 me@here.local]␤</span></p>
 <a name="t39.2.5"></a><h2 id="_language_typesystem.pod6-package">39.2.5 <span class="code">package</span></h2>
 <a name="t39.2.5.1"></a><h3 id="_language_typesystem.pod6-Versioning_and_Authorship">39.2.5.1 Versioning and Authorship</h3>
 <p>TODO</p>
 <a name="t39.2.6"></a><h2 id="_language_typesystem.pod6-grammar">39.2.6 <span class="code">grammar</span></h2>
 <p>TODO</p>
 <a name="t39.2.6.1"></a><h3 id="_language_typesystem.pod6-Versioning_and_Authorship">39.2.6.1 Versioning and Authorship</h3>
 <p>Versioning and authorship can be applied via adverbs <span class="code">:ver&lt;></span> and <span class="code">:auth&lt;></span>. Both take a string as argument, for <span class="code">:ver</span> the string is converted to a <a href="#_type_Version.pod6">Version</a> object. To query a grammars version and author use <span class="code">.^ver</span> and <span class="code">^.auth</span>.</p>
 <pre class="code">grammar G:ver&amp;lt;4.2.3&gt;:auth&amp;lt;me@here.local&gt; {}
say [G.^ver, G.^auth];
# OUTPUT«[v4.2.3 me@here.local]␤»</pre>
 <a name="t39.2.7"></a><h2 id="_language_typesystem.pod6-subset">39.2.7 <span class="code">subset</span></h2>
 <p>A <span class="indexed"><a id="475" name="subset"> <span class="code">subset</span> </a></span> declares a new type that will re-dispatch to its base type. If a <a href="#_type_Signature.pod6-where"> <span class="code">where</span> </a> clause is supplied any assignment will be checked against the given code object.</p>
 <pre class="code">subset Positive of Int where * &gt; -1;
my Positive $i = 1;
$i = -42; # OUTPUT«Type check failed in assignment to $i; expected Positive but got Int (-42)␤ …»</pre>
</div> <!-- /language/unicode_entry.pod6 --><div class="pod-body"><a id="_language_unicode_entry.pod6"></a><a name="t40"><h1 class="title">40 Entering Unicode Characters</h1></a> <p class="subtitle">Input methods for unicode characters in editors and the shell</p> <p>Perl 6 allows the use of unicode characters as variable names. Many operators are defined with unicode symbols (in particular the <a href="#_language_setbagmix.pod6-Set%2FBag_Operators">set/bag operators</a>) as well as some quoting constructs. Hence it is good to know how to enter these symbols into editors, the Perl 6 shell and the command line, especially if the symbols aren't available as actual characters on a keyboard.</p>
 <p>General information about entering unicode under various operating systems and environments can be found on the Wikipedia <a href="https://en.wikipedia.org/wiki/Unicode_input">unicode input page</a>.</p>
 <a name="t40.1"></a><h1 id="_language_unicode_entry.pod6-XCompose">40.1 XCompose</h1>
 <p>Xorg includes digraph support using a <a href="https://en.wikipedia.org/wiki/Compose_key#GNU.2FLinux"> <i>Compose key</i> </a> . The default of <span class="code">AltGr + Shift</span> can be remapped to something easier such as <span class="code">Capslock</span>. In <i>GNOME 2</i> and <i>MATE</i> this can be setup under <span class="code">Preferences → Keyboard → Layouts → Options → Position of Compose Key</span>. So, for example, to input <span class="code">»+«</span> you could type <span class="code">CAPSLOCK > > + CAPSLOCK &lt; &lt; </span></p>
 <p><i>XCompose</i> allows customising the digraph sequences using a <span class="code">.XCompose</span> file and <a href="https://github.com/kragen/xcompose/blob/master/dotXCompose">https://github.com/kragen/xcompose/blob/master/dotXCompose</a> is an extremely complete one. In <i>GNOME</i>, <i>XCompose</i> was overridden and replaced with a hardcoded list, but it is possible to restore <i>XCompose</i> by setting <span class="code">GTK_IM_MODULE=xim</span> in your environment. It might be necessary to install a xim bridge as well, such as <span class="code">uim-xim</span>.</p>
 <a name="t40.2"></a><h1 id="_language_unicode_entry.pod6-Editors_and_shells">40.2 Editors and shells</h1>
 <a name="t40.2.1"></a><h2 id="_language_unicode_entry.pod6-Vim">40.2.1 Vim</h2>
 <p>In <a href="http://www.vim.org/">Vim</a>, unicode characters are entered (in insert-mode) by pressing first <span class="code">Ctrl-V</span> (also denoted <span class="code">^V</span>), then <span class="code">u</span> and then the hexadecimal value of the unicode character to be entered. For example, the Greek letter λ (lambda) is entered via the key combination:</p>
 <pre class="code">^Vu03BB</pre>
 <p>You can also use <span class="code">Ctrl-K</span>/<span class="code">^K</span> along with a digraph to type in some characters. So an alternative to the above using digraphs looks like this:</p>
 <pre class="code">^Kl*</pre>
 <p>The list of digraphs Vim provides is documented <a href="http://vimdoc.sourceforge.net/htmldoc/digraph.html">here</a>; you can add your own with the <span class="code">:digraph</span> command.</p>
 <p>Further information about entering special characters in Vim can be found on the Vim Wikia page about <a href="http://vim.wikia.com/wiki/Entering_special_characters">entering special characters</a>.</p>
 <a name="t40.2.2"></a><h2 id="_language_unicode_entry.pod6-Emacs">40.2.2 Emacs</h2>
 <p>In <a href="http://www.gnu.org/software/emacs/">Emacs</a>, unicode characters are entered by first entering the chord <span class="code">C-x 8 RET</span> at which point the text <span class="code">Unicode (name or hex):</span> appears in the minibuffer. One then enters the unicode code point hexadecimal number followed by the enter key. The unicode character will now appear in the document. Thus, to enter the Greek letter λ (lambda), one uses the following key combination:</p>
 <pre class="code">C-x 8 RET 3bb RET</pre>
 <p>Further information about unicode and its entry into Emacs can be found on the <a href="https://www.emacswiki.org/emacs/UnicodeEncoding">Unicode Encoding Emacs wiki page</a>.</p>
 <p>You can also use <a href="https://tools.ietf.org/html/rfc1345">RFC 1345</a> character mnemonics by typing:</p>
 <pre class="code">C-x RET C-\ rfc1345 RET</pre>
 <p>Or <span class="code">C-u C-\ rfc1345 RET</span>.</p>
 <p>To type special characters, type <span class="code">&amp;</span> followed by a mnemonic. Emacs will show the possible characters in the echo area. For example, Greek letter λ (lambda) can be entered by typing:</p>
 <pre class="code">&amp;amp;l*</pre>
 <p>You can use <span class="code">C-\</span> to toggle <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Select-Input-Method.html">input method</a>.</p>
 <p>Another <a href="https://www.emacswiki.org/emacs/InputMethods">input method</a> you can use to insert special characters is <a href="https://www.emacswiki.org/emacs/TeXInputMethod">TeX</a>. Select it by typing <span class="code">C-u C-\ TeX RET</span>. You can enter a special character by using a prefix such as <span class="code">\</span>. For example, to enter λ, type:</p>
 <pre class="code">\lambda</pre>
 <p>To view characters and sequences provided by an input method, run the <span class="code">describe-input-method</span> command:</p>
 <pre class="code">C-h I TeX</pre>
 <a name="t40.2.3"></a><h2 id="_language_unicode_entry.pod6-Unix_shell">40.2.3 Unix shell</h2>
 <p>At the bash shell, one enters unicode characters by using entering <span class="code">Ctrl-Shift-u</span>, then the unicode code point value followed by enter. For instance, to enter the character for the element-of operator (∈) use the following key combination (whitespace has been added for clarity):</p>
 <pre class="code">Ctrl-Shift-u 2208 Enter</pre>
 <p>This also the method one would use to enter unicode characters into the <span class="code">perl6</span> REPL, if one has started the REPL inside a Unix shell.</p>
 <a name="t40.3"></a><h1 id="_language_unicode_entry.pod6-Unicode_characters_useful_in_Perl_6">40.3 Unicode characters useful in Perl 6</h1>
 <a name="t40.3.1"></a><h2 id="_language_unicode_entry.pod6-Guillemets">40.3.1 <a href="https://en.wikipedia.org/wiki/Guillemet">Guillemets</a></h2>
 <p>These characters are used in French and German as quotation marks. In Perl 6 they are also used as quotation marks (in POD as an alternative to the angle brackets and in normal code as an alternative to double quotes) as well as to denote the hyperoperators. The symbols and their unicode hex values are as follows:</p>
 <table>
<tr><th>symbol</th> <th>unicode code point</th> <th>ascii equivalent</th></tr>
<tr><td>«</td> <td>U+00AB</td> <td>&lt;&lt;</td></tr>
 <tr><td>»</td> <td>U+00BB</td> <td>>></td></tr>
</table> <p>Thus constructs such as these are now possible:</p>
 <pre class="code">C« fixed-width POD text »
say (1, 2) »+« (3, 4);     # 4 6 ; element-wise add
@array »+=» 42;            # add 42 to each element of @array
say «moo»;                 # moo
my $baa = 123; say «$baa»; # 123</pre>
 <a name="t40.3.2"></a><h2 id="_language_unicode_entry.pod6-Set/bag_operators">40.3.2 Set/bag operators</h2>
 <p>The <a href="#_language_setbagmix.pod6-Set%2FBag_Operators">set/bag operators</a> operators all have set-theory-related symbols, the unicode code points and their ascii equivalents are listed below. To compose such a character, it is merely necessary to enter the character composition chord (e.g. <span class="code">Ctrl-V u</span> in Vim; <span class="code">Ctrl-Shift-u</span> in Bash) then the unicode code point hexadecimal number.</p>
 <table>
<tr><th>operator</th> <th>unicode code point</th> <th>ascii equivalent</th></tr>
<tr><td>∈</td> <td>U+2208</td> <td>(elem)</td></tr>
 <tr><td>∉</td> <td>U+2209</td> <td>!(elem)</td></tr>
 <tr><td>∋</td> <td>U+220B</td> <td>(cont)</td></tr>
 <tr><td>∌</td> <td>U+220C</td> <td>!(cont)</td></tr>
 <tr><td>⊆</td> <td>U+2286</td> <td>(&lt;=)</td></tr>
 <tr><td>⊈</td> <td>U+2288</td> <td>!(&lt;=)</td></tr>
 <tr><td>⊂</td> <td>U+2282</td> <td>(&lt;)</td></tr>
 <tr><td>⊄</td> <td>U+2284</td> <td>!(&lt;)</td></tr>
 <tr><td>⊇</td> <td>U+2287</td> <td>(>=)</td></tr>
 <tr><td>⊉</td> <td>U+2289</td> <td>!(>=)</td></tr>
 <tr><td>⊃</td> <td>U+2283</td> <td>(>)</td></tr>
 <tr><td>⊅</td> <td>U+2285</td> <td>!(>)</td></tr>
 <tr><td>≼</td> <td>U+227C</td> <td>(&lt;+)</td></tr>
 <tr><td>≽</td> <td>U+227D</td> <td>(>+)</td></tr>
 <tr><td>∪</td> <td>U+222A</td> <td>(|)</td></tr>
 <tr><td>∩</td> <td>U+2229</td> <td>(&amp;)</td></tr>
 <tr><td>∖</td> <td>U+2216</td> <td>(-)</td></tr>
 <tr><td>⊖</td> <td>U+2296</td> <td>(^)</td></tr>
 <tr><td>⊍</td> <td>U+228D</td> <td>(.)</td></tr>
 <tr><td>⊎</td> <td>U+228E</td> <td>(+)</td></tr>
</table> <a name="t40.3.3"></a><h2 id="_language_unicode_entry.pod6-Mathematical_symbols">40.3.3 Mathematical symbols</h2>
 <p>Wikipedia contains a full list of <a href="https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode">mathematical operators and symbols in unicode</a> as well as links to their mathematical meaning.</p>
 <a name="t40.3.4"></a><h2 id="_language_unicode_entry.pod6-Greek_characters">40.3.4 Greek characters</h2>
 <p>Greek characters may be used as variable names. For a list of Greek and Coptic characters and their unicode code points see the <a href="https://en.wikipedia.org/wiki/Greek_alphabet#Greek_in_Unicode">Greek in Unicode Wikipedia article</a>.</p>
 <p>For example, to assign the value 3 to π, enter the following in Vim (whitespace added to the compose sequences for clarity):</p>
 <pre class="code">    my $ &lt;b&gt;Ctrl-V u 03C0&lt;/b&gt;  = 3;  # same as: my $π = 3; 
     say $ &lt;b&gt;Ctrl-V u 03C0&lt;/b&gt; ;     # 3    same as: say $π; 
</pre>
 <a name="t40.3.5"></a><h2 id="_language_unicode_entry.pod6-Superscripts_and_subscripts">40.3.5 Superscripts and subscripts</h2>
 <p>A limited set of <a href="https://en.wikipedia.org/wiki/Superscripts_and_Subscripts">superscripts and subscripts</a> can be created directly in unicode by using the <span class="code">U+207x</span>, <span class="code">U+208x</span> and (less often) the <span class="code">U+209x</span> ranges. However, to produce a value squared (to the power of 2) or cubed (to the power of 3), one needs to use <span class="code">U+00B2</span> and <span class="code">U+00B3</span> since these are defined in the <a href="https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)">Latin1 supplement Unicode block</a>.</p>
 <p>Thus, to write the <a href="https://en.wikipedia.org/wiki/Taylor_series">Taylor series</a> expansion around zero of the function <span class="code">exp(x)</span> one would input into e.g. vim the following:</p>
 <pre class="code">    exp(x) = 1 + x + x &lt;b&gt;Ctrl-V u 00B2&lt;/b&gt; /2! + x &lt;b&gt;Ctrl-V u 00B3&lt;/b&gt; /3! 
     + ... + x &lt;b&gt;Ctrl-V u 207F&lt;/b&gt; /n! 
     # which would appear as 
     exp(x) = 1 + x + x²/2! + x³/3! + ... + xⁿ/n! 
</pre>
 <p>Or to specify the elements in a list from <span class="code">1</span> up to <span class="code">k</span>:</p>
 <pre class="code">    A &lt;b&gt;Ctrl-V u 2081&lt;/b&gt; , A &lt;b&gt;Ctrl-V u 2082&lt;/b&gt; , ..., A &lt;b&gt;Ctrl-V u 2096&lt;/b&gt;  
     # which would appear as 
     A₁, A₂, ..., Aₖ 
</pre>
</div> <!-- /language/unicode_texas.pod6 --><div class="pod-body"><a id="_language_unicode_texas.pod6"></a><a name="t41"><h1 class="title">41 Unicode versus Texas symbols</h1></a> <p class="subtitle">Unicode symbols and their Texas (ASCII) counterparts</p> <p>The following unicode symbols can be used in Perl 6 without needing to load any additional modules. Please note that the Since column applies to the version of Perl the symbol was known to be available. It is only mentioned if it is different from <span class="code">6.c</span>.</p>
 <p>Reference is made below to various properties of unicode codepoints. The definitive list can be found here: <a href="http://www.unicode.org/Public/UCD/latest/ucd/PropList.txt">http://www.unicode.org/Public/UCD/latest/ucd/PropList.txt</a>.</p>
 <a name="t41.1"></a><h1 id="_language_unicode_texas.pod6-Alphabetic_Characters">41.1 Alphabetic Characters</h1>
 <p>Any codepoint that has the <span class="code">Ll</span> (Letter, lowercase), <span class="code">Lu</span> (Letter, uppercase), <span class="code">Lt</span> (Letter, titlecase), <span class="code">Lm</span> (Letter, modifier), or the <span class="code">Lo</span> (Letter, other) property can be used just like any other alphabetic character from the ASCII range.</p>
 <a name="t41.2"></a><h1 id="_language_unicode_texas.pod6-Numeric_characters">41.2 Numeric characters</h1>
 <p>Any codepoint that has the <span class="code">Nd</span> (Number, decimal digit) property, can be used as a digit in any number. For example:</p>
 <pre class="code">  my $var = １９; # U+FF11 U+FF19 
   say $var + 2;  # 21 
 
</pre>
 <a name="t41.3"></a><h1 id="_language_unicode_texas.pod6-Numeric_values">41.3 Numeric values</h1>
 <p>Any codepoint that has the <span class="code">No</span> (Number, other) property can be used standalone as a numeric value, such as ½ and ⅓. (These aren't decimal digit characters, so can't be combined.) For example:</p>
 <pre class="code">  my $var = ⅒ + 2; 
   say $var; # 2.1 
 
</pre>
 <a name="t41.4"></a><h1 id="_language_unicode_texas.pod6-Whitespace_characters">41.4 Whitespace characters</h1>
 <p>Besides spaces and tabs you can use any other unicode whitespace character that has the <span class="code">Zs</span> (Separator, space), <span class="code">Zl</span> (Separator, line), or <span class="code">Zp</span> (Separator, paragraph) property.</p>
 <a name="t41.5"></a><h1 id="_language_unicode_texas.pod6-Other_acceptable_single_codepoints">41.5 Other acceptable single codepoints</h1>
 <p>This list contains the single codepoints [and their Texas (ASCII) equivalents] that have a special meaning in Perl 6.</p>
 <table>
<tr><th>Symbol</th> <th>Codepoint</th> <th>Texas</th> <th>Since</th> <th>Remarks</th></tr>
<tr><td>«</td> <td>U+00AB</td> <td>&lt;&lt;</td> <td>v6.c</td> <td>as part of «» or .«</td></tr>
 <tr><td>»</td> <td>U+00BB</td> <td>>></td> <td>v6.c</td> <td>as part of «» or .»</td></tr>
 <tr><td>×</td> <td>U+00D7</td> <td>*</td> <td>v6.c</td> <td></td></tr>
 <tr><td>÷</td> <td>U+00F7</td> <td>/</td> <td>v6.c</td> <td></td></tr>
 <tr><td>−</td> <td>U+2212</td> <td>-</td> <td>v6.c</td> <td></td></tr>
 <tr><td>∘</td> <td>U+2218</td> <td>o</td> <td>v6.c</td> <td></td></tr>
 <tr><td>≅</td> <td>U+2245</td> <td>=~=</td> <td>v6.c</td> <td></td></tr>
 <tr><td>π</td> <td>U+03C0</td> <td>pi</td> <td>v6.c</td> <td>3.14159_26535_89793_238e0</td></tr>
 <tr><td>τ</td> <td>U+03C4</td> <td>tau</td> <td>v6.c</td> <td>6.28318_53071_79586_476e0</td></tr>
 <tr><td>𝑒</td> <td>U+1D452</td> <td>e</td> <td>v6.c</td> <td>2.71828_18284_59045_235e0</td></tr>
 <tr><td>∞</td> <td>U+221E</td> <td>Inf</td> <td>v6.c</td> <td></td></tr>
 <tr><td>…</td> <td>U+2026</td> <td>...</td> <td>v6.c</td> <td></td></tr>
 <tr><td>‘</td> <td>U+2018</td> <td>'</td> <td>v6.c</td> <td>as part of ‘’ or ‚’ or ’‘</td></tr>
 <tr><td>’</td> <td>U+2019</td> <td>'</td> <td>v6.c</td> <td>as part of ’‘ or ’’</td></tr>
 <tr><td>‚</td> <td>U+201A</td> <td>'</td> <td>v6.c</td> <td>as part of ‚‘ or ‚’</td></tr>
 <tr><td>“</td> <td>U+201C</td> <td>"</td> <td>v6.c</td> <td>as part of “” or „” or ”“</td></tr>
 <tr><td>”</td> <td>U+201D</td> <td>"</td> <td>v6.c</td> <td>as part of ”“ or ””</td></tr>
 <tr><td>„</td> <td>U+201E</td> <td>"</td> <td>v6.c</td> <td>as part of „“ or „”</td></tr>
 <tr><td>｢</td> <td>U+FF62</td> <td>Q//</td> <td>v6.c</td> <td>as part of ｢｣</td></tr>
 <tr><td>｣</td> <td>U+FF63</td> <td>Q//</td> <td>v6.c</td> <td>as part of ｢｣</td></tr>
 <tr><td>⁺</td> <td>U+207A</td> <td>+</td> <td>v6.c</td> <td>(must use explicit number) as part of exponentiation</td></tr>
 <tr><td>⁻</td> <td>U+207B</td> <td>-</td> <td>v6.c</td> <td>(must use explicit number) as part of exponentiation</td></tr>
 <tr><td>¯</td> <td>U+00AF</td> <td>-</td> <td>v6.c</td> <td>(must use explicit number) as part of exponentiation (macron is an alternative way of writing a minus)</td></tr>
 <tr><td>⁰</td> <td>U+2070</td> <td>**0</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>¹</td> <td>U+2071</td> <td>**1</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>²</td> <td>U+2072</td> <td>**2</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>³</td> <td>U+2073</td> <td>**3</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>⁴</td> <td>U+2074</td> <td>**4</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>⁵</td> <td>U+2075</td> <td>**5</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>⁶</td> <td>U+2076</td> <td>**6</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>⁷</td> <td>U+2077</td> <td>**7</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>⁸</td> <td>U+2078</td> <td>**8</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>⁹</td> <td>U+2079</td> <td>**9</td> <td>v6.c</td> <td>can be combined with ⁰..⁹</td></tr>
 <tr><td>∘</td> <td>U+2218</td> <td>o</td> <td>v6.c</td> <td></td></tr>
 <tr><td>∅</td> <td>U+2205</td> <td>set()</td> <td>v6.c</td> <td>(empty set)</td></tr>
 <tr><td>∈</td> <td>U+2208</td> <td>(elem)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>∉</td> <td>U+2209</td> <td>!(elem)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>∋</td> <td>U+220B</td> <td>(cont)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>∌</td> <td>U+220C</td> <td>!(cont)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊆</td> <td>U+2286</td> <td>(&lt;=)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊈</td> <td>U+2288</td> <td>!(&lt;=)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊂</td> <td>U+2282</td> <td>(&lt;)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊄</td> <td>U+2284</td> <td>!(&lt;)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊇</td> <td>U+2287</td> <td>(>=)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊉</td> <td>U+2289</td> <td>!(>=)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊃</td> <td>U+2283</td> <td>(>)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊅</td> <td>U+2285</td> <td>!(>)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>≼</td> <td>U+227C</td> <td>(&lt;+)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>≽</td> <td>U+227D</td> <td>(>+)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>∪</td> <td>U+222A</td> <td>(|)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>∩</td> <td>U+2229</td> <td>(&amp;)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>∖</td> <td>U+2216</td> <td>(-)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊖</td> <td>U+2296</td> <td>(^)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊍</td> <td>U+228D</td> <td>(.)</td> <td>v6.c</td> <td></td></tr>
 <tr><td>⊎</td> <td>U+228E</td> <td>(+)</td> <td>v6.c</td> <td></td></tr>
</table> <a name="t41.6"></a><h1 id="_language_unicode_texas.pod6-Multiple_codepoints">41.6 Multiple codepoints</h1>
 <p>This list contains multiple-codepoint operators that require special composition for their Texas (ASCII) equivalents. Note the codepoints are shown space-separated but should be entered as adjacent codepoints when used.</p>
 <table>
<tr><th>Symbol</th> <th>Codepoints</th> <th>Texas</th> <th>Since</th> <th>Remarks</th></tr>
<tr><td>»=»</td> <td>U+00BB = U+00BB</td> <td>>>[=]>></td> <td>v6.c</td> <td>uses ASCII '='</td></tr>
</table></div> <!-- /language/variables.pod6 --><div class="pod-body"><a id="_language_variables.pod6"></a><a name="t42"><h1 class="title">42 Variables</h1></a> <p class="subtitle">Variables in Perl 6</p> <p>Variable names start with a special character called a <i>sigil</i>, followed optionally by a second special character named <i>twigil</i> and then an <i>identifier</i>.</p>
 <a name="t42.1"></a><h1 id="_language_variables.pod6-Sigils_&lt;X|$_(sigil),@_(sigil),%_(sigil),&amp;_(sigil)>">42.1 Sigils &lt;X|$ (sigil),@ (sigil),% (sigil),&amp; (sigil)></h1>
 <p>The sigil serves as a variable indicator and type constraint.</p>
 <table>
<tr><th>Sigil</th> <th>Type constraint</th> <th>Default type</th> <th>Assignment</th> <th>Examples</th></tr>
<tr><td>$</td> <td>Mu (no type constraint)</td> <td>Any</td> <td>item</td> <td>Int, Str, Array, Hash</td></tr>
 <tr><td>@</td> <td>Positional</td> <td>Array</td> <td>list</td> <td>List, Array, Range, Buf</td></tr>
 <tr><td>%</td> <td>Associative</td> <td>Hash</td> <td>list</td> <td>Hash, Map, Pair</td></tr>
 <tr><td>&amp;</td> <td>Callable</td> <td>Callable</td> <td>item</td> <td>Sub, Method, Block, Routine</td></tr>
</table> <p>Examples:</p>
 <pre class="code">my $square = 9 ** 2;
my @array  = 1, 2, 3;   # Array variable with three elements
my %hash   = London =&gt; 'UK', Berlin =&gt; 'Germany';</pre>
 <p><span class="indexed"><a id="476" name="is (container type)"></a></span> The default type can be set with <span class="code">is</span>.</p>
 <pre class="code">class FailHash is Hash {
    has Bool $!final = False;
    multi method AT-KEY ( ::?CLASS:D: Str:D \key ){
        fail X::OutOfRange.new(:what("Hash key"), :got(key), :range(self.keys)) if $!final &amp;amp;&amp;amp; !self.EXISTS-KEY(key);
        callsame
    }

    method finalize() {
        $!final = True
    }
}

my %h is FailHash = oranges =&gt; "round", bananas =&gt; "bendy";
say %h&amp;lt;oranges&gt;;
# OUTPUT «round␤»
%h.finalize;
say %h&amp;lt;cherry&gt;;
# OUTPUT «Hash key out of range. Is: cherry, should be in (oranges bananas)␤  in method AT-KEY at failhash.p6 line 4 [...]»</pre>
 <p>Variables without sigils are also possible, see <a href="#41-Sigilless variables">sigilless variables</a>.</p>
 <a name="t42.1.1"></a><h2 id="_language_variables.pod6-Item_and_List_Assignment">42.1.1 Item and List Assignment</h2>
 <p>There are two types of assignment, <i>item assignment</i> and <i>list assignment</i>. Both use the equal sign <span class="code">=</span> as operator. The distinction whether an <span class="code">=</span> means item or list assignment is based on the syntax of the left-hand side.</p>
 <p>Item assignment places the value from the right-hand side into the variable (container) on the left.</p>
 <p>List assignment leaves the choice of what to do to the variable on the left.</p>
 <p>For example, <a href="#_type_Array.pod6">Array</a> variables (<span class="code">@</span> sigil) empty themselves on list assignment and then put all the values from the right-hand side into themselves.</p>
 <p>The type of assignment (item or list) is decided by the first context seen in the current expression or declarator:</p>
 <pre class="code">my $foo = 5;            # item assignment
say $foo.perl;          # 5

my @bar = 7, 9;         # list assignment
say @bar.WHAT;          # Array
say @bar.perl;          # [7, 9]&amp;lt;&gt;

(my $baz) = 11, 13;     # list assignment
say $baz.WHAT;          # (List)
say $baz.perl;          # (11, 13)</pre>
 <p>Thus, the behavior of an assignment contained within a list assignment depends on the expression or declarator that contains it.</p>
 <p>For instance, if the internal assignment is a declarator, item assignment is used, which has tighter precedence than both the comma and the list assignment:</p>
 <pre class="code">my @array;
@array = my $num = 42, "str";   # item assignment: uses declarator
say @array.perl;                # [42, "str"]&amp;lt;&gt; (an Array)
say $num.perl;                  # 42 (a Num)</pre>
 <p>Similarly, if the internal assignment is an expression that is being used as an initializer for a declarator, the context of the internal expression determines the type of assignment:</p>
 <pre class="code">my $num;
my @array = $num = 42, "str";    # item assignment: uses expression
say @array.perl;                 # [42, "str"]&amp;lt;&gt; (an Array)
say $num.perl;                   # 42 (a Num)

my ( @foo, $bar );
@foo = ($bar) = 42, "str";       # list assignment: uses parens
say @foo.perl;                   # [42, "str"]&amp;lt;&gt; (an Array)
say $bar.perl;                   # $(42, "str")  (a List)</pre>
 <p>However, if the internal assignment is neither a declarator nor an expression, but is part of a larger expression, the context of the larger expression determines the type of assignment:</p>
 <pre class="code">my ( @array, $num );
@array = $num = 42, "str";    # list assignment
say @array.perl;              # [42, "str"]&amp;lt;&gt; (an Array)
say $num.perl;                # [42, "str"]&amp;lt;&gt; (an Array)</pre>
 <p>This is because the whole expression is <span class="code">@array = $num = 42, "str"</span>, while <span class="code">$num = 42</span> is not is own separate expression.</p>
 <p>See <a href="#_language_operators.pod6">operators</a> for more details on precedence.</p>
 <a name="t42.1.2"></a><h2 id="_language_variables.pod6-Sigilless_variables">42.1.2 Sigilless variables</h2>
 <p>It is possible to create "variables" in Perl 6 that do not have sigils:</p>
 <pre class="code">my \degrees = pi / 180;
my \θ       = 15 * degrees;</pre>
 <p>Note, however, that these do not create <a href="#_language_containers.pod6">containers</a>. That means <span class="code">degrees</span> and <span class="code">θ</span> above actually directly represent <span class="code">Num</span>s. To illustrate, try assigning to one after you've defined it:</p>
 <pre class="code">θ = 3; # Dies with the error "Cannot modify an immutable Num"</pre>
 <p>Sigilless variables do not enforce context, so they can be used to pass something on as-is:</p>
 <pre class="code">sub logged(&amp;amp;f, |args) {
    say('Calling ' ~ &amp;amp;f.name ~ ' with arguments ' ~ args.perl);
    my \result = f(|args);
    #  ^^^^^^^ not enforcing any context here
    say(&amp;amp;f.name ~ ' returned ' ~ result.perl);
    return |result;
}</pre>
 <a name="t42.2"></a><h1 id="_language_variables.pod6-Twigils">42.2 Twigils <a name="477"></a></h1>
 <p>Twigils influence the scoping of a variable. Please be aware that twigils have no influence over whether the primary sigil interpolates. That is, if <span class="code">$a</span> interpolates, so do <span class="code">$^a</span>, <span class="code">$*a</span>, <span class="code">$=a</span>, <span class="code">$?a</span>, <span class="code">$.a</span>, etc. It only depends on the <span class="code">$</span>.</p>
 <table>
<tr><th>Twigil</th> <th>Scope</th></tr>
<tr><td>none</td> <td>Based only on declarator</td></tr>
 <tr><td>*</td> <td>Dynamic</td></tr>
 <tr><td>!</td> <td>Attribute (class member)</td></tr>
 <tr><td>?</td> <td>Compile-time variable</td></tr>
 <tr><td>.</td> <td>Method (not really a variable)</td></tr>
 <tr><td>&lt;</td> <td>Index into match object (not really a variable)</td></tr>
 <tr><td>^</td> <td>Self-declared formal positional parameter</td></tr>
 <tr><td>:</td> <td>Self-declared formal named parameter</td></tr>
 <tr><td>=</td> <td>Pod variables</td></tr>
 <tr><td>~</td> <td>The sublanguage seen by the parser at this lexical spot</td></tr>
</table> <a name="t42.2.1"></a><h2 id="_language_variables.pod6-The_*_Twigil">42.2.1 The <span class="code">*</span> Twigil <a name="478"></a></h2>
 <p>Dynamic variables are looked up through the caller, not through the outer scope. For example:</p>
 <pre class="code">my $lexical   = 1; 
 my $*dynamic1 = 10; 
 my $*dynamic2 = 100; 
 
 sub say-all() { 
     say "$lexical, $*dynamic1, $*dynamic2"; 
 } 
 
 # prints 1, 10, 100 
 say-all(); 
 
 { 
     my $lexical   = 2; 
     my $*dynamic1 = 11; 
     $*dynamic2    = 101; 
 
     # prints 1, 11, 101 
     say-all(); 
 } 
 
 # prints 1, 10, 101 
 say-all(); 
</pre>
 <p>The first time <span class="code">&amp;say-all</span> is called, it prints "<span class="code">1, 10, 100</span>" just as one would expect. The second time though, it prints "<span class="code">1, 11, 101</span>". This is because <span class="code">$lexical</span> isn't looked up in the caller's scope but in the scope <span class="code">&amp;say-all</span> was defined in. The two dynamic variables are looked up in the caller's scope and therefore have the values <span class="code">11</span> and <span class="code">101</span>. The third time <span class="code">&amp;say-all</span> is called <span class="code">$*dynamic1</span> isn't <span class="code">11</span> anymore, but <span class="code">$*dynamic2</span> is still <span class="code">101</span>. This stems from the fact that we declared a new dynamic variable <span class="code">$*dynamic1</span> in the block and did not assign to the old variable as we did with <span class="code">$*dynamic2</span>.</p>
 <p>The dynamic variables differ from other variable types in that referring to an undeclared dynamic variable is not a compile time error but a runtime <a href="#_type_Failure.pod6">failure</a>, so a dynamic variable can be used undeclared as long as it is checked for definedness or used in a boolean context before using it for anything else:</p>
 <pre class="code">sub foo() { 
     $*FOO // 'foo'; 
 } 
 
 say foo; # -&gt; 'foo' 
 
 my $*FOO = 'bar'; 
 
 say foo; # -&gt; 'bar' 
</pre>
 <a name="t42.2.2"></a><h2 id="_language_variables.pod6-The_!_Twigil">42.2.2 The <span class="code">!</span> Twigil <a name="479"></a></h2>
 <p>Attributes are variables that exist per instance of a class. They may be directly accessed from within the class via <span class="code">!</span>:</p>
 <pre class="code">class Point { 
     has $.x; 
     has $.y; 
 
     method Str() { 
         "($!x, $!y)" 
     } 
 } 
</pre>
 <p>Note how the attributes are declared as <span class="code">$.x</span> and <span class="code">$.y</span> but are still accessed via <span class="code">$!x</span> and <span class="code">$!y</span>. This is because in Perl 6 all attributes are private and can be directly accessed within the class by using <span class="code">$!attribute-name</span>. Perl 6 may automatically generate accessor methods for you though. For more details on objects, classes and their attributes see <a href="#_language_objects.pod6">object orientation</a>.</p>
 <a name="t42.2.3"></a><h2 id="_language_variables.pod6-The_?_Twigil">42.2.3 The <span class="code">?</span> Twigil <a name="480"></a></h2>
 <p>Compile-time variables may be addressed via the <span class="code">?</span> twigil. They are known to the compiler and may not be modified after being compiled in. A popular example for this is:</p>
 <pre class="code">say "$?FILE: $?LINE"; # prints "hello.pl: 23" if this is the 23 line of a
                      # file named "hello.pl".</pre>
 <p>Although they may not be changed at runtime, the user is allowed to (re)define such variables.</p>
 <pre class="code">constant $?TABSTOP = 4; # this causes leading tabs in a heredoc or in a POD
                        # block's virtual margin to be counted as 4 spaces.</pre>
 <p>For a list of these special variables see <a href="#_language_variables.pod6-Compile-time_variables">compile-time variables</a>.</p>
 <a name="t42.2.4"></a><h2 id="_language_variables.pod6-The_._Twigil">42.2.4 The <span class="code">.</span> Twigil <a name="481"></a></h2>
 <p>The <span class="code">.</span> twigil isn't really for variables at all. In fact, something along the lines of</p>
 <pre class="code">class Point { 
     has $.x; 
     has $.y; 
 
     method Str() { 
         "($.x, $.y)" # note that we use the . instead of ! this time 
     } 
 } 
</pre>
 <p>just calls the methods <span class="code">x</span> and <span class="code">y</span> on <span class="code">self</span>, which are automatically generated for you because you used the <span class="code">.</span> twigil when the attributes were declared. Note, however, that subclasses may override those methods. If you don't want this to happen, use <span class="code">$!x</span> and <span class="code">$!y</span> instead.</p>
 <p>The fact that the <span class="code">.</span> twigil just does a method call also implies that the following is possible too:</p>
 <pre class="code">class SaySomething { 
     method a() { say "a"; } 
     method b() { $.a; } 
 } 
 
 SaySomething.b; # prints "a" 
</pre>
 <p>For more details on objects, classes and their attributes and methods see <a href="#_language_objects.pod6">object orientation</a>.</p>
 <a name="t42.2.5"></a><h2 id="_language_variables.pod6-The_&lt;_Twigil">42.2.5 The <span class="code">&lt;</span> Twigil</h2>
 <p>The <span class="code">&lt; </span> twigil is just an alias for <span class="code">$/&lt;...> </span> where <span class="code">$/</span> is the match variable. For more information about the match variable see <a href="$/">$/</a> and <a href="#_type_Match.pod6">type Match</a>.</p>
 <a name="t42.2.6"></a><h2 id="_language_variables.pod6-The_^_Twigil">42.2.6 The <span class="code">^</span> Twigil <a name="482"></a></h2>
 <p>The <span class="code">^</span> twigil declares a formal positional parameter to blocks or subroutines. Variables of the form <span class="code">$^variable</span> are a type of placeholder variable. They may be used in bare blocks to declare formal parameters to that block. So the block in the code</p>
 <pre class="code">    for ^4 { 
         say " &lt;b&gt;$^b&lt;/b&gt;  follows  &lt;b&gt;$^a&lt;/b&gt; "; 
     } 
</pre>
 <p>which prints</p>
 <pre class="code">1 follows 0
3 follows 2</pre>
 <p>has two formal parameters, namely <span class="code">$a</span> and <span class="code">$b</span>. Note that even though <span class="code">$^b</span> appears before <span class="code">$^a</span> in the code, <span class="code">$^a</span> is still the first formal parameter to that block. This is because the placeholder variables are sorted in Unicode order. If you have self-declared a parameter using <span class="code">$^a</span> once, you may refer to it using only <span class="code">$a</span> thereafter.</p>
 <p>Although it is possible to use nearly any valid identifier as a placeholder variable, it's recommended to use short names or ones that can be trivially understood in the correct order, to avoid surprise on behalf of the reader.</p>
 <p>Subroutines may also make use of placeholder variables but only if they do not have an explicit parameter list. This is true for normal blocks too.</p>
 <pre class="code">sub say-it    { say $^a; } # valid
sub say-it()  { say $^a; } # invalid
              { say $^a; } # valid
-&gt; $x, $y, $x { say $^a; } # invalid</pre>
 <p>Placeholder variables syntactically cannot have any type constraints. Be also aware that one cannot have placeholder variables with a single upper-case letter. This is disallowed in favor of being to able to catch some Perl 5-isms.</p>
 <a name="t42.2.7"></a><h2 id="_language_variables.pod6-The_:_Twigil">42.2.7 The <span class="code">:</span> Twigil <a name="483"></a></h2>
 <p>The <span class="code">:</span> twigil declares a formal named parameter to a block or subroutine. Variables declared using this form are a type of placeholder variable too. Therefore the same things that apply to variables declared using the <span class="code">^</span> twigil also apply here (with the exception that they are not positional and therefore not ordered using Unicode order, of course). So this:</p>
 <pre class="code">    say {  &lt;b&gt;$:add&lt;/b&gt;  ?? $^a + $^b !! $^a - $^b }( 4, 5 ) :!add 
</pre>
 <p>Will print "<span class="code">-1</span>".</p>
 <p>See <a href="^">^</a> for more details about placeholder variables.</p>
 <a name="t42.2.8"></a><h2 id="_language_variables.pod6-The_=_Twigil">42.2.8 The <span class="code">=</span> Twigil <a name="484"></a></h2>
 <p>The <span class="code">=</span> twigil is used to access Pod variables. Every Pod block in the current file can be accessed via a Pod object, such as <span class="code">$=data</span>, <span class="code">$=SYNOPSIS</span> or <span class="code">=UserBlock</span>. That is: a variable with the same name of the desired block and a <span class="code">=</span> twigil.</p>
 <pre class="code">=begin Foo 
 ... 
 =end Foo 
 
 #after that, $=Foo gives you all Foo-Pod-blocks 
</pre>
 <p>You may access the Pod tree which contains all Pod structures as a hierarchical data structure through <span class="code">$=pod</span>.</p>
 <p>Note that all those <span class="code">$=someBlockName</span> support the <span class="code">Positional</span> and the <span class="code">Associative</span> roles.</p>
 <a name="t42.2.9"></a><h2 id="_language_variables.pod6-The_~_Twigil">42.2.9 The <span class="code">~</span> Twigil <a name="485"></a></h2>
 <p>Note: Slangs are <a href="#_language_glossary.pod6-NYI">NYI</a> in Rakudo.</p>
 <p>The <span class="code">~</span> twigil is for referring to sublanguages (called slangs). The following are useful:</p>
 <p><span class="indexed"><a id="486" name="$~MAIN"></a></span><span class="indexed"><a id="487" name="$~Quote"></a></span><span class="indexed"><a id="488" name="$~Quasi"></a></span><span class="indexed"><a id="489" name="$~Regex"></a></span><span class="indexed"><a id="490" name="$~Trans"></a></span><span class="indexed"><a id="491" name="$~P5Regex"></a></span></p>
 <pre class="code">$~MAIN       the current main language (e.g. Perl statements)
$~Quote      the current root of quoting language
$~Quasi      the current root of quasiquoting language
$~Regex      the current root of regex language
$~Trans      the current root of transliteration language
$~P5Regex    the current root of the Perl 5 regex language</pre>
 <p>You may <span class="code">supersede</span> or <span class="code">augment</span> these languages in your current lexical scope by using</p>
 <pre class="code">augment slang Regex {  # derive from $~Regex and then modify $~Regex
    token backslash:std&amp;lt;\Y&gt; { YY };
}</pre>
 <p>or</p>
 <pre class="code">supersede slang Regex { # completely substitute $~Regex
    ...
}</pre>
 <a name="t42.3"></a><h1 id="_language_variables.pod6-Variable_Declarators_and_Scope">42.3 Variable Declarators and Scope</h1>
 <p>Most of the time it's enough to create a new variable using the <span class="code">my</span> keyword:</p>
 <pre class="code">     &lt;b&gt;my&lt;/b&gt;  $amazing-variable = "World"; 
     say "Hello $amazing-variable!"; # Hello World! 
</pre>
 <p>However, there are many declarators that change the details of scoping beyond what <a href="#41-Twigils">#Twigils</a> can do.</p>
 <table>
<tr><th>Declarator</th> <th>Effect</th></tr>
<tr><td>my</td> <td>Introduces lexically scoped names</td></tr>
 <tr><td>our</td> <td>Introduces package-scoped names</td></tr>
 <tr><td>has</td> <td>Introduces attribute names</td></tr>
 <tr><td>anon</td> <td>Introduces names that are private to the construct</td></tr>
 <tr><td>state</td> <td>Introduces lexically scoped but persistent names</td></tr>
 <tr><td>augment</td> <td>Adds definitions to an existing name</td></tr>
 <tr><td>supersede</td> <td>Replaces definitions of an existing name</td></tr>
</table> <p>There are also two prefixes that resemble declarators but act on predefined variables:</p>
 <table>
<tr><th>Prefix</th> <th>Effect</th></tr>
<tr><td>temp</td> <td>Restores a variable's value at the end of scope</td></tr>
 <tr><td>let</td> <td>Restores a variable's value at the end of scope if the block exits unsuccessfully</td></tr>
</table> <a name="t42.3.1"></a><h2 id="_language_variables.pod6-The_my_Declarator">42.3.1 The <span class="code">my</span> Declarator</h2>
 <p>Declaring a variable with <span class="code">my</span> gives it lexical scope. This means it only exists within the current block. For example:</p>
 <pre class="code">{
    my $foo = "bar";
    say $foo; # -&gt; "bar"
}
say $foo; # !!! "Variable '$foo' is not declared"</pre>
 <p>This dies because <span class="code">$foo</span> is only defined as long as we are in the same scope.</p>
 <p>Additionally, lexical scoping means that variables can be temporarily redefined in a new scope:</p>
 <pre class="code">my $location = "outside"; 
 
 sub outer-location { 
     # Not redefined: 
     say $location; 
 } 
 
 outer-location; # -&gt; "outside" 
 
 sub in-building { 
     my $location = "inside"; 
     say $location; 
 } 
 
 in-building; # -&gt; "inside" 
 
 outer-location; # -&gt; "outside" 
</pre>
 <p>If a variable has been redefined, any code that referenced the outer variable will continue to reference the outer variable. So here, <span class="code">&amp;outer-location</span> still prints the outer <span class="code">$location</span>:</p>
 <pre class="code">sub new-location { 
     my $location = "nowhere" 
     outer-location; 
 } 
 
 new-location; # -&gt; "outside" 
</pre>
 <p>To make <span class="code">new-location()</span> print <span class="code">nowhere</span>, make <span class="code">$location</span> a dynamic variable using <a href="#41-The_*_Twigil">the * twigil</a>.</p>
 <p><span class="code">my</span> is the default scope for subroutines, so <span class="code">my sub x() {}</span> and <span class="code">sub x() {}</span> do exactly the same thing.</p>
 <a name="t42.3.2"></a><h2 id="_language_variables.pod6-The_our_Declarator">42.3.2 The <span class="code">our</span> Declarator</h2>
 <p><span class="code">our</span> variables work just like <span class="code">my</span> variables, except that they also introduce an alias into the symbol table.</p>
 <pre class="code">module M {
    our $Var;
    # $Var available here
}

# Available as $M::Var here.</pre>
 <a name="t42.3.3"></a><h2 id="_language_variables.pod6-The_has_Declarator">42.3.3 The <span class="code">has</span> Declarator</h2>
 <p><span class="code">has</span> scopes attributes to instances of a class or role, and methods to classes or roles. <span class="code">has</span> is implied for methods, so <span class="code">has method x() {}</span> and <span class="code">method x() {}</span> do the same thing.</p>
 <p>See <a href="#_language_objects.pod6">object orientation</a> for more documentation and some examples.</p>
 <a name="t42.3.4"></a><h2 id="_language_variables.pod6-The_anon_Declarator">42.3.4 The <span class="code">anon</span> Declarator</h2>
 <p>The <span class="code">anon</span> declarator prevents a symbol from getting installed in the lexical scope, the method table and everywhere else.</p>
 <p>For example you can use it to declare subroutines which know their own name, but still aren't installed in a scope:</p>
 <pre class="code">my %operations =
    half   =&gt; anon sub half($x) { $x / 2 },
    square =&gt; anon sub square($x) { $x * $x },
    ;
say %operations&amp;lt;square&gt;.name;       # square
say %operations&amp;lt;square&gt;(8);         # 64</pre>
 <a name="t42.3.5"></a><h2 id="_language_variables.pod6-The_state_Declarator">42.3.5 The <span class="code">state</span> Declarator</h2>
 <p><span class="code">state</span> declares lexically scoped variables, just like <span class="code">my</span>. However, initialization happens exactly once the first time the initialization is encountered in the normal flow of execution. Thus, state variables will retain their value across multiple executions of the enclosing block or routine.</p>
 <p>Therefore, the subroutine</p>
 <pre class="code">sub a { 
     state @x; 
     state $l = 'A'; 
     @x.push($l++); 
 }; 
 
 say a for 1..6; 
 
 This works per "clone" of the containing code object, so: 
 
     ({ state $i = 1; $i++.say; } xx 3).map: {$_(), $_()}; # says 1 then 2 thrice 
 
 Note that this is B&amp;lt;not&gt; a thread-safe construct when the same clone of the same 
 block is run by multiple threads.  Also remember that methods only have one 
 clone per class, not per object. 
 
</pre>
 <p>will continue to increment <span class="code">$l</span> and append it to <span class="code">@x</span> each time it is called. So it will output</p>
 <pre class="code">[A] 
 [A B] 
 [A B C] 
 [A B C D] 
 [A B C D E] 
 [A B C D E F] 
 
</pre>
 <p>As with <span class="code">my</span>, declaring multiple <span class="code">state</span> variables must be placed in parentheses and for declaring a single variable, parentheses may be omitted.</p>
 <p>Please note that many operators come with implicit binding, what will lead to actions at a distance. Use <span class="code">.clone</span> or coercion to create a new container that can be bound to.</p>
 <pre class="code">my @a;
sub f() {
    state $i;
    $i++;
    @a.push: "k$i" =&gt; $i # &amp;lt;-- .clone goes here
};
f for 1..3;
dd @a; # «Array $var = $[:k1(3), :k2(3), :k3(3)]»</pre>
 <p>All state variables are shared between threads. The result can be undesired or dangerous.</p>
 <pre class="code">sub code(){ state $i = 0; say ++$i; $i };
await
    start { loop { last if code() &gt;= 5 } },
    start { loop { last if code() &gt;= 5 } };

# OUTPUT«1␤2␤3␤4␤4␤3␤5␤»
# OUTPUT«2␤1␤3␤4␤5␤»
# many other more or less odd variations can be produced</pre>
 <a name="t42.3.5.1"></a><h3 id="_language_variables.pod6-The_$_Variable">42.3.5.1 The <span class="code">$</span> Variable</h3>
 <p>As well as explicitly declared named state variables <span class="code">$</span> can be used as an anonymous state variable without an explicit <span class="code">state</span> declaration:</p>
 <pre class="code">perl6 -e 'sub foo() { say ++$  }; foo() for ^3' 
 
</pre>
 <p>produces:</p>
 <pre class="code">1 
 2 
 3 
 
</pre>
 <p>Furthermore, state variables are not required to exist in subroutines. You could, for example, use <span class="code">$</span> in a one-liner to number the lines in a file:</p>
 <pre class="code">perl6 -ne 'say ++$ ~ " $_"' example.txt 
 
</pre>
 <p>Each reference to <span class="code">$</span> within a lexical scope in effect is a separate variable, as illustrated by:</p>
 <pre class="code">perl6 -e '{ say ++$; say $++  } for ^5' 
 
</pre>
 <p>which produces:</p>
 <pre class="code">1 
 0 
 2 
 1 
 3 
 2 
 4 
 3 
 5 
 4 
 
</pre>
 <p>If you need to refer to the value of <span class="code">$</span> more than once within the scope it should be copied to a new variable, for example:</p>
 <pre class="code">sub foo() { 
     given ++$ { 
         when 1 { 
             say "one"; 
         } 
         when 2 { 
             say "two"; 
         } 
         when 3 { 
             say "three"; 
         } 
         default { 
             say "many"; 
         } 
     } 
 } 
 
 foo() for ^3; 
</pre>
 <p>produces:</p>
 <pre class="code">one 
 two 
 three 
</pre>
 <a name="t42.3.5.2"></a><h3 id="_language_variables.pod6-The_@_Variable">42.3.5.2 The <span class="code">@</span> Variable</h3>
 <p>In a similar manner to the <span class="code">$</span> variable there is also a <a href="#_type_Positional.pod6">Positional</a> anonymous state variable <span class="code">@</span> :</p>
 <pre class="code">sub foo($x) { 
     say (@).push($x); 
 } 
 
 foo($_) for ^3; 
</pre>
 <p>Produces:</p>
 <pre class="code">[0] 
 [0 1] 
 [0 1 2] 
</pre>
 <p>The <span class="code">@</span> here is parenthesized in order to disambiguate the expression from a class member variable named <span class="code">@.push</span>. Indexed access doesn't require this disambiguation but you will need to copy the value in order to do anything useful with it:</p>
 <pre class="code">sub foo($x) { 
     my $v = @; 
     $v[$x] = $x; 
     say $v; 
 } 
 
 foo($_) for ^3; 
</pre>
 <p>Produces:</p>
 <pre class="code">[0] 
 [0 1] 
 [0 1 2] 
</pre>
 <p>As with <span class="code">$</span> each mention of <span class="code">@</span> in a scope introduces a new anonymous array.</p>
 <a name="t42.3.5.3"></a><h3 id="_language_variables.pod6-The_%_Variable">42.3.5.3 The <span class="code">%</span> Variable</h3>
 <p>Finally there is also an <a href="#_type_Associative.pod6">Associative</a> anonymous state variable <span class="code">%</span>:</p>
 <pre class="code">sub foo($x) { 
     say (%).push($x =&gt; $x); 
 } 
 
 foo($_) for ^3; 
</pre>
 <p>Which produces:</p>
 <pre class="code">0 =&gt; 0 
 0 =&gt; 0, 1 =&gt; 1 
 0 =&gt; 0, 1 =&gt; 1, 2 =&gt; 2 
</pre>
 <p>The same caveat about disambiguation applies. As you may expect, indexed access is also possible (with copying to make it useful):</p>
 <pre class="code">sub foo($x) { 
     my $v = %; 
     $v{$x} = $x; 
     say $v; 
 } 
 
 foo($_) for ^3; 
</pre>
 <p>Which produces:</p>
 <pre class="code">0 =&gt; 0 
 0 =&gt; 0, 1 =&gt; 1 
 0 =&gt; 0, 1 =&gt; 1, 2 =&gt; 2 
</pre>
 <p>As with the other anonymous state variables each mention of <span class="code">%</span> within a given scope will effectively introduce a separate variable.</p>
 <a name="t42.3.6"></a><h2 id="_language_variables.pod6-The_augment_Declarator">42.3.6 The <span class="code">augment</span> Declarator</h2>
 <p>With <span class="code">augment</span>, you can add attributes and methods to existing classes and grammars, provided you activated the <span class="code">MONKEY-TYPING</span> pragma first.</p>
 <p>Since classes are usually <span class="code">our</span> scoped, and thus global, this means modifying global state, which is strongly discouraged. For almost all situations, there are better solutions.</p>
 <pre class="code"># don't do this
use MONKEY-TYPING;
augment class Int {
    method is-answer { self == 42 }
}
say 42.is-answer;       # True</pre>
 <p>(In this case, the better solution would be to use a <a href="#_language_functions.pod6">function</a>).</p>
 <a name="t42.3.7"></a><h2 id="_language_variables.pod6-The_temp_Prefix">42.3.7 The <span class="code">temp</span> Prefix</h2>
 <p>Like <span class="code">my</span>, <span class="code">temp</span> restores the old value of a variable at the end of its scope. However, <span class="code">temp</span> does not create a new variable.</p>
 <pre class="code">my $in = 0; # temp will "entangle" the global variable with the call stack
            # that keeps the calls at the bottom in order.
sub f(*@c) {
    (temp $in)++;
     "&amp;lt;f&gt;\n"
     ~ @c&gt;&gt;.indent($in).join("\n")
     ~ (+@c ?? "\n" !! "")
     ~ '&amp;lt;/f&gt;'
};
sub g(*@c) {
    (temp $in)++;
    "&amp;lt;g&gt;\n"
    ~ @c&gt;&gt;.indent($in).join("\n")
    ~ (+@c ?? "\n" !! "")
    ~ "&amp;lt;/g&gt;"
};
print g(g(f(g()), g(), f()));</pre>
 <p>output:</p>
 <pre class="code">&amp;lt;g&gt;
 &amp;lt;g&gt;
  &amp;lt;f&gt;
   &amp;lt;g&gt;
   &amp;lt;/g&gt;
  &amp;lt;/f&gt;
  &amp;lt;g&gt;
  &amp;lt;/g&gt;
  &amp;lt;f&gt;
  &amp;lt;/f&gt;
 &amp;lt;/g&gt;
&amp;lt;/g&gt;</pre>
 <a name="t42.3.8"></a><h2 id="_language_variables.pod6-The_let_Prefix">42.3.8 The <span class="code">let</span> Prefix</h2>
 <p>Restores the previous value if the block exits unsuccessfully. A successful exit means the block returned a defined value or a list.</p>
 <pre class="code">my $answer = 42;

{
    let $answer = 84;
    die if not Bool.pick;
    CATCH {
        default { say "it's been reset :(" }
    }
    say "we made it 84 sticks!";
}

say $answer;</pre>
 <p>In the above case, if the <span class="code">Bool.pick</span> returns true, the answer will stay as 84 because the block returns a defined value (<span class="code">say</span> returns true). Otherwise the <span class="code">die</span> statement will cause the block to exit unsuccessfully, resetting the answer to 42.</p>
 this is duplicated in operators.pod
 <a name="t42.4"></a><h1 id="_language_variables.pod6-Type_Constraints_and_Initialization">42.4 Type Constraints and Initialization</h1>
 <p>Variables can have a type constraint, which goes between the declarator and the variable name:</p>
 <pre class="code">    my Int $x = 42; 
     $x = 'a string';    # throws an  &lt;a href="#_type_X::TypeCheck::Assignment.pod6"&gt;X::TypeCheck::Assignment&lt;/a&gt;  error 
</pre>
 <p>If a scalar variable has a type constraint but no initial value, it is initialized with the type object of the constraint type.</p>
 <pre class="code">my Int $x;
say $x.^name;       # Int
say $x.defined;     # False</pre>
 <p>Scalar variables without an explicit type constraint are typed as <a href="#_type_Mu.pod6">Mu</a> but default to the <a href="#_type_Any.pod6">Any</a> type object.</p>
 <p>Variables with the <span class="code">@</span> sigil are initialized with an empty <a href="#_type_Array.pod6">Array</a>; variables with the <span class="code">%</span> sigil are initialized with an empty <a href="#_type_Hash.pod6">Hash</a>.</p>
 <p>The default value of a variable can be set with the <span class="code">is default</span> trait, and re-applied by assigning <span class="code">Nil</span> to it:</p>
 <pre class="code">my Real $product is default(1);
say $product;                       # 1
$produce *= 5;
say $product;                       # 5
$product = Nil;
say $product;                       # 1</pre>
 <a name="t42.4.1"></a><h2 id="_language_variables.pod6-Default_Defined_Variables_Pragma">42.4.1 Default Defined Variables Pragma</h2>
 <p>To force all variables to have a definedness contraint use the prama <span class="code">use variables :D</span>. The pragma is lexically scoped and can be switched of with <span class="code">use variables :_</span>.</p>
 <pre class="code">use variables :D;
my Int $i;
# OUTPUT«===SORRY!=== Error while compiling &amp;lt;tmp&gt;␤Variable definition of type Int:D (implicit :D by pragma) requires an initializer ...
my Int $i = 1; # that works
{ use variables :_; my Int $i; } # switch it of in this block</pre>
 <a name="t42.5"></a><h1 id="_language_variables.pod6-Special_Variables">42.5 Special Variables</h1>
 <p>Perl 5 is infamous for its many obscure special variables. Perl 6 also has special variables but only has three that are extra short due to how often they're used. Other special variables have longer, more descriptive names.</p>
 <a name="t42.5.1"></a><h2 id="_language_variables.pod6-Pre-defined_lexical_variables">42.5.1 Pre-defined lexical variables</h2>
 <p>There are three special variables that are available in every block:</p>
 <table>
<tr><th>Variable</th> <th>Meaning</th></tr>
<tr><td>$_</td> <td>topic variable</td></tr>
 <tr><td>$/</td> <td>regex match</td></tr>
 <tr><td>$!</td> <td>exceptions</td></tr>
</table> <a name="t42.5.1.1"></a><h3 id="_language_variables.pod6-The_$__Variable">42.5.1.1 The <span class="code">$_</span> Variable</h3>
 <p><span class="code">$_</span> is the topic variable. It is the default parameter for blocks that do not have an explicit signature, so constructs like <span class="code">for @array { ... }</span> and <span class="code">given $var { ... }</span> bind to <span class="code">$_</span> simply by invoking the block.</p>
 <pre class="code">for &amp;lt;a b c&gt; { say $_ }  # sets $_ to 'a', 'b' and 'c' in turn
say $_ for &amp;lt;a b c&gt;;     # same, even though it's not a block
given 'a'   { say $_ }  # sets $_ to 'a'
say $_ given 'a';       # same, even though it's not a block</pre>
 <p><span class="code">CATCH</span> blocks set <span class="code">$_</span> to the exception that was caught. The <span class="code">~~</span> smart-match operator sets <span class="code">$_</span> on the right-hand side expression to the value of the left-hand side.</p>
 <p>Calling a method on <span class="code">$_</span> can be shortened by leaving off the variable name:</p>
 <pre class="code">.say;                   # same as $_.say</pre>
 <p><span class="code">m/regex/</span> and <span class="code">/regex/</span> regex matches and <span class="code">s/regex/subst/</span> substitutions work on <span class="code">$_</span>:</p>
 <pre class="code">say "Looking for strings with non-alphabetic characters...";
for &amp;lt;ab:c d$e fgh ij*&gt; {
    .say if m/&amp;lt;!alpha&gt;/;
}</pre>
 <p>This outputs:</p>
 <pre class="code">Looking for strings with non-alphabetic characters...
ab:c
d$e
ij*</pre>
 <a name="t42.5.1.2"></a><h3 id="_language_variables.pod6-The_$/_Variable">42.5.1.2 The <span class="code">$/</span> Variable</h3>
 <p><span class="code">$/</span> is the match variable. It stores the result of the last <a href="#_language_regexes.pod6">Regex</a> match and so usually contains objects of type <a href="#_type_Match.pod6">Match</a>.</p>
 <pre class="code">'abc 12' ~~ /\w+/;  # sets $/ to a Match object
say $/.Str;         # abc</pre>
 <p>The <span class="code">Grammar.parse</span> method also sets the caller's <span class="code">$/</span> to the resulting <a href="#_type_Match.pod6">Match</a> object. For the following code:</p>
 <pre class="code">use XML::Grammar; # panda install XML
XML.Grammar.parse("&amp;lt;p&gt;some text&amp;lt;/p&gt;");
say $/;</pre>
 <p>the output is:</p>
 <p>｢&lt;p>some text&lt;/p>｣ root => ｢&lt;p>some text&lt;/p>｣ name => ｢p｣ child => ｢some text｣ text => ｢some text｣ textnode => ｢some text｣ element => ｢&lt;p>some text&lt;/p>｣ name => ｢p｣ child => ｢some text｣ text => ｢some text｣ textnode => ｢some text｣</p>
 <a name="t42.5.1.2.1"></a><h4 id="_language_variables.pod6-Positional_Attributes">42.5.1.2.1 <a name="492"></a>Positional Attributes</h4>
 <p><span class="code">$/</span> can have positional attributes if the <a href="#_language_regexes.pod6">Regex</a> had capture-groups in it, which are just formed with parentheses.</p>
 <pre class="code">'abbbbbcdddddeffg' ~~ / a (b+) c (d+ef+) g /;
say $/[0]; # ｢bbbbb｣
say $/[1]; # ｢dddddeff｣</pre>
 <p>These can also be accessed by the shortcuts <span class="code">$0</span>, <span class="code">$1</span>, <span class="code">$2</span>, etc.</p>
 <pre class="code">say $0; # ｢bbbbb｣
say $1; # ｢dddddeff｣</pre>
 <p>To get all of the positional attributes, any of <span class="code">$/.list</span>, <span class="code">@$/</span>, or <span class="code">@()</span> can be used.</p>
 <pre class="code">say @().join; # bbbbbdddddeff</pre>
 <a name="t42.5.1.2.2"></a><h4 id="_language_variables.pod6-Named_Attributes">42.5.1.2.2 <a name="493"></a>Named Attributes</h4>
 <p><span class="code">$/</span> can have named attributes if the <a href="#_language_regexes.pod6">Regex</a> had named capture-groups in it, or if the Regex called out to another Regex.</p>
 <pre class="code">'I.... see?' ~~ / \w+ $&amp;lt;punctuation&gt;=[ &amp;lt;-[\w\s]&gt;+ ] \s* $&amp;lt;final-word&gt; = [ \w+ . ] /;
say $/&amp;lt;punctuation&gt;; # ｢....｣
say $/&amp;lt;final-word&gt;;  # ｢see?｣</pre>
 <p>These can also be accessed by the shortcut <span class="code">$&lt;named></span>.</p>
 <pre class="code">say $&amp;lt;punctuation&gt;; # ｢....｣
say $&amp;lt;final-word&gt;;  # ｢see?｣</pre>
 <p>To get all of the named attributes, any of <span class="code">$/.hash</span>, <span class="code">%$/</span>, or <span class="code">%()</span> can be used.</p>
 <pre class="code">say %().join;       # "punctuation     ....final-word  see?"</pre>
 <a name="t42.5.1.3"></a><h3 id="_language_variables.pod6-The_$!_Variable">42.5.1.3 The <span class="code">$!</span> Variable</h3>
 <p><span class="code">$!</span> is the error variable. If a <span class="code">try</span> block or statement prefix catches an exception, that exception is stored in <span class="code">$!</span>. If no exception was caught, <span class="code">$!</span> is set to the <span class="code">Any</span> type object.</p>
 <p>Note that <span class="code">CATCH</span> blocks <i>do not</i> set <span class="code">$!</span>. Rather they set <span class="code">$_</span> inside the block to the caught exception.</p>
 <a name="t42.5.2"></a><h2 id="_language_variables.pod6-Compile-time_variables">42.5.2 Compile-time variables</h2>
 <p><span class="indexed"><a id="494" name="$?FILE"></a></span><span class="indexed"><a id="495" name="$?LINE"></a></span><span class="indexed"><a id="496" name="::?CLASS"></a></span><span class="indexed"><a id="497" name="&amp;?ROUTINE"></a></span><span class="indexed"><a id="498" name="&amp;?BLOCK"></a></span><span class="indexed"><a id="499" name="%?LANG"></a></span><span class="indexed"><a id="500" name="%?RESOURCES"></a></span></p>
 <table>
<tr><td>$?FILE</td> <td>Which file am I in?</td></tr>
 <tr><td>$?LINE</td> <td>Which line am I at?</td></tr>
 <tr><td>::?CLASS</td> <td>Which class am I in?</td></tr>
 <tr><td>&amp;?ROUTINE</td> <td>Which routine am I in?</td></tr>
 <tr><td>&amp;?BLOCK</td> <td>Which block am I in?</td></tr>
 <tr><td>%?LANG</td> <td>What is the current set of interwoven languages?</td></tr>
 <tr><td>%?RESOURCES</td> <td>The files associated with the "Distribution" of the current compilation unit.</td></tr>
</table> <pre class="code">for '.' {
    .Str.say when !.IO.d;
    .IO.dir()&gt;&gt;.&amp;amp;?BLOCK when .IO.d # lets recurse a little!
}</pre>
 <p>Other compile-time variables:</p>
 <p><span class="indexed"><a id="501" name="$?SCOPE"></a></span><span class="indexed"><a id="502" name="$?PACKAGE"></a></span><span class="indexed"><a id="503" name="$?MODULE"></a></span><span class="indexed"><a id="504" name="$?CLASS"></a></span><span class="indexed"><a id="505" name="$?ROLE"></a></span><span class="indexed"><a id="506" name="$?GRAMMAR"></a></span><span class="indexed"><a id="507" name="$?TABSTOP"></a></span><span class="indexed"><a id="508" name="$?USAGE"></a></span><span class="indexed"><a id="509" name="$?ENC"></a></span></p>
 <table>
<tr><td>$?SCOPE</td> <td>Which lexical scope am I in?</td></tr>
 <tr><td>$?PACKAGE</td> <td>Which package am I in?</td></tr>
 <tr><td>$?MODULE</td> <td>Which module am I in?</td></tr>
 <tr><td>$?CLASS</td> <td>Which class am I in? (as variable)</td></tr>
 <tr><td>$?ROLE</td> <td>Which role am I in? (as variable)</td></tr>
 <tr><td>$?GRAMMAR</td> <td>Which grammar am I in?</td></tr>
 <tr><td>$?TABSTOP</td> <td>How many spaces is a tab in a heredoc or virtual margin?</td></tr>
 <tr><td>$?USAGE</td> <td>The usage message generated from the signatures of MAIN subs.</td></tr>
 <tr><td>$?ENC</td> <td>Default encoding of Str.encode/Buf.decode/various IO methods.</td></tr>
</table> <a name="t42.5.3"></a><h2 id="_language_variables.pod6-Dynamic_variables">42.5.3 Dynamic variables</h2>
 There should be a better way get this table to be formatted
    properly, but if there is, Rakudo doesn't support it at the moment.
 <p><span class="indexed"><a id="510" name="$*ARGFILES"></a></span><span class="indexed"><a id="511" name="@*ARGS"></a></span><span class="indexed"><a id="512" name="$*IN"></a></span><span class="indexed"><a id="513" name="$*OUT"></a></span><span class="indexed"><a id="514" name="$*ERR"></a></span><span class="indexed"><a id="515" name="%*ENV"></a></span><span class="indexed"><a id="516" name="$*REPO"></a></span><span class="indexed"><a id="517" name="$*TZ"></a></span> <span class="indexed"><a id="518" name="$*CWD"></a></span><span class="indexed"><a id="519" name="$*KERNEL"></a></span><span class="indexed"><a id="520" name="$*DISTRO"></a></span><span class="indexed"><a id="521" name="$*VM"></a></span><span class="indexed"><a id="522" name="$*PERL"></a></span><span class="indexed"><a id="523" name="$*PID"></a></span><span class="indexed"><a id="524" name="$*PROGRAM-NAME"></a></span> <span class="indexed"><a id="525" name="$*PROGRAM"></a></span><span class="indexed"><a id="526" name="$*EXECUTABLE"></a></span><span class="indexed"><a id="527" name="$*EXECUTABLE-NAME"></a></span><span class="indexed"><a id="528" name="$*USER"></a></span><span class="indexed"><a id="529" name="$*GROUP"></a></span><span class="indexed"><a id="530" name="$*HOME"></a></span> <span class="indexed"><a id="531" name="$*SPEC"></a></span><span class="indexed"><a id="532" name="$*TMPDIR"></a></span><span class="indexed"><a id="533" name="$*THREAD"></a></span><span class="indexed"><a id="534" name="$*SCHEDULER"></a></span></p>
 <table>
<tr><td>$*ARGFILES | Magic command-line input handle.</td></tr>
 <tr><td>@*ARGS | Arguments from the command line.</td></tr>
 <tr><td>$*IN | Standard input filehandle, AKA stdin</td></tr>
 <tr><td>$*OUT | Standard output filehandle, AKA stdout</td></tr>
 <tr><td>$*ERR | Standard error filehandle, AKA stderr</td></tr>
 <tr><td>%*ENV | Environment variables</td></tr>
 <tr><td>$*REPO | A variable holding information about modules installed/loaded</td></tr>
 <tr><td>$*TZ | The system's local timezone.</td></tr>
 <tr><td>$*CWD | The Current Working Directory.</td></tr>
 <tr><td>$*KERNEL | Which kernel am I running under?</td></tr>
 <tr><td>$*DISTRO | Which OS distribution am I running under?</td></tr>
 <tr><td>$*VM | Which virtual machine am I running under?</td></tr>
 <tr><td>$*PERL | Which Perl am I running under?</td></tr>
 <tr><td>$*PID | Process ID of the current process.</td></tr>
 <tr><td>$*PROGRAM-NAME | Path to the current executable as it was entered on the | command line, or C&lt;-e> if perl was invoked with the -e flag.</td></tr>
 <tr><td>$*PROGRAM | Location (in the form of an C&lt;IO::Path> object) of the | Perl program being executed.</td></tr>
 <tr><td>$*EXECUTABLE | Absolute path of the perl executable that is currently running.</td></tr>
 <tr><td>$*EXECUTABLE-NAME | The name of the perl executable that is currently running. | (e.g. perl6-p, perl6-m, Niecza.exe) | Favor $*EXECUTABLE because it is not guaranteed that the perl | executable is in PATH.</td></tr>
 <tr><td>$*USER | The user that is running the program. It is an object | that evaluates to "username (uid)". It will evaluate | to the username only if treated as a string and the | numeric user id if treated as a number.</td></tr>
 <tr><td>$*GROUP | The primary group of the user who is running the program. | It is an object that evaluates to "groupname (gid)". | It will evaluate to the groupname only if treated as a | string and the numeric group id if treated as a number.</td></tr>
 <tr><td>$*HOME | An L&lt;IO::Path> object representing the "home directory" | of the user that is running the program. If the | "home directory" cannot be determined it will be L&lt;Nil></td></tr>
 <tr><td>$*SPEC | The appropriate L&lt;IO::Spec> sub-class for the platform that | the program is running on. For OS-specific code, simply use smartmatch: | C&lt;say "We are on Windows!" if $*SPEC ~~ IO::Spec::Win32></td></tr>
 <tr><td>$*TMPDIR | An L&lt;IO::Path> object representing the "system temporary directory"</td></tr>
 <tr><td>$*THREAD | A L&lt;Thread> object representing the currently executing thread.</td></tr>
 <tr><td>$*SCHEDULER | A L&lt;ThreadPoolScheduler> object representing the current default | scheduler. | | Note on usage: For the current Rakudo, by default this imposes a | maximum of 16 threads on the methods C&lt;.hyper> and C&lt;.race>. To change | the maximum number of threads, either set the environment variable | RAKUDO_MAX_THREADS before running perl6 or create a scoped copy | with the default changed before using C&lt;.hyper> or C&lt;.race>: | | my $*SCHEDULER = ThreadPoolScheduler.new( max_threads => 64 ); | | This behavior is not tested in the spec tests and is subject to change.</td></tr>
</table></div> <!-- /Programs/00-running.pod6 --><div class="pod-body"><a id="_Programs_00-running.pod6"></a><a name="t43"><h1 class="title">43 Perl 6</h1></a> <p class="subtitle">perl6 - the Rakudo Perl 6 Compiler</p> <a name="t43.1"></a><h1 id="_Programs_00-running.pod6-SYNOPSIS">43.1 SYNOPSIS</h1>
 <pre class="code">perl6 [switches] [--] [programfile] [arguments]</pre>
 <a name="t43.2"></a><h1 id="_Programs_00-running.pod6-DESCRIPTION">43.2 DESCRIPTION</h1>
 <p>With no arguments, enters a REPL. With a <span class="code">[programfile]</span> or the <span class="code">-e</span> option, compiles the given program and by default also executes the compiled code.</p>
 <pre class="code">  Option               Purpose 
   ======               ============================================== 
   -c                   check syntax only (runs BEGIN and CHECK blocks) 
   --doc                extract documentation and print it as text 
   -e program           one line of program, strict is enabled by default 
   -h, --help           display this help text 
   -n                   run program once for each line of input 
   -p                   same as -n, but also print $_ at the end of lines 
   -I path              adds the path to the module search path 
   -M module            loads the module prior to running the program 
   --target=[stage]     specify compilation stage to emit 
   --optimize=[level]   use the given level of optimization (0..3) 
   --encoding=[mode]    specify string encoding mode 
   -o, --output=[name]  specify name of output file 
   -v, --version        display version information 
   --stagestats         display time spent in the compilation stages 
   --ll-exception       display a low level backtrace on errors 
   --profile            write profile information as HTML file (MoarVM) 
   --profile-filename   provide a different filename (also allows .json) 
   --doc=[module]       Use Pod::To::[module] to render inline documentation. 
 
 Note that only boolean single-letter options may be bundled. 
 
</pre>
 <p>The supported values for <span class="code">--target</span> are:</p>
 <table>
<tr><th>Target</th> <th>Backend</th> <th>Description</th></tr>
<tr><td>parse</td> <td>all</td> <td>a representation of the parse tree</td></tr>
 <tr><td>ast</td> <td>all</td> <td>an abstract syntax tree (before optimizations)</td></tr>
 <tr><td>optimize</td> <td>all</td> <td>an abstract syntax tree (after optimizations)</td></tr>
 <tr><td>mbc</td> <td>MoarVM</td> <td>MoarVM byte code</td></tr>
 <tr><td>jar</td> <td>JVM</td> <td>JVM archive</td></tr>
</table> <p>For <span class="code">--profile-filename</span>, specifying a name ending in <span class="code">.json</span> will write a raw JSON profile dump. The default if this is omitted is <span class="code">profile-I&lt;[timestamp]>.html</span>.</p>
 <a name="t43.3"></a><h1 id="_Programs_00-running.pod6-ENVIRONMENT_VARIABLES">43.3 ENVIRONMENT VARIABLES</h1>
 <p>Rakudo's behavior can be tweaked by a (growing) number of environment variables; this section attempts to document all those currently in use.</p>
 <a name="t43.3.1"></a><h2 id="_Programs_00-running.pod6-Module_Loading">43.3.1 Module Loading</h2>
 <ul><li><p><span class="code">RAKUDOLIB</span>, <span class="code">PERL6LIB</span> (<i>Str</i>; <span class="code">src/core/Inc.pm</span>)</p>
</li></ul> <pre class="code">Appends a comma-delimited list of paths to C&amp;lt;@INC&gt;. C&amp;lt;RAKUDOLIB&gt; is evaluated first.</pre>
 <p><span class="code">RAKUDO_MODULE_DEBUG</span> (<i>Bool</i>; <span class="code">src/Perl6/ModuleLoader.pm</span>) Causes the module loader to print debugging information to standard error.</p>
 <a name="t43.3.2"></a><h2 id="_Programs_00-running.pod6-Error_Message_Verbosity_and_Strictness">43.3.2 Error Message Verbosity and Strictness</h2>
 <p><span class="code">RAKUDO_NO_DEPRECATIONS</span> (<i>Bool</i>; <span class="code">src/core/Deprecations.pm</span>) If true, suppresses deprecation warnings triggered by the <span class="code">is DEPRECATED</span> trait.</p>
 <p><span class="code">RAKUDO_DEPRECATIONS_FATAL</span> (<i>Bool</i>; <span class="code">src/core/Deprecations.pm</span>) If true, deprecation warnings become thrown exceptions.</p>
 <p><span class="code">RAKUDO_VERBOSE_STACKFRAME</span> (<i>UInt</i>; <span class="code">src/core/Backtrace.pm</span>) Displays source code in stack frames surrounded by the specified number of lines of context.</p>
 <p><span class="code">RAKUDO_BACKTRACE_SETTING</span> (<i>Bool</i>; <span class="code">src/core/Backtrace.pm</span>) Controls whether .setting files are included in backtraces.</p>
 <a name="t43.3.3"></a><h2 id="_Programs_00-running.pod6-Affecting_Precompilation">43.3.3 Affecting Precompilation</h2>
 <p><span class="code">RAKUDO_PREFIX</span> (<i>Str</i>; <span class="code">src/core/CompUnit/RepositoryRegistry.pm</span>) When this is set, Rakudo will look for the standard repositories (perl, vendor, site) in the specified directory. This is intended as an escape hatch for build-time bootstrapping issues, where Rakudo may be built as an unprivileged user without write access to the runtime paths in NQP's config.</p>
 <p><span class="code">RAKUDO_PRECOMP_DIST</span> (<span class="code">src/core/CompUnit/PrecompilationRepository.pm</span>)</p>
 <p><span class="code">RAKUDO_PRECOMP_LOADING</span> (<span class="code">src/core/CompUnit/PrecompilationRepository.pm</span>)</p>
 <p><span class="code">RAKUDO_PRECOMP_WITH</span> (<span class="code">src/core/CompUnit/PrecompilationRepository.pm</span>) These are internal variables for passing serialized state to precompilation jobs in child processes. Please do not set them manually.</p>
 <a name="t43.3.4"></a><h2 id="_Programs_00-running.pod6-Other">43.3.4 Other</h2>
 <p><span class="code">RAKUDO_ERROR_COLOR</span> (<i>Bool</i>; <span class="code">src/core/Exception.pm</span>) Controls whether to emit ANSI codes for error highlighting. Defaults to true if unset, except on Win32.</p>
 <p><span class="code">RAKUDO_MAX_THREADS</span> (<i>UInt</i>; <span class="code">src/core/ThreadPoolScheduler.pm</span>) Override the default maximum number of threads used by a thread pool.</p>
 <p><span class="code">RAKUDO_JDB_PORT</span> (<i>Str</i>; <span class="code">src/core/CompUnit/PrecompilationRepository.pm</span>) In <span class="code">perl6-jdb-server</span> for setting the jdb port</p>
 <p><span class="code">RAKUDO_PRECOMP_NESTED_JDB</span> and <span class="code">RAKUDO_JDB_PORT</span> (<i>Str</i>; <span class="code">src/core/CompUnit/PrecompilationRepository.pm</span>) <span class="code">RAKUDO_PRECOMP_NESTED_JDB</span> uses <span class="code">perl6-jdb-server</span> with increasing ports for precompilation and <span class="code">RAKUDO_JDB_PORT</span> in <span class="code">perl6-jdb-server</span> is for setting the jdb port.</p>
 <p><span class="code">TMPDIR</span>, <span class="code">TEMP</span>, <span class="code">TMP</span> (<i>Str</i>; <span class="code">src/core/IO/Spec/</span>) The <span class="code">IO::Spec::Unix.tmpdir</span> method will return <span class="code">$TMPDIR</span> if it points to a directory with full access permissions for the current user, with a fallback default of <span class="code">'/tmp'</span>.</p>
 <p><span class="code">IO::Spec::Cygwin</span> and <span class="code">IO::Spec::Win32</span> use more Win32-appropriate lists which also include the <span class="code">%TEMP%</span> and <span class="code">%TMP%</span> environment variables.</p>
 <p><span class="code">PATH</span>, <span class="code">Path</span> (<i>Str</i>; <span class="code">src/core/IO/Spec/</span>) The <span class="code">IO::Spec::Unix.path</span> method splits <span class="code">$PATH</span> as a shell would; i.e. as a colon-separated list. <span class="code">IO::Spec::Cygwin</span> inherits this from <span class="code">IO::Spec::Unix</span>.</p>
 <p><span class="code">IO::Spec::Win32.path</span> will read the first defined of either <span class="code">%PATH%</span> or <span class="code">%Path%</span> as a semicolon-delimited list.</p>
</div> <!-- /Programs/01-debugging.pod6 --><div class="pod-body"><a id="_Programs_01-debugging.pod6"></a><a name="t44"><h1 class="title">44 Debugging</h1></a> <p class="subtitle">Debug Perl 6 programs</p> <p>There are at least two useful debuggers available for Rakudo:</p>
 <ul><li><p><a href="https://modules.perl6.org/repo/Debugger::UI::CommandLine">Debugger::UI::CommandLine</a></p>
</li></ul> <pre class="code">A command-line debugger frontend for Rakudo.</pre>
 <ul><li><p><a href="https://modules.perl6.org/repo/Grammar::Debugger">Grammar::Debugger</a> (and <span class="code">Grammar::Tracer</span> in the same distribution)</p>
</li></ul> <pre class="code">Simple tracing and debugging support for Perl 6 grammars</pre>
 <p>Please see the documentation for these programs for further information.</p>
 <p>Historically others have existed and others are likely to be written in future, check the <a href="https://modules.perl6.org/">Perl 6 Modules</a> website.</p>
</div> <!-- /type/AST.pod6 --><div class="pod-body"><a id="_type_AST.pod6"></a><a name="t45"><h1 class="title">45 class AST</h1></a> <p class="subtitle">Abstract representation of a piece of source code</p> <pre class="code">class AST { }</pre>
 <p>An <span class="code">AST</span> or <i>Abstract Syntax Tree</i> is a partially processed representation of a program. ASTs are return values of the <span class="code">quasi</span> quoting construct, and are typically used within macros to generate code that is inserted in the calling location of the macro.</p>
 <p>There is no API defined for ASTs yet. Hopefully that will emerge as part of the work on macros.</p>
</div> <!-- /type/Any.pod6 --><div class="pod-body"><a id="_type_Any.pod6"></a><a name="t46"><h1 class="title">46 class Any</h1></a> <p class="subtitle">Thing/object</p> <pre class="code">class Any is Mu { ... }</pre>
 <p>While <a href="#_type_Mu.pod6">Mu</a> is the root of the Perl 6 class hierarchy, <span class="code">Any</span> is the class that serves as a default base class for new classes, and as the base class for most built-in classes.</p>
 <p>Since Perl 6 intentionally confuses items and single-element lists, most methods in <span class="code">Any</span> are also present on class <a href="#_type_List.pod6">List</a>, and coerce to List or a list-like type.</p>
 <a name="t46.1"></a><h1 id="_type_Any.pod6-Methods">46.1 Methods</h1>
 <a name="t46.1.1"></a><h2 id="_type_Any.pod6-method_ACCEPTS">46.1.1 method ACCEPTS</h2>
 <p>Defined as:</p>
 <pre class="code">multi method ACCEPTS(Any:D: Mu $other)</pre>
 <p>Usage:</p>
 <pre class="code">EXPR.ACCEPTS(EXPR);</pre>
 <p>Returns <span class="code">True</span> if <span class="code">$other === self</span> (i.e. it checks object identity).</p>
 <p>Many built-in types override this for more specific comparisons</p>
 <a name="t46.1.2"></a><h2 id="_type_Any.pod6-method_any">46.1.2 method any</h2>
 <p>Defined as:</p>
 <pre class="code">method any() returns Junction:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.any</pre>
 <p>Interprets the invocant as a list and creates an <span class="code">any</span>-<a href="#_type_Junction.pod6">Junction</a> from it.</p>
 <pre class="code">say so 2 == &amp;lt;1 2 3&gt;.any;        # True
say so 5 == &amp;lt;1 2 3&gt;.any;        # False</pre>
 <a name="t46.1.3"></a><h2 id="_type_Any.pod6-method_all">46.1.3 method all</h2>
 <p>Defined as:</p>
 <pre class="code">method all() returns Junction:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.all</pre>
 <p>Interprets the invocant as a list and creates an <span class="code">all</span>-<a href="#_type_Junction.pod6">Junction</a> from it.</p>
 <pre class="code">say so 1 &amp;lt; &amp;lt;2 3 4&gt;.all;         # True
say so 3 &amp;lt; &amp;lt;2 3 4&gt;.all;         # False</pre>
 <a name="t46.1.4"></a><h2 id="_type_Any.pod6-method_one">46.1.4 method one</h2>
 <p>Defined as:</p>
 <pre class="code">method one() returns Junction:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.one</pre>
 <p>Interprets the invocant as a list and creates a <span class="code">one</span>-<a href="#_type_Junction.pod6">Junction</a> from it.</p>
 <pre class="code">say so 1 == (1, 2, 3).one;      # True
say so 1 == (1, 2, 1).one;      # False</pre>
 <a name="t46.1.5"></a><h2 id="_type_Any.pod6-method_none">46.1.5 method none</h2>
 <p>Defined as:</p>
 <pre class="code">method none() returns Junction:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.none</pre>
 <p>Interprets the invocant as a list and creates a <span class="code">none</span>-<a href="#_type_Junction.pod6">Junction</a> from it.</p>
 <pre class="code">say so 1 == (1, 2, 3).none;     # False
say so 4 == (1, 2, 3).none;     # True</pre>
 <a name="t46.1.6"></a><h2 id="_type_Any.pod6-method_list">46.1.6 method list</h2>
 <p>Interprets the invocant as a list, and returns that <a href="#_type_List.pod6">List</a>.</p>
 <pre class="code">say 42.list.^name;           # List
say 42.list.elems;           # 1</pre>
 <a name="t46.1.7"></a><h2 id="_type_Any.pod6-method_push">46.1.7 method push</h2>
 <p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty <span class="code">Array</span>, unless the undefined value implements <span class="code">Positional</span> already. The argument provided will then be pushed into the newly created Array.</p>
 <pre class="code">my %h;
dd %h&amp;lt;a&gt;; # Any (and therefor undefined)
%h&amp;lt;a&gt;.push(1); # .push on Any
dd %h; # «Hash %h = {:a($[1])}␤» # please note the Array</pre>
 <a name="t46.1.8"></a><h2 id="_type_Any.pod6-routine_reverse">46.1.8 routine reverse</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    reverse(*@list ) returns List:D
multi method reverse(List:D:) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">reverse(LIST)
LIST.reverse</pre>
 <p>Returns a list with the same elements in reverse order.</p>
 <p>Note that <span class="code">reverse</span> always refers to reversing elements of a list; to reverse the characters in a string, use <a href="#_routine_flip.pod6">flip</a>.</p>
 <p>Examples:</p>
 <pre class="code">say &amp;lt;hello world!&gt;.reverse      #  world! hello
say reverse ^10                 # 9 8 7 6 5 4 3 2 1 0</pre>
 <a name="t46.1.9"></a><h2 id="_type_Any.pod6-method_sort">46.1.9 method sort</h2>
 <p>Sorts iterables with <span class="code">infix:&lt;cmp></span> or given code object and returns a new <span class="code">List</span>.</p>
 <p>Examples:</p>
 <pre class="code">say &amp;lt;b c a&gt;.sort;                           # a b c
say 'bca'.comb.sort.join;                   # abc
say 'bca'.comb.sort({$^b cmp $^a}).join;    # cba
say '231'.comb.sort(&amp;amp;infix:«&amp;lt;=&gt;»).join;     # 123</pre>
 <a name="t46.1.10"></a><h2 id="_type_Any.pod6-method_map">46.1.10 method map</h2>
 <p>Defined as:</p>
 <pre class="code">proto method map(|) is nodal { * }
multi method map(\SELF: &amp;amp;block;; :$label, :$item)
multi method map(HyperIterable:D: &amp;amp;block;; :$label)</pre>
 <p><span class="code">map</span> will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call. The returned values of the code object will become elements of the returned <span class="code">Seq</span>.</p>
 <a name="t46.1.11"></a><h2 id="_type_Any.pod6-method_deepmap">46.1.11 method deepmap</h2>
 <p>Defined as:</p>
 <pre class="code">method deepmap(&amp;amp;block --&gt;List) is nodal</pre>
 <p><span class="code">deepmap</span> will apply <span class="code">&amp;block</span> to each element and return a new <span class="code">List</span> with the return values of <span class="code">&amp;block</span>, unless the element does the <span class="code">Iterable</span> role. For those elements <span class="code">deepmap</span> will descend recursively into the sublist.</p>
 <pre class="code">dd [[1,2,3],[[4,5],6,7]].deepmap(*+1);
# OUTPUT«[[2, 3, 4], [[5, 6], 7, 8]]␤»</pre>
 <a name="t46.1.12"></a><h2 id="_type_Any.pod6-method_duckmap">46.1.12 method duckmap</h2>
 <p>Defined as:</p>
 <pre class="code">method duckmap(&amp;amp;block) is rw is nodal</pre>
 <p><span class="code">duckmap</span> will apply <span class="code">&amp;block</span> on each element and return a new list with defined return values of the block. For undefined return values, <span class="code">duckmap</span> will try to descend into the element if that element implements <span class="code">Iterable</span>.</p>
 <pre class="code">my @a = [1,[2,3],4];
dd @a.duckmap({ $_ ~~ Int ?? $_++ !! Any });
# OUTPUT«(1, (2, 3), 4)␤»</pre>
 <a name="t46.1.13"></a><h2 id="_type_Any.pod6-method_flat">46.1.13 method flat</h2>
 <p>Interprets the invocant as a list, flattens it, and returns that list. Please note that <span class="code">.flat</span> will not solve the halting problem for you. If you flat an infinite list <span class="code">.flat</span> may return that infinite list, eating all your RAM in the process.</p>
 <pre class="code">say ((1, 2), (3)).elems;        # 2
say ((1, 2), (3)).flat.elems;   # 3</pre>
 <a name="t46.1.14"></a><h2 id="_type_Any.pod6-method_eager">46.1.14 method eager</h2>
 <p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.</p>
 <pre class="code">say (1..10).eager;              # 1 2 3 4 5 6 7 8 9 10</pre>
 <a name="t46.1.15"></a><h2 id="_type_Any.pod6-method_elems">46.1.15 method elems</h2>
 <p>Interprets the invocant as a list, and returns the number of elements in the list.</p>
 <pre class="code">say 42.elems;                   # 1
say &amp;lt;a b c&gt;.elems;              # 3</pre>
 <a name="t46.1.16"></a><h2 id="_type_Any.pod6-method_end">46.1.16 method end</h2>
 <p>Interprets the invocant as a list, and returns the last index of that list.</p>
 <pre class="code">say 6.end;                      # 0
say &amp;lt;a b c&gt;.end;                # 2</pre>
 <a name="t46.1.17"></a><h2 id="_type_Any.pod6-method_pairup">46.1.17 method pairup</h2>
 <pre class="code">method pairup() returns List</pre>
 <p>Interprets the invocant as a list, and constructs a list of <a href="#_type_Pair.pod6">pairs</a> from it, in the same way that assignment to a <a href="#_type_Hash.pod6">Hash</a> does. That is, it takes two consecutive elements and constructs a pair from them, unless the item in the key position already is a pair (in which case the pair is passed is passed through, and the next list item, if any, is considered to be a key again).</p>
 <pre class="code">say (a =&gt; 1, 'b', 'c').pairup.perl;     # ("a" =&gt; 1, "b" =&gt; "c").list</pre>
 <a name="t46.1.18"></a><h2 id="_type_Any.pod6-sub_exit">46.1.18 sub exit</h2>
 <pre class="code">sub exit(Int() $status = 0)</pre>
 <p>Exits the current process with return code <span class="code">$status</span>.</p>
 TODO maybe find a better place to document &amp;exit
</div> <!-- /type/Array.pod6 --><div class="pod-body"><a id="_type_Array.pod6"></a><a name="t47"><h1 class="title">47 class Array</h1></a> <p class="subtitle">Sequence of itemized values</p> <pre class="code">class Array is List { ... }</pre>
 <p>An <span class="code">Array</span> is a <a href="#_type_List.pod6">List</a> which forces all its elements to be scalar containers, which means you can assign to array elements.</p>
 <a name="t47.1"></a><h1 id="_type_Array.pod6-Methods">47.1 Methods</h1>
 <a name="t47.1.1"></a><h2 id="_type_Array.pod6-routine_pop">47.1.1 routine pop</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    pop(Array:D )
multi method pop(Array:D:)</pre>
 <p>Usage:</p>
 <pre class="code">pop ARRAY
ARRAY.pop</pre>
 <p>Removes and returns the last item from the array. Fails for an empty array.</p>
 <p>Example:</p>
 <pre class="code">&gt; my @foo = &amp;lt;a b&gt;;
a b
&gt; @foo.pop;
b
&gt; pop @foo
a
&gt; pop @foo
Element popped from empty list</pre>
 <a name="t47.1.2"></a><h2 id="_type_Array.pod6-routine_push">47.1.2 routine push</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    push(Array:D, **@values) returns Array:D
multi method push(Array:D: **@values) returns Array:D</pre>
 <p>Usage:</p>
 <pre class="code">push ARRAY, VALUES
ARRAY.push(VALUES)
ARRAY.push: VALUES</pre>
 <p>Adds the <span class="code">@values</span> to the end of the array, and returns the modified list. Fails for infinite arrays.</p>
 <p>Example:</p>
 <pre class="code">my @foo = &amp;lt;a b c&gt;;
@foo.push: 'd';
say @foo;                   # a b c d</pre>
 <p>Note that <span class="code">push</span> does not attempt to flatten its argument list. If you pass an array or list as the thing to push, it becomes one additional element:</p>
 <pre class="code">my @a = &amp;lt;a b c&gt;;
my @b = &amp;lt;d e f&gt;;
@a.push: @b;
say @a.elems;               # 4
say @a[3].join;             # def</pre>
 <p>Only if you supply multiple values as separate arguments to <span class="code">push</span> are multiple values added to the array:</p>
 <pre class="code">my @a = '1';
my @b = &amp;lt;a b&gt;;
my @c = &amp;lt;E F&gt;;
@a.push: @b, @c;
say @a.elems;                # 3</pre>
 <p>See <a href="#46-method append">method append</a> for when you want to append multiple values that are stored in a single array.</p>
 <a name="t47.1.3"></a><h2 id="_type_Array.pod6-method_append">47.1.3 method append</h2>
 <p>Defined as</p>
 <pre class="code">sub append(\array, elems)
multi method append(Array:D: \values)
multi method append(Array:D: **@values is raw)</pre>
 <p>Usage:</p>
 <pre class="code">ARRAY.append(LIST)
append ARRAY, LIST</pre>
 <p>Appends the argument list to the array passed as the first argument. This modifies the array in-place. Returns the modified array.</p>
 <p>The difference from method <span class="code">push</span> is that with an array or list argument, <span class="code">append</span> appends several elements (one for each array or list element), whereas <span class="code">push</span> appends just one element.</p>
 <p>Example:</p>
 <pre class="code">my @a = &amp;lt;a b c&gt;;
my @b = &amp;lt;d e f&gt;;
@a.append: @b;
say @a.elems;               # 6
say @a;                     # a b c d e f</pre>
 <a name="t47.1.4"></a><h2 id="_type_Array.pod6-routine_shift">47.1.4 routine shift</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    shift(Array:D )
multi method shift(Array:D:)</pre>
 <p>Usage:</p>
 <pre class="code">shift ARRAY
ARRAY.shift</pre>
 <p>Removes and returns the first item from the array. Fails for an empty arrays.</p>
 <p>Example:</p>
 <pre class="code">my @foo = &amp;lt;a b&gt;;
say @foo.shift;             # a
say @foo.shift;             # b
say @foo.shift;             # Element shifted from empty list</pre>
 <a name="t47.1.5"></a><h2 id="_type_Array.pod6-routine_unshift">47.1.5 routine unshift</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    unshift(Array:D, **@values) returns Array:D
multi method unshift(Array:D: **@values) returns Array:D</pre>
 <p>Usage:</p>
 <pre class="code">unshift ARRAY, VALUES
ARRAY.unshift(VALUES)
ARRAY.unshift: VALUES</pre>
 <p>Adds the <span class="code">@values</span> to the start of the array, and returns the modified array. Fails if <span class="code">@values</span> is infinite.</p>
 <p>Example:</p>
 <pre class="code">my @foo = &amp;lt;a b c&gt;;
@foo.unshift: 1, 3 ... 11;
say @foo;                   # (1 3 5 7 9 11) a b c</pre>
 <p>The notes in <a href="#46-method push">the documentation for method push</a> apply, regarding how many elements are added to the array.</p>
 <p><a href="#46-method prepend">#method prepend</a> is the equivalent for adding multiple elements from one list or array.</p>
 <a name="t47.1.6"></a><h2 id="_type_Array.pod6-method_prepend">47.1.6 method prepend</h2>
 <p>Defined as</p>
 <pre class="code">sub prepend(\array, elems)
multi method prepend(Array:D: \values)
multi method prepend(Array:D: **@values is raw)</pre>
 <p>Usage:</p>
 <pre class="code">ARRAY.prepend(LIST)
prepend ARRAY, LIST</pre>
 <p>Adds the elements from <span class="code">LIST</span> to the front of the array, modifying it in-place.</p>
 <p>Example:</p>
 <pre class="code">my @foo = &amp;lt;a b c&gt;;
@foo.prepend: 1, 3 ... 11;
say @foo;                   # 1 3 5 7 9 11 a b c</pre>
 <a name="t47.1.7"></a><h2 id="_type_Array.pod6-routine_splice">47.1.7 routine splice</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    splice(@list,  $start, $elems?, *@replacement) returns Array
multi method splice(Array:D $start, $elems?, *@replacement) returns Array</pre>
 <p>Usage:</p>
 <pre class="code">splice(ARRAY, START, ELEMS?, REPLACEMENT?)
ARRAY.splice(START, ELEMS?, REPLACEMENT?)</pre>
 <p>Deletes <span class="code">$elems</span> elements starting from index <span class="code">$start</span> from the <span class="code">Array</span>, returns them and replaces them by <span class="code">@replacement</span>. If <span class="code">$elems</span> is omitted, all the elements starting from index <span class="code">$start</span> are deleted.</p>
 <p>Example:</p>
 <pre class="code">my @foo = &amp;lt;a b c d e f g&gt;;
say @foo.splice(2, 3, &amp;lt;M N O P&gt;);        # c d e
say @foo;                                # a b M N O P f g</pre>
 <a name="t47.1.8"></a><h2 id="_type_Array.pod6-method_shape">47.1.8 method shape</h2>
 <p>Defined as:</p>
 <pre class="code">method shape() { (*,) }</pre>
 <p>Usage:</p>
 <pre class="code">ARRAY.shape</pre>
 <p>Returns the shape of the array as a list.</p>
 <p>Example:</p>
 <pre class="code">my @foo[2;3] = ( &amp;lt; 1 2 3 &gt;, &amp;lt; 4 5 6 &gt; ); # Array with fixed dimensions
say @foo.shape;                          # (2 3)
my @bar = ( &amp;lt; 1 2 3 &gt;, &amp;lt; 4 5 6 &gt; );      # Normal array (of arrays)
say @bar.shape;                          # (*)</pre>
 <a name="t47.1.9"></a><h2 id="_type_Array.pod6-method_default">47.1.9 method default</h2>
 <p>Defined as:</p>
 <pre class="code">method default</pre>
 <p>Usage:</p>
 <pre class="code">Array.default</pre>
 <p>Returns the default value of the invocant, i.e. the value which is returned when trying to access an element in the <span class="code">Array</span> which has not been previously initialized or when accessing an element which has explicitly been set to <span class="code">Nil</span>. Unless the <span class="code">Array</span> is declared as having a default value by using the <a href="#_routine_is default.pod6">is default</a> trait the method returns the type object <span class="code">(Any)</span>.</p>
 <pre class="code">my @a1 = 1, "two", 2.718;
say @a1.default;                                       # (Any)
say @a1[4];                                            # (Any)

my @a2 is default(17) = 1, "two", 3;
say @a2.default;                                       # 17
say @a2[4];                                            # 17
@a2[1] = Nil;                                          # (resets element to its default)
say @a2[1];                                            # 17</pre>
 <a name="t47.1.10"></a><h2 id="_type_Array.pod6-method_of">47.1.10 method of</h2>
 <p>Defined as:</p>
 <pre class="code">method of</pre>
 <p>Usage:</p>
 <pre class="code">Array.of</pre>
 <p>Returns the type constraint for the values of the invocant. By default, i.e. if no type constraint is given during declaration, the method returns <span class="code">(Mu)</span>.</p>
 <pre class="code">my @a1 = 1, 'two', 3.14159;              # (no type constraint specified)
say @a1.of;                              # (Mu)

my Int @a2 = 1, 2, 3;                    # (values must be of type Int)
say @a2.of;                              # (Int)
@a2.push: 'd';                           # throws X::TypeCheck::Assignment</pre>
</div> <!-- /type/Associative.pod6 --><div class="pod-body"><a id="_type_Associative.pod6"></a><a name="t48"><h1 class="title">48 role Associative</h1></a> <p class="subtitle">Object that supports looking up values by key</p> <pre class="code">role Associative { }</pre>
 <p>A common role for types that support name-based lookup through <span class="code">postcircumfix:&lt;{ }> </span>, for example <a href="#_type_Hash.pod6">Hash</a> and <a href="#_type_Map.pod6">Map</a>.</p>
 <p>The <span class="code">%</span> sigil restricts variables to objects that do <span class="code">Associative</span>.</p>
 <p>Associative does not provide any methods.</p>
</div> <!-- /type/Attribute.pod6 --><div class="pod-body"><a id="_type_Attribute.pod6"></a><a name="t49"><h1 class="title">49 class Attribute</h1></a> <p class="subtitle">Member variable</p> <pre class="code">class Attribute { }</pre>
 <p>In Perl 6 lingo, an <i>attribute</i> refers to a per-instance/object storage slot. An <span class="code">Attribute</span> is used to talk about classes' and roles' attributes on the meta level.</p>
 <p>Normal usage of attributes does not require the user to use class Attribute explicitly.</p>
 <p>The usual way to obtain an object of type <span class="code">Attribute</span> is by introspection:</p>
 <pre class="code">class Useless {
    has @!things;
}
my $a = Useless.^attributes(:local)[0];
say $a.name;            # @!things
say $a.package;         # Useless()
say $a.has_accessor;    # False

# modifying an attribute from the outside
# this is usually not possible, but since Attribute
# is at the level of the meta class, all is fair game
my $instance = Useless.new;
$a.set_value($instance, [1, 2, 3]);
say $a.get_value($instance);        # 1 2 3</pre>
 <a name="t49.1"></a><h1 id="_type_Attribute.pod6-Methods">49.1 Methods</h1>
 <a name="t49.1.1"></a><h2 id="_type_Attribute.pod6-method_name">49.1.1 method name</h2>
 <p>Defined as:</p>
 <pre class="code">method name(Attribute:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">ATTRIBUTE.name</pre>
 <p>Returns the name of the attribute. Note that this is always the private name, so if an attribute is declared as <span class="code">has $.a</span>, the name returned is <span class="code">$!a</span>.</p>
 <a name="t49.1.2"></a><h2 id="_type_Attribute.pod6-method_package">49.1.2 method package</h2>
 <p>Defined as:</p>
 <pre class="code">method package(Attribute:D:) returns Mu:U</pre>
 <p>Usage:</p>
 <pre class="code">ATTRIBUTE.package</pre>
 <p>Returns the package (class/grammar/role) to which this attribute belongs.</p>
 <a name="t49.1.3"></a><h2 id="_type_Attribute.pod6-method_has_accessor">49.1.3 method has_accessor</h2>
 <p>Defined as:</p>
 <pre class="code">method has_accessor(Attribute:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">ATTRIBUTE.has_accessor</pre>
 <p>Returns <span class="code">True</span> if the attribute has a public accessor method.</p>
 <a name="t49.1.4"></a><h2 id="_type_Attribute.pod6-method_readonly">49.1.4 method readonly</h2>
 <p>Defined as:</p>
 <pre class="code">method readonly(Attribute:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">ATTRIBUTE.readonly</pre>
 <p>Returns <span class="code">True</span> for readonly attributes, which is the default. Returns <span class="code">False</span> for attributes marked as <span class="code">is rw</span>.</p>
 <a name="t49.1.5"></a><h2 id="_type_Attribute.pod6-method_type">49.1.5 method type</h2>
 <p>Defined as:</p>
 <pre class="code">method type(Attribute:D:) returns Mu</pre>
 <p>Usage:</p>
 <pre class="code">ATTRIBUTE.type</pre>
 <p>Returns the type constraint of the attribute.</p>
 <a name="t49.1.6"></a><h2 id="_type_Attribute.pod6-method_get_value">49.1.6 method get_value</h2>
 <p>Defined as:</p>
 <pre class="code">method get_value(Attribute:D: Mu $instance)</pre>
 <p>Usage:</p>
 <pre class="code">my $val = ATTRIBUTE.get_value(OBJECT)</pre>
 <p>Returns the value stored in this attribute of object <span class="code">$instance</span>.</p>
 <p>Note that this method violates encapsulation of the object, and should be used with care. Here be dragons.</p>
 <a name="t49.1.7"></a><h2 id="_type_Attribute.pod6-method_set_value">49.1.7 method set_value</h2>
 <p>Defined as:</p>
 <pre class="code">method set_value(Attribute:D: Mu $instance, Mu \new_val)</pre>
 <p>Usage:</p>
 <pre class="code">ATTRIBUTE.set_value(OBJECT, NEW_VALUE)</pre>
 <p>Binds the value <span class="code">new_val</span> to this attribute of object <span class="code">$instance</span>.</p>
 <p>Note that this method violates encapsulation of the object, and should be used with care. Here be dragons.</p>
 <a name="t49.1.8"></a><h2 id="_type_Attribute.pod6-trait_is_required">49.1.8 trait is required</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt; (Attribute $attr, :$required!)</pre>
 <p>Marks an attribute as being required. If a value is not provided during object construction, an exception is thrown.</p>
 <pre class="code">class Foo {
   has $.bar is required;
   has $.baz;
}

Foo.new(bar =&gt; 42) # works
Foo.new(baz =&gt; 42) # fails - bar is required</pre>
 <p><span class="code">is required</span> doesn't just affect the default constructor, it checks for the attribute at a lower level, so it will work for custom constructors written using <a href="#_routine_bless.pod6">bless</a>.</p>
 <a name="t49.1.9"></a><h2 id="_type_Attribute.pod6-trait_is_rw">49.1.9 trait is rw</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt; (Attribute:D $attr, :$rw!)</pre>
 <p>Marks an attribute as read/write as opposed to the default <span class="code">readonly</span>. The default accessor for the attribute will return a writable value.</p>
 <pre class="code">class Foo {
   has $.bar is rw;
   has $.baz;
}

my $foo = Foo.new;
$foo.bar = 42; # works
$foo.baz = 42; # fails</pre>
</div> <!-- /type/Backtrace.pod6 --><div class="pod-body"><a id="_type_Backtrace.pod6"></a><a name="t50"><h1 class="title">50 class Backtrace</h1></a> <p class="subtitle">Snapshot of the dynamic call stack</p> <pre class="code">class Backtrace is List { ... }</pre>
 <p>A backtrace shows the dynamic call stack, usually leading up to a point where an exception was thrown.</p>
 <p>It is a List of <a href="#_type_Backtrace::Frame.pod6">Backtrace::Frame</a> objects. Its default stringification excludes backtrace frames that are deemed unnecessary or confusing, for example routines like <span class="code">&amp;die</span> are hidden by default.</p>
 <a name="t50.1"></a><h1 id="_type_Backtrace.pod6-Methods">50.1 Methods</h1>
 <a name="t50.1.1"></a><h2 id="_type_Backtrace.pod6-method_new">50.1.1 method new</h2>
 <p>Defined as:</p>
 <pre class="code">proto method new(*@, *%) {*}
multi method new()</pre>
 <p>Usage:</p>
 <pre class="code">$backtrace = Backtrace.new</pre>
 <p>Creates a new backtrace, using its calling location as the origin of the backtrace.</p>
 <a name="t50.1.2"></a><h2 id="_type_Backtrace.pod6-method_Str">50.1.2 method Str</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Str(Backtrace:D:) returns Str:D:</pre>
 <p>Usage:</p>
 <pre class="code">BACKTRACE.Str</pre>
 <p>Returns a concise string representation of the backtrace, omitting routines marked as <span class="code">is hidden-from-backtrace</span>, and at the discretion of the implementor, also some routines from the setting.</p>
 <a name="t50.1.3"></a><h2 id="_type_Backtrace.pod6-method_full">50.1.3 method full</h2>
 <p>Defined as:</p>
 <pre class="code">multi method full(Backtrace:D:) returns Str:D:</pre>
 <p>Usage:</p>
 <pre class="code">BACKTRACE.full</pre>
 <p>Returns a full string representation of the backtrace, including hidden frames, compiler-specific frames and those from the setting.</p>
</div> <!-- /type/Backtrace/Frame.pod6 --><div class="pod-body"><a id="_type_Backtrace_Frame.pod6"></a><a name="t51"><h1 class="title">51 class Backtrace::Frame</h1></a> <p class="subtitle">Single frame of a </p> <pre class="code">class Backtrace::Frame { }</pre>
 <p>A single backtrace frame. It identifies a location in the source code.</p>
 <a name="t51.1"></a><h1 id="_type_Backtrace_Frame.pod6-Methods">51.1 Methods</h1>
 <a name="t51.1.1"></a><h2 id="_type_Backtrace_Frame.pod6-method_file">51.1.1 method file</h2>
 <p>Defined as:</p>
 <pre class="code">method file(Backtrace::Frame:D) returns Str</pre>
 <p>Usage:</p>
 <pre class="code">FRAME.file</pre>
 <p>Returns the file name.</p>
 <a name="t51.1.2"></a><h2 id="_type_Backtrace_Frame.pod6-method_line">51.1.2 method line</h2>
 <p>Defined as:</p>
 <pre class="code">method line(Backtrace::Frame:D) returns Int</pre>
 <p>Usage:</p>
 <pre class="code">FRAME.line</pre>
 <p>Returns the line number (line numbers start to count from 1).</p>
 <a name="t51.1.3"></a><h2 id="_type_Backtrace_Frame.pod6-method_code">51.1.3 method code</h2>
 <p>Defined as:</p>
 <pre class="code">method code(Backtrace::Frame:D)</pre>
 <p>Usage:</p>
 <pre class="code">FRAME.code</pre>
 <p>Returns the code object into which <span class="code">.file</span> and <span class="code">.line</span> point, if available.</p>
 <a name="t51.1.4"></a><h2 id="_type_Backtrace_Frame.pod6-method_subname">51.1.4 method subname</h2>
 <p>Defined as:</p>
 <pre class="code">method subname(Backtrace::Frame:D) returns Str</pre>
 <p>Usage:</p>
 <pre class="code">FRAME.subname</pre>
 <p>Returns the name of the enclosing subroutine.</p>
 <a name="t51.1.5"></a><h2 id="_type_Backtrace_Frame.pod6-method_is-hidden">51.1.5 method is-hidden</h2>
 <p>Defined as:</p>
 <pre class="code">method is-hidden(Backtrace::Frame:D) return Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">FRAME.is-hidden</pre>
 <p>Returns <span class="code">True</span> if the frame is marked as hidden with the <span class="code">is hidden-from-backtrace</span> trait.</p>
 <a name="t51.1.6"></a><h2 id="_type_Backtrace_Frame.pod6-method_is-routine">51.1.6 method is-routine</h2>
 <p>Defined as:</p>
 <pre class="code">method is-routine(Backtrace::Frame:D) return Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">FRAME.is-routine</pre>
 <p>Return <span class="code">True</span> if the frame point into a routine (and not into a mere <a href="#_type_Block.pod6">Block</a>).</p>
 <a name="t51.1.7"></a><h2 id="_type_Backtrace_Frame.pod6-method_is-setting">51.1.7 method is-setting</h2>
 <p>Defined as:</p>
 <pre class="code">method is-setting(Backtrace::Frame:D) return Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">FRAME.is-setting</pre>
 <p>Returns <span class="code">True</span> if the frame is part of a setting.</p>
</div> <!-- /type/Bag.pod6 --><div class="pod-body"><a id="_type_Bag.pod6"></a><a name="t52"><h1 class="title">52 class Bag</h1></a> <p class="subtitle">Immutable collection of distinct objects with integer weights</p> <pre class="code">class Bag does Baggy { }</pre>
 <p>A <span class="code">Bag</span> is an immutable bag/multiset, meaning a collection of distinct elements in no particular order that each have an integer weight assigned to them signifying how many copies of that element are considered "in the bag". (For <i>mutable</i> bags, see <a href="#_type_BagHash.pod6">BagHash</a> instead.)</p>
 <p><span class="code">Bag</span>s are often used for performing weighted random selections - see <a href="#_routine_pick.pod6">.pick</a> and <a href="#_routine_roll.pod6">.roll</a>.</p>
 <p>Objects/values of any type are allowed as bag elements. Within a <span class="code">Bag</span>, items that would compare positively with the <a href="===">===</a> operator are considered the same element, with the number of how many there are as its weight. But of course you can also easily get back the expanded list of items (without the order):</p>
 <pre class="code">my $breakfast = bag &amp;lt;spam eggs spam spam bacon spam&gt;; 
 
 say $breakfast.elems;      # 3 
 say $breakfast.keys.sort;  # bacon eggs spam 
 
 say $breakfast.total;      # 6 
 say $breakfast.kxxv.sort;  # bacon eggs spam spam spam spam 
</pre>
 <p><span class="code">Bag</span>s can be treated as object hashes using the <span class="code">{ }</span> postcircumfix operator, or the <span class="code">&lt; > </span> operator for literal string keys, which returns the corresponding integer weight for keys that are elements of the bag, and <span class="code">0</span> for keys that aren't:</p>
 <pre class="code">say $breakfast&amp;lt;bacon&gt;;    # 1
say $breakfast&amp;lt;spam&gt;;     # 4
say $breakfast&amp;lt;sausage&gt;;  # 0</pre>
 <a name="t52.1"></a><h1 id="_type_Bag.pod6-Creating_Bag_objects">52.1 Creating <span class="code">Bag</span> objects</h1>
 <p><span class="code">Bag</span>s can be composed using the <a href="#51-sub bag">bag</a> subroutine (or <span class="code">Bag.new</span>, for which it is a shorthand). Any positional parameters, regardless of their type, become elements of the bag:</p>
 <pre class="code">my $n = bag "a" =&gt; 0, "b" =&gt; 1, "c" =&gt; 2, "c" =&gt; 2;
say $n.keys.perl;        # ("a" =&gt; 0, "b" =&gt; 1, "c" =&gt; 2, "c" =&gt; 2).list
say $n.keys.map(&amp;amp;WHAT);  # (Pair) (Pair) (Pair) (Pair)
say $n.values.perl;      # (1, 1, 1, 1).list</pre>
 <p>Alternatively, the <span class="code">.Bag</span> coercer (or its functional form, <span class="code">Bag()</span>) can be called on an existing object to coerce it to a <span class="code">Bag</span>. Its semantics depend on the type and contents of the object. In general it evaluates the object in list context and creates a bag with the resulting items as elements, although for Hash-like objects or Pair items, only the keys become elements of the bag, and the (cumulative) values become the associated integer weights:</p>
 <pre class="code">my $n = ("a" =&gt; 0, "b" =&gt; 1, "c" =&gt; 2, "c" =&gt; 2).Bag;
say $n.keys.perl;        # ("b", "c").list
say $n.keys.map(&amp;amp;WHAT);  # (Str) (Str)
say $n.values.perl;      # (1, 4).list</pre>
 <p>Furthermore, you can get a <span class="code">Bag</span> by using bag operators (see next section) on objects of other types such as <a href="#_type_List.pod6">List</a>, which will internally call <span class="code">.Bag</span> on them before performing the operation. Be aware of the tight precedence of those operators though, which may require you to use parens around arguments:</p>
 <pre class="code">say (1..5) (+) 4;  # bag(1, 2, 3, 4(2), 5)</pre>
 <a name="t52.2"></a><h1 id="_type_Bag.pod6-Operators">52.2 Operators</h1>
 <p>Perl 6 provides common set and bag operators, which can take <span class="code">Bag</span>s (or any other collections) as input, and return result as <span class="code">Bool</span>, <span class="code">Set</span> or <span class="code">Bag</span> values. For example:</p>
 <pre class="code">my ($a, $b) = bag(2, 2, 4), bag(2, 3, 3, 4); 
 
 say $a (&amp;lt;) $b;   # True 
 say $a (&amp;lt;+) $b;  # False 
 say $a (^) $b;   # set(3) 
 say $a (+) $b;   # bag(2(3), 4(2), 3(2)) 
 
 # Unicode versions: 
 say $a ⊂ $b;  # True 
 say $a ≼ $b;  # False 
 say $a ⊖ $b;  # set(3) 
 say $a ⊎ $b;  # bag(2(3), 4(2), 3(2)) 
</pre>
 <p>See <a href="#_language_setbagmix.pod6-Set/Bag_Operators">Set/Bag Operators</a> for a complete list of set and bag operators with detailed explanations.</p>
 <a name="t52.3"></a><h1 id="_type_Bag.pod6-Subroutines">52.3 Subroutines</h1>
 <a name="t52.3.1"></a><h2 id="_type_Bag.pod6-sub_bag">52.3.1 sub bag</h2>
 <pre class="code">sub bag(*@args --&gt; Bag)</pre>
 <p>Creates a new <span class="code">Bag</span> from <span class="code">@args</span>.</p>
 <a name="t52.4"></a><h1 id="_type_Bag.pod6-See_Also">52.4 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/BagHash.pod6 --><div class="pod-body"><a id="_type_BagHash.pod6"></a><a name="t53"><h1 class="title">53 class BagHash</h1></a> <p class="subtitle">Mutable collection of distinct objects with integer weights</p> <pre class="code">class BagHash does Baggy { }</pre>
 <p>A <span class="code">BagHash</span> is a mutable bag/multiset, meaning a collection of distinct elements in no particular order that each have an integer weight assigned to them signifying how many copies of that element are considered "in the bag". (For <i>immutable</i> bags, see <a href="#_type_Bag.pod6">Bag</a> instead.)</p>
 <p>Objects/values of any type are allowed as bag elements. Within a <span class="code">BagHash</span>, items that would compare positively with the <a href="===">===</a> operator are considered the same element, with the number of how many there were as its weight. But of course you can also easily get back the expanded list of items (without the order):</p>
 <pre class="code">my $breakfast = &amp;lt;spam eggs spam spam bacon spam&gt;.BagHash; 
 
 say $breakfast.elems;      # 3 
 say $breakfast.keys.sort;  # bacon eggs spam 
 
 say $breakfast.total;      # 6 
 say $breakfast.kxxv.sort;  # bacon eggs spam spam spam spam 
</pre>
 <p><span class="code">BagHash</span>es can be treated as object hashes using the <span class="code">{ }</span> postcircumfix operator, which returns the corresponding integer weight for keys that are elements of the bag, and <span class="code">0</span> for keys that aren't. It can also be used to modify weights; setting a weight to <span class="code">0</span> automatically removes that element from the bag, and setting a weight to a positive number adds that element if it didn't already exist:</p>
 <pre class="code">say $breakfast&amp;lt;bacon&gt;;     # 1 
 say $breakfast&amp;lt;spam&gt;;      # 4 
 say $breakfast&amp;lt;sausage&gt;;   # 0 
 
 $breakfast&amp;lt;sausage&gt; = 2; 
 $breakfast&amp;lt;bacon&gt;--; 
 say $breakfast.kxxv.sort;  # eggs sausage sausage spam spam spam spam 
</pre>
 <a name="t53.1"></a><h1 id="_type_BagHash.pod6-Creating_BagHash_objects">53.1 Creating <span class="code">BagHash</span> objects</h1>
 <p><span class="code">BagHash</span>es can be composed using <span class="code">BagHash.new</span>. Any positional parameters, regardless of their type, become elements of the bag:</p>
 <pre class="code">my $n = BagHash.new: "a" =&gt; 0, "b" =&gt; 1, "c" =&gt; 2, "c" =&gt; 2;
say $n.keys.perl;        # ("a" =&gt; 0, "b" =&gt; 1, "c" =&gt; 2, "c" =&gt; 2).list
say $n.keys.map(&amp;amp;WHAT);  # (Pair) (Pair) (Pair) (Pair)
say $n.values.perl;      # (1, 1, 1, 1).list</pre>
 <p>Alternatively, the <span class="code">.BagHash</span> coercer (or its functional form, <span class="code">BagHash()</span>) can be called on an existing object to coerce it to a <span class="code">BagHash</span>. Its semantics depend on the type and contents of the object. In general it evaluates the object in list context and creates a bag with the resulting items as elements, although for Hash-like objects or Pair items, only the keys become elements of the bag, and the (cumulative) values become the associated integer weights:</p>
 <pre class="code">my $n = ("a" =&gt; 0, "b" =&gt; 1, "c" =&gt; 2, "c" =&gt; 2).BagHash;
say $n.keys.perl;        # ("b", "c").list
say $n.keys.map(&amp;amp;WHAT);  # (Str) (Str)
say $n.values.perl;      # (1, 4).list</pre>
 <a name="t53.2"></a><h1 id="_type_BagHash.pod6-Operators">53.2 Operators</h1>
 <p>Perl 6 provides common set and bag operators, which can take <span class="code">BagHash</span>es (or any other collections) as input, and return result as <span class="code">Bool</span>, <span class="code">Set</span> or <span class="code">Bag</span> values. For example:</p>
 <pre class="code">my ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); 
 
 say $a (&amp;lt;) $b;   # True 
 say $a (&amp;lt;+) $b;  # False 
 say $a (^) $b;   # set(3) 
 say $a (+) $b;   # bag(2(3), 4(2), 3(2)) 
 
 # Unicode versions: 
 say $a ⊂ $b;  # True 
 say $a ≼ $b;  # False 
 say $a ⊖ $b;  # set(3) 
 say $a ⊎ $b;  # bag(2(3), 4(2), 3(2)) 
</pre>
 <p>See <a href="#_language_setbagmix.pod6-Set/Bag_Operators">Set/Bag Operators</a> for a complete list of set and bag operators with detailed explanations.</p>
 <a name="t53.3"></a><h1 id="_type_BagHash.pod6-See_Also">53.3 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/Baggy.pod6 --><div class="pod-body"><a id="_type_Baggy.pod6"></a><a name="t54"><h1 class="title">54 role Baggy</h1></a> <p class="subtitle">Collection of distinct weighted objects</p> <pre class="code">role Baggy does QuantHash { }</pre>
 <p>A role for collections of weighted objects. See <a href="#_type_Bag.pod6">Bag</a>, <a href="#_type_BagHash.pod6">BagHash</a>, and <a href="#_type_Mixy.pod6">Mixy</a>.</p>
 <a name="t54.1"></a><h1 id="_type_Baggy.pod6-Methods">54.1 Methods</h1>
 <a name="t54.1.1"></a><h2 id="_type_Baggy.pod6-method_grab">54.1.1 method grab</h2>
 <p>Defined as:</p>
 <pre class="code">multi method grab(Baggy:D:) returns Any
multi method grab(Baggy:D: $count) returns Array:D</pre>
 <p>Like <a href="#53-method pick">pick</a>, a <span class="code">grab</span> returns a random selection of elements, weighted by the values corresponding to each key. Unlike <span class="code">pick</span>, it works only on mutable structures, e.g. <a href="#_type_BagHash.pod6">BagHash</a>. Use of <span class="code">grab</span> on an immutable structure results in an <span class="code">X::Immutable</span> exception. If <span class="code">*</span> is passed as <span class="code">$count</span>, or <span class="code">$count</span> is greater than or equal to the <a href="#53-method total">total</a> of the invocant, then <span class="code">total</span> elements from the invocant are returned in a random sequence.</p>
 <p>Grabbing decrements the grabbed key's weight by one (deleting the key when it reaches 0). By definition, the <span class="code">total</span> of the invocant also decreases by one, so the probabilities stay consistent through subsequent <span class="code">grab</span> operations.</p>
 <pre class="code">my $cars = ('Ford' =&gt; 2, 'Rover' =&gt; 3).BagHash;
say $cars.grab;                                   # Ford
say $cars.grab(2);                                # [Rover Rover]
say $cars.grab(*);                                # [Rover Ford]

my $breakfast = ('eggs' =&gt; 2, 'bacon' =&gt; 3).Bag;
say $breakfast.grab;                              # throws X::Immutable exception</pre>
 <a name="t54.1.2"></a><h2 id="_type_Baggy.pod6-method_grabpairs">54.1.2 method grabpairs</h2>
 <p>Defined as:</p>
 <pre class="code">multi method grabpairs(Baggy:D:) returns Any
multi method grabpairs(Baggy:D: $count) returns List:D</pre>
 <p>Returns a <span class="code">Pair</span> or a <span class="code">List</span> of <span class="code">Pair</span>s depending on the version of the method being invoked. Each <span class="code">Pair</span> returned has an element of the invocant as its key and the elements weight as its value. Unlike <a href="#_routine_pickpairs.pod6">pickpairs</a>, it works only on mutable structures, e.g. <a href="#_type_BagHash.pod6">BagHash</a>. Use of <span class="code">grabpairs</span> on 'an immutable structure results in an <span class="code">X::Immutable</span> exception. If <span class="code">*</span> is passed as <span class="code">$count</span>, or <span class="code">$count</span> is greater than or equal to the number of <a href="#53-method elems">elements</a> of the invocant, then all element/weight <span class="code">Pair</span>s from the invocant are returned in a random sequence.</p>
 <p>What makes <span class="code">grabpairs</span> different from <a href="#53-method pickpairs">pickpairs</a> is that the 'grabbed' elements are in fact removed from the invocant.</p>
 <pre class="code">my $breakfast = (eggs =&gt; 2, bacon =&gt; 3).BagHash;
say $breakfast.grabpairs;                         # bacon =&gt; 3
say $breakfast;                                   # BagHash.new(eggs(2))
say $breakfast.grabpairs(1);                      # (eggs =&gt; 2)
say $breakfast.grabpairs(*);                      # []

my $diet = ('eggs' =&gt; 2, 'bacon' =&gt; 3).Bag;
say $diet.grabpairs;                              # throws X::Immutable exception</pre>
 <a name="t54.1.3"></a><h2 id="_type_Baggy.pod6-method_pick">54.1.3 method pick</h2>
 <p>Defined as:</p>
 <pre class="code">multi method pick(Baggy:D:) returns Any
multi method pick(Baggy:D: $count) returns Seq:D</pre>
 <p>Like an ordinary list <a href="#_type_List.pod6-routine_pick">pick</a>, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used. The underlying metaphor for picking is that you're pulling colored marbles out a bag. (For "picking with replacement" see <a href="#53-method roll">roll</a> instead). If <span class="code">*</span> is passed as <span class="code">$count</span>, or <span class="code">$count</span> is greater than or equal to the <a href="#53-method total">total</a> of the invocant, then <span class="code">total</span> elements from the invocant are returned in a random sequence.</p>
 <p>Note that each <span class="code">pick</span> invocation maintains its own private state and has no effect on subsequent <span class="code">pick</span> invocations.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs bacon bacon bacon&gt;;
say $breakfast.pick;                              # eggs
say $breakfast.pick(2);                           # (eggs bacon)

say $breakfast.total;                             # 4
say $breakfast.pick(*);                           # (bacon bacon bacon eggs)</pre>
 <a name="t54.1.4"></a><h2 id="_type_Baggy.pod6-method_pickpairs">54.1.4 method pickpairs</h2>
 <p>Defined as:</p>
 <pre class="code">multi method pickpairs(Baggy:D:) returns Pair:D
multi method pickpairs(Baggy:D: $count) returns List:D</pre>
 <p>Returns a <span class="code">Pair</span> or a <span class="code">List</span> of <span class="code">Pair</span>s depending on the version of the method being invoked. Each <span class="code">Pair</span> returned has an element of the invocant as its key and the elements weight as its value. The elements are 'picked' without replacement. If <span class="code">*</span> is passed as <span class="code">$count</span>, or <span class="code">$count</span> is greater than or equal to the number of <a href="#53-method elems">elements</a> of the invocant, then all element/weight <span class="code">Pair</span>s from the invocant are returned in a random sequence.</p>
 <p>Note that each <span class="code">pickpairs</span> invocation maintains its own private state and has no effect on subsequent <span class="code">pickpairs</span> invocations.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs bacon bacon bacon&gt;;
say $breakfast.pickpairs;                         # eggs =&gt; 1
say $breakfast.pickpairs(1);                      # (bacon =&gt; 3)
say $breakfast.pickpairs(*);                      # (eggs =&gt; 1 bacon =&gt; 3)</pre>
 <a name="t54.1.5"></a><h2 id="_type_Baggy.pod6-method_roll">54.1.5 method roll</h2>
 <p>Defined as:</p>
 <pre class="code">multi method roll(Baggy:D:) returns Any:D
multi method roll(Baggy:D: $count) returns Seq:D</pre>
 <p>Like an ordinary list <a href="#_type_List.pod6-routine_roll">roll</a>, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used. The underlying metaphor for rolling is that you're throwing <span class="code">$count</span> dice that are independent of each other, which (in bag terms) is equivalent to picking a colored marble out your bag and then putting it back, and doing this <span class="code">$count</span> times. In dice terms, the number of marbles corresponds to the number of sides, and the number of marbles of the same color corresponds to the number of sides with the same color. (For "picking without replacement" see <a href="#53-method pick">pick</a> instead).</p>
 <p>If <span class="code">*</span> is passed to <span class="code">$count</span>, returns a lazy, infinite sequence of randomly chosen elements from the invocant.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs bacon bacon bacon&gt;;
say $breakfast.roll;                                  # bacon
say $breakfast.roll(3);                               # (bacon eggs bacon)

my $random_dishes := $breakfast.roll(*);
say $random_dishes[^5];                               # (bacon eggs bacon bacon bacon)</pre>
 <a name="t54.1.6"></a><h2 id="_type_Baggy.pod6-method_pairs">54.1.6 method pairs</h2>
 <p>Defined as:</p>
 <pre class="code">method pairs(Baggy:D:) returns Seq:D</pre>
 <p>Returns all elements and their respective weights as a <a href="#_type_Seq.pod6">Seq</a> of <span class="code">Pair</span>s where the key is the element itself and the value is the weight of that element.</p>
 <pre class="code">my $breakfast = bag &amp;lt;bacon eggs bacon&gt;;
my $seq = $breakfast.pairs;
say $seq.sort;                                    # (bacon =&gt; 2 eggs =&gt; 1)</pre>
 <a name="t54.1.7"></a><h2 id="_type_Baggy.pod6-method_antipairs">54.1.7 method antipairs</h2>
 <p>Defined as:</p>
 <pre class="code">method antipairs(Baggy:D:) returns Seq:D</pre>
 <p>Returns all elements and their respective weights as a <a href="#_type_Seq.pod6">Seq</a> of <a href="#_type_Pair.pod6">Pairs</a>, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method <a href="#53-method pairs">pairs</a>.</p>
 <pre class="code">my $breakfast = bag &amp;lt;bacon eggs bacon&gt;;
my $seq = $breakfast.antipairs;
say $seq.sort;                                    # (1 =&gt; eggs 2 =&gt; bacon)</pre>
 <a name="t54.1.8"></a><h2 id="_type_Baggy.pod6-method_invert">54.1.8 method invert</h2>
 <p>Defined as:</p>
 <pre class="code">method invert(Baggy:D:) returns Seq:D</pre>
 <p>Returns all elements and their respective weights as a <a href="#_type_Seq.pod6">Seq</a> of <a href="#_type_Pair.pod6">Pairs</a>, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method <a href="#53-method pairs">pairs</a>. Except for some esoteric cases <span class="code">invert</span> on a Baggy type returns the same result as <a href="#53-method_antipairs">antipairs</a>.</p>
 <pre class="code">my $breakfast = bag &amp;lt;bacon eggs bacon&gt;;
my $seq = $breakfast.invert;
say $seq.sort;                                    # (1 =&gt; eggs 2 =&gt; bacon)</pre>
 <a name="t54.1.9"></a><h2 id="_type_Baggy.pod6-method_classify-list">54.1.9 method classify-list</h2>
 <p>Defined as:</p>
 <pre class="code">multi method classify-list(&amp;amp;test, *@list) returns Baggy:D</pre>
 <p>Transforms a list of values into a classification of those values according to <span class="code">&amp;test</span> and stores the results in the invocant which is then returned. Each key represents the classification for one or more of the incoming list values, and the corresponding value contains the number of list values classified by <span class="code">&amp;test</span> into the category of the associated key.</p>
 <p>As an example, suppose that we have a list of <span class="code">Int</span>s which we would like to classify into two categories, namely even and odd numbers. Here's one way to solve this problem:</p>
 <pre class="code">my $b = BagHash.new();
dd $b.classify-list( { $_ %% 2 ?? 'even' !! 'odd' }, (1, 7, 6, 3, 2) );
# returns: ("even"=&gt;2,"odd"=&gt;3).BagHash</pre>
 <p>The printed result shows us that of the numbers in the list two were classified as even and three as odd. Note that the result doesn't show us <b>which</b> numbers were classified as being even or odd. If that's what you want, use the <a href="#_type_List.pod6-routine_classify">classify</a> routine in <a href="#_type_List.pod6">List</a> instead.</p>
 <a name="t54.1.10"></a><h2 id="_type_Baggy.pod6-method_categorize-list">54.1.10 method categorize-list</h2>
 TODO
 <a name="t54.1.11"></a><h2 id="_type_Baggy.pod6-method_keys">54.1.11 method keys</h2>
 <p>Defined as:</p>
 <pre class="code">method keys(Baggy:D:) returns List:D</pre>
 <p>Returns a list of all keys in the <span class="code">Baggy</span> object without taking their individual weights into account as opposed to <a href="#53-method kxxv">kxxv</a>.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs spam spam spam&gt;;
say $breakfast.keys.sort;                        # (eggs spam)

my $n = ("a" =&gt; 5, "b" =&gt; 2).BagHash;
say $n.keys.sort;                                # (a b)</pre>
 <a name="t54.1.12"></a><h2 id="_type_Baggy.pod6-method_values">54.1.12 method values</h2>
 <p>Defined as:</p>
 <pre class="code">method values(Baggy:D:) returns List:D</pre>
 <p>Returns a list of all values, i.e. weights, in the <span class="code">Baggy</span> object.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs spam spam spam&gt;;
say $breakfast.values.sort;                      # (1 3)

my $n = ("a" =&gt; 5, "b" =&gt; 2, "a" =&gt; 1).BagHash;
say $n.values.sort;                              # (2 6)</pre>
 <a name="t54.1.13"></a><h2 id="_type_Baggy.pod6-method_kv">54.1.13 method kv</h2>
 <p>Defined as:</p>
 <pre class="code">method kv(Baggy:D:) returns List:D</pre>
 <p>Returns a list of keys and values interleaved.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs spam spam spam&gt;;
say $breakfast.kv;                                # (spam 3 eggs 1)

my $n = ("a" =&gt; 5, "b" =&gt; 2, "a" =&gt; 1).BagHash;
say $n.kv;                                        # (a 6 b 2)</pre>
 <a name="t54.1.14"></a><h2 id="_type_Baggy.pod6-method_kxxv">54.1.14 method kxxv</h2>
 <p>Defined as:</p>
 <pre class="code">method kxxv(Baggy:D:) returns List:D</pre>
 <p>Returns a list of the keys of the invocant, with each key multiplied by its weight. Note that <span class="code">kxxv</span> only works for <span class="code">Baggy</span> types which have integer weights, i.e. <a href="#_type_Bag.pod6">Bag</a> and <a href="#_type_BagHash.pod6">BagHash</a>.</p>
 <pre class="code">my $breakfast = bag &amp;lt;spam eggs spam spam bacon&gt;;
say $breakfast.kxxv.sort;                         # (bacon eggs spam spam spam)

my $n = ("a" =&gt; 0, "b" =&gt; 1, "b" =&gt; 2).BagHash;
say $n.kxxv;                                      # (b b b)</pre>
 <a name="t54.1.15"></a><h2 id="_type_Baggy.pod6-method_elems">54.1.15 method elems</h2>
 <p>Defined as:</p>
 <pre class="code">method elems(Baggy:D:) returns Int:D</pre>
 <p>Returns the number of elements in the <span class="code">Baggy</span> object without taking the individual elements weight into account.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs spam spam spam&gt;;
say $breakfast.elems;                             # 2

my $n = ("b" =&gt; 9.4, "b" =&gt; 2).MixHash;
say $n.elems;                                     # 1</pre>
 <a name="t54.1.16"></a><h2 id="_type_Baggy.pod6-method_total">54.1.16 method total</h2>
 <p>Defined as:</p>
 <pre class="code">method total(Baggy:D:)</pre>
 <p>Returns the sum of weights for all elements in the <span class="code">Baggy</span> object.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs spam spam bacon&gt;;
say $breakfast.total;                             # 4

my $n = ("a" =&gt; 5, "b" =&gt; 1, "b" =&gt; 2).BagHash;
say $n.total;                                     # 8</pre>
 <a name="t54.1.17"></a><h2 id="_type_Baggy.pod6-method_default">54.1.17 method default</h2>
 <p>Defined as:</p>
 <pre class="code">method default(Baggy:D:) returns Int:D</pre>
 <p>Returns zero.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs bacon&gt;;
say $breakfast.default;                           # 0</pre>
 <a name="t54.1.18"></a><h2 id="_type_Baggy.pod6-method_hash">54.1.18 method hash</h2>
 <p>Defined as:</p>
 <pre class="code">method hash(Baggy:D:) returns Hash:D</pre>
 <p>Returns a <a href="#_type_Hash.pod6">Hash</a> where the elements of the invocant are the keys and their respective weights the values;</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs bacon bacon&gt;;
my $h = $breakfast.hash;
say $h.WHAT;                                      # (Hash)
say $h;                                           # {bacon =&gt; 2, eggs =&gt; 1}</pre>
 <a name="t54.1.19"></a><h2 id="_type_Baggy.pod6-method_Bool">54.1.19 method Bool</h2>
 <p>Defined as:</p>
 <pre class="code">method Bool(Baggy:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if the invocant contains at least one element.</p>
 <pre class="code">my $breakfast = ('eggs' =&gt; 1).BagHash;
say $breakfast.Bool;                              # True   (since we have one element)
$breakfast&amp;lt;eggs&gt; = 0;                             # weight == 0 will lead to element removal
say $breakfast.Bool;                              # False</pre>
 <a name="t54.1.20"></a><h2 id="_type_Baggy.pod6-method_Set">54.1.20 method Set</h2>
 <p>Defined as:</p>
 <pre class="code">method Set() returns Set:D</pre>
 <p>Returns a <a href="#_type_Set.pod6">Set</a> whose elements are the <a href="#53-method keys">keys</a> of the invocant.</p>
 <pre class="code">my $breakfast = (eggs =&gt; 2, bacon =&gt; 3).BagHash;
say $breakfast.Set;                               # set(bacon, eggs)</pre>
 <a name="t54.1.21"></a><h2 id="_type_Baggy.pod6-method_SetHash">54.1.21 method SetHash</h2>
 <p>Defined as:</p>
 <pre class="code">method SetHash() returns SetHash:D</pre>
 <p>Returns a <a href="#_type_SetHash.pod6">SetHash</a> whose elements are the <a href="#53-method keys">keys</a> of the invocant.</p>
 <pre class="code">my $breakfast = (eggs =&gt; 2, bacon =&gt; 3).BagHash;
my $sh = $breakfast.SetHash;
say $sh.WHAT;                                     # (SetHash)
say $sh.elems;                                    # 2</pre>
 <a name="t54.1.22"></a><h2 id="_type_Baggy.pod6-method_ACCEPTS">54.1.22 method ACCEPTS</h2>
 <p>Defined as:</p>
 <pre class="code">method ACCEPTS($other) returns Bool:D</pre>
 <p>Used in smart-matching if the right-hand side is a <span class="code">Baggy</span>.</p>
 <p>If the right hand side is the type object, i.e. <span class="code">Baggy</span>, the method returns <span class="code">True</span> if <span class="code">$other</span> <a href="#_routine_does.pod6-class_Mu">does</a> <span class="code">Baggy</span> otherwise <span class="code">False</span> is returned.</p>
 <p>If the right hand side is a <span class="code">Baggy</span> object, <span class="code">True</span> is returned only if <span class="code">$other</span> has the same elements, with the same weights, as the invocant.</p>
 <pre class="code">my $breakfast = bag &amp;lt;eggs bacon&gt;;
say $breakfast ~~ Baggy;                            # True
say $breakfast.does(Baggy);                         # True

my $second-breakfast = (eggs =&gt; 1, bacon =&gt; 1).Mix;
say $breakfast ~~ $second-breakfast;                # True

my $third-breakfast = (eggs =&gt; 1, bacon =&gt; 2).Bag;
say $second-breakfast ~~ $third-breakfast;          # False</pre>
 <a name="t54.2"></a><h1 id="_type_Baggy.pod6-See_Also">54.2 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/Blob.pod6 --><div class="pod-body"><a id="_type_Blob.pod6"></a><a name="t55"><h1 class="title">55 role Blob</h1></a> <p class="subtitle">Immutable buffer for binary data ('Binary Large OBject')</p> <pre class="code">role Blob[::T = uint8] does Positional[T] does Stringy { }</pre>
 <p>The <span class="code">Blob</span> role is an immutable interface to binary types, and offers a list-like interface to lists of integers, typically unsigned integers.</p>
 <a name="t55.1"></a><h1 id="_type_Blob.pod6-Methods">55.1 Methods</h1>
 <a name="t55.1.1"></a><h2 id="_type_Blob.pod6-method_new">55.1.1 method new</h2>
 <p>Defined as:</p>
 <pre class="code">method new(*@codes)</pre>
 <p>Usage:</p>
 <pre class="code">$blob = Blob.new(LIST)</pre>
 <p>Creates a <span class="code">Blob</span> from a list of integers.</p>
 <a name="t55.1.2"></a><h2 id="_type_Blob.pod6-method_Bool">55.1.2 method Bool</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Bool(Blob:D:)</pre>
 <p>Usage:</p>
 <pre class="code">BLOB.Bool</pre>
 <p>Returns <span class="code">False</span> if and only if the buffer is empty.</p>
 <a name="t55.1.3"></a><h2 id="_type_Blob.pod6-method_elems">55.1.3 method elems</h2>
 <p>Defined as:</p>
 <pre class="code">multi method elems(Blob:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">BLOB.elems</pre>
 <p>Returns the number of elements of the buffer.</p>
 <a name="t55.1.4"></a><h2 id="_type_Blob.pod6-method_decode">55.1.4 method decode</h2>
 <p>Defined as:</p>
 <pre class="code">multi method decode(Blob:D: Str:D $encoding = 'UTF-8') returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">BLOB.decode(ENCODING?)</pre>
 <p>Applies an encoding to turn the blob into a <a href="#_type_Str.pod6">Str</a>.</p>
 <a name="t55.1.5"></a><h2 id="_type_Blob.pod6-method_subbuf">55.1.5 method subbuf</h2>
 <p>Defined as:</p>
 <pre class="code">method subbuf(Int $from, Int $len = self.elems) returns Blob:D
method subbuf(Range $range) returns Blob:D</pre>
 <p>Usage:</p>
 <pre class="code">BLOB.subbuf(FROM, LENGTH?)
BLOB.subbuf(RANGE)</pre>
 <p>Extracts a part of the invocant buffer, starting from the index with elements <span class="code">$from</span>, and taking <span class="code">$len</span> elements (or less if the buffer is shorter), and creates a new buffer as the result.</p>
 <pre class="code">say Blob.new(1..10).subbuf(2, 4);    # Blob:0x&amp;lt;03 04 05 06&gt;
say Blob.new(1..10).subbuf(*-2);     # Blob:0x&amp;lt;09 0a&gt;
say Blob.new(1..10).subbuf(*-5,2);   # Blob:0x&amp;lt;06 07&gt;</pre>
 <p>For convenience, also allows a <span class="code">Range</span> to be specified to indicate which part of the invocant buffer you would like:</p>
 <pre class="code">say Blob.new(1..10).subbuf(2..5);    # Blob:0x&amp;lt;03 04 05 06&gt;</pre>
 <a name="t55.1.6"></a><h2 id="_type_Blob.pod6-method_unpack">55.1.6 method unpack</h2>
 <p>This method is considered <b>experimental</b>, in order to use it you will need to do:</p>
 <pre class="code">use experimental :pack;</pre>
 <p>Defined as:</p>
 <pre class="code">method unpack(Blob:D: $template) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">BLOB.unpack(TEMPLATE)</pre>
 <p>Extracts features from the blob according to the template string, and returns them as a list.</p>
 <p>The template string consists of zero or more units that begin with an ASCII letter, and are optionally followed by a quantifier. The quantifier can be <span class="code">*</span> (which typically stands for "use up the rest of the Blob here"), or a positive integer (without a <span class="code">+</span>).</p>
 <p>Whitespace between template units is ignored.</p>
 <p>Examples of valid templates include <span class="code">"A4 C n*"</span> and <span class="code">"A*"</span>.</p>
 <p>The following letters are recognized:</p>
 <table>
<tr><th>Letter</th> <th>Meaning</th></tr>
<tr><td>A</td> <td>Extract a string, where each element of the Blob maps to a codepoint</td></tr>
 <tr><td>a</td> <td>Same as A</td></tr>
 <tr><td>C</td> <td>Extract an element from the blob as an integer</td></tr>
 <tr><td>H</td> <td>Extracts a hex string</td></tr>
 <tr><td>L</td> <td>Extracts four elements and returns them as a single unsigned integer</td></tr>
 <tr><td>n</td> <td>Extracts two elements and combines them in "network" (big-endian) byte order into a single integer</td></tr>
 <tr><td>N</td> <td>Extracts four elements and combines them in "network" (big-endian) byte order into a single integer</td></tr>
 <tr><td>S</td> <td>Extracts two elements and returns them as a single unsigned integer</td></tr>
 <tr><td>v</td> <td>Same as S</td></tr>
 <tr><td>V</td> <td>Same as L</td></tr>
 <tr><td>x</td> <td>Drop an element from the blob (that is, ignore it)</td></tr>
 <tr><td>Z</td> <td>Same as A</td></tr>
</table> <a name="t55.1.7"></a><h2 id="_type_Blob.pod6-sub_pack">55.1.7 sub pack</h2>
 <p>This subroutine is considered <b>experimental</b>, in order to use it you will need to do:</p>
 <pre class="code">use experimental :pack;


sub pack(Str $template, *@items) returns Buf</pre>
 <p>Packs the given items according to the template and returns a buffer containing the packed bytes.</p>
 <p>The template string consists of zero or more units that begin with an ASCII letter, and are optionally followed by a quantifier. For details, see <a href="#_routine_unpack.pod6">unpack</a>.</p>
</div> <!-- /type/Block.pod6 --><div class="pod-body"><a id="_type_Block.pod6"></a><a name="t56"><h1 class="title">56 class Block</h1></a> <p class="subtitle">Code object with its own lexical scope</p> <pre class="code">class Block is Code { }</pre>
 <p>A <span class="code">Block</span> is a code object meant for small-scale code reuse. A block is created syntactically by a list of statements enclosed in curly braces.</p>
 <p>Without an explicit signature or placeholder arguments, a block has <span class="code">$_</span> as a positional argument</p>
 <pre class="code">my $block = { uc $_; };
say $block.WHAT;            # Block
say $block('hello');        # HELLO</pre>
 <p>A block can have a signature between <span class="code">-> </span> or <span class="code">&lt;-> </span> and the block:</p>
 <pre class="code">my $add = -&gt; $a, $b { $a + $b };
say $add(38, 4);            # 42</pre>
 <p>If the signature is introduced with <span class="code">&lt;-> </span>, then the parameters are marked as <span class="code">rw</span> by default:</p>
 <pre class="code">my $swap = &amp;lt;-&gt; $a, $b { ($a, $b) = ($b, $a) };

my ($a, $b) = (2, 4);
$swap($a, $b);
say $a;                     # 4</pre>
 <p>Blocks that aren't of type <span class="code">Routine</span> (which is a subclass of <span class="code">Block</span>) are transparent to <a href="#_syntax_return.pod6">return</a>.</p>
 <pre class="code">sub f() {
    say &amp;lt;a b c&gt;.map: { return 42 };
                   #   ^^^^^^   exits &amp;amp;f, not just the block
}</pre>
 <p>The last statement is the implicit return value of the block.</p>
 <pre class="code">say {1}.(); # OUTPUT«1␤»</pre>
 <p>Bare blocks in sink context are automatically executed:</p>
 <pre class="code">say 1;
{
    say 2;                  # executed directly, not a Block object
}
say 3;</pre>
</div> <!-- /type/Bool.pod6 --><div class="pod-body"><a id="_type_Bool.pod6"></a><a name="t57"><h1 class="title">57 enum Bool</h1></a> <p class="subtitle">Logical boolean</p> <pre class="code">enum Bool &amp;lt;False True&gt;</pre>
 <p>An enum for boolean true/false decisions.</p>
 <a name="t57.1"></a><h1 id="_type_Bool.pod6-Methods">57.1 Methods</h1>
 <a name="t57.1.1"></a><h2 id="_type_Bool.pod6-routine_succ">57.1.1 routine succ</h2>
 <pre class="code">method succ() returns Bool:D</pre>
 <p>Returns <span class="code">True</span>.</p>
 <pre class="code">say True.succ;                                    # True
say False.succ;                                   # True</pre>
 <a name="t57.1.2"></a><h2 id="_type_Bool.pod6-routine_pred">57.1.2 routine pred</h2>
 <pre class="code">method pred() returns Bool:D</pre>
 <p>Returns <span class="code">False</span>.</p>
 <pre class="code">say True.pred;                                    # False
say False.pred;                                   # False</pre>
 <a name="t57.1.3"></a><h2 id="_type_Bool.pod6-routine_enums">57.1.3 routine enums</h2>
 <pre class="code">method enums() returns Hash:D</pre>
 <p>Returns a <a href="#_type_Hash.pod6">Hash</a> of enum-pairs. Works on both the <span class="code">Bool</span> type and any key.</p>
 <pre class="code">say Bool.enums;                                   # {False =&gt; 0, True =&gt; 1}
say False.enums;                                  # {False =&gt; 0, True =&gt; 1}</pre>
 <a name="t57.2"></a><h1 id="_type_Bool.pod6-Operators">57.2 Operators</h1>
 <a name="t57.2.1"></a><h2 id="_type_Bool.pod6-prefix_?">57.2.1 prefix ?</h2>
 <pre class="code">multi sub prefix:&amp;lt;?&gt;(Mu) returns Bool:D</pre>
 <p>Coerces its argument to <span class="code">Bool</span>.</p>
 <a name="t57.2.2"></a><h2 id="_type_Bool.pod6-prefix_so">57.2.2 prefix so</h2>
 <pre class="code">multi sub prefix:&amp;lt;so&gt;(Mu) returns Bool:D</pre>
 <p>Coerces its argument to <span class="code">Bool</span>, has looser precedence than <span class="code">prefix:&lt;?> </span>.</p>
</div> <!-- /type/Buf.pod6 --><div class="pod-body"><a id="_type_Buf.pod6"></a><a name="t58"><h1 class="title">58 role Buf</h1></a> <p class="subtitle">Mutable buffer for binary data</p> <pre class="code">role Buf[::T] does Blob[T] { ... }</pre>
 <p>A <span class="code">Buf</span> is a mutable sequence of (usually unsigned) integers.</p>
 <pre class="code">my $b = Buf.new(1, 2, 3);
$b[1] = 42;</pre>
</div> <!-- /type/Callable.pod6 --><div class="pod-body"><a id="_type_Callable.pod6"></a><a name="t59"><h1 class="title">59 role Callable</h1></a> <p class="subtitle">Invocable code object</p> <pre class="code">role Callable { ... }</pre>
 <p>Role for objects which support calling them. It's used in <a href="#_type_Block.pod6">Block</a>, <a href="#_type_Routine.pod6">Routine</a>, <a href="#_type_Sub.pod6">Sub</a>, <a href="#_type_Method.pod6">Method</a>, <a href="#_type_Submethod.pod6">Submethod</a> and <a href="#_type_Macro.pod6">Macro</a> types.</p>
 <p>Callables can be stored in <span class="code">&amp;</span>-sigiled containers, the default type constraint of such a container is <span class="code">Callable</span>. A signature object can be used to force a check against the signature of the Callable to be stored into the container.</p>
 <pre class="code">my &amp;amp;a = {};
my &amp;amp;b = -&gt; {};
my &amp;amp;c = sub () {};
sub foo() {};
my &amp;amp;d = &amp;amp;foo;
my &amp;amp;f:(Int) = sub bar(Int) {};
my &amp;amp;f:(Str) = -&gt; Str {};</pre>
 <a name="t59.1"></a><h1 id="_type_Callable.pod6-Methods">59.1 Methods</h1>
 <a name="t59.1.1"></a><h2 id="_type_Callable.pod6-method_assuming">59.1.1 method assuming</h2>
 <pre class="code">method assuming(Callable:D $self: |primers)</pre>
 <p>Returns a <span class="code">Callable</span> that implements the same behaviour as the original, but has the values passed to .assuming already bound to the corresponding parameters.</p>
 <pre class="code">sub add(Int $x, Int $y) { $x + $y };
my &amp;amp;add_to_5 = &amp;amp;add.assuming(5);
say add_to_5(4); #-&gt; 9</pre>
 according to design docs it's Callable but in rakudo it's assuming is in Block
 <a name="t59.2"></a><h1 id="_type_Callable.pod6-Operators">59.2 Operators</h1>
 <a name="t59.2.1"></a><h2 id="_type_Callable.pod6-infix:&lt;∘>">59.2.1 <span class="code">infix:&lt;∘></span> <a name="535"></a><a name="536"></a></h2>
 <p>The function combinator <span class="code">infix:&lt;∘></span> or <span class="code">infix:&lt;o></span> combines two functions of arity one, so that the left function is called with the return value of the right function.</p>
 <pre class="code">sub f($p){ say 'f'; $p / 2 }
sub g($p){ say 'g'; $p * 2 }
my &amp;amp;f-g = &amp;amp;f ∘ &amp;amp;g;
say f-g(2); # OUTPUT«g␤f␤2␤»</pre>
</div> <!-- /type/Cancellation.pod6 --><div class="pod-body"><a id="_type_Cancellation.pod6"></a><a name="t60"><h1 class="title">60 class Cancellation</h1></a> <p class="subtitle">Removal of a task from a Scheduler before normal completion</p> <pre class="code">my class Cancellation { ... }</pre>
 <p>A low level part of the Perl 6 <a href="#_language_concurrency.pod6-Schedulers">concurrency</a> system. Some <a href="#_type_Scheduler.pod6">Scheduler</a> objects return a <span class="code">Cancellation</span> with the <a href="#_type_Scheduler.pod6-method_cue">.cue</a> method which can be used to cancel the scheduled execution before normal completion. <span class="code">Cancellation.cancelled</span> is a boolean that is true after <a href="#59-cancel">#cancel</a> is called.</p>
 <a name="t60.1"></a><h1 id="_type_Cancellation.pod6-Methods">60.1 Methods</h1>
 <a name="t60.1.1"></a><h2 id="_type_Cancellation.pod6-method_cancel">60.1.1 method cancel</h2>
 <p>Defined as:</p>
 <pre class="code">method cancel()</pre>
 <p>Usage:</p>
 <pre class="code">CANCELLATION.cancel</pre>
 <p>Cancels the scheduled execution of a task before normal completion.</p>
</div> <!-- /type/Capture.pod6 --><div class="pod-body"><a id="_type_Capture.pod6"></a><a name="t61"><h1 class="title">61 class Capture</h1></a> <p class="subtitle">Argument list suitable for passing to a </p> <pre class="code">class Capture does Positional does Associative { }</pre>
 <p>A Capture is a container for passing arguments to a code object. Captures are the flip-side of Signatures -- Captures at the caller define arguments, while Signatures at the callee define parameters.</p>
 <p>When you call <span class="code">print $a, $b</span>, the <span class="code">$a, $b</span> part is a Capture.</p>
 <p>Captures contain a list-like part for positional arguments and a hash-like part for named arguments. For the named arguments, Captures use a slightly different <i>syntax</i> than a normal List. There are two easy ways to make a named argument: 1) use an unquoted key naming a parameter, followed by <span class="code">=></span>, followed by the argument and 2) use a colon-pair literal named after the parameter:</p>
 <pre class="code">say unique 1, -2, 2, 3, as =&gt; { abs $_ }; # 1, -2, 3
# ... is the same thing as:
say unique 1, -2, 2, 3, :as({ abs $_ });  # 1, -2, 3
# Be careful not to quote the name of a named parameter:
say unique 1, -2, 2, 3, 'as' =&gt; { abs $_ }; # 1, -2, 2, 3, "as" =&gt; { ... }</pre>
 <p>A stand-alone Capture can also be made, stored, and used later. A literal Capture can be created by prefixing a term with a backslash <span class="code">\</span>. Commonly, this term will be a List of terms, from which any Pair literal will be placed in the named part, and all other terms will be placed in the positional part.</p>
 <pre class="code">my $c = \(42);          # Capture with one positional part
$c = \(1, 2, a =&gt; 'b'); # Capture with two positional and one named parts</pre>
 <p>To use such a Capture, you may use <span class="code">'|'</span> before it in a function call, and it will be as if the values in the Capture were passed directly to the function as arguments -- named arguments will be passed as named arguments and positional arguments will be passed as positional arguments. You may re-use the Capture as many times as you want, even with different functions.</p>
 <pre class="code">my $c = \(4, 2, 3);
reverse(|$c).say; # 3 2 4
sort(5,|$c).say;  # 2 3 4 5</pre>
 <p>Inside a Signature, a Capture may be created by prefixing a sigilless parameter with a vertical bar <span class="code">|</span>. This packs the remainder of the argument list into that parameter.</p>
 <pre class="code">f(1, 2, 3, a =&gt; 4, b =&gt; 5);
sub f($a, |c) {
    # c  is  \(2, 3, a =&gt; 4, b =&gt; 5)
}</pre>
 <p>Note that Captures are still Lists in that they may contain containers, not just values:</p>
 <pre class="code">my $b = 1;
my $c = \(4, 2, $b, 3);
sort(|$c).say;        # 1 2 3 4
$b = 6;
sort(|$c).say;        # 2 3 4 6</pre>
 <a name="t61.1"></a><h1 id="_type_Capture.pod6-Methods">61.1 Methods</h1>
 <a name="t61.1.1"></a><h2 id="_type_Capture.pod6-method_list">61.1.1 method list</h2>
 <p>Defined as:</p>
 <pre class="code">method list(Capture:D:) returns Positional</pre>
 <p>Usage:</p>
 <pre class="code">CAPTURE.list</pre>
 <p>Returns the positional part of the Capture.</p>
 <pre class="code">my Capture $c = \(2, 3, 5, apples =&gt; (red =&gt; 2));
say $c.list;                                      # (2 3 5)</pre>
 <a name="t61.1.2"></a><h2 id="_type_Capture.pod6-method_hash">61.1.2 method hash</h2>
 <p>Defined as:</p>
 <pre class="code">method hash(Capture:D:) returns Associative</pre>
 <p>Usage:</p>
 <pre class="code">CAPTURE.hash</pre>
 <p>Returns the named/hash part of the Capture.</p>
 <a name="t61.1.3"></a><h2 id="_type_Capture.pod6-method_elems">61.1.3 method elems</h2>
 <p>Defined as:</p>
 <pre class="code">method elems(Capture:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">CAPTURE.elems</pre>
 <p>Returns the number of positional elements in the Capture.</p>
 <pre class="code">my Capture $c = \(2, 3, 5, apples =&gt; (red =&gt; 2));
say $c.elems;                                     # 3</pre>
 <a name="t61.1.4"></a><h2 id="_type_Capture.pod6-method_keys">61.1.4 method keys</h2>
 <p>Defined as:</p>
 <pre class="code">multi method keys(Capture:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">$capture.keys</pre>
 <p>Returns a <a href="#_type_Seq.pod6">Seq</a> containing all positional keys followed by all named keys. For positional arguments the keys are the respective arguments ordinal position starting from zero.</p>
 <pre class="code">my $capture = \(2, 3, 5, apples =&gt; (red =&gt; 2));
say $capture.keys;                                # (0 1 2 apples)</pre>
 <a name="t61.1.5"></a><h2 id="_type_Capture.pod6-method_values">61.1.5 method values</h2>
 <p>Defined as:</p>
 <pre class="code">multi method values(Capture:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">$capture.values</pre>
 <p>Returns a <a href="#_type_Seq.pod6">Seq</a> containing all positional values followed by all named argument values.</p>
 <pre class="code">my $capture = \(2, 3, 5, apples =&gt; (red =&gt; 2));
say $capture.values;                              # (2 3 5 red =&gt; 2)</pre>
 <a name="t61.1.6"></a><h2 id="_type_Capture.pod6-method_kv">61.1.6 method kv</h2>
 <p>Defined as:</p>
 <pre class="code">multi method kv(Capture:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">$capture.kv</pre>
 <p>Returns a <a href="#_type_Seq.pod6">Seq</a> of alternating <a href="#60-method_keys">keys</a> and <a href="#60-method_values">values</a>. The positional keys and values, if any, comes first followed by the named keys and values.</p>
 <pre class="code">my $capture = \(2, 3, apples =&gt; (red =&gt; 2));
say $capture.kv;                                  # (0 2 1 3 apples red =&gt; 2)</pre>
 <a name="t61.1.7"></a><h2 id="_type_Capture.pod6-method_pairs">61.1.7 method pairs</h2>
 <p>Defined as:</p>
 <pre class="code">multi method pairs(Capture:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">$capture.pairs</pre>
 <p>Returns all arguments, the positional followed by the named, as a <a href="#_type_Seq.pod6">Seq</a> of <a href="#_type_Pair.pod6">Pairs</a>. Positional arguments have their respective ordinal value, starting at zero, as key while the named arguments have their names as key.</p>
 <pre class="code">my Capture $c = \(2, 3, apples =&gt; (red =&gt; 2));
say $c.pairs;                                     # (0 =&gt; 2 1 =&gt; 3 apples =&gt; red =&gt; 2)</pre>
 <a name="t61.1.8"></a><h2 id="_type_Capture.pod6-method_antipairs">61.1.8 method antipairs</h2>
 <p>Defined as:</p>
 <pre class="code">multi method antipairs(Capture:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">$capture.antipairs</pre>
 <p>Returns all arguments, the positional followed by the named, as a <a href="#_type_Seq.pod6">Seq</a> of <a href="#_type_Pair.pod6">pairs</a> where the keys and values have been swapped, i.e. the value becomes the key and the key becomes the value. This behavior is the opposite of the <a href="#60-method_pairs">pairs</a> method.</p>
 <pre class="code">my $capture = \(2, 3, apples =&gt; (red =&gt; 2));
say $capture.antipairs;                           # (2 =&gt; 0 3 =&gt; 1 (red =&gt; 2) =&gt; apples)</pre>
 <a name="t61.1.9"></a><h2 id="_type_Capture.pod6-method_Bool">61.1.9 method Bool</h2>
 <p>Defined as:</p>
 <pre class="code">method Bool(Capture:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">CAPTURE.Bool</pre>
 <p>Returns <span class="code">True</span> if the Capture contains at least one named or one positional argument.</p>
 <pre class="code">say \(1,2,3, apples =&gt; 2).Bool;                   # True
say \().Bool;                                     # False</pre>
 <a name="t61.1.10"></a><h2 id="_type_Capture.pod6-method_Capture">61.1.10 method Capture</h2>
 <p>Defined as:</p>
 <pre class="code">method Capture(Capture:D:) returns Capture:D</pre>
 <p>Usage:</p>
 <pre class="code">CAPTURE.Capture</pre>
 <p>Returns itself, i.e. the invocant.</p>
 <a name="t61.1.11"></a><h2 id="_type_Capture.pod6-method_Numeric">61.1.11 method Numeric</h2>
 <p>Defined as:</p>
 <pre class="code">method Numeric(Capture:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">CAPTURE.Numeric</pre>
 <p>Returns the number of positional elements in the Capture.</p>
 <pre class="code">say \(1,2,3, apples =&gt; 2).Numeric;                # 3</pre>
</div> <!-- /type/Channel.pod6 --><div class="pod-body"><a id="_type_Channel.pod6"></a><a name="t62"><h1 class="title">62 class Channel</h1></a> <p class="subtitle">Thread-safe queue for sending values from producers to consumers</p> <pre class="code">class Channel { ... }</pre>
 <p>A <span class="code">Channel</span> is a thread-safe queue that helps you to send a series of objects from one or more producers to one or more consumers. Each object will arrive at only one such consumer, selected by the scheduler. If there is only one consumer and one producer, order of objects is guaranteed to be preserved. Sending on a <span class="code">Channel</span> is non-blocking.</p>
 <pre class="code">my $c = Channel.new;
await (^10).map: {
    start {
        my $r = rand;
        sleep $r;
        $c.send($r);
    }
}
$c.close;
say $c.list;</pre>
 <p>Further examples can be found in the <a href="#_language_concurrency.pod6-Channels">concurrency page</a></p>
 <a name="t62.1"></a><h1 id="_type_Channel.pod6-Methods">62.1 Methods</h1>
 <a name="t62.1.1"></a><h2 id="_type_Channel.pod6-method_send">62.1.1 method send</h2>
 <p>Defined as:</p>
 <pre class="code">method send(Channel:D: \item)</pre>
 <p>Usage:</p>
 <pre class="code">CHANNEL.send(ITEM)</pre>
 <p>Enqueues an item into the <span class="code">Channel</span>. Throws an exception of type <a href="#_type_X::Channel::SendOnClosed.pod6">X::Channel::SendOnClosed</a> if the channel has been closed already. This call will <b>not</b> block waiting for a consumer to take the object. There is no set limit on the number of items that may be queued, so care should be taken to prevent runaway queueing.</p>
 <a name="t62.1.2"></a><h2 id="_type_Channel.pod6-method_receive">62.1.2 method receive</h2>
 <p>Defined as:</p>
 <pre class="code">method receive(Channel:D:)</pre>
 <p>Usage:</p>
 <pre class="code">CHANNEL.receive</pre>
 <p>Receives and removes an item from the channel. It blocks if no item is present, waiting for a <span class="code">send</span> from another thread.</p>
 <p>Throws an exception of type <a href="#_type_X::Channel::ReceiveOnClosed.pod6">X::Channel::ReceiveOnClosed</a> if the channel has been closed, and the last item has been removed already, or if <span class="code">close</span> is called while <span class="code">receive</span> is waiting for an item to arrive.</p>
 <p>If the channel has been marked as erratic with method <span class="code">fail</span>, and the last item has been removed, throws the argument that was given to <span class="code">fail</span> as an exception.</p>
 <p>See method <span class="code">poll</span> for a non-blocking version that won't throw exceptions.</p>
 <a name="t62.1.3"></a><h2 id="_type_Channel.pod6-method_poll">62.1.3 method poll</h2>
 <p>Defined as:</p>
 <pre class="code">method poll(Channel:D:)</pre>
 <p>Usage:</p>
 <pre class="code">CHANNEL.poll</pre>
 <p>Receives and removes an item from the channel. If no item is present, returns <span class="code">Nil</span> instead of waiting.</p>
 <p>See method <span class="code">receive</span> for a blocking version that properly responds to channel closing and failure.</p>
 <a name="t62.1.4"></a><h2 id="_type_Channel.pod6-method_close">62.1.4 method close</h2>
 <p>Defined as:</p>
 <pre class="code">method close(Channel:D:)</pre>
 <p>Usage:</p>
 <pre class="code">CHANNEL.close</pre>
 <p>Close the <span class="code">Channel</span>, normally. This makes subsequent <span class="code">send</span> calls die with <a href="#_type_X::Channel::SendOnClosed.pod6">X::Channel::SendOnClosed</a>. Subsequent calls of <span class="code">.receive</span> may still drain any remaining items that were previously sent, but if the queue is empty, will throw an <a href="#_type_X::Channel::ReceiveOnClosed.pod6">X::Channel::ReceiveOnClosed</a> exception. A <span class="code">Seq</span> produced by an <span class="code">@()</span> or by the <span class="code">.list</span> method will not terminate until this has been done.</p>
 <a name="t62.1.5"></a><h2 id="_type_Channel.pod6-method_list">62.1.5 method list</h2>
 <p>Defined as:</p>
 <pre class="code">method list(Channel:D:) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">CHANNEL.list</pre>
 <p>Returns a <span class="code">Seq</span> which will iterate items in the queue and removes each item from the queue as it iterates. This can only terminate once the <span class="code">close</span> method has been called.</p>
 <a name="t62.1.6"></a><h2 id="_type_Channel.pod6-method_closed">62.1.6 method closed</h2>
 <p>Defined as:</p>
 <pre class="code">method closed(Channel:D:) returns Promise:D</pre>
 <p>Usage:</p>
 <pre class="code">CHANNEL.closed</pre>
 <p>Returns a promise that will be kept once the channel is closed by a call to method <span class="code">close</span>.</p>
 <a name="t62.1.7"></a><h2 id="_type_Channel.pod6-method_fail">62.1.7 method fail</h2>
 <p>Defined as:</p>
 <pre class="code">method fail(Channel:D: $error)</pre>
 <p>Usage:</p>
 <pre class="code">CHANNEL.fail</pre>
 <p>Closes the <span class="code">Channel</span> (that is, makes subsequent <span class="code">send</span> calls die), and enqueues the error to be thrown as the final element in the channel. Method <span class="code">receive</span> will throw that error as an exception. Does nothing if the channel has already been closed or <span class="code">.fail</span> has already been called on it.</p>
 <a name="t62.1.8"></a><h2 id="_type_Channel.pod6-method_Supply">62.1.8 method Supply</h2>
 <p>Defined as:</p>
 <pre class="code">method Supply(Channel:D:)</pre>
 <p>Usage:</p>
 <pre class="code">CHANNEL.Supply</pre>
 <p>This returns an <span class="code">on-demand</span> <a href="#_type_Supply.pod6">Supply</a> that emits a value for every value received on the Channel. <span class="code">done</span> will be called on the <span class="code">Supply</span> when the <a href="#_type_Channel.pod6">Channel</a> is closed.</p>
 <p>Multiple calls to this method produce multiple instances of Supply, which compete over the values from the Channel.</p>
 <a name="t62.1.9"></a><h2 id="_type_Channel.pod6-sub_await">62.1.9 sub await</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub await(Channel:D)
multi sub await(*@)</pre>
 <p>Usage:</p>
 <pre class="code">await(CHANNEL)
await(CHANNELS)</pre>
 <p>Waits until all of one or more channels has a value available, and returns those values (it calls <span class="code">.receive</span> on the channel). Also works with <a href="#_type_Promise.pod6">promises</a>.</p>
</div> <!-- /type/Code.pod6 --><div class="pod-body"><a id="_type_Code.pod6"></a><a name="t63"><h1 class="title">63 class Code</h1></a> <p class="subtitle">Code object</p> <pre class="code">class Code is Any does Callable { ... }</pre>
 <p><span class="code">Code</span> is the ultimate base class of all code objects in Perl 6. It exposes functionality that all code objects have. While thunks are directly of type <span class="code">Code</span>, most code objects (such as those resulting from blocks, subroutines or methods) will be of some subclass of <span class="code">Code</span>.</p>
 <a name="t63.1"></a><h1 id="_type_Code.pod6-Methods">63.1 Methods</h1>
 <a name="t63.1.1"></a><h2 id="_type_Code.pod6-method_ACCEPTS">63.1.1 method ACCEPTS</h2>
 <pre class="code">multi method ACCEPTS(Code:D: Mu $topic)</pre>
 <p>Usually calls the code object and passes <span class="code">$topic</span> as an argument. However, when called on a code object that takes no arguments, the code object is invoked with no arguments and <span class="code">$topic</span> is dropped. The result of the call is returned.</p>
 <a name="t63.1.2"></a><h2 id="_type_Code.pod6-method_arity">63.1.2 method arity</h2>
 <p>Defined as:</p>
 <pre class="code">method arity(Code:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">CODE.arity</pre>
 <p>Returns the minimum number of positional arguments that must be passed in order to call the code object. Any optional or slurpy parameters in the code object's <span class="code">Signature</span> do not contribute, nor do named parameters.</p>
 <pre class="code">sub argless() { }
sub args($a, $b?) { }
sub slurpy($a, $b, *@c) { }
say &amp;amp;argless.arity;             # 0
say &amp;amp;args.arity;                # 1
say &amp;amp;slurpy.arity;              # 2</pre>
 <a name="t63.1.3"></a><h2 id="_type_Code.pod6-method_count">63.1.3 method count</h2>
 <p>Defined as:</p>
 <pre class="code">method count(Code:D:) returns Real:D</pre>
 <p>Usage:</p>
 <pre class="code">CODE.count</pre>
 <p>Returns the maximum number of positional arguments that may be passed when calling the code object. For code objects that can accept any number of positional arguments (that is, they have a slurpy parameter), <span class="code">count</span> will return <span class="code">Inf</span>. Named parameters do not contribute.</p>
 <pre class="code">sub argless() { }
sub args($a, $b?) { }
sub slurpy($a, $b, *@c) { }
say &amp;amp;argless.count;             # 0
say &amp;amp;args.count;                # 2
say &amp;amp;slurpy.count;              # Inf</pre>
 <a name="t63.1.4"></a><h2 id="_type_Code.pod6-method_signature">63.1.4 method signature</h2>
 <p>Defined as:</p>
 <pre class="code">multi method signature(Code:D:) returns Signature:D</pre>
 <p>Usage:</p>
 <pre class="code">CODE.signature</pre>
 <p>Returns the <a href=" &lt;span class=&quot;code&quot;&gt;Signature&lt;/span&gt; "> <span class="code">Signature</span> </a> object for this code object, which describes its parameters.</p>
 <a name="t63.1.5"></a><h2 id="_type_Code.pod6-method_Str">63.1.5 method Str</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Str(Code:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">CODE.Str</pre>
 <p>Will produce a warning. Use <span class="code">.perl</span> or <span class="code">.gist</span> instead.</p>
 <pre class="code">sub marine() { }
say ~&amp;amp;marine;   # marine</pre>
 <a name="t63.1.6"></a><h2 id="_type_Code.pod6-method_file">63.1.6 method file</h2>
 <p>Defined as:</p>
 <pre class="code">method file(Code:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">CODE.file</pre>
 <p>Returns the name of the file in which the code object was declared.</p>
 <pre class="code">say &amp;amp;infix:&amp;lt;+&gt;.file;</pre>
 <a name="t63.1.7"></a><h2 id="_type_Code.pod6-method_line">63.1.7 method line</h2>
 <p>Defined as</p>
 <pre class="code">method line(Code:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">CODE.line</pre>
 <p>Returns the line number in which the code object was declared.</p>
 <pre class="code">say &amp;amp;infix:&amp;lt;+&gt;.line;</pre>
</div> <!-- /type/Complex.pod6 --><div class="pod-body"><a id="_type_Complex.pod6"></a><a name="t64"><h1 class="title">64 class Complex</h1></a> <p class="subtitle">Complex number</p> <pre class="code">class Complex is Cool does Numeric { ... }</pre>
 <p>Represents a number in the complex plane.</p>
 <p>Complex objects are immutable.</p>
 <a name="t64.1"></a><h1 id="_type_Complex.pod6-Operators">64.1 Operators</h1>
 <a name="t64.1.1"></a><h2 id="_type_Complex.pod6-postfix_i">64.1.1 postfix i</h2>
 <p>Adding a trailing <span class="code">i</span> to a number literal makes it a Complex, for example:</p>
 <pre class="code">2i;     # same as Complex.new(0, 2);
1-2e3i; # same as Complex.new(1, -2e3);</pre>
 <a name="t64.2"></a><h1 id="_type_Complex.pod6-Methods">64.2 Methods</h1>
 <a name="t64.2.1"></a><h2 id="_type_Complex.pod6-method_new">64.2.1 method new</h2>
 <p>Defined as:</p>
 <pre class="code">proto method new(*@, *%) {*} returns Complex:D
multi method new(Real $re, Real $im) returns Complex:D</pre>
 <p>Usage:</p>
 <pre class="code">$complex = Complex.new(REAL, IMAGINARY)</pre>
 <p>Creates a new <span class="code">Complex</span> object from real and imaginary parts.</p>
 <a name="t64.2.2"></a><h2 id="_type_Complex.pod6-method_re">64.2.2 method re</h2>
 <p>Defined as:</p>
 <pre class="code">method re(Complex:D:) returns Real:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.re</pre>
 <p>Returns the real part of the complex number.</p>
 <pre class="code">say (3+5i).re;    # 3</pre>
 <a name="t64.2.3"></a><h2 id="_type_Complex.pod6-method_im">64.2.3 method im</h2>
 <p>Defined as:</p>
 <pre class="code">method im(Complex:D:) returns Real:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.im</pre>
 <p>Returns the imaginary part of the complex number.</p>
 <pre class="code">say (3+5i).im;    # 5</pre>
 <a name="t64.2.4"></a><h2 id="_type_Complex.pod6-method_reals">64.2.4 method reals</h2>
 <p>Defined as:</p>
 <pre class="code">method reals(Complex:D:) returns Positional:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.reals</pre>
 <p>Returns a two-element list containing the real and imaginary parts for this value.</p>
 <pre class="code">say (3+5i).reals;    # (3 5)</pre>
 <a name="t64.2.5"></a><h2 id="_type_Complex.pod6-method_isNaN">64.2.5 method isNaN</h2>
 <p>Defined as:</p>
 <pre class="code">method isNaN(Complex:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.isNaN</pre>
 <p>Returns true if the real or imaginary part is <a href="#_type_Num.pod6-NaN"> <span class="code">NaN</span> </a> (not a number).</p>
 <a name="t64.2.6"></a><h2 id="_type_Complex.pod6-method_polar">64.2.6 method polar</h2>
 <p>Defined as:</p>
 <pre class="code">method polar(Complex:D:) returns Positional:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.polar</pre>
 <p>Returns a two-element list of the polar coordinates for this value, i.e. magnitude and angle in radians.</p>
 <a name="t64.2.7"></a><h2 id="_type_Complex.pod6-method_floor">64.2.7 method floor</h2>
 <p>Defined as:</p>
 <pre class="code">method floor(Complex:D:) returns Complex:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.floor</pre>
 <p>Returns <span class="code">self.re.floor + self.im.floor</span>. That is, each of the real and imaginary parts is rounded to the highest integer not greater than the value of that part.</p>
 <pre class="code">say (1.2-3.8i).floor;           # 1-4i</pre>
 <a name="t64.2.8"></a><h2 id="_type_Complex.pod6-method_ceiling">64.2.8 method ceiling</h2>
 <p>Defined as:</p>
 <pre class="code">method ceiling(Complex:D:) returns Complex:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.ceiling</pre>
 <p>Returns <span class="code">self.re.ceiling + self.im.ceiling</span>. That is, each of the real and imaginary parts is rounded to the lowest integer not less than the value of that part.</p>
 <pre class="code">say (1.2-3.8i).ceiling;         # 2-3i</pre>
 <a name="t64.2.9"></a><h2 id="_type_Complex.pod6-method_round">64.2.9 method round</h2>
 <p>Defined as:</p>
 <pre class="code">multi method round(Complex:D:) returns Complex:D
multi method round(Complex:D: Real() $scale) returns Complex:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.round
COMPLEX.round($scale)</pre>
 <p>With no arguments, rounds both the real and imaginary parts to the nearest integer and returns a new <span class="code">Complex</span> number. If <span class="code">$scale</span> is given, rounds both parts of the invocant to the nearest multiple of <span class="code">$scale</span>. Uses the same algorithm as <a href="#_type_Real.pod6-method_round">Real.round</a> on each part of the number.</p>
 <pre class="code">say (1.2-3.8i).round;           # 1-4i
say (1.256-3.875i).round(0.1);  # 1.3-3.9i</pre>
 <a name="t64.2.10"></a><h2 id="_type_Complex.pod6-method_truncate">64.2.10 method truncate</h2>
 <p>Defined as:</p>
 <pre class="code">method truncate(Complex:D:) returns Complex:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.truncate</pre>
 <p>Removes the fractional part of both the real and imaginary parts of the number, using <a href="#_type_Real.pod6-method_truncate">Real.truncate</a>, and returns the result as a new <span class="code">Complex</span>.</p>
 <pre class="code">say (1.2-3.8i).truncate;        # 1-3i</pre>
 <a name="t64.2.11"></a><h2 id="_type_Complex.pod6-method_abs">64.2.11 method abs</h2>
 <p>Defined as:</p>
 <pre class="code">method abs(Complex:D:) returns Num:D
multi sub abs(Complex:D $z) returns Num:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.abs
abs COMPLEX</pre>
 <p>Returns the absolute value of the invocant (or the argument in sub form). For a given complex number <span class="code">$z</span> the absolute value <span class="code">|$z|</span> is defined as <span class="code">sqrt($z.re * $z.re + $z.im * $z.im)</span>.</p>
 <pre class="code">say (3+4i).abs;                 # sqrt(3*3 + 4*4) == 5</pre>
 <a name="t64.2.12"></a><h2 id="_type_Complex.pod6-method_conj">64.2.12 method conj</h2>
 <p>Defined as:</p>
 <pre class="code">method conj(Complex:D:) returns Complex:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.conj</pre>
 <p>Returns the complex conjugate of the invocant (that is, the number with the sign of the imaginary part negated).</p>
 <pre class="code">say (1-4i).conj;                # 1+4i</pre>
 <a name="t64.2.13"></a><h2 id="_type_Complex.pod6-method_gist">64.2.13 method gist</h2>
 <p>Defined as:</p>
 <pre class="code">method gist(Complex:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.gist</pre>
 <p>Returns a string representation of the form "1+2i", without internal spaces. (Str coercion also returns this.)</p>
 <pre class="code">say (1-4i).gist;                # 1-4i</pre>
 <a name="t64.2.14"></a><h2 id="_type_Complex.pod6-method_perl">64.2.14 method perl</h2>
 <p>Defined as:</p>
 <pre class="code">method perl(Complex:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">COMPLEX.perl</pre>
 <p>Returns a string representation corresponding to the unambiguous <span class="code">val()</span>-based representation of complex literals, of the form "&lt;1+2i>", without internal spaces, and including the angles that keep the + from being treated as a normal addition operator.</p>
 <pre class="code">say (1-3i).perl;                # &amp;lt;1-3i&gt;</pre>
</div> <!-- /type/ComplexStr.pod6 --><div class="pod-body"><a id="_type_ComplexStr.pod6"></a><a name="t65"><h1 class="title">65 class ComplexStr</h1></a> <p class="subtitle">Dual Value Complex number and String</p> <pre class="code">class ComplexStr is Complex is Str</pre>
 <p>The dual value types (often referred to as <a href="#_language_glossary.pod6-Allomorph">allomorphs</a>) allow for the representation of a value as both a string and a numeric type, typically they will be created for you when the context is "stringy" but they can be determined to be numbers, such as in some <a href="#_language_quoting.pod6">quoting constructs</a>:</p>
 <pre class="code">my $f = &amp;lt;42+0i&gt;; say $f.WHAT; # (ComplexStr)</pre>
 <p>A <span class="code">ComplexStr</span> can be used interchangeably where one might use a <a href="#_type_Str.pod6">Str</a> or a <a href="#_type_Complex.pod6">Complex</a> :</p>
 <pre class="code">my $f = &amp;lt;42+0i&gt;;
my $i = $f + 0.1;
my $s = $f ~ " and a bit more";</pre>
 <a name="t65.1"></a><h1 id="_type_ComplexStr.pod6-Methods">65.1 Methods</h1>
 <a name="t65.1.1"></a><h2 id="_type_ComplexStr.pod6-method_new">65.1.1 method new</h2>
 <pre class="code">method new(Complex $i, Str $s)</pre>
 <p>The constructor requires both the <span class="code">Complex</span> and the <span class="code">Str</span> value, when constructing one directly the values can be whatever is required:</p>
 <pre class="code">my $f = ComplexStr.new(42+0i, "forty two (but complicated)");
say +$f; # -&gt; 42+0i
say ~$f; # -&gt; "forty two (but complicated)"</pre>
 <a name="t65.1.2"></a><h2 id="_type_ComplexStr.pod6-method_Numeric">65.1.2 method Numeric</h2>
 <pre class="code">method Numeric</pre>
 <p>The numeric coercion is applied when the <span class="code">ComplexStr</span> is used in a numeric context, such as a numeric comparison or smart match against a numeric value. It will return the <span class="code">Complex</span> value.</p>
 <a name="t65.1.3"></a><h2 id="_type_ComplexStr.pod6-method_Complex">65.1.3 method Complex</h2>
 <pre class="code">method Complex</pre>
 <p>Returns the <span class="code">Complex</span> value of the <span class="code">ComplexStr</span>.</p>
 <a name="t65.1.4"></a><h2 id="_type_ComplexStr.pod6-method_Str">65.1.4 method Str</h2>
 <p>Returns the string value of the <span class="code">ComplexStr</span>.</p>
 <a name="t65.2"></a><h1 id="_type_ComplexStr.pod6-Operators">65.2 Operators</h1>
 <a name="t65.2.1"></a><h2 id="_type_ComplexStr.pod6-infix_cmp">65.2.1 infix cmp</h2>
 <pre class="code">multi sub infix:&amp;lt;cmp&gt;(ComplexStr:D $a, ComplexStr:D $b)</pre>
 <p>Compare two <span class="code">ComplexStr</span> objects. The comparison is done on the <span class="code">Complex</span> value first and then on the <span class="code">Str</span> value. If you want to compare in a different order then you would coerce to the <span class="code">Complex</span> or <span class="code">Str</span> values first:</p>
 <pre class="code">my $f = ComplexStr.new(42+0i, "smaller");
my $g = ComplexStr.new(43+0i, "larger");
say $f cmp $g;          # Less
say $f.Str cmp $g.Str;  # More</pre>
</div> <!-- /type/Cool.pod6 --><div class="pod-body"><a id="_type_Cool.pod6"></a><a name="t66"><h1 class="title">66 class Cool</h1></a> <p class="subtitle">Value that can be treated as a string or number interchangeably</p> <pre class="code">class Cool is Any { }</pre>
 <p><span class="code">Cool</span>, also known as the <b>C</b>onvenient <b>OO</b> <b>L</b>oop, is a base class for strings, numbers and other built-in classes that you are supposed to use mostly interchangeably.</p>
 <p>Methods in <span class="code">Cool</span> coerce the invocant to a more specific type, and then call the same method on that type. For example both <a href="#_type_Int.pod6">Int</a> and <a href="#_type_Str.pod6">Str</a> inherit from <span class="code">Cool</span>, and calling method <span class="code">substr</span> on an <span class="code">Int</span> converts the integer to <span class="code">Str</span> first.</p>
 <pre class="code">123.substr(1, 1);   # '2', same as 123.Str.substr(1, 1)</pre>
 <p>The following built-in types inherit from <span class="code">Cool</span>: <a href="#_type_Array.pod6">Array</a> <a href="#_type_Bool.pod6">Bool</a> <a href="#_type_Complex.pod6">Complex</a> <a href="#_type_Cool.pod6">Cool</a> <a href="#_type_Duration.pod6">Duration</a> <a href="#_type_Map.pod6">Map</a> <a href="#_type_FatRat.pod6">FatRat</a> <a href="#_type_Hash.pod6">Hash</a> <a href="#_type_Instant.pod6">Instant</a> <a href="#_type_Int.pod6">Int</a> <a href="#_type_List.pod6">List</a> <a href="#_type_Match.pod6">Match</a> <a href="#_type_Nil.pod6">Nil</a> <a href="#_type_Num.pod6">Num</a> <a href="#_type_Range.pod6">Range</a> <a href="#_type_Seq.pod6">Seq</a> <a href="#_type_Stash.pod6">Stash</a> <a href="#_type_Str.pod6">Str</a></p>
 <p>The following table summarizes the methods that <span class="code">Cool</span> provides, and what type they coerce to:</p>
 <table>
<tr><th>method</th> <th>coercion type</th></tr>
<tr><td>abs</td> <td>Numeric</td></tr>
 <tr><td>conj</td> <td>Numeric</td></tr>
 <tr><td>sqrt</td> <td>Numeric</td></tr>
 <tr><td>sign</td> <td>Real</td></tr>
 <tr><td>rand</td> <td>Numeric</td></tr>
 <tr><td>sin</td> <td>Numeric</td></tr>
 <tr><td>asin</td> <td>Numeric</td></tr>
 <tr><td>cos</td> <td>Numeric</td></tr>
 <tr><td>acos</td> <td>Numeric</td></tr>
 <tr><td>tan</td> <td>Numeric</td></tr>
 <tr><td>tanh</td> <td>Numeric</td></tr>
 <tr><td>atan</td> <td>Numeric</td></tr>
 <tr><td>atan2</td> <td>Numeric</td></tr>
 <tr><td>atanh</td> <td>Numeric</td></tr>
 <tr><td>sec</td> <td>Numeric</td></tr>
 <tr><td>asec</td> <td>Numeric</td></tr>
 <tr><td>cosec</td> <td>Numeric</td></tr>
 <tr><td>acosec</td> <td>Numeric</td></tr>
 <tr><td>cotan</td> <td>Numeric</td></tr>
 <tr><td>cotanh</td> <td>Numeric</td></tr>
 <tr><td>acotan</td> <td>Numeric</td></tr>
 <tr><td>sinh</td> <td>Numeric</td></tr>
 <tr><td>asinh</td> <td>Numeric</td></tr>
 <tr><td>cosh</td> <td>Numeric</td></tr>
 <tr><td>acosh</td> <td>Numeric</td></tr>
 <tr><td>sech</td> <td>Numeric</td></tr>
 <tr><td>asech</td> <td>Numeric</td></tr>
 <tr><td>cosech</td> <td>Numeric</td></tr>
 <tr><td>acosech</td> <td>Numeric</td></tr>
 <tr><td>acotanh</td> <td>Numeric</td></tr>
 <tr><td>cis</td> <td>Numeric</td></tr>
 <tr><td>log</td> <td>Numeric</td></tr>
 <tr><td>exp</td> <td>Numeric</td></tr>
 <tr><td>roots</td> <td>Numeric</td></tr>
 <tr><td>log10</td> <td>Numeric</td></tr>
 <tr><td>unpolar</td> <td>Numeric</td></tr>
 <tr><td>round</td> <td>Numeric</td></tr>
 <tr><td>floor</td> <td>Numeric</td></tr>
 <tr><td>ceiling</td> <td>Numeric</td></tr>
 <tr><td>truncate</td> <td>Numeric</td></tr>
 <tr><td>chr</td> <td>Int</td></tr>
 <tr><td>ord</td> <td>Str</td></tr>
 <tr><td>chars</td> <td>Str</td></tr>
 <tr><td>fmt</td> <td>Str</td></tr>
 <tr><td>uniname</td> <td>Str</td></tr>
 <tr><td>uninames</td> <td>Seq</td></tr>
 <tr><td>unival</td> <td>Str</td></tr>
 <tr><td>univals</td> <td>Str</td></tr>
 <tr><td>uniprop</td> <td>Str</td></tr>
 <tr><td>uniprop-int</td> <td>Str</td></tr>
 <tr><td>uniprop-str</td> <td>Str</td></tr>
 <tr><td>uniprop-bool</td> <td>Str</td></tr>
 <tr><td>unimatch</td> <td>Str</td></tr>
 <tr><td>uc</td> <td>Str</td></tr>
 <tr><td>lc</td> <td>Str</td></tr>
 <tr><td>fc</td> <td>Str</td></tr>
 <tr><td>flip</td> <td>Str</td></tr>
 <tr><td>trans</td> <td>Str</td></tr>
 <tr><td>index</td> <td>Str</td></tr>
 <tr><td>rindex</td> <td>Str</td></tr>
 <tr><td>ords</td> <td>Str</td></tr>
 <tr><td>split</td> <td>Str</td></tr>
 <tr><td>match</td> <td>Str</td></tr>
 <tr><td>comb</td> <td>Str</td></tr>
 <tr><td>subst</td> <td>Str</td></tr>
 <tr><td>sprintf</td> <td>Str</td></tr>
 <tr><td>printf</td> <td>Str</td></tr>
 <tr><td>samecase</td> <td>Str</td></tr>
 <tr><td>trim</td> <td>Str</td></tr>
 <tr><td>trim-leading</td> <td>Str</td></tr>
 <tr><td>trim-trailing</td> <td>Str</td></tr>
 <tr><td>EVAL</td> <td>Str</td></tr>
 <tr><td>chomp</td> <td>Str</td></tr>
 <tr><td>chop</td> <td>Str</td></tr>
 <tr><td>codes</td> <td>Str</td></tr>
</table> <a name="t66.1"></a><h1 id="_type_Cool.pod6-Methods">66.1 Methods</h1>
 <a name="t66.1.1"></a><h2 id="_type_Cool.pod6-routine_abs">66.1.1 routine abs</h2>
 <p>Defined as:</p>
 <pre class="code">sub abs(Numeric() $x)
method abs()</pre>
 <p>Usage:</p>
 <pre class="code">abs NUMERIC
NUMERIC.abs</pre>
 <p>Coerces the invocant (or in the sub form, the argument) to <a href="#_type_Numeric.pod6">Numeric</a> and returns the absolute value (that is, a non-negative number).</p>
 <pre class="code">say (-2).abs;       # 2
say abs "6+8i";     # 10</pre>
 <a name="t66.1.2"></a><h2 id="_type_Cool.pod6-method_conj">66.1.2 method conj</h2>
 <p>Defined as:</p>
 <pre class="code">method conj()</pre>
 <p>Usage:</p>
 <pre class="code">NUMERIC.conj</pre>
 <p>Coerces the invocant to <a href="#_type_Numeric.pod6">Numeric</a> and returns the <a href="#_type_Complex.pod6">complex</a> conjugate (that is, the number with the sign of the imaginary part negated).</p>
 <pre class="code">say (1+2i).conj;        # 1-2i</pre>
 <a name="t66.1.3"></a><h2 id="_type_Cool.pod6-routine_sqrt">66.1.3 routine sqrt</h2>
 <p>Defined as:</p>
 <pre class="code">sub sqrt(Numeric(Cool) $x)
method sqrt()</pre>
 <p>Usage:</p>
 <pre class="code">sqrt NUMERIC
NUMERIC.sqrt</pre>
 <p>Coerces the invocant to <a href="#_type_Numeric.pod6">Numeric</a> (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.</p>
 <pre class="code">say 4.sqrt;             # 2
say sqrt(2);            # 1.4142135623731</pre>
 <a name="t66.1.4"></a><h2 id="_type_Cool.pod6-method_sign">66.1.4 method sign</h2>
 <p>Defined as:</p>
 <pre class="code">method sign()</pre>
 <p>Usage:</p>
 <pre class="code">NUMERIC.sign</pre>
 <p>Coerces the invocant to <a href="#_type_Real.pod6">Numeric</a> and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.</p>
 <pre class="code">say 6.sign;             # 1
say (-6).sign;          # -1
say "0".sign;           # 0</pre>
 <a name="t66.1.5"></a><h2 id="_type_Cool.pod6-method_rand">66.1.5 method rand</h2>
 <p>Defined as:</p>
 <pre class="code">method rand()</pre>
 <p>Usage: NUMERIC.rand</p>
 <p>Coerces the invocant to <a href="#_type_Num.pod6">Num</a> and returns a pseudo-random value between zero and the number.</p>
 <pre class="code">say 1e5.rand;           # 33128.495184283</pre>
 <a name="t66.1.6"></a><h2 id="_type_Cool.pod6-routine_sin">66.1.6 routine sin</h2>
 <p>Defined as:</p>
 <pre class="code">sub sin(Numeric(Cool))
method sin()</pre>
 <p>Usage:</p>
 <pre class="code">sin NUMERIC
NUMERIC.sin</pre>
 <p>Coerces the invocant (or in the sub form, the argument) to <a href="#_type_Numeric.pod6">Numeric</a>, interprets it as radians, returns its <a href="https://en.wikipedia.org/wiki/Sine">sine</a>.</p>
 <pre class="code">say sin(0);             # 0
say sin(pi/4);          # 0.707106781186547
say sin(pi/2);          # 1</pre>
 <p>Note that Perl 6 is no computer algebra system, so <span class="code">sin(pi)</span> typically does not produce an exact 0, but rather a very small <a href="#_type_Num.pod6">floating-point number</a>.</p>
 <a name="t66.1.7"></a><h2 id="_type_Cool.pod6-routine_asin">66.1.7 routine asin</h2>
 <p>Defined as:</p>
 <pre class="code">sub asin(Numeric(Cool))
method asin()</pre>
 <p>Usage:</p>
 <pre class="code">asin NUMERIC
NUMERIC.asin</pre>
 <p>Coerces the invocant (or in the sub form, the argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">arc-sine</a> in radians.</p>
 <pre class="code">say 0.1.asin;               # 0.10016742116156</pre>
 <a name="t66.1.8"></a><h2 id="_type_Cool.pod6-routine_cos">66.1.8 routine cos</h2>
 <p>Defined as:</p>
 <pre class="code">sub cos(Numeric(Cool))
method cos()</pre>
 <p>Usage:</p>
 <pre class="code">cos NUMERIC
NUMERIC.cos</pre>
 <p>Coerces the invocant (or in sub form, the argument) to <a href="#_type_Numeric.pod6">Numeric</a>, interprets it as radians, returns its <a href="https://en.wikipedia.org/wiki/Cosine">cosine</a>.</p>
 <pre class="code">say 0.cos;                  # 1
say pi.cos;                 # -1
say cos(pi/2);              # 6.12323399573677e-17</pre>
 <a name="t66.1.9"></a><h2 id="_type_Cool.pod6-routine_acos">66.1.9 routine acos</h2>
 <p>Defined as:</p>
 <pre class="code">sub acos(Numeric(Cool))
method acos()</pre>
 <p>Usage:</p>
 <pre class="code">acos NUMERIC
NUMERIC.acos</pre>
 <p>Coerces the invocant (or in sub form, the argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">arc-cosine</a> in radians.</p>
 <a name="t66.1.10"></a><h2 id="_type_Cool.pod6-routine_tan">66.1.10 routine tan</h2>
 <p>Defined as:</p>
 <pre class="code">sub tan(Numeric(Cool))
method tan()</pre>
 <p>Usage:</p>
 <pre class="code">tan NUMERIC
NUMERIC.tan</pre>
 <p>Coerces the invocant (or in sub form, the argument) to <a href="#_type_Numeric.pod6">Numeric</a>, interprets it as radians, returns its <a href="https://en.wikipedia.org/wiki/Tangent">tangent</a>.</p>
 <a name="t66.1.11"></a><h2 id="_type_Cool.pod6-routine_atan">66.1.11 routine atan</h2>
 <p>Defined as:</p>
 <pre class="code">sub atan(Numeric(Cool))
method atan()</pre>
 <p>Usage:</p>
 <pre class="code">atan NUMERIC
NUMERIC.atan</pre>
 <p>Coerces the invocant (or in sub form, the argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">arc-tangent</a> in radians.</p>
 <a name="t66.1.12"></a><h2 id="_type_Cool.pod6-routine_atan2">66.1.12 routine atan2</h2>
 <p>Defined as:</p>
 <pre class="code">sub atan2(Numeric() $x, Numeric() $y = 1e0)
method atan2($y = 1e0)</pre>
 <p>Usage:</p>
 <pre class="code">atan2 NUMERIC, NUMERIC?
NUMERIC.atan2(NUMERIC?)</pre>
 <p>Coerces the arguments (including the invocant in the method form) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns their two-argument <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">arc-tangent</a> in radians.</p>
 <a name="t66.1.13"></a><h2 id="_type_Cool.pod6-method_sec">66.1.13 method sec</h2>
 <p>Defined as:</p>
 <pre class="code">sub sec(Numeric(Cool))
method sec()</pre>
 <p>Usage:</p>
 <pre class="code">sec NUMERIC
NUMERIC.sec</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, interprets it as radians, returns its <a href="https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions">secant</a>, that is, the reciprocal of its cosine.</p>
 <a name="t66.1.14"></a><h2 id="_type_Cool.pod6-routine_asec">66.1.14 routine asec</h2>
 <p>Defined as:</p>
 <pre class="code">sub asec(Numeric(Cool))
method asec()</pre>
 <p>Usage:</p>
 <pre class="code">asec NUMERIC
NUMERIC.asec</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">arc-secant</a> in radians.</p>
 <a name="t66.1.15"></a><h2 id="_type_Cool.pod6-routine_cosec">66.1.15 routine cosec</h2>
 <p>Defined as:</p>
 <pre class="code">sub cosec(Numeric(Cool))
method cosec()</pre>
 <p>Usage:</p>
 <pre class="code">cosec NUMERIC
NUMERIC.cosec</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, interprets it as radians, returns its <a href="https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions">cosecant</a>, that is, the reciprocal of its sine.</p>
 <a name="t66.1.16"></a><h2 id="_type_Cool.pod6-routine_acosec">66.1.16 routine acosec</h2>
 <p>Defined as:</p>
 <pre class="code">sub acosec(Numeric(Cool))
method acosec()</pre>
 <p>Usage:</p>
 <pre class="code">acosec NUMERIC
NUMERIC.acosec</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">arc-cosecant</a> in radians.</p>
 <a name="t66.1.17"></a><h2 id="_type_Cool.pod6-routine_cotan">66.1.17 routine cotan</h2>
 <p>Defined as:</p>
 <pre class="code">sub cotan(Numeric(Cool))
method cotan()</pre>
 <p>Usage:</p>
 <pre class="code">cotan NUMERIC
NUMERIC.cotan</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, interprets it as radians, returns its <a href="https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions">cotangent</a>, that is, the reciprocal of its tangent.</p>
 <a name="t66.1.18"></a><h2 id="_type_Cool.pod6-routine_acotan">66.1.18 routine acotan</h2>
 <p>Defined as:</p>
 <pre class="code">sub acotan(Numeric(Cool))
method acotan()</pre>
 <p>Usage:</p>
 <pre class="code">acotan NUMERIC
NUMERIC.acotan</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">arc-cotangent</a> in radians.</p>
 <a name="t66.1.19"></a><h2 id="_type_Cool.pod6-routine_sinh">66.1.19 routine sinh</h2>
 <p>Defined as:</p>
 <pre class="code">sub sinh(Numeric(Cool))
method sinh()</pre>
 <p>Usage:</p>
 <pre class="code">sinh NUMERIC
NUMERIC.sinh</pre>
 <p>Coerces the invocant (or in method form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Hyperbolic_function">Sine hyperbolicus</a>.</p>
 <a name="t66.1.20"></a><h2 id="_type_Cool.pod6-routine_asinh">66.1.20 routine asinh</h2>
 <p>Defined as:</p>
 <pre class="code">sub asinh(Numeric(Cool))
method asinh()</pre>
 <p>Usage:</p>
 <pre class="code">asinh NUMERIC
NUMERIC.asinh</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_hyperbolic_function">Inverse Sine hyperbolicus</a>.</p>
 <a name="t66.1.21"></a><h2 id="_type_Cool.pod6-routine_cosh">66.1.21 routine cosh</h2>
 <p>Defined as:</p>
 <pre class="code">sub cosh(Numeric(Cool))
method cosh()</pre>
 <p>Usage:</p>
 <pre class="code">cosh NUMERIC
NUMERIC.cosh</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Hyperbolic_function">Cosine hyperbolicus</a>.</p>
 <a name="t66.1.22"></a><h2 id="_type_Cool.pod6-routine_acosh">66.1.22 routine acosh</h2>
 <p>Defined as:</p>
 <pre class="code">sub acosh(Numeric(Cool))
method acosh()</pre>
 <p>Usage:</p>
 <pre class="code">acosh NUMERIC
NUMERIC.acosh</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_hyperbolic_function">Inverse Cosine hyperbolicus</a>.</p>
 <a name="t66.1.23"></a><h2 id="_type_Cool.pod6-routine_tanh">66.1.23 routine tanh</h2>
 <p>Defined as:</p>
 <pre class="code">sub tanh(Numeric(Cool))
method tanh()</pre>
 <p>Usage:</p>
 <pre class="code">tanh NUMERIC
NUMERIC.tanh</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Hyperbolic_function">Tangent hyperbolicus</a>.</p>
 <a name="t66.1.24"></a><h2 id="_type_Cool.pod6-routine_atanh">66.1.24 routine atanh</h2>
 <p>Defined as:</p>
 <pre class="code">sub atanh(Numeric(Cool))
method atanh()</pre>
 <p>Usage:</p>
 <pre class="code">atanh NUMERIC
NUMERIC.atanh</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_hyperbolic_function">Inverse tangent hyperbolicus</a>.</p>
 <a name="t66.1.25"></a><h2 id="_type_Cool.pod6-routine_sech">66.1.25 routine sech</h2>
 <p>Defined as:</p>
 <pre class="code">sub sech(Numeric(Cool))
method sech()</pre>
 <p>Usage:</p>
 <pre class="code">sech NUMERIC
NUMERIC.sech</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Hyperbolic_function">Secant hyperbolicus</a>.</p>
 <pre class="code">say 0.sech;                  # 1</pre>
 <a name="t66.1.26"></a><h2 id="_type_Cool.pod6-routine_asech">66.1.26 routine asech</h2>
 <p>Defined as:</p>
 <pre class="code">sub asech(Numeric(Cool))
method asech()</pre>
 <p>Usage:</p>
 <pre class="code">asech NUMERIC
NUMERIC.asech</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Hyperbolic_function">Inverse hyperbolic secant</a>.</p>
 <pre class="code">say 0.8.asech;                  # 0.693147180559945</pre>
 <a name="t66.1.27"></a><h2 id="_type_Cool.pod6-routine_cosech">66.1.27 routine cosech</h2>
 <p>Defined as:</p>
 <pre class="code">sub cosech(Numeric(Cool))
method cosech()</pre>
 <p>Usage:</p>
 <pre class="code">cosech NUMERIC
NUMERIC.cosech</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Hyperbolic_function">Hyperbolic cosecant</a>.</p>
 <pre class="code">say cosech(pi/2);                # 0.434537208094696</pre>
 <a name="t66.1.28"></a><h2 id="_type_Cool.pod6-routine_acosech">66.1.28 routine acosech</h2>
 <p>Defined as:</p>
 <pre class="code">sub acosech(Numeric(Cool))
method acosech()</pre>
 <p>Usage:</p>
 <pre class="code">acosech NUMERIC
NUMERIC.acosech</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_hyperbolic_function">Inverse hyperbolic cosecant</a>.</p>
 <pre class="code">say acosech(4.5);                  # 0.220432720979802</pre>
 <a name="t66.1.29"></a><h2 id="_type_Cool.pod6-routine_cotanh">66.1.29 routine cotanh</h2>
 <p>Defined as:</p>
 <pre class="code">sub cotanh(Numeric(Cool))
method cotanh()</pre>
 <p>Usage:</p>
 <pre class="code">cotanh NUMERIC
NUMERIC.cotanh</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Hyperbolic_function">Hyperbolic cotangent</a>.</p>
 <pre class="code">say cotanh(pi);                   # 1.00374187319732</pre>
 <a name="t66.1.30"></a><h2 id="_type_Cool.pod6-routine_acotanh">66.1.30 routine acotanh</h2>
 <p>Defined as:</p>
 <pre class="code">sub acotanh(Numeric(Cool))
method acotanh()</pre>
 <p>Usage:</p>
 <pre class="code">acotanh NUMERIC
NUMERIC.acotanh</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Inverse_hyperbolic_function">Inverse hyperbolic cotangent</a>.</p>
 <pre class="code">say acotanh(2.5);                  # 0.423648930193602</pre>
 <a name="t66.1.31"></a><h2 id="_type_Cool.pod6-routine_cis">66.1.31 routine cis</h2>
 <p>Defined as:</p>
 <pre class="code">sub cis(Numeric(Cool))
method cis()</pre>
 <p>Usage:</p>
 <pre class="code">cis NUMERIC
NUMERIC.cis</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns <a href="https://en.wikipedia.org/wiki/Cis_%28mathematics%29">cos(argument) + i*sin(argument)</a>.</p>
 <pre class="code">say cis(pi/4);                  # 0.707106781186548+0.707106781186547i</pre>
 <a name="t66.1.32"></a><h2 id="_type_Cool.pod6-routine_log">66.1.32 routine log</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)
multi method log(Cool:D: Cool:D $base?)</pre>
 <p>Usage:</p>
 <pre class="code">log NUMERIC, NUMERIC?
NUMERIC.log(NUMERIC?)</pre>
 <p>Coerces the arguments (including the invocant in the method form) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Logarithm">Logarithm</a> to base <span class="code">$base</span>, or to base <span class="code">e</span> (Euler's Number) if no base was supplied (<a href="https://en.wikipedia.org/wiki/Natural_logarithm">Natural logarithm</a>.</p>
 <pre class="code">say (e*e).log;                      # 2</pre>
 <a name="t66.1.33"></a><h2 id="_type_Cool.pod6-routine_log10">66.1.33 routine log10</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub log10(Cool(Numeric))
multi method log10()</pre>
 <p>Usage:</p>
 <pre class="code">log10 NUMERIC
NUMERIC.log10</pre>
 <p>Coerces the invocant (or in the sub form, the invocant) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns its <a href="https://en.wikipedia.org/wiki/Logarithm">Logarithm</a> to base 10, that is, a number that approximately produces the original number when raised to the power of 10.</p>
 <pre class="code">say log10(1001);                    # 3.00043407747932</pre>
 <a name="t66.1.34"></a><h2 id="_type_Cool.pod6-method_exp">66.1.34 method exp</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub exp(Cool:D $pow, Cool:D $base?)
multi method exp(Cool:D: Cool:D $base?)</pre>
 <p>Usage:</p>
 <pre class="code">exp NUMERIC, NUMERIC?
NUMERIC.exp(NUMERIC?)</pre>
 <p>Coerces the arguments (including the invocant in the method from) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns <span class="code">$base</span> raised to the power of the first number. If no <span class="code">$base</span> is supplied, <span class="code">e</span> (Euler's Number) is used.</p>
 <pre class="code">say 0.exp;      # 1
say 1.exp;      # 2.71828182845905
say 10.exp;     # 22026.4657948067</pre>
 <a name="t66.1.35"></a><h2 id="_type_Cool.pod6-method_unpolar">66.1.35 method unpolar</h2>
 <p>Defined as:</p>
 <pre class="code">method unpolar(Numeric(Cool))</pre>
 <p>Usage:</p>
 <pre class="code">unpolar NUMERIC, NUMERIC
NUMERIC.unpolar(NUMERIC)</pre>
 <p>Coerces the arguments (including the invocant in the method form) to <a href="#_type_Numeric.pod6">Numeric</a>, and returns a complex number from the given polar coordinates. The invocant (or the first argument in sub form) is the magnitude while the argument (i.e. the second argument in sub form) is the angle. The angle is assumed to be in radians.</p>
 <pre class="code">say sqrt(2).unpolar(pi/4);      # 1+1i</pre>
 <a name="t66.1.36"></a><h2 id="_type_Cool.pod6-routine_round">66.1.36 routine round</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub round(Numeric(Cool))
multi method round(Cool:D: $unit = 1)</pre>
 <p>Usage:</p>
 <pre class="code">round NUMERIC, NUMERIC?
NUMERIC.round(NUMERIC?)</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and rounds it to the unit of <span class="code">$unit</span>. If <span class="code">$unit</span> is 1, rounds to the nearest integer.</p>
 <pre class="code">say 1.7.round;          # 2
say 1.07.round(0.1);    # 1.1
say 21.round(10);       # 20</pre>
 <a name="t66.1.37"></a><h2 id="_type_Cool.pod6-routine_floor">66.1.37 routine floor</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub floor(Numeric(Cool))
multi method floor</pre>
 <p>Usage:</p>
 <pre class="code">floor NUMERIC
NUMERIC.floor</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and rounds it downwards to the nearest integer.</p>
 <pre class="code">say "1.99".floor;       # 1
say "-1.9".floor;       # -2
say 0.floor;            # 0</pre>
 <a name="t66.1.38"></a><h2 id="_type_Cool.pod6-routine_ceiling">66.1.38 routine ceiling</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub ceiling(Numeric(Cool))
multi method ceiling</pre>
 <p>Usage:</p>
 <pre class="code">ceiling NUMERIC
NUMERIC.ceiling</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and rounds it upwards to the nearest integer.</p>
 <pre class="code">say "1".ceiling;        # 1
say "-0.9".ceiling;     # 0
say "42.1".ceiling;     # 43</pre>
 <a name="t66.1.39"></a><h2 id="_type_Cool.pod6-routine_truncate">66.1.39 routine truncate</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub truncate(Numeric(Cool))
multi method truncate()</pre>
 <p>Usage:</p>
 <pre class="code">truncate NUMERIC
NUMERIC.truncate</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Numeric.pod6">Numeric</a>, and rounds it towards zero.</p>
 <pre class="code">say 1.2.truncate        # 1
say truncate -1.2;      # -1</pre>
 <a name="t66.1.40"></a><h2 id="_type_Cool.pod6-routine_ord">66.1.40 routine ord</h2>
 <p>Defined as:</p>
 <pre class="code">sub ord(Str(Cool))
method ord()</pre>
 <p>Usage:</p>
 <pre class="code">ord STRING
STRING.ord</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns the <a href="https://en.wikipedia.org/wiki/Code_point">Unicode code point</a> number of the first code point.</p>
 <pre class="code">say 'a'.ord;            # 97</pre>
 <p>The inverse operation is <a href="#65-method chr">chr</a>.</p>
 <p>Mnemonic: returns an ordinal number</p>
 <a name="t66.1.41"></a><h2 id="_type_Cool.pod6-routine_chr">66.1.41 routine chr</h2>
 <p>Defined as:</p>
 <pre class="code">sub chr(Int(Cool))
method chr()</pre>
 <p>Usage:</p>
 <pre class="code">chr INTEGER
INTEGER.chr</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Int.pod6">Int</a>, interprets it as a <a href="https://en.wikipedia.org/wiki/Code_point">Unicode code points</a>, and returns a <a href="#_type_Str.pod6">string</a> made of that code point.</p>
 <pre class="code">say '65'.chr;       # A</pre>
 <p>The inverse operation is <a href="#65-method ord">ord</a>.</p>
 <p>Mnemonic: turns an integer into a <i>char</i>acter.</p>
 <a name="t66.1.42"></a><h2 id="_type_Cool.pod6-routine_chars">66.1.42 routine chars</h2>
 <p>Defined as:</p>
 <pre class="code">sub chars(Str(Cool))
method chars()</pre>
 <p>Usage:</p>
 <pre class="code">chars STRING
STRING.chars</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns the number of characters in the string. Please note that on the JVM, you currently get codepoints instead of graphemes.</p>
 <pre class="code">say 'møp'.chars;    # 3</pre>
 <a name="t66.1.43"></a><h2 id="_type_Cool.pod6-routine_codes">66.1.43 routine codes</h2>
 <p>Defined as:</p>
 <pre class="code">sub codes(Str(Cool))
method codes()</pre>
 <p>Usage:</p>
 <pre class="code">codes STRING
STRING.codes</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns the number of <a href="https://en.wikipedia.org/wiki/Code_point">Unicode code points</a>.</p>
 <pre class="code">say 'møp'.codes;    # 3</pre>
 <a name="t66.1.44"></a><h2 id="_type_Cool.pod6-routine_flip">66.1.44 routine flip</h2>
 <p>Defined as:</p>
 <pre class="code">sub flip(Str(Cool))
method flip()</pre>
 <p>Usage:</p>
 <pre class="code">flip STRING
STRING.flip</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns a reversed version.</p>
 <pre class="code">say 421.flip;       # 124</pre>
 <a name="t66.1.45"></a><h2 id="_type_Cool.pod6-routine_trim">66.1.45 routine trim</h2>
 <p>Defined as:</p>
 <pre class="code">sub trim(Str(Cool))
method trim()</pre>
 <p>Usage:</p>
 <pre class="code">trim STRING
STRING.trim</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns the string with both leading and trailing whitespace stripped.</p>
 <pre class="code">my $stripped = '  abc '.trim;
say "&amp;lt;$stripped&gt;";          # &amp;lt;abc&gt;</pre>
 <a name="t66.1.46"></a><h2 id="_type_Cool.pod6-routine_trim-leading">66.1.46 routine trim-leading</h2>
 <p>Defined as:</p>
 <pre class="code">sub trim-leading(Str(Cool))
method trim-leading()</pre>
 <p>Usage:</p>
 <pre class="code">trim-leading STRING
STRING.trim-leading</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns the string with leading whitespace stripped.</p>
 <pre class="code">my $stripped = '  abc '.trim-leading;
say "&amp;lt;$stripped&gt;";          # &amp;lt;abc &gt;</pre>
 <a name="t66.1.47"></a><h2 id="_type_Cool.pod6-routine_trim-trailing">66.1.47 routine trim-trailing</h2>
 <p>Defined as:</p>
 <pre class="code">sub trim-trailing(Str(Cool))
method trim-trailing()</pre>
 <p>Usage:</p>
 <pre class="code">trim-trailing STRING
STRING.trim-trailing</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns the string with trailing whitespace stripped.</p>
 <pre class="code">my $stripped = '  abc '.trim-trailing;
say "&amp;lt;$stripped&gt;";          # &amp;lt;  abc&gt;</pre>
 <a name="t66.1.48"></a><h2 id="_type_Cool.pod6-routine_lc">66.1.48 routine lc</h2>
 <p>Defined as:</p>
 <pre class="code">sub lc(Str(Cool))
method lc()</pre>
 <p>Usage:</p>
 <pre class="code">lc STRING
STRING.lc</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns it case-folded to lower case.</p>
 <pre class="code">say "ABC".lc;       # abc</pre>
 <a name="t66.1.49"></a><h2 id="_type_Cool.pod6-routine_uc">66.1.49 routine uc</h2>
 <p>Defined as:</p>
 <pre class="code">sub uc(Str(Cool))
method uc()</pre>
 <p>Usage:</p>
 <pre class="code">uc STRING
STRING.uc</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns it case-folded to upper case (capital letters).</p>
 <pre class="code">say "Abc".uc;       # ABC</pre>
 <a name="t66.1.50"></a><h2 id="_type_Cool.pod6-routine_tc">66.1.50 routine tc</h2>
 <p>Defined as:</p>
 <pre class="code">sub tc(Str(Cool))
method tc()</pre>
 <p>Usage:</p>
 <pre class="code">tc STRING
STRING.tc</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns it with the first letter case-folded to title case (or where not available, upper case).</p>
 <pre class="code">say "abC".tc;       # AbC</pre>
 <a name="t66.1.51"></a><h2 id="_type_Cool.pod6-routine_tclc">66.1.51 routine tclc</h2>
 <p>Defined as:</p>
 <pre class="code">sub tclc(Str(Cool))
method tclc()</pre>
 <p>Usage:</p>
 <pre class="code">tclc STRING
STRING.tclc</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..</p>
 <pre class="code">say 'abC'.tclc;     # Abc</pre>
 <a name="t66.1.52"></a><h2 id="_type_Cool.pod6-routine_wordcase">66.1.52 routine wordcase</h2>
 <p>Defined as:</p>
 <pre class="code">sub wordcase(Str(Cool) $input, :&amp;amp;filter = &amp;amp;tclc, Mu :$where = True)
method wordcase(:&amp;amp;filter = &amp;amp;tclc, Mu :$where = True)</pre>
 <p>Usage:</p>
 <pre class="code">wordcase STRING, FILTER?, WHERE?
STRING.wordcase(FILTER?, WHERE?)</pre>
 <p>Coerces the invocant (or in sub form, the first argument) to <a href="#_type_Str.pod6">Str</a>, and filters each word that smart-matches against <span class="code">$where</span> through the <span class="code">&amp;filter</span>. With the default filter (first character to upper case, rest to lower) and matcher (which accepts everything), this title-cases each word:</p>
 <pre class="code">say "perl 6 programming".wordcase;      # Perl 6 Programming</pre>
 <p>With a matcher:</p>
 <pre class="code">say "have fun working on perl".wordcase(:where({ .chars &gt; 3 }));
                                        # Have fun Working on Perl</pre>
 <p>With a customer filter too:</p>
 <pre class="code">say "have fun working on perl".wordcase(:filter(&amp;amp;uc), :where({ .chars &gt; 3 }));
                                        # HAVE fun WORKING on PERL</pre>
 <a name="t66.1.53"></a><h2 id="_type_Cool.pod6-routine_samecase">66.1.53 routine samecase</h2>
 <p>Defined as:</p>
 <pre class="code">sub samecase(Cool $string, Cool $pattern)
method samecase(Cool:D: Cool $pattern)</pre>
 <p>Usage:</p>
 <pre class="code">samecase STRING, PATTERN
STRING.samecase(PATTERN)</pre>
 <p>Coerces the invocant (or in sub form, the first argument) to <a href="#_type_Str.pod6">Str</a>, and returns a copy of <span class="code">$string</span> with case information for each individual character changed according to <span class="code">$pattern</span>. (The pattern string can contain three types of characters, i.e. uppercase, lowercase and caseless. For a given character in <span class="code">$pattern</span> its case information determines the case of the corresponding character in the result.) If <span class="code">$string</span> is longer than <span class="code">$pattern</span>, the case information from the last character of <span class="code">$pattern</span> is applied to the remaining characters of <span class="code">$string</span>.</p>
 <pre class="code">say "perL 6".samecase("A__a__"); # Perl 6
say "pERL 6".samecase("Ab");     # Perl 6</pre>
 <a name="t66.1.54"></a><h2 id="_type_Cool.pod6-routine_uniname">66.1.54 routine uniname</h2>
 <p>Defined as:</p>
 <pre class="code">sub uniname(Str(Cool) returns Str
method uniname() returns Str</pre>
 <p>Usage:</p>
 <pre class="code"># Camelia in Unicode
say ‘»ö«’.comb».uniname;
# «("RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK",
    "LATIN SMALL LETTER O WITH DIAERESIS", "LEFT-POINTING DOUBLE ANGLE QUOTATION MARK")␤»

# Find the char with the longest Unicode name.
say (0..0x1FFFF).sort(*.uniname.chars)[*-1].chr.uniname;
# «ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM␤»</pre>
 <p>Interprets the invocant / first argument as a <a href="#_type_Str.pod6">Str</a>, and returns the Unicode codepoint name of the first character. To convert a whole string use <a href="#65-routine_uninames">uninames</a>.</p>
 <a name="t66.1.55"></a><h2 id="_type_Cool.pod6-routine_uninames">66.1.55 routine uninames</h2>
 <p>Defined as:</p>
 <pre class="code">sub uninames(Str:D)
method uninames()</pre>
 <p>Usage:</p>
 <pre class="code">dd ‘»ö«’.comb».uniname;
# «("RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK",
    "LATIN SMALL LETTER O WITH DIAERESIS",
    "LEFT-POINTING DOUBLE ANGLE QUOTATION MARK").Seq␤»</pre>
 <p>Returns of a Seq of unicode names for the Str provided.</p>
 <a name="t66.1.56"></a><h2 id="_type_Cool.pod6-routine_chop">66.1.56 routine chop</h2>
 <p>Defined as:</p>
 <pre class="code">sub chop(Str(Cool))
method chop()</pre>
 <p>Usage:</p>
 <pre class="code">chop STRING
STRING.chop</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns it with the last character removed.</p>
 <pre class="code">say 'perl'.chop;                        # per</pre>
 <a name="t66.1.57"></a><h2 id="_type_Cool.pod6-routine_chomp">66.1.57 routine chomp</h2>
 <p>Defined as:</p>
 <pre class="code">sub chomp(Str(Cool))
method chomp()</pre>
 <p>Usage:</p>
 <pre class="code">chomp STRING
STRING.chomp</pre>
 <p>Coerces the invocant (or in sub form, its argument) to <a href="#_type_Str.pod6">Str</a>, and returns it with the last character removed, if it is a logical newline.</p>
 <pre class="code">say 'ab'.chomp.chars;                   # 2
say "a\n".chomp.chars;                  # 1</pre>
 <a name="t66.1.58"></a><h2 id="_type_Cool.pod6-routine_substr">66.1.58 routine substr</h2>
 <p>Defined as:</p>
 <pre class="code">sub substr(Str(Cool) $str, $from, $chars?)
method substr($from, $chars?)</pre>
 <p>Usage:</p>
 <pre class="code">substr(STRING, FROM, CHARS?)
STRING.substr(FROM, CHARS?)</pre>
 <p>Coerces the invocant (or in the sub form, the first argument) to <a href="#_type_Str.pod6">Str</a>, and returns the string starting from offset <span class="code">$from</span>. If <span class="code">$chars</span> is supplied, at most <span class="code">$chars</span> characters are returned.</p>
 <pre class="code">say 'zenith'.substr(2);         # nith
say 'zenith'.substr(0, 3);      # zen

# works on non-strings too:
say 20151224.substr(6);         # 24

# sub form:
say substr "zenith", 0, 3;      # zen</pre>
 <p>If the <span class="code">$from</span> parameter is a <a href="#_type_Callable.pod6">Callable</a>, it is called with the number of chars in the string as argument. This allows easy indexing relative to the end:</p>
 <pre class="code">say 20151224.substr(*-2);       # 24</pre>
 <a name="t66.1.59"></a><h2 id="_type_Cool.pod6-routine_ords">66.1.59 routine ords</h2>
 <p>Defined as:</p>
 <pre class="code">sub ords(Str(Cool) $str)
method ords()</pre>
 <p>Usage:</p>
 <pre class="code">ords(STRING)
STRING.ords</pre>
 <p>Coerces the invocant (or in the sub form, the first argument) to <a href="#_type_Str.pod6">Str</a>, and returns a list of Unicode codepoints for each character.</p>
 <pre class="code">say "Perl 6".ords;              # 80 101 114 108 32 54
say ords 10;                    # 49 48</pre>
 <p>This is the list-returning version of <a href="#_routine_ord.pod6">ord</a>. The inverse operation in <a href="#_routine_chrs.pod6">chrs</a>.</p>
 <a name="t66.1.60"></a><h2 id="_type_Cool.pod6-routine_chrs">66.1.60 routine chrs</h2>
 <p>Defined as:</p>
 <pre class="code">sub chrs(*@codepoints) return Str:D
method chrs()</pre>
 <p>Usage:</p>
 <pre class="code">chrs LIST
LIST.chrs</pre>
 <p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.</p>
 <pre class="code">say &amp;lt;80 101 114 108 32 54&gt;.chrs;    # Perl 6</pre>
 <p>This is the list-input version of <a href="#_routine_chr.pod6">chr</a>. The inverse operation is <a href="#_routine_ords.pod6">ords</a>.</p>
 <a name="t66.1.61"></a><h2 id="_type_Cool.pod6-routine_split">66.1.61 routine split</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)
multi sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)
multi method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)
multi method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)</pre>
 <p>Usage:</p>
 <pre class="code">split DELIMITER, STRING, LIMIT?, [:k | :v | :kv | :p]?, :skip-empty?
split /PATTERN/, STRING, LIMIT?, [:k | :v | :kv | :p]?, :skip-empty?
STRING.split(DELIMITER, LIMIT?,  [:k | :v | :kv | :p]?, :skip-empty?)
STRING.split(/PATTERN/, LIMIT?,  [:k | :v | :kv | :p]?, :skip-empty?)</pre>
 <p>Coerces the invocant (or in the sub form, the second argument) to <a href="#_type_Str.pod6">Str</a>, and splits it into pieces based on delimiters found in the string.</p>
 <p>If <span class="code">$delimiter</span> is a string, it is searched for literally and not treated as a regex.</p>
 <pre class="code">say split(';', "a;b;c").perl;          # ("a", "b", "c").list
say split(';', "a;b;c", 2).perl;       # ("a", "b;c").list

say split(';', "a;b;c,d").perl;        # ("a", "b", "c,d").list
say split(/\;/, "a;b;c,d").perl;       # ("a", "b", "c,d").list
say split(/&amp;lt;[;,]&gt;/, "a;b;c,d").perl;   # ("a", "b", "c", "d").list</pre>
 <p>By default, split omits the matches, and returns a list of only those parts of the string that did not match. Specifying one of the <span class="code">:k, :v, :kv, :p</span> adverbs changes that. Think of the matches as a list that is interleaved with the non-matching parts. <span class="code">:v</span> interleaves the values of that list: s say 'abc'.split(/b/, :v); # (a ｢b｣ c)</p>
 <p><span class="code">:k</span> interleaves the keys, that is, the indexes:</p>
 <pre class="code">say 'abc'.split(/b/, :k);               # (a 0 c)</pre>
 <p><span class="code">:kv</span> adds both indexes and matches:</p>
 <pre class="code">say 'abc'.split(/b/, :kv);               # (a 0 ｢b｣ c)</pre>
 <p>You can only use one of the <span class="code">:k, :v, :kv, :p</span> adverbs in a single call to <span class="code">split</span>.</p>
 <p>and <span class="code">:p</span> adds them as <a href="#_type_Pair.pod6">Pairs</a>:</p>
 <pre class="code">say 'abc'.split(/b/, :p)                # (a 0 =&gt; ｢b｣ c)</pre>
 <p>Note that unlike in Perl 5, empty chunks are not removed from the result list. For that behavior, use the `:skip-empty` named argument:</p>
 <pre class="code">say ("f,,b,c,d".split: /","/             ).perl  # ("f", "", "b", "c", "d")
say ("f,,b,c,d".split: /","/, :skip-empty).perl  # ("f", "b", "c", "d")</pre>
 <p>See also: <a href="#_routine_comb.pod6">comb</a>.</p>
 <a name="t66.1.62"></a><h2 id="_type_Cool.pod6-routine_lines">66.1.62 routine lines</h2>
 <p>Defined as:</p>
 <pre class="code">sub lines(Str(Cool))
method lines()</pre>
 <p>Usage:</p>
 <pre class="code">lines STRING
STRING.lines</pre>
 <p>Coerces the invocant (and in sub form, the argument) to <a href="#_type_Str.pod6">Str</a>, decomposes it into lines (with the newline characters stripped), and returns the list of lines.</p>
 <pre class="code">say lines("a\nb\n").join('|');          # a|b
say "some\nmore\nlines".lines.elems;    # 3</pre>
 <p>This method can be used as part of an <span class="code">IO::Path</span> to process a file line-by-line, since <span class="code">IO::Path</span> objects inherit from <span class="code">Cool</span>, e.g.:</p>
 <pre class="code">for 'huge-csv'.IO.lines -&gt; $line { 
         # Do something with $line 
 } 
 
 # or if you'll be processing later 
 my @lines = 'huge-csv'.IO.lines; 
</pre>
 <p>Without any arguments, sub <span class="code">lines</span> operates on <span class="code">$*ARGFILES</span>, which defaults to <span class="code">$*IN</span> in the absence of any filenames.</p>
 <p>To modify values in place use <span class="code">is copy</span> to force a writeable container.</p>
 <pre class="code">for $*IN.lines -&gt; $_ is copy { s/(\w+)/{$0 ~ $0}/; .say }</pre>
 <a name="t66.1.63"></a><h2 id="_type_Cool.pod6-method_words">66.1.63 method words</h2>
 <p>Defined as:</p>
 <pre class="code">method words(Int() $limit)</pre>
 <p>Usage:</p>
 <pre class="code">INTEGER.words(LIMIT?)</pre>
 <p>Coerces the invocant to <a href="#_type_Str.pod6">Str</a>, and returns a list of words that make up the string (and if <span class="code">$limit</span> is supplied, only the first <span class="code">$limit</span> words).</p>
 <pre class="code">say 'The quick brown fox'.words.join('|');      # The|quick|brown|fox
say 'The quick brown fox'.words(2).join('|');   # The|quick</pre>
 <p>Only whitespace counts as word boundaries</p>
 <pre class="code">say "isn't, can't".words.join('|');             # isn't,|can't</pre>
 <a name="t66.1.64"></a><h2 id="_type_Cool.pod6-routine_comb">66.1.64 routine comb</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub comb(Regex $matcher, Str(Cool) $input, $limit = *) returns List:D
multi method comb(Regex $matcher, $limit = *) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">comb /PATTERN/, STRING, LIMIT?
STRING.comb(/PATTERN/, LIMIT?)</pre>
 <p>Returns all (or if supplied, at most <span class="code">$limit</span>) matches of the invocant (method form) or the second argument (sub form) against the <a href="#_type_Regex.pod6">Regex</a> as a list of strings.</p>
 <pre class="code">say "6 or 12".comb(/\d+/).join(", ");           # 6, 12</pre>
 <a name="t66.1.65"></a><h2 id="_type_Cool.pod6-method_contains">66.1.65 method contains</h2>
 <pre class="code">multi method contains(Cool:D: Str(Cool) $needle, Cool $start?) returns True:D</pre>
 <p>Returns <span class="code">True</span> if the invocant contains the <span class="code">$needle</span> at any position within the string. If $start is provided skip as many characters.</p>
 <pre class="code">say "Hello, World".contains('hello');      # False
say "Hello, World".contains(',');          # True</pre>
 <a name="t66.1.66"></a><h2 id="_type_Cool.pod6-routine_index">66.1.66 routine index</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0) returns Int
multi method index(Str(Cool) $needle, Int(Cool) $startpos = 0) returns Int</pre>
 <p>Usage:</p>
 <pre class="code">index STRING, NEEDLE, STARTPOS?
STRING.comb(NEEDLE, STARTPOS?)</pre>
 <p>Coerces the first two arguments (in method form, also counting the invocant) to <a href="#_type_Str.pod6">Str</a>, and searches for <span class="code">$needle</span> in the string starting from <span class="code">$startpos</span>. It returns the offset into the string where <span class="code">$needle</span> was found, and an undefined value if it was not found.</p>
 <p>See <a href="#_type_Str.pod6-routine_index">the documentation in type Str</a> for examples.</p>
 <a name="t66.1.67"></a><h2 id="_type_Cool.pod6-routine_rindex">66.1.67 routine rindex</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)
multi method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)</pre>
 <p>Usage:</p>
 <pre class="code">rindex STRING, NEEDLE, STARTPOS?
STRING.rindex(NEEDLE, STARTPOS?)</pre>
 <p>Coerces the first two arguments (including the invocant in method form) to <a href="#_type_Str.pod6">Str</a> and <span class="code">$startpos</span> to <a href="#_type_Int.pod6">Int</a>, and returns the last position of <span class="code">$needle</span> in <span class="code">$haystack</span> not after <span class="code">$startpos</span>. Returns an undefined value if <span class="code">$needle</span> wasn't found.</p>
 <p>See <a href="#_type_Str.pod6-routine_rindex">the documentation in type Str</a> for examples.</p>
 <a name="t66.1.68"></a><h2 id="_type_Cool.pod6-method_fmt">66.1.68 method fmt</h2>
 <p>Defined as:</p>
 <pre class="code">method fmt($format = '%s') returns Str:D</pre>
 <p>Uses <span class="code">$format</span> to return a formatted representation of the invocant.</p>
 <p>For more information about formats strings, see <a href="#_routine_sprintf.pod6">sprintf</a>.</p>
 <pre class="code">say 11.fmt('This Int equals %03d');               # This Int equals 011
say '16'.fmt('Hexadecimal %x');                   # Hexadecimal 10</pre>
 <a name="t66.1.69"></a><h2 id="_type_Cool.pod6-routine_roots">66.1.69 routine roots</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub roots(Numeric(Cool) $x, Int(Cool) $n)
multi method roots(Int(Cool) $n)</pre>
 <p>Usage:</p>
 <pre class="code">roots NUMERIC, INTEGER
NUMERIC.roots(INTEGER)</pre>
 <p>Coerces the first argument (and in method form, the invocant) to <a href="#_type_Numeric.pod6">Numeric</a> and the second (<span class="code">$n</span>) to <a href="#_type_Int.pod6">Int</a>, and produces a list of <span class="code">$n</span> <a href="#_type_Complex.pod6">Complex</a> <span class="code">$n</span>-roots, which means numbers that, raised to the <span class="code">$n</span>th power, approximately produce the original number.</p>
 <p>For example</p>
 <pre class="code">my $original = 16; 
 my @roots = $original.roots(4); 
 say @roots; 
 
 for @roots -&gt; $r { 
     say abs($r ** 4 - $original); 
 } 
</pre>
 <p>produces this output:</p>
 <pre class="code">2+0i 1.22464679914735e-16+2i -2+2.44929359829471e-16i -3.67394039744206e-16-2i 
 1.77635683940025e-15 
 4.30267170434156e-15 
 8.03651692704705e-15 
 1.04441561648202e-14 
</pre>
 <a name="t66.1.70"></a><h2 id="_type_Cool.pod6-method_IO">66.1.70 method IO</h2>
 <p>Defined as:</p>
 <pre class="code">method IO() returns IO::Path:D</pre>
 <p>Usage:</p>
 <pre class="code">EXPR.IO</pre>
 <p>Coerces the invocant to <a href="#_type_IO::Path.pod6">IO::Path</a>.</p>
 <pre class="code">.say for '.'.IO.dir;        # gives a directory listing</pre>
 <a name="t66.1.71"></a><h2 id="_type_Cool.pod6-routine_EVAL">66.1.71 routine EVAL</h2>
 <p>Defined as:</p>
 <pre class="code">sub EVAL(Cool $code, :$lang = { ... })</pre>
 <p>Usage:</p>
 <pre class="code">EVAL "say 'hello'";</pre>
 <p>Coerces the invocant to <a href="#_type_Str.pod6">Str</a>.</p>
 <p>This works as-is with a literal string parameter. If you have a more complex input, such as a variable or string with embedded code, you must enable the <span class="code">MONKEY-SEE-NO-EVAL</span> pragma:</p>
 <pre class="code">use MONKEY-SEE-NO-EVAL;
EVAL "say { 5 + 5 }";</pre>
 <p>Symbols in the current lexical scope are visible to code in an <span class="code">EVAL</span>.</p>
 <pre class="code">my $answer = 42;
EVAL 'say $answer;';    # says 42</pre>
 <p>However, since the set of symbols in a lexical scope is immutable after compile time, an EVAL can never introduce symbols into the surrounding scope.</p>
 <pre class="code">EVAL 'my $lives = 9'; say $lives;   # error, $lives not declared</pre>
 <p>Furthermore, the <span class="code">EVAL</span> is evaluated in the current package:</p>
 <pre class="code">module M {
    EVAL 'our $answer = 42'
}
say $M::answer;         # says 42</pre>
 <p>And also the current language, meaning any added syntax is available:</p>
 <pre class="code">sub infix:&amp;lt;mean&gt;(*@a) is assoc&amp;lt;list&gt; {
    @a.sum / @a.elems
}
EVAL 'say 2 mean 6 mean 4';     # says 4</pre>
 <p>An <span class="code">EVAL</span> statement evaluates to the result of the last statement:</p>
 <pre class="code">say EVAL 'say 1; 2 mean 6 mean 4';         # says 1, then says 4</pre>
 <p><span class="code">EVAL</span> is also a gateway for executing code in other languages:</p>
 <pre class="code">EVAL "use v5.20; say 'Hello from perl5!'", :lang&amp;lt;Perl5&gt;;</pre>
 <a name="t66.1.72"></a><h2 id="_type_Cool.pod6-routine_EVALFILE">66.1.72 routine EVALFILE</h2>
 <p>Defined as:</p>
 <pre class="code">sub EVALFILE(Cool $filename, :$lang = { ... })</pre>
 <p>Usage:</p>
 <pre class="code">EVALFILE "foo.p6";</pre>
 <p>Slurps the specified file and evaluates it. Behaves the same way as <span class="code">EVAL</span> with regard to both scoping and the <span class="code">$lang</span> parameter. Evaluates to the value produced by the final statement in the file.</p>
 TODO:
unpolar, fmt, substr-rw, trans,
match, subst, sprintf, printf, samecase

</div> <!-- /type/CurrentThreadScheduler.pod6 --><div class="pod-body"><a id="_type_CurrentThreadScheduler.pod6"></a><a name="t67"><h1 class="title">67 class CurrentThreadScheduler</h1></a> <p class="subtitle">Scheduler that blockingly executes code on the current thread</p> <pre class="code">class CurrentThreadScheduler does Scheduler { ... }</pre>
 <p><span class="code">CurrentThreadScheduler</span> executes tasks on the current threads. This means that <a href="#_type_Scheduler.pod6-method cue">method cue</a> blocks until the code has finished executing.</p>
</div> <!-- /type/Cursor.pod6 --><div class="pod-body"><a id="_type_Cursor.pod6"></a><a name="t68"><h1 class="title">68 class Cursor</h1></a> <p class="subtitle">Internal state of the regex engine during parsing</p> <pre class="code">class Cursor { }</pre>
 <p>A <span class="code">Cursor</span> object is used internally by the regex engine in regex matches to keep track of the current position, backtracking waypoints and information about capturing groups.</p>
 <p>A user-space program usually doesn't need to deal with <span class="code">Cursor</span> objects, just with their relatives, <a href="#_type_Match.pod6">Match</a> objects.</p>
</div> <!-- /type/Date.pod6 --><div class="pod-body"><a id="_type_Date.pod6"></a><a name="t69"><h1 class="title">69 class Date</h1></a> <p class="subtitle">Calendar date</p> <pre class="code">class Date { }</pre>
 <p>A <span class="code">Date</span> is an immutable object identifying a day in the Gregorian calendar.</p>
 <p><span class="code">Date</span> objects support addition and subtraction of integers, where an integer is interpreted as the number of days. You can compare <span class="code">Date</span> objects with the numeric comparison operators <span class="code">==, &lt;, &lt;=, >, >=, != </span>. Their stringification in <span class="code">YYYY-MM-DD</span> format means that comparing them with the string operators <span class="code">eq, lt, le</span> etc. also gives the right result.</p>
 <p><span class="code">Date.today</span> creates an object the current day according to the system clock.</p>
 <pre class="code">my $d = Date.new(2015, 12, 24); # Christmas Eve!
say $d;                         # 2015-12-24
say $d.year;                    # 2015
say $d.month;                   # 12
say $d.day;                     # 24
say $d.day-of-week;             # 1  (that's Monday)
say $d.later(days =&gt; 20);       # 2016-01-13
my $n = Date.new('2015-12-31'); # New Year's Eve
say $n - $d;                    # 7 days between New Years/Christmas Eve
say $n + 1;                     # 2016-01-01</pre>
 <a name="t69.1"></a><h1 id="_type_Date.pod6-Methods">69.1 Methods</h1>
 <a name="t69.1.1"></a><h2 id="_type_Date.pod6-method_new">69.1.1 method new</h2>
 <p>Defined as:</p>
 <pre class="code">proto method new() {*}
multi method new($year, $month, $day, :&amp;amp;formatter) returns Date:D
multi method new(:$year!, :$month = 1, :$day = 1)  returns Date:D
multi method new(Str $date)                        returns Date:D
multi method new(Instant:D $dt)                    returns Date:D
multi method new(DateTime:D $dt)                   returns Date:D</pre>
 <p>Usage:</p>
 <pre class="code">$date = Date.new(YEAR, MONTH, DAY, FORMATTER?)
$date = Date.new(year =&gt; YEAR, month =&gt; MONTH?, day =&gt; DAY?, FORMATTER?)
$date = Date.new(YYYY-MM-DD, FORMATTER?)
$date = Date.new(now, FORMATTER?)
$date = Date.new(DateTime.now, FORMATTER?)</pre>
 <p>Creates a new <span class="code">Date</span> object, either from a triple of (year, month, day) that can be coerced to integers, or from a string of the form <span class="code">YYYY-MM-DD</span> (<a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>), or from an Instant or DateTime object. Optionally accepts a formatter as a named parameter.</p>
 <a name="t69.1.2"></a><h2 id="_type_Date.pod6-method_new-from-daycount">69.1.2 method new-from-daycount</h2>
 <p>Defined as:</p>
 <pre class="code">method new-from-daycount($daycount,:&amp;amp;formatter) returns Date:D</pre>
 <p>Usage:</p>
 <pre class="code">$date = Date.new-from-daycount(DAYCOUNT, FORMATTER?)</pre>
 <p>Creates a new <span class="code">Date</span> object given <span class="code">$daycount</span> which is the number of days from epoch Nov. 17, 1858, i.e. the <a href="https://en.wikipedia.org/wiki/Julian_day">Modified Julian Day</a>. Optionally accepts a formatter as a named parameter.</p>
 <pre class="code">say Date.new-from-daycount(49987);          # 1995-09-27</pre>
 <a name="t69.1.3"></a><h2 id="_type_Date.pod6-method_clone">69.1.3 method clone</h2>
 <p>Defined as:</p>
 <pre class="code">method clone(:$year, :$month, :$day)</pre>
 <p>Usage:</p>
 <pre class="code">DATE.clone(YEAR, MONTH, DAY)</pre>
 <p>Creates a new <span class="code">Date</span> object based on the invocant, but with the given arguments overriding the values from the invocant.</p>
 <pre class="code">say Date.new('2015-11-24').clone(month =&gt; 12);    # 2015-12-24</pre>
 <a name="t69.1.4"></a><h2 id="_type_Date.pod6-method_today">69.1.4 method today</h2>
 <p>Defined as:</p>
 <pre class="code">method today(:&amp;amp;formatter) returns Date:D</pre>
 <p>Usage:</p>
 <pre class="code">Date.today</pre>
 <p>Returns a <span class="code">Date</span> object for the current day. Optionally accepts a formatter named parameter.</p>
 <a name="t69.1.5"></a><h2 id="_type_Date.pod6-method_later">69.1.5 method later</h2>
 <p>Defined as:</p>
 <pre class="code">method later(Date:D: *%unit)</pre>
 <p>Usage:</p>
 <pre class="code">DATE.later(DELTA)</pre>
 <p>Returns a <span class="code">Date</span> object based on the current one, but with a date delta applied. The date delta can be passed as a named argument where the argument name is the unit.</p>
 <p>Allowed units are <span class="code">day</span>, <span class="code">days</span>, <span class="code">week</span>, <span class="code">weeks</span>, <span class="code">month</span>, <span class="code">months</span>, <span class="code">year</span>, <span class="code">years</span>. Please note that the plural forms can only be used with the <span class="code">later</span> method.</p>
 <p>Please note that the special ":2nd" named parameter syntax can be a compact and self-documenting way of specifying the delta</p>
 <pre class="code">say Date.new('2015-12-24').later(:2years);  # 2017-12-24</pre>
 <p>Since addition of several different time units is not commutative, only one unit may be passed.</p>
 <pre class="code">my $d = Date.new('2015-02-27');
say $d.later(month =&gt; 1).later(:2days);  # 2015-03-29
say $d.later(days =&gt; 2).later(:1month);  # 2015-04-01
say $d.later(days =&gt; 2).later(:month);   # same, as +True === 1</pre>
 <p>Negative offsets are allowed, though <a href="#68-method earlier">#method earlier</a> is more idiomatic for that.</p>
 <a name="t69.1.6"></a><h2 id="_type_Date.pod6-method_earlier">69.1.6 method earlier</h2>
 <p>Defined as:</p>
 <pre class="code">method earlier(Date:D: *%unit)</pre>
 <p>Usage:</p>
 <pre class="code">DATE.earlier(DELTA)</pre>
 <p>Returns a <span class="code">Date</span> object based on the current one, but with a date delta towards the past applied. See <a href="#68-method later">#method later</a> for usage.</p>
 <a name="t69.1.7"></a><h2 id="_type_Date.pod6-method_truncated-to">69.1.7 method truncated-to</h2>
 <p>Defined as:</p>
 <pre class="code">method truncated-to(Date:D: Cool $unit)</pre>
 <p>Usage:</p>
 <pre class="code">DATE.truncated-to(UNIT)</pre>
 <p>Returns a <span class="code">Date</span> truncated to the first day of its year, month or week. For example</p>
 <pre class="code">my $c = Date.new('2012-12-24');
say $c.truncated-to('year');     # 2012-01-01
say $c.truncated-to('month');    # 2012-12-01
say $c.truncated-to('week');     # 2012-12-24  (because it's Monday already)</pre>
 <a name="t69.1.8"></a><h2 id="_type_Date.pod6-method_succ">69.1.8 method succ</h2>
 <p>Defined as:</p>
 <pre class="code">method succ(Date:D:) returns Date:D</pre>
 <p>Usage:</p>
 <pre class="code">DATE.succ</pre>
 <p>Returns a <span class="code">Date</span> of the following day.</p>
 <pre class="code">say Date.new("2016-02-28").succ;   # 2016-02-29</pre>
 <a name="t69.1.9"></a><h2 id="_type_Date.pod6-method_pred">69.1.9 method pred</h2>
 <p>Defined as:</p>
 <pre class="code">method pred(Date:D:) returns Date:D</pre>
 <p>Usage:</p>
 <pre class="code">DATE.pred</pre>
 <p>Returns a <span class="code">Date</span> of the previous day.</p>
 <pre class="code">say Date.new("2016-01-01").pred;   # 2015-12-31</pre>
 <a name="t69.1.10"></a><h2 id="_type_Date.pod6-method_Str">69.1.10 method Str</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Str(Date:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">DATE.Str</pre>
 <p>Returns a string representation of the invocant, as specified by the <a href="#_type_Dateish.pod6-method_formatter">the formatter</a>. If no formatter was specified, an (<a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>) date will be returned.</p>
 <pre class="code">say Date.new('2015-12-24').Str;                     # 2015-12-24

my $fmt = { sprintf "%02d/%02d/%04d", .month, .day, .year };
say Date.new('2015-12-24', formatter =&gt; $fmt).Str;  # 12/24/2015</pre>
 <a name="t69.1.11"></a><h2 id="_type_Date.pod6-method_gist">69.1.11 method gist</h2>
 <p>Defined as:</p>
 <pre class="code">multi method gist(Date:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">DATE.gist</pre>
 <p>Returns the date in <span class="code">YYYY-MM-DD</span> format (<a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>)</p>
 <a name="t69.2"></a><h1 id="_type_Date.pod6-Functions">69.2 Functions</h1>
 <a name="t69.2.1"></a><h2 id="_type_Date.pod6-sub_sleep">69.2.1 sub sleep</h2>
 <pre class="code">sub sleep($seconds = Inf --&gt; Nil)</pre>
 <p>Attempt to sleep for the given number of <span class="code">$seconds</span>. Returns <span class="code">Nil</span> on completion. Accepts <span class="code">Int</span>, <span class="code">Num</span>, <span class="code">Rat</span>, or <span class="code">Duration</span> types as an argument since all of these also do <span class="code">Real</span>.</p>
 <pre class="code">sleep 5                # Int
sleep 5.2              # Num
sleep (5/2)            # Rat
sleep (now - now + 5)  # Duration</pre>
 <p>It is thus possible to sleep for a non-integer amount of time. For instance, the following code shows that <span class="code">sleep (5/2)</span> sleeps for 2.5 seconds and <span class="code">sleep 5.2</span> sleeps for 5.2 seconds:</p>
 <pre class="code">my $before = now
sleep (5/2)
my $after = now
say $after-$before  #=&gt; 2.502411561

my $before = now
sleep 5.2
my $after = now
say $after-$before  #=&gt; 5.20156987</pre>
 <a name="t69.2.2"></a><h2 id="_type_Date.pod6-sub_sleep-timer">69.2.2 sub sleep-timer</h2>
 <pre class="code">sub sleep-timer(Real $seconds = Inf --&gt; Duration)</pre>
 <p>This function is just like <span class="code">sleep</span>, but returns the amount of time remaining to sleep as a <span class="code">Duration</span> (which will be 0 if the call was not interrupted).</p>
 <pre class="code">say sleep-timer 3.14  #=&gt; 0</pre>
 <a name="t69.2.3"></a><h2 id="_type_Date.pod6-sub_sleep-until">69.2.3 sub sleep-until</h2>
 <pre class="code">sub sleep-until(Instant $until --&gt; Bool)</pre>
 <p>Works just like <span class="code">sleep</span> but checks the current time and goes back to sleep if accidentally woken up early, to guarantee waiting until the specified time. Returns <span class="code">True</span> if the function actually waited, or if the specified time happens to be the present moment. Returns <span class="code">False</span> if you asked to sleep until a time in the past.</p>
 <p>To sleep until 10 seconds into the future, one could write something like this:</p>
 <pre class="code">say sleep-until now+10     #=&gt; True</pre>
 <p>Trying to sleep until a time in the past doesn't work:</p>
 <pre class="code">my $instant = now - 5;
say sleep-until $instant   # =&gt; False</pre>
 <p>However if we put the instant sufficiently far in the future, the sleep should run:</p>
 <pre class="code">my $instant = now + 30
# assuming the two commands are run within 30 seconds of one another...
say sleep-until $instant   # =&gt; True</pre>
 <p>To specify an exact instant in the future, first create a <span class="code">DateTime</span> at the appropriate point in time, and cast to an <span class="code">Instant</span>.</p>
 <pre class="code">my $instant = DateTime.new(
    year =&gt; 2020,
    month =&gt; 9,
    day =&gt; 1,
    hour =&gt; 22,
    minute =&gt; 5);
say sleep-until $instant.Instant  # =&gt; True (eventually...)</pre>
 <p>This could be be used as a primitive kind of alarm clock. For instance, say you need to get up at 7am on the 4th of September 2015, but for some reason your usual alarm clock is broken and you only have your laptop. You can specify the time to get up (being careful about timezones, since <span class="code">DateTime.new</span> uses UTC by default) as an <span class="code">Instant</span> and pass this to <span class="code">sleep-until</span>, after which you can play an mp3 file to wake you up instead of your normal alarm clock. This scenario looks roughly like this:</p>
 <pre class="code"># DateTime.new uses UTC by default, so get timezone from current time
my $timezone = DateTime.now.timezone;
my $instant = DateTime.new(
    year =&gt; 2015,
    month =&gt; 9,
    day =&gt; 4,
    hour =&gt; 7,
    minute =&gt; 0,
    timezone =&gt; $timezone
).Instant;
sleep-until $instant;
qqx{mplayer wake-me-up.mp3};</pre>
</div> <!-- /type/DateTime.pod6 --><div class="pod-body"><a id="_type_DateTime.pod6"></a><a name="t70"><h1 class="title">70 class DateTime</h1></a> <p class="subtitle">Calendar date with time</p> <pre class="code">class DateTime does Dateish { ... }</pre>
 <p>For handling points in civil time, a <span class="code">DateTime</span> object stores year, month, day, hour, minute (all <a href="#_type_Int.pod6">Int</a>), second (potentially fractional) and a time zone.</p>
 <p>It provides methods for calculating with date and time.</p>
 <p><span class="code">DateTime</span> methods are immutable; if you are tempted to modify one, create a modified copy instead.</p>
 <p>Time zones are handled as <a href="#_type_Int.pod6">Integers</a> in <b>seconds</b> offset from UTC, not by time zone name.</p>
 <pre class="code">use v6; 
 my $dt = DateTime.new( 
     year    =&gt; 2015, 
     month   =&gt; 11, 
     day     =&gt; 21, 
     hour    =&gt; 16, 
     minute  =&gt; 1, 
 ); 
 
 say $dt;                            # 2015-11-21T16:01:00Z 
 say $dt.later(days =&gt; 20);          # 2015-12-11T16:01:00Z 
 say $dt.truncated-to('hour');       # 2015-11-21T16:00:00Z 
 say $dt.in-timezone(-8 * 3600);     # 2015-11-21T08:01:00-0800 
 
 my $now = DateTime.now(formatter =&gt; { sprintf "%02d:%02d",.hour,.minute }); 
 say $now;                           # 12:45 (or something like that) 
</pre>
 <a name="t70.1"></a><h1 id="_type_DateTime.pod6-Methods">70.1 Methods</h1>
 <a name="t70.1.1"></a><h2 id="_type_DateTime.pod6-method_new">70.1.1 method new</h2>
 <p>Defined as:</p>
 <pre class="code">multi method new(Int :$year!, Int :$month = 1, Int :$day = 1,
                 Int :$hour = 0, Int :$minute = 0, :$second = 0,
                 Int :$timezone = 0, :&amp;amp;formatter)
multi method new(Date :$date!,
                 Int :$hour = 0, Int :$minute = 0, :$second = 0,
                 Int :$timezone = 0, :&amp;amp;formatter)
multi method new(Int() $year, Int() $month, Int() $day,
                 Int() $hour, Int $minute, $second,
                 Int() :$timezone = 0, :&amp;amp;formatter)       # since 6.d
multi method new(Instant:D $i,  :$timezone=0, :&amp;amp;formatter)
multi method new(Int:D $posix,  :$timezone=0, :&amp;amp;formatter)
multi method new(Str:D $format, :$timezone=0, :&amp;amp;formatter)</pre>
 <p>Usage:</p>
 <pre class="code">$datetime = DateTime.new(YEAR, MONTH?, DAY?, HOUR?, MINUTE?, SECOND?,
  TIMEZONE?, FORMATTER?)
$datetime = DateTime.new(DATE, HOUR?, MINUTE?, SECOND?, TIMEZONE?,
  FORMATTER?)
$datetime = DateTime.new(YEAR, MONTH, DAY, HOUR, MINUTE, SECOND,
  TIMEZONE?, FORMATTER?)                                  # since 6.d
$datetime = DateTime.new(INSTANT, TIMEZONE?, FORMATTER?)
$datetime = DateTime.new(TIMESTAMP, TIMEZONE?, FORMATTER?)
$datetime = DateTime.new(FORMAT, TIMEZONE?, FORMATTER?)</pre>
 <p>Creates a new <span class="code">DateTime</span> object. One option for creating a new DateTime object is from the components (year, month, day, hour, ...) separately. Another is to pass a <a href="#_type_Date.pod6">Date</a> object for the date component, and specify the time component-wise. Yet another is to obtain the time from an <a href="#_type_Instant.pod6">Instant</a>, and only supply the time zone and formatter. Or instead of an Instant you can supply an <a href="#_type_Int.pod6">Int</a> as a UNIX timestamp.</p>
 <p>You can also supply a <a href="#_type_Str.pod6">Str</a> formatted in ISO 8601 timestamp notation or as a full <a href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> date and time. Strings should be formatted as <span class="code">yyyy-mm-ddThh:mm::ssZ</span> or <span class="code">yyyy-mm-ddThh:mm:ss+0100</span>. We are somewhat less restrictive than the ISO 8601 standard, as we allow Unicode digits and mixing of condensed and extended time formats.</p>
 <p>An invalid input string throws an exception of type <a href="#_type_X::Temporal::InvalidFormat.pod6">X::Temporal::InvalidFormat</a>. If you supply a string that includes a time zone and supply the <span class="code">timezone</span> named argument, an exception of type <a href="#_type_X::DateTime::TimezoneClash.pod6">X::DateTime::TimezoneClash</a> is thrown.</p>
 <a name="t70.1.2"></a><h2 id="_type_DateTime.pod6-method_now">70.1.2 method now</h2>
 <p>Defined as:</p>
 <pre class="code">method now(:$timezone=$*TZ, &amp;amp;formatter) returns DateTime:D</pre>
 <p>Usage:</p>
 <pre class="code">DateTime.now(TIMEZONE?, FORMATTER?)</pre>
 <p>Creates a new <span class="code">DateTime</span> object from the current system time, optionally with a different timezone than the default attached.</p>
 <a name="t70.1.3"></a><h2 id="_type_DateTime.pod6-method_clone">70.1.3 method clone</h2>
 <p>Defined as:</p>
 <pre class="code">method clone(:$year, :$month, :$day, :$hour, :$minute, :$second,
             :$timezone, :&amp;amp;formatter)</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.clone(YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, TIMEZONE,
FORMATTER)</pre>
 <p>Creates a new <span class="code">DateTime</span> object based on the invocant, but with the given arguments overriding the values from the invocant.</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00Z').clone(hour =&gt; 0);
    # 2015-12-24T00:23:00Z</pre>
 <p>Note that this can lead to invalid dates in some circumstances:</p>
 <pre class="code">say DateTime.new("2012-02-29T12:34:56Z").clone(year =&gt; 2015);
    # day of 2015/2 out of range. Is: 29, should be in 1..28</pre>
 <a name="t70.1.4"></a><h2 id="_type_DateTime.pod6-method_hour">70.1.4 method hour</h2>
 <p>Defined as:</p>
 <pre class="code">method hour(DateTime:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.hour</pre>
 <p>Returns the hour component.</p>
 <pre class="code">say DateTime.new('2012-02-29T12:34:56Z').hour;      # 12</pre>
 <a name="t70.1.5"></a><h2 id="_type_DateTime.pod6-method_minute">70.1.5 method minute</h2>
 <p>Defined as:</p>
 <pre class="code">method minute(DateTime:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.minute</pre>
 <p>Returns the minute component.</p>
 <pre class="code">say DateTime.new('2012-02-29T12:34:56Z').minute;     # 34</pre>
 <a name="t70.1.6"></a><h2 id="_type_DateTime.pod6-method_second">70.1.6 method second</h2>
 <p>Defined as:</p>
 <pre class="code">method second(DateTime:D:)</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.second</pre>
 <p>Returns the second component, including potentially fractional seconds.</p>
 <pre class="code">say DateTime.new('2012-02-29T12:34:56Z').second;     # 56
say DateTime.new('2012-02-29T12:34:56.789Z').second; # 56.789
say DateTime.new('2012-02-29T12:34:56,789Z').second; # comma also ok</pre>
 <a name="t70.1.7"></a><h2 id="_type_DateTime.pod6-method_whole-second">70.1.7 method whole-second</h2>
 <p>Defined as:</p>
 <pre class="code">method whole-second(DateTime:D:)</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.whole-second</pre>
 <p>Returns the second component, rounded down to an <a href="#_type_Int.pod6">Int</a>.</p>
 <pre class="code">say DateTime.new('2012-02-29T12:34:56.789Z').whole-second;      # 56</pre>
 <a name="t70.1.8"></a><h2 id="_type_DateTime.pod6-method_timezone">70.1.8 method timezone</h2>
 <p>Defined as:</p>
 <pre class="code">method timezone(DateTime:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.timezone</pre>
 <p>Returns the time zone in seconds as an offset from UTC.</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00+0200').timezone;      # 7200</pre>
 <a name="t70.1.9"></a><h2 id="_type_DateTime.pod6-method_offset">70.1.9 method offset</h2>
 <p>Defined as:</p>
 <pre class="code">method offset(DateTime:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.offset</pre>
 <p>Returns the time zone in seconds as an offset from UTC. This is an alias for <a href="#69-method timezone">#method timezone</a>.</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00+0200').offset;            # 7200</pre>
 <a name="t70.1.10"></a><h2 id="_type_DateTime.pod6-method_offset-in-minutes">70.1.10 method offset-in-minutes</h2>
 <p>Defined as:</p>
 <pre class="code">method offset-in-minutes(DateTime:D:) returns Real:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.offset-in-minutes</pre>
 <p>Returns the time zone in minutes as an offset from UTC.</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00+0200').offset-in-minutes; # 120</pre>
 <a name="t70.1.11"></a><h2 id="_type_DateTime.pod6-method_offset-in-hours">70.1.11 method offset-in-hours</h2>
 <p>Defined as:</p>
 <pre class="code">method offset-in-hours(DateTime:D:) returns Real:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.offset-in-hours</pre>
 <p>Returns the time zone in hours as an offset from UTC.</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00+0200').offset-in-hours;   # 2</pre>
 <a name="t70.1.12"></a><h2 id="_type_DateTime.pod6-method_Str">70.1.12 method Str</h2>
 <p>Defined as:</p>
 <pre class="code">method Str(DateTime:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.Str</pre>
 <p>Returns a string representation of the invocant, as done by <a href="#69-method formatter">the formatter</a>. If no formatter was specified, an ISO 8601 timestamp will be returned.</p>
 <a name="t70.1.13"></a><h2 id="_type_DateTime.pod6-method_Instant">70.1.13 method Instant</h2>
 <p>Defined as:</p>
 <pre class="code">method Instant(DateTime:D:) returns Instant:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.Instant</pre>
 <p>Returns an <a href="#_type_Instant.pod6">Instant</a> object based on the invocant.</p>
 <a name="t70.1.14"></a><h2 id="_type_DateTime.pod6-method_posix">70.1.14 method posix</h2>
 <p>Defined as:</p>
 <pre class="code">method posix(DateTime:D: $ignore-timezone = False) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.posix</pre>
 <p>Returns the date and time as a POSIX/UNIX timestamp (seconds since the Epoch, 1st January 1970 UTC).</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00Z').posix;     # 1450959780</pre>
 <a name="t70.1.15"></a><h2 id="_type_DateTime.pod6-method_later">70.1.15 method later</h2>
 <p>Defined as:</p>
 <pre class="code">method later(DateTime:D: *%unit)</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.later(DELTA)</pre>
 <p>Returns a DateTime object based on the current one, but with a time delta applied. The time delta can be passed as a named argument where the argument name is the unit.</p>
 <p>Allowed units are <span class="code">second</span>, <span class="code">seconds</span>, <span class="code">minute</span>, <span class="code">minutes</span>, <span class="code">hour</span>, <span class="code">hours</span>, <span class="code">day</span>, <span class="code">days</span>, <span class="code">week</span>, <span class="code">weeks</span>, <span class="code">month</span>, <span class="code">months</span>, <span class="code">year</span>, <span class="code">years</span>. Please note that the plural forms can only be used with the <span class="code">later</span> method.</p>
 <p>Please note that the special ":2nd" named parameter syntax can be a compact and self-documenting way of specifying the delta</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00Z').later(:2years);
    # 2017-12-24T12:23:00Z</pre>
 <p>Since addition of several different time units is not commutative, only one unit may be passed.</p>
 <pre class="code">my $d = DateTime.new(date =&gt; Date.new('2015-02-27'));
say $d.later(month =&gt; 1).later(:2days);  # 2015-03-29T00:00:00Z
say $d.later(days =&gt; 2).later(:1month);  # 2015-04-01T00:00:00Z
say $d.later(days =&gt; 2).later(:month);   # same, as +True === 1</pre>
 <p>Negative offsets are allowed, though <a href="#69-method earlier">#method earlier</a> is more idiomatic for that.</p>
 <a name="t70.1.16"></a><h2 id="_type_DateTime.pod6-method_earlier">70.1.16 method earlier</h2>
 <p>Defined as:</p>
 <pre class="code">method earlier(DateTime:D: *%unit)</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.earlier(DELTA)</pre>
 <p>Returns a DateTime object based on the current one, but with a time delta towards the past applied. See <a href="#69-method later">#method later</a> for usage.</p>
 <a name="t70.1.17"></a><h2 id="_type_DateTime.pod6-method_truncated-to">70.1.17 method truncated-to</h2>
 <p>Defined as:</p>
 <pre class="code">method truncated-to(DateTime:D: Cool $unit)</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.truncated-to(UNIT)</pre>
 <p>Returns a copy of the invocant, with everything smaller than the specified unit truncated to the smallest possible value.</p>
 <pre class="code">my $d = DateTime.new("2012-02-29T12:34:56.946314Z");
say $d.truncated-to('second');      # 2012-02-29T12:34:56Z
say $d.truncated-to('minute');      # 2012-02-29T12:34:00Z
say $d.truncated-to('hour');        # 2012-02-29T12:00:00Z
say $d.truncated-to('day');         # 2012-02-29T00:00:00Z
say $d.truncated-to('month');       # 2012-02-01T00:00:00Z
say $d.truncated-to('year');        # 2012-01-01T00:00:00Z</pre>
 <p>DateTimes with fractional seconds can be truncated to whole seconds with <span class="code">.truncated-to('second')</span>.</p>
 <a name="t70.1.18"></a><h2 id="_type_DateTime.pod6-method_Date">70.1.18 method Date</h2>
 <p>Defined as:</p>
 <pre class="code">method Date(DateTime:D:) returns Date:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.Date</pre>
 <p>Returns a <a href="#_type_Date.pod6">Date</a> object for this DateTime object. Which obviously lacks the time component.</p>
 <a name="t70.1.19"></a><h2 id="_type_DateTime.pod6-method_utc">70.1.19 method utc</h2>
 <p>Defined as:</p>
 <pre class="code">method utc(DateTime:D:) returns DateTime:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.utc</pre>
 <p>Returns a DateTime object for the same time, but in time zone UTC.</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00+0200').utc";  # 2015-12-24T10:23:00Z</pre>
 <a name="t70.1.20"></a><h2 id="_type_DateTime.pod6-method_in-timezone">70.1.20 method in-timezone</h2>
 <p>Defined as:</p>
 <pre class="code">method in-timezone(DateTime:D: $timezone = 0) returns DateTime:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.in-timezone</pre>
 <p>Returns a DateTime object for the same time, but in the specified time zone.</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00Z').in-timezone(3600 + 1800);
    # 2015-12-24T13:53:00+0130</pre>
 <a name="t70.1.21"></a><h2 id="_type_DateTime.pod6-method_local">70.1.21 method local</h2>
 <p>Defined as:</p>
 <pre class="code">method local(DateTime:D:) returns DateTime:D</pre>
 <p>Usage:</p>
 <pre class="code">DATETIME.local</pre>
 <p>Returns a DateTime object for the same time, but in the local time zone (<span class="code">$*TZ</span>).</p>
 <pre class="code">my $*TZ = -3600;
say DateTime.new('2015-12-24T12:23:00+0200').local;
        # 2015-12-24T09:23:00-0100</pre>
</div> <!-- /type/Dateish.pod6 --><div class="pod-body"><a id="_type_Dateish.pod6"></a><a name="t71"><h1 class="title">71 role Dateish</h1></a> <p class="subtitle">Object that can be treated as a date</p> <pre class="code">role Dateish { ... }</pre>
 <p>Both <a href="#_type_Date.pod6">Date</a> and <a href="#_type_DateTime.pod6">DateTime</a> support accessing a year, month and day-of-month, as well as related functionality such as calculating the day of the week.</p>
 <a name="t71.1"></a><h1 id="_type_Dateish.pod6-Methods">71.1 Methods</h1>
 <a name="t71.1.1"></a><h2 id="_type_Dateish.pod6-method_year">71.1.1 method year</h2>
 <p>Defined as:</p>
 <pre class="code">method year(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.year</pre>
 <p>Returns the year of the date</p>
 <a name="t71.1.2"></a><h2 id="_type_Dateish.pod6-method_month">71.1.2 method month</h2>
 <p>Defined as:</p>
 <pre class="code">method month(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.month</pre>
 <p>Returns the month of the date (1..12)</p>
 <a name="t71.1.3"></a><h2 id="_type_Dateish.pod6-method_day">71.1.3 method day</h2>
 <p>Defined as:</p>
 <pre class="code">method day(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.day</pre>
 <p>Returns the day of the month of the date (1..31)</p>
 <a name="t71.1.4"></a><h2 id="_type_Dateish.pod6-method_formatter">71.1.4 method formatter</h2>
 <p>Defined as:</p>
 <pre class="code">method formatter(Dateish:D:)</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.formatter</pre>
 <p>Returns the formatting function which is used for conversion to <a href="#_type_Str.pod6">Str</a>. If none was provided at object construction, a default formatter is used. In that case the method will return a Callable type object.</p>
 <p>The formatting function is called by <a href="#_type_DateTime.pod6-method Str">DateTime method Str</a> with the invocant as its only argument.</p>
 <pre class="code">my $dt = Date.new('2015-12-31');  # (no formatter specified)
say $dt.formatter.WHAT;           # (Callable)
my $us-format = sub ($self) { sprintf "%02d/%02d/%04d", .month, .day, .year given $self; };
$dt = Date.new('2015-12-31', formatter =&gt; $us-format);
say $dt.formatter.WHAT;           # (Sub)
say $dt;                          # 12/31/2015</pre>
 <a name="t71.1.5"></a><h2 id="_type_Dateish.pod6-method_is-leap-year">71.1.5 method is-leap-year</h2>
 <p>Defined as:</p>
 <pre class="code">method is-leap-year($year = self.year) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.is-leap-year(YEAR?)</pre>
 <p>Returns <span class="code">True</span> if <span class="code">$year</span> is a leap year. Can be called as a class method if the year is provided.</p>
 <pre class="code">say Dateish.is-leap-year(2016);           # True
say Date.new("1900-01-01").is-leap-year;  # False</pre>
 <a name="t71.1.6"></a><h2 id="_type_Dateish.pod6-method_day-of-month">71.1.6 method day-of-month</h2>
 <p>Defined as:</p>
 <pre class="code">method day-of-month(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.day-of-month</pre>
 <p>Returns the day of the month of the date (1..31). Synonymous to the <span class="code">day</span> method.</p>
 <a name="t71.1.7"></a><h2 id="_type_Dateish.pod6-method_day-of-week">71.1.7 method day-of-week</h2>
 <p>Defined as:</p>
 <pre class="code">method day-of-week(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.day-of-week</pre>
 <p>Returns the day of the week, where 1 is Monday, 2 is Tuesday and Sunday is 7.</p>
 <a name="t71.1.8"></a><h2 id="_type_Dateish.pod6-method_day-of-year">71.1.8 method day-of-year</h2>
 <p>Defined as:</p>
 <pre class="code">method day-of-year(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.day-of-year</pre>
 <p>Returns the day of the year (1..366).</p>
 <a name="t71.1.9"></a><h2 id="_type_Dateish.pod6-method_days-in-month">71.1.9 method days-in-month</h2>
 <p>Defined as:</p>
 <pre class="code">method days-in-month(year = self.year, month = self.month) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.days-in-month(YEAR?, MONTH?)</pre>
 <p>Returns the number of days in a month, where year and month default to that of the invocant. If both year and month are provided, it can be called as a class method.</p>
 <pre class="code">say Date.new("2016-01-02").days-in-month;  # 31
say Dateish.days-in-month(2016, 1);        # 31</pre>
 <a name="t71.1.10"></a><h2 id="_type_Dateish.pod6-method_week">71.1.10 method week</h2>
 <p>Defined as:</p>
 <pre class="code">method week()</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.week</pre>
 <p>Returns a list of two integers: the year, and the week number. This is because at the start or end of a year, the week may actually belong to the other year.</p>
 <pre class="code">my ($year, $week) = Date.new("2014-12-31").week;
say $year;      # 2015
say $week;      # 1
say Date.new('2015-01-31').week;        # 2015 5</pre>
 <a name="t71.1.11"></a><h2 id="_type_Dateish.pod6-method_week-number">71.1.11 method week-number</h2>
 <p>Defined as:</p>
 <pre class="code">method week-number(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.week-number</pre>
 <p>Returns the week number (1..53) of the date specified by the invocant. The first week of the year is defined by ISO as the one which contains the fourth day of January. Thus, dates early in January often end up in the last week of the prior year, and similarly, the final few days of December may be placed in the first week of the next year.</p>
 <pre class="code">say Date.new("2014-12-31").week-number;   # 1  (first week of 2015)
say Date.new("2016-01-02").week-number;   # 53 (last week of 2015)</pre>
 <a name="t71.1.12"></a><h2 id="_type_Dateish.pod6-method_week-year">71.1.12 method week-year</h2>
 <p>Defined as:</p>
 <pre class="code">method week-year(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.week-year</pre>
 <p>Returns the week year of the date specified by the invocant. Normally <span class="code">week-year</span> is equal to <span class="code">Date.year</span>. Note however that dates early in January often end up in the last week of the prior year, and similarly, the final few days of December may be placed in the first week of the next year.</p>
 <pre class="code">say Date.new("2015-11-15").week-year;   # 2015
say Date.new("2014-12-31").week-year;   # 2015 (date belongs to the first week of 2015)
say Date.new("2016-01-02").week-year;   # 2015 (date belongs to the last week of 2015)</pre>
 <a name="t71.1.13"></a><h2 id="_type_Dateish.pod6-method_weekday-of-month">71.1.13 method weekday-of-month</h2>
 <p>Defined as:</p>
 <pre class="code">method weekday-of-month(Date:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.weekday-of-month</pre>
 <p>Returns a number (1..5) indicating the number of times a particular day-of-week has occurred so far during that month, the day itself included.</p>
 <pre class="code">say Date.new("2003-06-09").weekday-of-month;  # 2  (second Monday of the month)</pre>
 <a name="t71.1.14"></a><h2 id="_type_Dateish.pod6-method_yyyy-mm-dd">71.1.14 method yyyy-mm-dd</h2>
 <p>Defined as:</p>
 <pre class="code">method yyyy-mm-dd(Date:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.yyyy-mm-dd</pre>
 <p>Returns the date in <span class="code">YYYY-MM-DD</span> format (<a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>)</p>
 <a name="t71.1.15"></a><h2 id="_type_Dateish.pod6-method_daycount">71.1.15 method daycount</h2>
 <p>Defined as:</p>
 <pre class="code">method daycount(Dateish:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">Dateish.daycount</pre>
 <p>Returns the number of days from the epoch Nov. 17, 1858 to the day of the invocant. The daycount returned by this method is the MJD, i.e. the <a href="https://en.wikipedia.org/wiki/Julian_day">Modified Julian Day</a>, which is used routinely by e.g. astronomers, geodesists, scientists and others. The MJD convention is designed to facilitate simplified chronological calculations.</p>
 <pre class="code">say Date.new('1995-09-27').daycount;    # 49987</pre>
</div> <!-- /type/Duration.pod6 --><div class="pod-body"><a id="_type_Duration.pod6"></a><a name="t72"><h1 class="title">72 class Duration</h1></a> <p class="subtitle">Length of time</p> <pre class="code">class Duration is Cool does Real { }</pre>
 <p>A <span class="code">Duration</span> represents a length of time in atomic seconds, with fractions. Like an <a href="#_type_Instant.pod6">Instant</a>, it is epoch-agnostic. In numeric contexts (situations where a <span class="code">Duration</span> is used as a number), a <span class="code">Duration</span> will return either a <a href="#_type_Rat.pod6">Rat</a> or a <a href="#_type_FatRat.pod6">FatRat</a> representing the number of seconds it holds.</p>
 <p><span class="code">Duration</span>s can be subtracted from or added to <span class="code">Instant</span>s to yield another, new <span class="code">Instant</span>. Subtracting one <span class="code">Instant</span> from another yields a <span class="code">Duration</span>. A <span class="code">Duration</span> can also result from mathematical operations between two <span class="code">Duration</span>s when it makes sense (namely, the addition, subtraction, or modulus of two <span class="code">Duration</span>s). The type of object returned for other numeric operations is currently unspecified.</p>
</div> <!-- /type/Exception.pod6 --><div class="pod-body"><a id="_type_Exception.pod6"></a><a name="t73"><h1 class="title">73 class Exception</h1></a> <p class="subtitle">Anomalous event capable of interrupting normal control-flow</p> <pre class="code">class Exception { ... }</pre>
 <p>All exceptions that are placed into the <span class="code">$!</span> variable (or into <span class="code">$_</span> in <span class="code">CATCH</span> blocks) inherit from <span class="code">Exception</span>. When you call <span class="code">die</span> or <span class="code">fail</span> with a non-Exception argument, it is wrapped into an <span class="code">X::AdHoc</span> object, which also inherits from <span class="code">Exception</span>.</p>
 <p>User-defined exception classes should inherit from <span class="code">Exception</span> too, and define at least a method <span class="code">message</span>.</p>
 <pre class="code">class X::YourApp::SomeError is Exception {
    method message() {
        "A YourApp-Specific error occurred: out of coffee!";
    }
}</pre>
 <a name="t73.1"></a><h1 id="_type_Exception.pod6-Methods">73.1 Methods</h1>
 <a name="t73.1.1"></a><h2 id="_type_Exception.pod6-method_message">73.1.1 method message</h2>
 <p>Defined as:</p>
 <pre class="code">method message(Exception:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">EXCEPTION.message</pre>
 <p>This is a stub that must be overwritten by subclasses, and should return the exception message.</p>
 <p>Special care should be taken that this method does not produce an exception itself.</p>
 <a name="t73.1.2"></a><h2 id="_type_Exception.pod6-method_backtrace">73.1.2 method backtrace</h2>
 <p>Defined as:</p>
 <pre class="code">method backtrace(Exception:D:) returns Backtrace:D</pre>
 <p>Usage:</p>
 <pre class="code">EXCEPTION.backtrace</pre>
 <p>Returns the backtrace associated with the exception. Only makes sense on exceptions that have been thrown at least once.</p>
 <a name="t73.1.3"></a><h2 id="_type_Exception.pod6-method_throw">73.1.3 method throw</h2>
 <p>Defined as:</p>
 <pre class="code">method throw(Exception:D:)</pre>
 <p>Usage:</p>
 <pre class="code">EXCEPTION.throw</pre>
 <p>Throws the exception.</p>
 <a name="t73.1.4"></a><h2 id="_type_Exception.pod6-method_resume">73.1.4 method resume</h2>
 <p>Resumes control flow where <span class="code">.throw</span> left it when handled in a <span class="code">CATCH</span> block.</p>
 <p>Defined as:</p>
 <pre class="code">method resume(Exception:D:)</pre>
 <p>Usage:</p>
 <pre class="code">CATCH { default { .resume } }</pre>
 <a name="t73.1.5"></a><h2 id="_type_Exception.pod6-method_rethrow">73.1.5 method rethrow</h2>
 <p>Defined as:</p>
 <pre class="code">method rethrow(Exception:D:)</pre>
 <p>Usage:</p>
 <pre class="code">EXCEPTION.rethrow</pre>
 <p>Rethrows an exception that has already been thrown at least once. This is different from <span class="code">throw</span> in that it preserves the original backtrace.</p>
 <a name="t73.1.6"></a><h2 id="_type_Exception.pod6-method_fail">73.1.6 method fail</h2>
 <p>Defined as:</p>
 <pre class="code">sub    fail(*@text)
sub    fail(Exception $e)
method fail(Exception:D $e:)</pre>
 <p>Usage:</p>
 <pre class="code">fail(TEXT)
fail(EXCEPTION)
EXCEPTION.fail</pre>
 <p>Exits the calling <span class="code">Routine</span> and returns a <a href="#_type_Failure.pod6">Failure</a> object wrapping the exception <span class="code">$e</span> - or, for the <span class="code">*@text</span> form, an <a href="#_type_X::AdHoc.pod6">X::AdHoc</a> exception constructed from the concatenation of <span class="code">@text</span>.</p>
 <pre class="code">sub copy-directory-tree ($dir) {
    fail "$dir is not a directory" if !$dir.IO.d;
    ...
}</pre>
 <a name="t73.1.7"></a><h2 id="_type_Exception.pod6-method_gist">73.1.7 method gist</h2>
 <p>Defined as:</p>
 <pre class="code">multi method gist(Exception:D:)</pre>
 <p>Usage:</p>
 <pre class="code">EXCEPTION.gist</pre>
 <p>Returns whatever the exception printer should produce for this exception. The default implementation returns message and backtrace separated by a newline.</p>
 <a name="t73.1.8"></a><h2 id="_type_Exception.pod6-sub_die">73.1.8 sub die</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub die(*@message)
multi sub die(Exception:D $e:)
method    die(Exception:D $e:)</pre>
 <p>Usage:</p>
 <pre class="code">die(MESSAGE)
die(EXCEPTION)
EXCEPTION.die</pre>
 <p>Throws a fatal <span class="code">Exception</span>. The default exception handler prints each element of the list to <span class="code">$*ERR</span> (STDERR).</p>
 <a name="t73.1.9"></a><h2 id="_type_Exception.pod6-sub_warn">73.1.9 sub warn</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub warn(*@message)</pre>
 <p>Usage:</p>
 <pre class="code">warn(MESSAGE)</pre>
 <p>Throws a resumable warning exception, which is considered a control exception, and hence is invisible to most normal exception handlers. The outermost control handler will print the warning to <span class="code">$*ERR</span>. After printing the warning, the exception is resumed where it was thrown. To override this behavior, catch the exception in a <span class="code">CONTROL</span> block. A <span class="code">quietly {...}</span> block is the opposite of a <span class="code">try {...}</span> block in that it will suppress any warnings but pass fatal exceptions through.</p>
 <p>To simply print to <span class="code">$*ERR</span>, please use <span class="code">note</span> instead. <span class="code">warn</span> should be reserved for use in threatening situations when you don't quite want to throw an exception.</p>
</div> <!-- /type/Failure.pod6 --><div class="pod-body"><a id="_type_Failure.pod6"></a><a name="t74"><h1 class="title">74 class Failure</h1></a> <p class="subtitle">Delayed exception</p> <pre class="code">class Failure { }</pre>
 <p>A <span class="code">Failure</span> is a <i>soft</i> or <i>unthrown</i> exception, usually generated by calling <span class="code">&amp;fail</span>. It acts as a wrapper around an <a href="#_type_Exception.pod6">Exception</a> object.</p>
 <p>Sink (void) context causes a Failure to throw, i.e. turn into a normal exception.</p>
 <p>Checking a Failure for truth (with the <span class="code">Bool</span> method) or definedness (with the <span class="code">defined</span> method) marks the failure as handled, and causes it not to throw in sink context anymore.</p>
 <p>You can call the <span class="code">handled</span> method to check if a failure has been handled.</p>
 <p>Calling methods on unhandled failures propagates the failure. The specification says the result is another <span class="code">Failure</span>, in Rakudo it causes the failure to throw.</p>
 <a name="t74.1"></a><h1 id="_type_Failure.pod6-Methods">74.1 Methods</h1>
 <a name="t74.1.1"></a><h2 id="_type_Failure.pod6-method_handled">74.1.1 method handled</h2>
 <p>Defined as:</p>
 <pre class="code">method handled(Failure:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">FAILURE.handled</pre>
 <p>Returns <span class="code">True</span> for handled failures, <span class="code">False</span> otherwise.</p>
 <a name="t74.1.2"></a><h2 id="_type_Failure.pod6-method_exception">74.1.2 method exception</h2>
 <p>Defined as:</p>
 <pre class="code">method exception(Failure:D:) returns Exception</pre>
 <p>Usage:</p>
 <pre class="code">FAILURE.exception</pre>
 <p>Returns the <a href="#_type_Exception.pod6">Exception</a> object that the failure wraps.</p>
 <a name="t74.1.3"></a><h2 id="_type_Failure.pod6-method_Bool">74.1.3 method Bool</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Bool(Failure:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">FAILURE.Bool</pre>
 <p>Returns <span class="code">False</span>, and marks the failure as handled.</p>
 <a name="t74.1.4"></a><h2 id="_type_Failure.pod6-method_defined">74.1.4 method defined</h2>
 <p>Defined as:</p>
 <pre class="code">multi method defined(Failure:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">FAILURE.defined</pre>
 <p>Returns <span class="code">False</span> (failures are officially undefined), and marks the failure as handled.</p>
</div> <!-- /type/FatRat.pod6 --><div class="pod-body"><a id="_type_FatRat.pod6"></a><a name="t75"><h1 class="title">75 class FatRat</h1></a> <p class="subtitle">Rational number (arbitrary-precision)</p> <pre class="code">class FatRat is Cool does Rational[Int, Int]</pre>
 <p>A <span class="code">FatRat</span> is a rational number stored with arbitrary size numerator and denominator. Arithmetic operations involving a <span class="code">FatRat</span> and optionally <a href="#_type_Int.pod6">Int</a> or <a href="#_type_Rat.pod6">Rat</a> objects return a <span class="code">FatRat</span>, avoiding loss of precision.</p>
 <p>Since, unlike <a href="#_type_Rat.pod6">Rat</a>, FatRat arithmetics do not fall back <a href="#_type_Num.pod6">Num</a> at some point, there is a risk that repeated arithmetic operations generate pathologically large numerators and denominators.</p>
 <p>There are two common ways to generate <span class="code">FatRat</span> objects: through the <span class="code">FatRat.new(Int, Int)</span> constructor, which generates them from numerator and denominator, or by calling the <span class="code">.FatRat</span> method on an <a href="#_type_Int.pod6">Int</a> or <a href="#_type_Rat.pod6">Rat</a> object.</p>
</div> <!-- /type/Grammar.pod6 --><div class="pod-body"><a id="_type_Grammar.pod6"></a><a name="t76"><h1 class="title">76 class Grammar</h1></a> <p class="subtitle">Formal grammar made up of named regexes</p> <pre class="code">class Grammar is Cursor { ... }</pre>
 <p>Every type declared with <span class="code">grammar</span> (which doesn't explicitly states its superclass) becomes a subclass of <i>Grammar</i>.</p>
 <pre class="code">grammar Thingy {
    token TOP {
        &amp;lt;a&gt; &amp;lt;b&gt;
    }
    token a { a }
    token b { b }
}
say Thingy ~~ Grammar;      # True
my $match = Thingy.parse('ab');
say so $match;              # True
say ~$match&amp;lt;a&gt;;             # a</pre>
 <p>More <a href="#_language_grammars.pod6">documentation on grammars</a> is available.</p>
 <a name="t76.1"></a><h1 id="_type_Grammar.pod6-Methods">76.1 Methods</h1>
 <a name="t76.1.1"></a><h2 id="_type_Grammar.pod6-method_parse">76.1.1 method parse</h2>
 <p>Defined as:</p>
 <pre class="code">method parse($target, :$rule = 'TOP',  Capture() :$args = \(), Mu :$actions = Mu, *%opt) {</pre>
 <p>Usage:</p>
 <pre class="code">GRAMMAR.parse(TARGET, RULE?, ARGS?, ACTIONS?, OPTIONS?)</pre>
 <p>Parses the <span class="code">$target</span> (which will be coerced to <a href="#_type_Str.pod6">Str</a> if it isn't one), using <span class="code">$rule</span> as the starting rule. Additional <span class="code">$args</span> will be given to the starting rule if provided.</p>
 <p>If the <span class="code">action</span> named argument is provided, it will be used as an action object, that is, for each successful regex match, a method of the same name (if it exists) is called on the action object, passing the match object as the sole positional argument.</p>
 <p>Additional named arguments are used as options for matching, so you can specify things like <span class="code">:c(4)</span> to start parsing from the fourth character. All <a href="#_language_regexes.pod6-Adverbs">matching adverbs</a> are allowed.</p>
 <p>Method <span class="code">parse</span> only succeeds if the cursor has arrived at the end of the target string when the match is over. Use <a href="#_routine_subparse.pod6">method subparse</a> if you want to be able to stop in the middle.</p>
 <p>Returns a <a href="#_type_Match.pod6">Match object</a> on success, and <a href="#_type_Nil.pod6">Nil</a> on failure.</p>
 <pre class="code">grammar CSV {
    token TOP { [ &amp;lt;line&gt; \n? ]+ }
    token line {
        ^^            # Beginning of a line
        &amp;lt;value&gt;* % \, # Any number of &amp;lt;value&gt;s with commas in between them
        $$            # End of a line
    }
    token value {
        [
        | &amp;lt;-[",\n]&gt;     # Anything not a double quote, comma or newline
        | &amp;lt;quoted-text&gt; # Or some quoted text
        ]*              # Any number of times
    }
    token quoted-text {
        \"
        [
        | &amp;lt;-["\\]&gt; # Anything not a " or \
        | '\"'     # Or \", an escaped quotation mark
        ]*         # Any number of times
        \"
    }
}.parse( q:to/EOCSV/ ).say;
    Year,Make,Model,Length
    1997,Ford,E350,2.34
    2000,Mercury,Cougar,2.38
    EOCSV</pre>
 <p>This outputs:</p>
 <pre class="code">｢Year,Make,Model,Length
1997,Ford,E350,2.34
2000,Mercury,Cougar,2.38
｣
 line =&gt; ｢Year,Make,Model,Length｣
  value =&gt; ｢Year｣
  value =&gt; ｢Make｣
  value =&gt; ｢Model｣
  value =&gt; ｢Length｣
 line =&gt; ｢1997,Ford,E350,2.34｣
  value =&gt; ｢1997｣
  value =&gt; ｢Ford｣
  value =&gt; ｢E350｣
  value =&gt; ｢2.34｣
 line =&gt; ｢2000,Mercury,Cougar,2.38 ｣
  value =&gt; ｢2000｣
  value =&gt; ｢Mercury｣
  value =&gt; ｢Cougar｣
  value =&gt; ｢2.38 ｣</pre>
 <a name="t76.1.2"></a><h2 id="_type_Grammar.pod6-method_subparse">76.1.2 method subparse</h2>
 <p>Defined as:</p>
 <pre class="code">method subparse($target, :$rule = 'TOP', Capture() :$args = \(),  Mu :$actions = Mu, *%opt) {</pre>
 <p>Usage:</p>
 <pre class="code">GRAMMAR.subparse(TARGET, RULE?, ARGS?, ACTIONS?, OPTIONS?)</pre>
 <p>Does exactly the same as <a href="#_routine_parse.pod6">method parse</a>, except that cursor doesn't have to reach the end of the string to succeed. (That is, it doesn't have to match the whole string).</p>
 <pre class="code">grammar A {
    token as { a+ };
}
my $match = A.subparse('aaab', :rule&amp;lt;as&gt;);
say ~$match;        # aaa
say $match.to;      # 3</pre>
 <a name="t76.1.3"></a><h2 id="_type_Grammar.pod6-method_parsefile">76.1.3 method parsefile</h2>
 <p>Defined as:</p>
 <pre class="code">method parsefile(Str(Cool) $filename, :$enc, *%opts) {</pre>
 <p>Usage:</p>
 <pre class="code">GRAMMAR.parsefile(FILE, OPTIONS?)</pre>
 <p>Reads file <span class="code">$filename</span>, and parses it. All named arguments are passed on to <a href="#_routine_parse.pod6">method parse</a>.</p>
</div> <!-- /type/Hash.pod6 --><div class="pod-body"><a id="_type_Hash.pod6"></a><a name="t77"><h1 class="title">77 class Hash</h1></a> <p class="subtitle">Mapping from strings to itemized values</p> <pre class="code">class Hash is Map { }</pre>
 <p>A Hash is a mutable mapping from keys to values (called <i>dictionary</i>, <i>hash table</i> or <i>map</i> in other programming languages). The values are all scalar containers, which means you can assign to them.</p>
 <p>Hashes are usually stored in variables with the percent <span class="code">%</span> sigil.</p>
 <p>Hash elements are accessed by key via the <span class="code">{ }</span> postcircumfix operator:</p>
 <pre class="code">dd %*ENV{'HOME', 'PATH'};
# OUTPUT«("/home/camelia", "/usr/bin:/sbin:/bin")␤»</pre>
 <p>The general <a href="#_language_subscripts.pod6">Subscript</a> rules apply providing shortcuts for lists of literal strings, with and without interpolation.</p>
 <pre class="code">my %h = oranges =&gt; 'round', bananas =&gt; 'bendy';
dd %h&amp;lt;oranges bananas&gt;;
# OUTPUT«("round", "bendy")␤»
my $fruit = 'bananas';
dd %h«oranges $fruit»
OUTPUT«("round", "bendy")␤»</pre>
 <p>You can add new pairs simply by assigning to an unused key:</p>
 <pre class="code">my %h;
%h{'new key'} = 'new value';</pre>
 <a name="t77.1"></a><h1 id="_type_Hash.pod6-Hash_assignment">77.1 Hash assignment</h1>
 <p>Assigning a list of elements to a hash variable first empties the variable, and then iterates the elements of the right-hand side. If an element is a <a href="#_type_Pair.pod6">Pair</a>, its key is taken as a new hash key, and its value as the new hash value for that key. Otherwise the value is coerced to <a href="#_type_Str.pod6">Str</a> and used as a hash key, while the next element of the list is taken as the corresponding value.</p>
 <pre class="code">my %h = 'a', 'b', c =&gt; 'd', 'e', 'f';
# same as
my %h = a =&gt; 'b', c =&gt; 'd', e =&gt; 'f';
# or
my %h = &amp;lt;a b c d e f&gt;;</pre>
 <p>If a <a href="#_type_Pair.pod6">Pair</a> is encountered where a value is expected, it is used as a hash value:</p>
 <pre class="code">my %h = 'a', 'b' =&gt; 'c';
say %h&amp;lt;a&gt;.WHAT;             # Pair();
say %h&amp;lt;a&gt;.key;              # b</pre>
 <p>If the same key appears more than once, the value associated with its last occurrence is stored in the hash:</p>
 <pre class="code">my %h = a =&gt; 1, a =&gt; 2;
say %h&amp;lt;a&gt;;                  # 2</pre>
 <p>To assign to a variable without the <span class="code">%</span> sigil, you may use curly braces:</p>
 <pre class="code">my $h = { a =&gt; 1, b =&gt; 2 }; # *See Note*
say $h.WHAT;                # Hash
say $h&amp;lt;a&gt;;                  # 1</pre>
 <p><b>NOTE:</b> If one or more values reference the topic variable, <span class="code">$_</span>, the right-hand side of the assignment will be interpreted as a <a href="#_type_Block.pod6">Block</a>, not a Hash:</p>
 <pre class="code">my @people = [
    { id =&gt; "1A", firstName =&gt; "Andy", lastName =&gt; "Adams" },
    { id =&gt; "2B", firstName =&gt; "Beth", lastName =&gt; "Burke" },
    # ...
];

sub lookup-user (Hash $h) { #`(Do something...) $h }

my @names = map {
    my $query = { name =&gt; "$_&amp;lt;firstName&gt; $_&amp;lt;lastName&gt;" };
    say $query.WHAT;       # Block
    say $query&amp;lt;name&gt;;      # ERROR: Type Block does not support associative indexing

    lookup-user($query);   # Type check failed in binding $h; expected Hash but got Block
}, @people;</pre>
 <p>Instead, you should either:</p>
 <ul><li><p>1) use the <span class="code">%()</span> hash constructor:</p>
 <pre class="code">my  $query = %( name =&gt; "$_&amp;lt;firstName&gt; $_&amp;lt;lastName&gt;" );
say $query.WHAT;         # Hash
say $query&amp;lt;name&gt;;        # Andy Adams, Beth Burke, etc.</pre>
</li></ul> <ul><li><p>2) assign to a Hash type (<span class="code">%</span>) directly:</p>
 <pre class="code">my  %query = name =&gt; "$_&amp;lt;firstName&gt; $_&amp;lt;lastName&gt;";   # No braces required
say %query.WHAT;         # Hash
say %query&amp;lt;name&gt;;        # Andy Adams, Beth Burke, etc.</pre>
</li></ul> <ul><li><p>or 3) simply avoid the issue altogether by explicitly providing a name for the topic variable:</p>
 <pre class="code">my @names = map -&gt; $person {
    my $query = { name =&gt; "$person&amp;lt;firstName&gt; $person&amp;lt;lastName&gt;" };
    say $query.WHAT;     # Hash
    say $query&amp;lt;name&gt;;    # Andy Adams, Beth Burke, etc.

   lookup-user($query);
}, @people;</pre>
</li></ul> <p>Even in the final case, however, specifying a Hash type (<span class="code">%</span>) is still the most idiomatic and unambiguous solution:</p>
 <pre class="code">my @names = @people.map: -&gt; $person {
    lookup-user( %( name =&gt; "$person&amp;lt;firstName&gt; $person&amp;lt;lastName&gt;" ) );
};</pre>
 <a name="t77.1.1"></a><h2 id="_type_Hash.pod6-Non-string_keys">77.1.1 Non-string keys</h2>
 <p>By default keys in <span class="code">{ }</span> are forced to strings. To compose a hash with non-string keys, use a colon prefix:</p>
 <pre class="code">my $when = :{ (now) =&gt; "Instant", (DateTime.now) =&gt; "DateTime" };</pre>
 <p>Note that with objects as keys, you cannot access non-string keys as strings:</p>
 <pre class="code">:{ -1 =&gt; 41, 0 =&gt; 42, 1 =&gt; 43 }&amp;lt;0&gt;  # Any
:{ -1 =&gt; 41, 0 =&gt; 42, 1 =&gt; 43 }{0}  # 42</pre>
 <a name="t77.2"></a><h1 id="_type_Hash.pod6-Looping_over_hash_keys_and_values">77.2 Looping over hash keys and values</h1>
 <p>A common idiom for processing the elements in a hash is to loop over the keys and values, for instance,</p>
 <pre class="code">my %vowels = 'a' =&gt; 1, 'e' =&gt; 2, 'i' =&gt; 3, 'o' =&gt; 4, 'u' =&gt; 5;
for %vowels.kv -&gt; $vowel, $index {
  "$vowel: $index".say;
}</pre>
 <p>gives output similar to this:</p>
 <pre class="code">a: 1
e: 2
o: 4
u: 5
i: 3</pre>
 <p>where we have used the <span class="code">kv</span> method to extract the keys and their respective values from the hash, so that we can pass these values into the loop.</p>
 <p>Note that the order of the keys and values printed cannot be relied upon; the elements of a hash are not always stored the same way in memory for different runs of the same program. Sometimes one wishes to process the elements sorted on, e.g. the keys of the hash. If one wishes to print the list of vowels in alphabetical order then one would write</p>
 <pre class="code">my %vowels = 'a' =&gt; 1, 'e' =&gt; 2, 'i' =&gt; 3, 'o' =&gt; 4, 'u' =&gt; 5;
for %vowels.sort(*.key)&gt;&gt;.kv -&gt; ($vowel, $index) {
  "$vowel: $index".say;
}</pre>
 <p>which prints</p>
 <pre class="code">a: 1
e: 2
i: 3
o: 4
u: 5</pre>
 <p>and is in alphabetical order as desired. To achieve this result, we sorted the hash of vowels by key (<span class="code">%vowels.sort(*.key)</span>) which we then ask for its keys and values by applying the <span class="code">.kv</span> method to each element via the unary <span class="code"></span>> > hyperoperator resulting in a <a href="#_type_List.pod6">List</a> of key/value lists. To extract the key/value the variables thus need to be wrapped in parentheses.</p>
 <p>An alternative solution is to flatten the resulting list. Then the key/value pairs can be accessed in the same way as with plain <span class="code">.kv</span>:</p>
 <pre class="code">my %vowels = 'a' =&gt; 1, 'e' =&gt; 2, 'i' =&gt; 3, 'o' =&gt; 4, 'u' =&gt; 5;
for %vowels.sort(*.key)&gt;&gt;.kv.flat -&gt; $vowel, $index {
  "$vowel: $index".say;
}</pre>
 <p>You can also loop over a <span class="code">Hash</span> using <a href="#_type_Signature.pod6-Destructuring_Parameters">destructuring</a>.</p>
 <a name="t77.2.1"></a><h2 id="_type_Hash.pod6-Object_hashes_and_type_constraints">77.2.1 Object hashes and type constraints <a name="537"></a><a name="538"></a></h2>
 <p>Hash keys are stored as <a href="#_type_Str.pod6">Str</a> values in a normal hash. In many cases this is sufficient, but sometimes you want the hash to preserve the objects you are using as keys <i>as the *exact* objects you are providing to the hash to use as keys</i>. In these moments you want an object hash!</p>
 <pre class="code">my %intervals{Instant};
my $first-instant = now;
%intervals{ $first-instant } = "Our first milestone.";
sleep 1;
my $second-instant = now;
%intervals{ $second-instant } = "Logging this Instant for spurious raisins.";
for %intervals.kv.sort(* cmp *) -&gt; (Instant $instant, $note) {
  state $last-instant //= $instant;
  say "We noted '$note' at $instant, with an interval of {$instant - $last-instant}";
  $last-instant = $instant;
}</pre>
 <p>This example uses an object hash that only accepts keys of type <a href="#_type_Instant.pod6">Instant</a> to implement a rudimentary, yet type-safe, logging mechanism. We utilize a named <a href="#_language_variables.pod6-The_state_Declarator">state</a> variable for keeping track of the previous <span class="code">Instant</span> so that we can provide an interval.</p>
 <p>The whole point of object hashes is to keep keys as objects-in-themselves. Currently object hashes utilize the <a href="#_routine_WHICH.pod6">WHICH</a> method of an object, which returns a unique identifier for every mutable object. This is the keystone upon which the object identity operator (<a href="===">===</a>) rests. Order and containers really matter here as the order of <span class="code">.keys</span> is undefined and one anonymous list is never <a href="===">===</a> to another.</p>
 <pre class="code">&gt; ($first-instant, $second-instant) ~~ %intervals.keys
False
&gt; ($first-instant, $second-instant) ~~ %intervals.keys.sort(* cmp *)
True
&gt; ($first-instant, $second-instant) === %intervals.keys.sort(* cmp *)
False
&gt; $first-instant === %intervals.keys.sort(* cmp *).index(0)
True</pre>
 <p>Since <span class="code">Instant</span> defines its own comparison methods, in our example a sort according to <a href="#_routine_cmp.pod6">cmp</a> will always provide the earliest instant object as the first element in the <a href="#_type_List.pod6">List</a> it returns.</p>
 <p>If you would like to accept any object whatsoever in your hash, you can use <a href="#_type_Any.pod6">Any</a>!</p>
 <pre class="code">my %h{Any};
%h{(now)} = "This is an Instant";
%h{(DateTime.now)} = "This is a DateTime, which is not an Instant";
%h{"completely different"} = "Monty Python references are neither DateTimes nor Instants";</pre>
 <p>There is a more concise syntax which uses binding.</p>
 <pre class="code">my %h := :{ (now) =&gt; "Instant", (DateTime.now) =&gt; "DateTime" }</pre>
 <p>The binding is necessary because an object hash is about very solid, specific objects, which is something that binding is great at keeping track of but about which assignment doesn't concern itself much.</p>
 <a name="t77.2.2"></a><h2 id="_type_Hash.pod6-In_place_editing_of_values">77.2.2 In place editing of values</h2>
 <p>There may be times when you would like to modify the values of a hash while iterating over them.</p>
 <pre class="code">&gt; my %answers = illuminatus =&gt; 23, hitchhikers =&gt; 42
hitchhikers =&gt; 42, illuminatus =&gt; 23
&gt; for %answers.values -&gt; $v { $v += 10 }
Cannot assign to a readonly variable or a value</pre>
 <p>This is traditionally accomplished by sending both the key and the value as follows.</p>
 <pre class="code">for %answers.kv -&gt; $k,$v { %answers{$k} = $v + 10 }</pre>
 <p>However, it is possible to leverage the signature of the block in order to specify that you would like read-write access to the values.</p>
 <pre class="code">for %answers.values -&gt; $v is rw { $v += 10 }</pre>
 <p>It is not, however, possible to do in-place editing of hash keys, even in the case of object hashes.</p>
 <a name="t77.3"></a><h1 id="_type_Hash.pod6-Methods">77.3 Methods</h1>
 <a name="t77.3.1"></a><h2 id="_type_Hash.pod6-method_push">77.3.1 method push</h2>
 <p>Defined as:</p>
 <pre class="code">multi method push(Hash:D: *@new)</pre>
 <p>Usage:</p>
 <pre class="code">push HASH, VALUES
HASH.push(VALUES)
HASH.push: (VALUES)</pre>
 <p>Adds the <span class="code">@new</span> elements to the hash with the same semantics as hash assignment, but with three exceptions:</p>
 <ul><li><p>The hash isn't emptied first, i.e. old pairs are not deleted.</p>
</li></ul> <ul><li><p>If a key already exists in the hash, and the corresponding value is an <a href="#_type_Array.pod6">Array</a>, the new value is pushed onto the array (instead of replacing it).</p>
</li></ul> <ul><li><p>If a key already exists in the hash, and the corresponding value is not an <a href="#_type_Array.pod6">Array</a>, old and new value are both placed into an array in the place of the old value.</p>
</li></ul> <p>Example:</p>
 <pre class="code">my %h  = a =&gt; 1;
%h.push: (a =&gt; 1);                  # a =&gt; [1,1]
%h.push: (a =&gt; 1) xx 3 ;            # a =&gt; [1,1,1,1,1]
%h.push: (b =&gt; 3);                  # a =&gt; [1,1,1,1,1], b =&gt; 3
%h.push('c' =&gt; 4);                  # a =&gt; [1,1,1,1,1], b =&gt; 3, c =&gt; 4
push %h, 'd' =&gt; 5;                  # a =&gt; [1,1,1,1,1], b =&gt; 3, c =&gt; 4, d =&gt; 5</pre>
 <p>Be careful to quote the keys in the last two methods, as these have no effect:</p>
 <pre class="code">%h.push(e =&gt; 6);
push %h, f =&gt; 7;</pre>
 <p>because they are interpreted as named arguments to <span class="code">push</span>, not positional arguments.</p>
 <p>Also note that push can be used as a replacement for assignment during hash initialization very useful ways. Take for instance the case of an inverted index:</p>
 <pre class="code">my %wc = 'hash' =&gt; 323, 'pair' =&gt; 322, 'pipe' =&gt; 323;
(my %inv).push: %wc.invert.unique;
say %inv;                           # 322 =&gt; 'pair', 323 =&gt; ['hash','pipe']</pre>
 <p>Note that such a initialization could also be written as</p>
 <pre class="code">my %inv .= push: %wc.invert.unique;</pre>
 <a name="t77.3.2"></a><h2 id="_type_Hash.pod6-method_default">77.3.2 method default</h2>
 <p>Defined as:</p>
 <pre class="code">method default</pre>
 <p>Usage:</p>
 <pre class="code">Hash.default</pre>
 <p>Returns the default value of the invocant, i.e. the value which is returned when a non existing key is used to access an element in the <span class="code">Hash</span>. Unless the <span class="code">Hash</span> is declared as having a default value by using the <a href="#_routine_is default.pod6">is default</a> trait the method returns the type object <span class="code">(Any)</span>.</p>
 <pre class="code">my %h1 = 'apples' =&gt; 3, 'oranges' =&gt; 7;
say %h1.default;                                       # (Any)
say %h1{'bananas'};                                    # (Any)

my %h2 is default(1) = 'apples' =&gt; 3, 'oranges' =&gt; 7;
say %h2.default;                                       # 1
say %h2{'apples'} + %h2{'bananas'};                    # 4</pre>
 <a name="t77.3.3"></a><h2 id="_type_Hash.pod6-method_keyof">77.3.3 method keyof</h2>
 <p>Defined as:</p>
 <pre class="code">method keyof</pre>
 <p>Usage:</p>
 <pre class="code">Hash.keyof</pre>
 <p>Returns the type constraint for the keys of the invocant. For normal hashes the method returns the coercion type <span class="code">(Str(Any))</span> while for <a href="#_type_Hash.pod6-Object_hashes_and_type_constraints">object hashes</a> the type used in the declaration of the <span class="code">Hash</span> is returned.</p>
 <pre class="code">my %h1 = 'apples' =&gt; 3, 'oranges' =&gt; 7;  # (no key type specified)
say %h1.keyof;                           # (Str(Any))

my %h2{Str} = 'oranges' =&gt; 7;            # (keys must be of type Str
say %h2.keyof;                           # (Str)
%h2{3} = 'apples';                       # throws exception of type X::TypeCheck::Binding</pre>
 <a name="t77.3.4"></a><h2 id="_type_Hash.pod6-method_of">77.3.4 method of</h2>
 <p>Defined as:</p>
 <pre class="code">method of</pre>
 <p>Usage:</p>
 <pre class="code">Hash.of</pre>
 <p>Returns the type constraint for the values of the invocant. By default, i.e. if no type constraint is given during declaration, the method returns <span class="code">(Mu)</span>.</p>
 <pre class="code">my %h1 = 'apples' =&gt; 3, 'oranges' =&gt; 7;  # (no type constraint specified)
say %h1.of;                              # (Mu)

my Int %h2 = 'oranges' =&gt; 7;             # (values must be of type Int)
say %h2.of;                              # (Int)</pre>
 <a name="t77.4"></a><h1 id="_type_Hash.pod6-Subscript_Adverbs">77.4 Subscript Adverbs</h1>
 <p>Some methods are implemented as adverbs on subscripts.</p>
 <a name="t77.4.1"></a><h2 id="_type_Hash.pod6-:exists">77.4.1 <span class="code">:exists</span></h2>
 <p>The adverb <span class="code">:exists</span> returns <span class="code">Bool::True</span> if a key exists in the Hash. If more then one key is supplied it returns a <span class="code">List</span> of <span class="code">Bool</span>.</p>
 <pre class="code">my %h = a =&gt; 1, b =&gt; 2;
say %h&amp;lt;a&gt;:exists;   # True
say %h&amp;lt;a b&gt;:exists; # (True True)</pre>
 <a name="t77.4.2"></a><h2 id="_type_Hash.pod6-:delete">77.4.2 <span class="code">:delete</span></h2>
 <p>Use <span class="code">:delete</span> to remove a <span class="code">Pair</span> from the <span class="code">Hash</span>.</p>
 <pre class="code">my %h = a =&gt; 1;
dd %h;         # Hash %h = {:a(1)}
%h&amp;lt;a&gt;:delete;
dd %h;         # Hash %h = {}</pre>
 <a name="t77.4.3"></a><h2 id="_type_Hash.pod6-:p">77.4.3 <span class="code">:p</span></h2>
 <p>The adverb <span class="code">:p</span> returns a <span class="code">Pair</span> or a List of <span class="code">Pair</span> instead of just the value.</p>
 <pre class="code">my %h = a =&gt; 1, b =&gt; 2;
say %h&amp;lt;a&gt;:p;    # a =&gt; 1
say %h&amp;lt;a b&gt;:p;  # (a =&gt; 1 b=&gt; 2)</pre>
 <a name="t77.4.4"></a><h2 id="_type_Hash.pod6-:v_and_:k">77.4.4 <span class="code">:v</span> and <span class="code">:k</span></h2>
 <p>The adverbs <span class="code">:v</span> and <span class="code">:k</span> return the key or value or a list their of.</p>
 <pre class="code">my %h = a =&gt; 1, b =&gt; 2;
say %h&amp;lt;a&gt;:k;   # a
say %h&amp;lt;a b&gt;:k;  # (a b)</pre>
</div> <!-- /type/IO.pod6 --><div class="pod-body"><a id="_type_IO.pod6"></a><a name="t78"><h1 class="title">78 role IO</h1></a> <p class="subtitle">Input/output related object</p> <pre class="code">role IO { }</pre>
 <p>The IO role provides no functionality itself; it simply marks that a particular object relates to input/output.</p>
 <a name="t78.1"></a><h1 id="_type_IO.pod6-Routines">78.1 Routines</h1>
 <a name="t78.1.1"></a><h2 id="_type_IO.pod6-sub_print">78.1.1 sub print</h2>
 <p>Print the given text on <span class="code">$*OUT</span> (standard output), e.g.:</p>
 <pre class="code">print "Hi there!\n";   # Hi there!</pre>
 <p>Note that the <span class="code">print</span> function does <i>not</i> (in contrast to some other languages) append a newline character to the text. Thus the following code</p>
 <pre class="code">print "Hi there!";
print "How are you?";
print (0..101).list;</pre>
 <p>displays</p>
 <pre class="code">Hi there!How are you?0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101</pre>
 <p>To print text implicitly including the trailing newline character, use <a href="#_type_IO.pod6-sub_say">say</a>.</p>
 <a name="t78.1.2"></a><h2 id="_type_IO.pod6-sub_put">78.1.2 sub put</h2>
 <p>Print the given text on <span class="code">$*OUT</span> (standard output) with appended <span class="code">$*OUT.nl-out</span>. The default for the latter is the platform dependent newline sequence.</p>
 <pre class="code">put 'Merry 1.0!';
put (0..101).list;</pre>
 <p>outputs</p>
 <pre class="code">Merry 1.0!␤
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101␤</pre>
 <a name="t78.1.3"></a><h2 id="_type_IO.pod6-sub_say">78.1.3 sub say</h2>
 <p>Print the given text in human readable form, followed by a <span class="code">$*OUT.nl-out</span> (platform dependent newline) on <span class="code">$*OUT</span> (standard output). Long output may be truncated. For machine readable output use <span class="code">put</span>.</p>
 <p>With <span class="code">say</span>, the example code as mentioned in the <span class="code">print</span> section will be displayed as the user likely intended:</p>
 <pre class="code">say "Hi there!";
say "How are you?";
say (0..101).list;</pre>
 <p>displays</p>
 <pre class="code">Hi there!␤
How are you?␤
(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 ...)␤</pre>
 <p><span class="code">say</span> prints non-<span class="code">Str</span> objects by calling their <span class="code">.gist</span> method before printing. Hence the following <span class="code">say</span> statements for the respective containers are equivalent:</p>
 <pre class="code">my @array = qw{1 2 3 4};
say @array;       # 1 2 3 4␤
say @array.gist;  # 1 2 3 4␤

my %hash = "a" =&gt; 1, "b" =&gt; 2, "c" =&gt; 3;
say %hash;        # a =&gt; 1, b =&gt; 2, c =&gt; 3␤
say %hash.gist;   # a =&gt; 1, b =&gt; 2, c =&gt; 3␤</pre>
 <a name="t78.1.4"></a><h2 id="_type_IO.pod6-sub_note">78.1.4 sub note</h2>
 <p>Print the given text, followed by a newline <span class="code">"\n"</span> on <span class="code">$*ERR</span> (standard error). Before printing, call the <span class="code">.gist</span> method on any non-<span class="code">Str</span> objects.</p>
 <p><span class="code">note</span> is effectively <span class="code">say</span>, only it writes its output to the standard error stream. For instance:</p>
 <pre class="code">if ("path/to/pirate/treasure".IO.e) {
    say "Found pirate treasure!";
}
else {
    note "Could not find pirate treasure.  Are you sure it exists?";
}</pre>
 <p>will report (on the standard output stream) that treasure has been found if it exists or will note on the error stream that it couldn't be found if it doesn't exist.</p>
 <a name="t78.1.5"></a><h2 id="_type_IO.pod6-sub_dd">78.1.5 sub dd</h2>
 <p>The Tiny Data Dumper. This function takes the input list of variables and <span class="code">note</span>s them (on <span class="code">$*ERR</span>) in an easy to read format, along with the <span class="code">name</span> of the variable. Thus,</p>
 <pre class="code">my $a = 42;
my %hash = "a" =&gt; 1, "b" =&gt; 2, "c" =&gt; 3;
dd %hash, $a;</pre>
 <p>prints</p>
 <pre class="code">%hash = ("a" =&gt; 1, "c" =&gt; 3, "b" =&gt; 2).hash, $a = 42␤</pre>
 <p>to the standard error stream.</p>
 <p>This is in spirit similar to Perl 5's <a href="http://perldoc.perl.org/Data/Dumper.html">Data::Dumper module</a>.</p>
 <p>Please note that <span class="code">dd</span> will ignore named parameters. You can use a capture to force it to dump everything passed to it.</p>
 <pre class="code">dd \((:a(1), :b(2)), :c(3));</pre>
 <p>If you don't specify any parameters at all, it will just print the type and name of the current subroutine / method to the standard error stream:</p>
 <pre class="code">sub a { dd }; a    # sub a</pre>
 <p>This can be handy as a cheap trace function.</p>
 <a name="t78.1.6"></a><h2 id="_type_IO.pod6-sub_prompt">78.1.6 sub prompt</h2>
 <pre class="code">sub prompt($msg)</pre>
 <p>Prints <span class="code">$msg</span> to standard output and waits for the user to type something and finish with an ENTER. Returns the string typed in without the trailing newline.</p>
 <pre class="code">my $name = prompt("Hi, what's your name? ");</pre>
 <a name="t78.1.7"></a><h2 id="_type_IO.pod6-sub_open">78.1.7 sub open</h2>
 <pre class="code">my $fh = open(IO::Path() $path, :$r, :$w, :$a, :$rw,
              :$bin, :$enc, :$nl, :$chomp)</pre>
 <p>Opens the <span class="code">$path</span> (by default in text mode) with the given options, returning an <a href="#_type_IO::Handle.pod6">IO::Handle</a> object.</p>
 <a name="t78.1.7.1"></a><h3 id="_type_IO.pod6-File_mode_options">78.1.7.1 File mode options</h3>
 <ul><li><p>read-only mode, <span class="code">:r</span></p>
</li></ul> <p>Open the file as read only, e.g.:</p>
 <pre class="code">my $fh = open("path/to/file", :r);</pre>
 <p>This is the default mode for <span class="code">open</span>.</p>
 <p>Write-related methods on the returned <span class="code">IO::Handle</span> object will fail in this mode:</p>
 <pre class="code">my $fh = open("test");   # the file "test" already exists
$fh.print("new text\n");
Failed to write bytes to filehandle: bad file descriptor</pre>
 <ul><li><p>write-only mode, <span class="code">:w</span></p>
</li></ul> <p>Open the file for writing, creating it if it doesn't exist or overwriting the file if it does exist, e.g.:</p>
 <pre class="code">my $fh = open("path/to/file", :w);</pre>
 <p>Read-related methods will fail in this mode:</p>
 <pre class="code">my $fh = open("test", :w);
$fh.print("stuff\n");
$fh.print("more stuff\n");
$fh.seek(0, 0);   # return to the start of the file
$fh.get();        # Reading from filehandle failed: bad file descriptor</pre>
 <ul><li><p>read-write mode, <span class="code">:rw</span></p>
</li></ul> <p>Open the file for reading and writing, creating the file if it doesn't exist or overwriting the file if it already exists.</p>
 <pre class="code">my $fh = open("path/to/file", :rw);</pre>
 <ul><li><p>append mode, <span class="code">:a</span></p>
</li></ul> <p>Open the file for appending. If the file does not exist, create it. If the file already exists, append data to it.</p>
 <pre class="code">my $fh = open("path/to/file", :a);</pre>
 <a name="t78.1.7.2"></a><h3 id="_type_IO.pod6-Encoding_options">78.1.7.2 Encoding options</h3>
 <ul><li><p>binary mode, <span class="code">:bin</span></p>
</li></ul> <p>Open the file in binary mode (byte mode):</p>
 <pre class="code">my $fh = open("path/to/file", :bin);</pre>
 <p>A file opened with <span class="code">:bin</span> may still be processed line-by-line, but IO will be in terms of <a href="#_type_Buf.pod6">Buf</a> rather than <a href="#_type_Str.pod6">Str</a> types. Default is <span class="code">False</span>, implying text semantics.</p>
 <ul><li><p>text mode encoding, <span class="code">:enc</span></p>
</li></ul> <p>The encoding to use if opened in text mode.</p>
 <pre class="code"># open explicitly as utf8
my $fh = open("path/to/file", enc =&gt; "utf8");
my $fh = open("path/to/file", enc =&gt; "utf-8");  # this form also works
# open with latin1 encoding
my $fh = open("path/to/file", enc =&gt; "latin1");</pre>
 <p>Defaults to "Unicode", which implies figuring out which actual UTF is in use, either from a BOM or other heuristics. If heuristics are inconclusive, UTF-8 will be assumed. (No 8-bit encoding will ever be picked implicitly.) There exists no valid option with the name "Unicode", so the following will result in an error:</p>
 <pre class="code">my $fh = open("path/to/file", enc =&gt; "Unicode");</pre>
 <p>This is because one needs to specify a specific unicode encoding, e.g. "utf8".</p>
 <a name="t78.1.7.3"></a><h3 id="_type_IO.pod6-Newline_options">78.1.7.3 Newline options</h3>
 <ul><li><p>end-of-line (EOL) marker, <span class="code">:nl</span></p>
</li></ul> <p>The marker used to indicate the end of a line of text. Only used in text mode. Defaults to "EOL", which implies accepting any combination of <span class="code">"\n"</span>, <span class="code">"\r\n"</span> or <span class="code">"\r"</span> or any other Unicode character that has the <span class="code">Zl</span> (Separator, Line) property.</p>
 <pre class="code"># explicitly use CR-LF as EOL character
my $fh = open("path/to/file", nl =&gt; "\r\n");</pre>
 <ul><li><p>chomp mode, <span class="code">:chomp</span></p>
</li></ul> <p>Whether or not to remove newline characters from text obtained with <span class="code">.lines</span> and <span class="code">.get</span>. Defaults to <span class="code">True</span>.</p>
 <pre class="code"># don't remove newline characters from input
my $fh = open("path/to/file", chomp =&gt; False);
say $fh.get();     # returns line including newline char</pre>
 <a name="t78.1.8"></a><h2 id="_type_IO.pod6-method_close">78.1.8 method close</h2>
 <p>To close an open file handle, simply call its <a href="#_type_IO::Handle.pod6-method_close">close</a> method:</p>
 <pre class="code">my $fh = open("path/to/file");
# ... do stuff with the file
$fh.close;</pre>
 <p>It is also possible to call this as a sub, thus the example above can be written equivalently like so:</p>
 <pre class="code">my $fh = open("path/to/file");
# ... do stuff with the file
close $fh;</pre>
 <p>When a file was opened for writing, closing it is important to ensure that all contents are actually written to the file.</p>
 <a name="t78.1.9"></a><h2 id="_type_IO.pod6-sub_slurp">78.1.9 sub slurp</h2>
 <p>Slurps the contents of the entire file into a <span class="code">Str</span> (or <span class="code">Buf</span> if <span class="code">:bin</span>). Accepts <span class="code">:bin</span> and <span class="code">:enc</span> optional named parameters, with the same meaning as <a href="#_routine_open.pod6">open()</a>. The routine will <span class="code">fail</span> if the file does not exist, or is a directory.</p>
 <pre class="code"># read entire file as (Unicode) Str
my $text_contents   = slurp "path/to/file";

# read entire file as Latin1 Str
my $text_contents   = slurp "path/to/file", enc =&gt; "latin1";

# read entire file as Buf
my $binary_contents = slurp "path/to/file", :bin;</pre>
 <a name="t78.1.10"></a><h2 id="_type_IO.pod6-sub_spurt">78.1.10 sub spurt</h2>
 <pre class="code">sub spurt($where, $what,
    Str  :$enc        = $*ENC,
    Bool :$bin        = False,
    Bool :$append      = False,
    Bool :$createonly = False,
    --&gt; Bool ) is export</pre>
 <p>Writes the indicated contents (2nd positional parameter, <span class="code">$what</span>) to the location indicated by the first positional parameter, <span class="code">$where</span> (which can either be a string or an <span class="code">IO::Path</span> object). To write to an <span class="code">IO::Handle</span>, use the <a href="#_routine_print.pod6">print</a> method.</p>
 <p>If a file needs to be opened for writing, it will also be <span class="code">close</span>d. Returns <span class="code">True</span> on success, or the appropriate <span class="code">Failure</span> if something went wrong.</p>
 <p>These named parameters are optional and only have meaning if the first positional parameter was <b>not</b> an <span class="code">IO::Handle</span>:</p>
 <a name="t78.1.10.1"></a><h3 id="_type_IO.pod6-Options">78.1.10.1 Options</h3>
 <ul><li><p>:enc</p>
</li></ul> <p>The encoding with which the contents will be written.</p>
 <ul><li><p>:bin</p>
</li></ul> <p>Open the file in binary mode.</p>
 <ul><li><p>:append</p>
</li></ul> <p>Boolean indicating whether to append to a (potentially) existing file. If the file did not exist yet, it will be created. Defaults to <span class="code">False</span>.</p>
 <ul><li><p>:createonly</p>
</li></ul> <p>Boolean indicating whether to fail if the file already exists. Defaults to <span class="code">False</span>.</p>
 <a name="t78.1.10.2"></a><h3 id="_type_IO.pod6-Examples">78.1.10.2 Examples</h3>
 <pre class="code"># write directly to a file
spurt "path/to/file", "default text, directly written";

# write directly with a non-Unicode encoding
spurt "path/to/latin1_file", "latin1 text: äöüß", enc =&gt; "latin1";

# append to a pre-existing file
spurt "file_already_exists", "some text";
spurt "file_already_exists", "new text", :append;
slurp "file_already_exists";   # some text␤new text

# fail when writing to a pre-existing file
spurt "file_already_exists", "new text", :createonly;
File 'test' already exists, and :createonly was specified</pre>
 <a name="t78.1.11"></a><h2 id="_type_IO.pod6-sub_run">78.1.11 sub run</h2>
 <pre class="code">sub run(*@args ($, *@)) returns Proc</pre>
 <p>Runs an external command without involving a shell (if possible).</p>
 <p>See <a href="#_type_Proc.pod6">Proc</a> for more details, for example on how to capture output.</p>
 <a name="t78.1.12"></a><h2 id="_type_IO.pod6-sub_shell">78.1.12 sub shell</h2>
 <pre class="code">sub shell($cmd) returns Proc</pre>
 <p>Runs a command through the system shell. All shell meta characters are interpreted by the shell, including pipes, redirects, environment variable substitutions and so on. See <a href="#_type_IO.pod6-sub_run">run</a> if you don't want that.</p>
 <p>The return value is of <a href="#_type_Proc.pod6">type Proc</a>.</p>
 <pre class="code">shell 'ls -lR | gzip -9 &gt; ls-lR.gz';</pre>
 <p>See <a href="#_type_Proc.pod6">Proc</a> for more details, for example on how to capture output.</p>
 <a name="t78.2"></a><h1 id="_type_IO.pod6-Related_classes">78.2 Related classes</h1>
 <p>See also the related classes <a href="#_type_IO::Handle.pod6">IO::Handle</a> and <a href="#_type_IO::Path.pod6">IO::Path</a>.</p>
</div> <!-- /type/IO/Handle.pod6 --><div class="pod-body"><a id="_type_IO_Handle.pod6"></a><a name="t79"><h1 class="title">79 class IO::Handle</h1></a> <p class="subtitle">Opened file or stream</p> <pre class="code">class IO::Handle does IO { }</pre>
 <a name="t79.1"></a><h1 id="_type_IO_Handle.pod6-Methods">79.1 Methods</h1>
 <a name="t79.1.1"></a><h2 id="_type_IO_Handle.pod6-method_get">79.1.1 method get</h2>
 <p>Reads a single line from the input stream (usually the Standard Input or a file).</p>
 <p>Read one line from the standard input:</p>
 <pre class="code">$*IN.get;</pre>
 <p>Read one line from a file:</p>
 <pre class="code">my $fh = open 'filename';
my $line = $fh.get;</pre>
 <a name="t79.1.2"></a><h2 id="_type_IO_Handle.pod6-method_getc">79.1.2 method getc</h2>
 <p>Read a single character from the input stream or return Nil. The operation is blocking and the stream may be buffered.</p>
 <a name="t79.1.3"></a><h2 id="_type_IO_Handle.pod6-method_eof">79.1.3 method eof</h2>
 <p>Returns <span class="code">True</span> if the read operations have exhausted the content of the file.</p>
 <a name="t79.1.4"></a><h2 id="_type_IO_Handle.pod6-method_lines">79.1.4 method lines</h2>
 <pre class="code">method lines($limit = Inf)</pre>
 <p>Return a lazy list of the file's lines read via <a href="#_routine_get.pod6">get</a>, limited to <span class="code">$limit</span> lines. The new line separator (i.e., <span class="code">$*IN.nl-in</span>) will be excluded.</p>
 <pre class="code">    my @data; 
     my $data-file = open 'readings.csv'; 
     for  &lt;b&gt;$data-file.lines&lt;/b&gt;  -&gt; $line { 
         @data.push($line.split(',')) 
     } 
</pre>
 <a name="t79.1.5"></a><h2 id="_type_IO_Handle.pod6-method_words">79.1.5 method words</h2>
 <pre class="code">method words($count = Inf)</pre>
 <p>Return a lazy list of the file's words (separated on whitespace), limited to <span class="code">$count</span> words.</p>
 <pre class="code">    my %dict; 
     ++%dict{$_} for $*IN.words; 
     say "Most common words: ", %dict.sort(*.value).reverse.[^5]; 
</pre>
 <a name="t79.1.6"></a><h2 id="_type_IO_Handle.pod6-method_split">79.1.6 method split</h2>
 <pre class="code">method split(splitter = "")</pre>
 <p>Returns a lazy list of strings found between the splitter, just like <span class="code">split</span> on strings.</p>
 <a name="t79.1.7"></a><h2 id="_type_IO_Handle.pod6-method_comb">79.1.7 method comb</h2>
 <pre class="code">method comb(comber = "")</pre>
 <p>Returns a lazy list of strings combed from the handle, just like <span class="code">comb</span> on strings.</p>
 <a name="t79.1.8"></a><h2 id="_type_IO_Handle.pod6-method_print">79.1.8 method print</h2>
 <pre class="code">method print(*@text --&gt; Bool)</pre>
 <p>Text writing; writes the given <span class="code">@text</span> to the filehandle. See <a href="#_routine_write.pod6">write</a> to write bytes.</p>
 <pre class="code">my $fh = open 'path/to/file', :w;
$fh.print("some text\n");
$fh.close;</pre>
 <a name="t79.1.9"></a><h2 id="_type_IO_Handle.pod6-method_print-nl">79.1.9 method print-nl</h2>
 <pre class="code">method print-nl(IO::Handle:D: --&gt; True)</pre>
 <p>Writes a newline to the filehandle. The newline marker, which is stored in the attribute <span class="code">$.nl-out</span>, defaults to <span class="code">\n</span> unless another marker has been specified in the call to <a href="#_routine_open.pod6">open</a>.</p>
 <pre class="code">my $fh = open 'path/to/file', :w, nl-out =&gt; "\r\n";
$fh.print("some text");
$fh.print-nl;                                        # \r\n
$fh.close;</pre>
 <a name="t79.1.10"></a><h2 id="_type_IO_Handle.pod6-method_say">79.1.10 method say</h2>
 <pre class="code">method say(IO::Handle:D: |)</pre>
 <p>This method is identical to <a href="#_type_IO::Handle.pod6-method_print">print</a> except that it stringifies its arguments by calling <span class="code">.gist</span> on them and auto-appends a newline, with a call to <a href="#_type_IO::Handle.pod6-method_print-nl">print-nl</a>, after the final argument.</p>
 <pre class="code">my $fh = open 'path/to/file', :w;
$fh.say(Complex.new(3, 4));        # 3+4i\n
$fh.close;</pre>
 <a name="t79.1.11"></a><h2 id="_type_IO_Handle.pod6-method_read">79.1.11 method read</h2>
 <pre class="code">method read(IO::Handle:D: Int(Cool:D) $bytes --&gt; Blob)</pre>
 <p>Binary reading; reads and returns up to <span class="code">$bytes</span> bytes from the filehandle.</p>
 <a name="t79.1.12"></a><h2 id="_type_IO_Handle.pod6-method_readchars">79.1.12 method readchars</h2>
 <pre class="code">method readchars(IO::Handle:D: Int(Cool:D) $chars --&gt; Str)</pre>
 <p>Reading chars; reads and returns up to <span class="code">$chars</span> chars (graphemes) from the filehandle.</p>
 <a name="t79.1.13"></a><h2 id="_type_IO_Handle.pod6-method_write">79.1.13 method write</h2>
 <pre class="code">method write(IO::Handle:D: Blob:D $buf)</pre>
 <p>Binary writing; writes <span class="code">$buf</span> to the filehandle. See <a href="#_routine_print.pod6">print</a> to write characters.</p>
 <a name="t79.1.14"></a><h2 id="_type_IO_Handle.pod6-method_seek">79.1.14 method seek</h2>
 <pre class="code">method seek(IO::Handle:D: Int:D $offset, SeekType:D $whence --&gt; True)</pre>
 <p>Move the file pointer (that is, the position at which any subsequent read or write operations will begin,) to the byte position specified by <span class="code">$offset</span> relative to the location specified by <span class="code">$whence</span> which may be one of:</p>
 <ul><li><p>SeekFromBeginning</p>
</li></ul> <p>The beginning of the file.</p>
 <ul><li><p>SeekFromCurrent</p>
</li></ul> <p>The current position in the file.</p>
 <ul><li><p>SeekFromEnd</p>
</li></ul> <p>The end of the file. Please note that you need to specify a negative offset if you want to position before the end of the file.</p>
 <a name="t79.1.15"></a><h2 id="_type_IO_Handle.pod6-method_tell">79.1.15 method tell</h2>
 <pre class="code">method tell(IO::Handle:D: --&gt; Int)</pre>
 <p>Return the current position of the file pointer in bytes.</p>
 <a name="t79.1.16"></a><h2 id="_type_IO_Handle.pod6-method_slurp-rest">79.1.16 method slurp-rest</h2>
 <pre class="code">multi method slurp-rest(IO::Handle:D: :$bin! --&gt; Buf)
multi method slurp-rest(IO::Handle:D: :$enc --&gt; Str)</pre>
 <p>Return the remaining content of the file from the current file position (which may have been set by previous reads or by <span class="code">seek</span>.) If the adverb <span class="code">:bin</span> is provided a <a href="#_type_Buf.pod6">Buf</a> will be returned, otherwise the return will be a <span class="code">Str</span> with the optional encoding <span class="code">:enc</span>.</p>
 <a name="t79.1.17"></a><h2 id="_type_IO_Handle.pod6-method_Supply">79.1.17 method Supply</h2>
 <pre class="code">multi method Supply(IO::Handle:D: :$size = 65536, :$bin --&gt; Supply)</pre>
 <p>Returns a <span class="code">Supply</span> that will emit the contents of the handle in chunks. The size of the chunks is determined by the optional <span class="code">:size</span> named parameter and defaults to 64K. The optional <span class="code">:bin</span> named parameter can be specified to indicate binary reading of the contents, rather than character based reading.</p>
 <a name="t79.1.18"></a><h2 id="_type_IO_Handle.pod6-method_path">79.1.18 method path</h2>
 <p>For a handle opened on a file this returns the <a href="#_type_IO::Path.pod6">IO::Path</a> that represents the file. For the standard I/O handles <span class="code">$*IN</span>, <span class="code">$*OUT</span> and <span class="code">$*ERR</span> it returns a <a href="#_type_IO::Special.pod6">IO::Special</a> object.</p>
 <pre class="code">$fh.path;</pre>
 <a name="t79.1.19"></a><h2 id="_type_IO_Handle.pod6-method_close">79.1.19 method close</h2>
 <p>Will close a previously opened filehandle.</p>
 <pre class="code">$fh.close;</pre>
 <a name="t79.1.20"></a><h2 id="_type_IO_Handle.pod6-method_flush">79.1.20 method flush</h2>
 <p>Will flush the filehandle to disk.</p>
 <pre class="code">$fh.flush;</pre>
 <a name="t79.1.21"></a><h2 id="_type_IO_Handle.pod6-method_native-descriptor">79.1.21 method native-descriptor</h2>
 <pre class="code">method native-descriptor()</pre>
 <p>This returns a value that the operating system would understand as a "file descriptor" and is suitable for passing to a native function that requires a file descriptor as an argument such as <span class="code">fcntl</span> or <span class="code">ioctl</span>.</p>
 <a name="t79.1.22"></a><h2 id="_type_IO_Handle.pod6-method_opened">79.1.22 method opened</h2>
 <pre class="code">method opened(IO::Handle:D: --&gt; Bool)</pre>
 <p>Returns <span class="code">True</span> if the handle is open.</p>
 <a name="t79.1.23"></a><h2 id="_type_IO_Handle.pod6-method_t">79.1.23 method t</h2>
 <pre class="code">method t(IO::Handle:D: --&gt; Bool)</pre>
 <p>Returns <span class="code">True</span> if the handle is opened to a tty.</p>
 <a name="t79.2"></a><h1 id="_type_IO_Handle.pod6-Related_roles_and_classes">79.2 Related roles and classes</h1>
 <p>See also the related role <a href="#_type_IO.pod6">IO</a> and the related class <a href="#_type_IO::Path.pod6">IO::Path</a>.</p>
</div> <!-- /type/IO/Notification.pod6 --><div class="pod-body"><a id="_type_IO_Notification.pod6"></a><a name="t80"><h1 class="title">80 class IO::Notification</h1></a> <p class="subtitle">Asynchronous notification for file and directory changes </p> <pre class="code">enum FileChangeEvent (:FileChanged(1), :FileRenamed(2));

class IO::Notification  {
    class Change {
        has $.path;
        has $.event;
    }
    ...
}</pre>
 <p><span class="code">IO::Notification.watch-path($path)</span> produces a <a href="#_type_Supply.pod6">Supply</a> of <span class="code">IO::Notification::Change</span> events for a file or directory.</p>
 <p>Here is a small example that prints the first ten FileChanged-notifications for the current directory:</p>
 <pre class="code">my $finish = Promise.new;
my $count = 0;

IO::Notification.watch-path($?FILE).act( -&gt; $change {
    $count++ if $change.event ~~ FileChanged;
    say "($count) $change.path(): $change.event()";
    $finish.keep if $count &gt;= 10;
});
await $finish;</pre>
 <p>The type of the change is very much dependent both on the platform and on specific system calls that were used initiate the change. At this point in time, relying on them seems to be a bad idea.</p>
 <a name="t80.1"></a><h1 id="_type_IO_Notification.pod6-Methods">80.1 Methods</h1>
 <a name="t80.1.1"></a><h2 id="_type_IO_Notification.pod6-method_watch-path">80.1.1 method watch-path</h2>
 <pre class="code">method watch-path(IO::Notification: Str() $path, :$scheduler = $*SCHDEULER)</pre>
 <p>Returns a <a href="#_type_Supply.pod6">Supply</a> that emits <span class="code">IO::Notification::Change</span> objects.</p>
 <p>If <span class="code">$path</span> is a file, only modifications of that file are reported. If <span class="code">$path</span> is a directory, both modifications to the directory itself (for example permission changes) and to files in the directory (including new files in the directory) are reported.</p>
 <p><span class="code">:$scheduler</span> allows you to specify which thread scheduler is responsible for the notification stream.</p>
</div> <!-- /type/IO/Path.pod6 --><div class="pod-body"><a id="_type_IO_Path.pod6"></a><a name="t81"><h1 class="title">81 class IO::Path</h1></a> <p class="subtitle">File or directory path</p> <pre class="code">class IO::Path is Cool does IO { }</pre>
 <p>Built-in class for file and directory paths.</p>
 <p>Conceptually, an <span class="code">IO::Path</span> object consists of a volume (think <span class="code">C:</span> on windows), a directory, and a basename.</p>
 <p><span class="code">IO::Path</span> supports both purely textual operations, and operations that access the file system.</p>
 <p>The current working directory is available as an IO::Path object in <span class="code">$*CWD</span>.</p>
 <p>The behavior of <span class="code">IO::Path</span> is dependent on the operating system it runs on; to get reproducible behavior across operating systems, you can use one of its subclasses instead: <a href="#_type_IO::Path::Unix.pod6">IO::Path::Unix</a>, <a href="#_type_IO::Path::Win32.pod6">IO::Path::Win32</a>, <a href="#_type_IO::Path::Cygwin.pod6">IO::Path::Cygwin</a>, <a href="#_type_IO::Path::QNX.pod6">IO::Path::QNX</a>.</p>
 <p>The rest of this document silently assumes Unix semantics in its examples, unless when stated otherwise.</p>
 TODO: Investigate if the $SPEC = $*SPEC, :$CWD = $*CWD params that
         a bunch of these routines have in their signature in Rakudo, are
         "official" Perl 6 API, and if so, document them here in a central
         place so all the routine documentations can link to it without
         having to repeat it.
 <a name="t81.1"></a><h1 id="_type_IO_Path.pod6-Methods">81.1 Methods</h1>
 <a name="t81.1.1"></a><h2 id="_type_IO_Path.pod6-method_new">81.1.1 method new</h2>
 <pre class="code">multi method new(Str:D $path)
multi method new(:$basename!, :$dirname = '.', :$volume = '')</pre>
 <p>Creates a new IO::Path object from a path string (which is being parsed for volume, directory name and basename), or from volume, directory name and basename passed as named arguments.</p>
 <a name="t81.1.2"></a><h2 id="_type_IO_Path.pod6-method_abspath">81.1.2 method abspath</h2>
 <pre class="code">method abspath(IO::Path:D: --&gt; Str)</pre>
 <p>Returns the absolute path as a string.</p>
 <a name="t81.1.3"></a><h2 id="_type_IO_Path.pod6-method_basename">81.1.3 method basename</h2>
 <pre class="code">method basename(IO::Path:D:)</pre>
 <p>Returns the basename part of the path object. That is, it returns the name of the file relative to its directory.</p>
 <pre class="code">say IO::Path.new("/etc/passwd").basename;   # passwd</pre>
 <a name="t81.1.4"></a><h2 id="_type_IO_Path.pod6-method_extension">81.1.4 method extension</h2>
 <pre class="code">method extension(IO::Path:D:)</pre>
 <p>Returns the extension (if any) of the path object.</p>
 <pre class="code">say IO::Path.new("docs/README.pod").extension;   # pod</pre>
 <a name="t81.1.5"></a><h2 id="_type_IO_Path.pod6-method_dirname">81.1.5 method dirname</h2>
 <pre class="code">method dirname(IO::Path:D:)</pre>
 <p>Returns the directory name portion of the path object. That is, it returns the path excluding the volume and the base name.</p>
 <pre class="code">say IO::Path.new("/etc/passwd").dirname;    # /etc</pre>
 <a name="t81.1.6"></a><h2 id="_type_IO_Path.pod6-method_volume">81.1.6 method volume</h2>
 <pre class="code">method volume(IO::Path:D:)</pre>
 <p>Returns the volume portion of the path object. On Unix system, this is always the empty string.</p>
 <pre class="code">say IO::Path::Win32.new("C:\\Windows\\registry.ini").volume;    # C:</pre>
 <a name="t81.1.7"></a><h2 id="_type_IO_Path.pod6-method_parts">81.1.7 method parts</h2>
 <pre class="code">method parts(IO::Path:D:) returns Hash</pre>
 <p>Returns a hash with the keys <span class="code">dirname</span>, <span class="code">path</span> and <span class="code">volume</span>, and as values the return values of the methods with the same names.</p>
 <pre class="code">say IO::Path.new("/etc/passwd").parts.perl
# ("dirname" =&gt; "/etc", "volume" =&gt; "", "basename" =&gt; "passwd").hash</pre>
 <a name="t81.1.8"></a><h2 id="_type_IO_Path.pod6-method_path">81.1.8 method path</h2>
 <pre class="code">method path(IO::Path:D: --&gt; Str)</pre>
 <p>Returns the full path as a string.</p>
 <a name="t81.1.9"></a><h2 id="_type_IO_Path.pod6-method_Str">81.1.9 method Str</h2>
 <pre class="code">method Str(IO::Path:D:)</pre>
 <p>Returns the complete text that was used to create the path as a string, whether it was given as a single string or as named arguments.</p>
 <pre class="code">say IO::Path.new(basename =&gt; "foo", dirname =&gt; "/bar").Str  # /bar/foo
say IO::Path.new("/bar/foo").Str                            # /bar/foo</pre>
 <a name="t81.1.10"></a><h2 id="_type_IO_Path.pod6-method_open">81.1.10 method open</h2>
 <pre class="code">method open(IO::Path:D: *%opts)</pre>
 <p>Opens the path as a file; the named options control the mode, and are the same as the <a href="#_routine_open.pod6">open</a> function accepts.</p>
 <a name="t81.1.11"></a><h2 id="_type_IO_Path.pod6-method_watch">81.1.11 method watch</h2>
 <pre class="code">method watch(IO::Path:D: --&gt; Supply)</pre>
 <p>Watches the path for modifications. Only implemented in Rakudo with the MoarVM backend at the moment.</p>
 <a name="t81.1.12"></a><h2 id="_type_IO_Path.pod6-method_is-absolute">81.1.12 method is-absolute</h2>
 <pre class="code">method is-absolute(IO::Path:D: --&gt; Bool:D)</pre>
 <p>Returns <span class="code">True</span> if the path is an absolute path, and <span class="code">False</span> otherwise.</p>
 <a name="t81.1.13"></a><h2 id="_type_IO_Path.pod6-method_is-relative">81.1.13 method is-relative</h2>
 <pre class="code">method is-relative(IO::Path:D: --&gt; Bool:D)</pre>
 <p>Returns <span class="code">True</span> if the path is a relative path, and <span class="code">False</span> otherwise.</p>
 <a name="t81.1.14"></a><h2 id="_type_IO_Path.pod6-method_absolute">81.1.14 method absolute</h2>
 <pre class="code">method absolute(IO::Path:D: $base = ~$*CWD --&gt; IO::Path:D)</pre>
 <p>Returns a new <span class="code">IO::Path</span> object that is an absolute path, based on <span class="code">$base</span>.</p>
 <a name="t81.1.15"></a><h2 id="_type_IO_Path.pod6-method_relative">81.1.15 method relative</h2>
 <pre class="code">method relative(IO::Path:D: $base = ~$*CWD --&gt; IO::Path:D)</pre>
 <p>Returns a new <span class="code">IO::Path</span> object relative to the <span class="code">$base</span> path.</p>
 <a name="t81.1.16"></a><h2 id="_type_IO_Path.pod6-method_parent">81.1.16 method parent</h2>
 <pre class="code">method parent(IO::Path:D: --&gt; IO::Path)</pre>
 <p>Removes the last portion of the path and returns the result as a new <span class="code">IO::Path</span>.</p>
 <pre class="code">my $io = IO::Path.new( "/etc/passwd" );
say $io.parent;                          # "/etc".IO</pre>
 <a name="t81.1.17"></a><h2 id="_type_IO_Path.pod6-method_child">81.1.17 method child</h2>
 <pre class="code">method child(IO::Path:D: $childname --&gt; IO::Path)</pre>
 <p>Appends <span class="code">$childname</span> to the end of the path, adding path separators where needed and returns the result as a new <span class="code">IO::Path</span>.</p>
 <pre class="code">my $io = IO::Path.new( "/bin" );
say $io.child('netstat');                # "/bin/netstat".IO</pre>
 <a name="t81.1.18"></a><h2 id="_type_IO_Path.pod6-method_resolve">81.1.18 method resolve</h2>
 <pre class="code">method resolve(IO::Path:D: --&gt; IO::Path)</pre>
 <p>Returns a new <span class="code">IO::Path</span> object with all symbolic links and references to the parent directory (<span class="code">..</span>) resolved. This means that the filesystem is examined for each directory in the path, and any symlinks found are followed.</p>
 <pre class="code"># bar is a symlink pointing to "/baz"
my $io = "foo/./bar/..".IO.resolve;      # now "/" (the parent of "/baz")</pre>
 <p>NOTE: Currently (May 2016) this method doesn't work correctly on all platforms, e.g. Windows, since it assumes POSIX semantics.</p>
 <a name="t81.1.19"></a><h2 id="_type_IO_Path.pod6-routine_dir">81.1.19 routine dir</h2>
 <pre class="code">sub    dir(Cool $path = '.', Mu :$test = none('.', '..'))
method dir(IO::Path:D: Mu :$test = none('.', '..'))</pre>
 <p>Returns the contents of a directory as a lazy list of <span class="code">IO::Path</span> objects representing relative paths, filtered by <a href="#_language_operators.pod6-infix_~~">smart-matching</a> their names against the <span class="code">:test</span> parameter.</p>
 <p>Examples:</p>
 <pre class="code"># To iterate over the contents of the current directory:
for dir() -&gt; $file {
    say $file;
}

# As before, but include even '.' and '..' which are filtered out by
# the default :test matcher:
for dir(test =&gt; *) -&gt; $file {
    say $file;
}

# To get the names of all .jpg and .jpeg files in ~/Downloads:
my @jpegs = "%*ENV&amp;lt;HOME&gt;/Downloads".IO.dir(test =&gt; /:i '.' jpe?g $/)».Str;</pre>
 TODO: Turn the following into a FAQ entry, and link to it from here.
 <p>An example program that lists all files and directories recursively:</p>
 <pre class="code">sub MAIN($dir = '.') {
    my @todo = $dir.IO;
    while @todo {
        for @todo.pop.dir -&gt; $path {
            say $path.Str;
            @todo.push: $path if $path.d;
        }
    }
}</pre>
 <p>A lazy way to find the first three files ending in ".p6" recursively starting from the current directory:</p>
 <pre class="code">my @stack = '.';
my $perl-files := gather while ( @stack ) {
    my $current = @stack.pop;
    take $current if ($current.IO.f &amp;amp;&amp;amp; $current.IO.extension ~~ rx:i/p6$/);
    @stack.append(dir($current)&gt;&gt;.path) if $current.IO.d;
}

say $perl-files[1..3];</pre>
 <a name="t81.1.20"></a><h2 id="_type_IO_Path.pod6-routine_slurp">81.1.20 routine slurp</h2>
 <pre class="code">multi method slurp(IO::Path:D: :$bin, :$enc);</pre>
 <p>Return the file content for this path, like <a href="#_routine_slurp.pod6">slurp</a>.</p>
 <a name="t81.1.21"></a><h2 id="_type_IO_Path.pod6-routine_spurt">81.1.21 routine spurt</h2>
 <pre class="code">multi method spurt(IO::Path:D: Blob $contents, :$bin, |c);
multi method spurt(IO::Path:D: Cool $contents, :$bin, |c);</pre>
 <p>Write <span class="code">$contents</span> to this path, like <a href="#_routine_spurt.pod6">spurt</a>.</p>
 <a name="t81.1.22"></a><h2 id="_type_IO_Path.pod6-routine_chdir">81.1.22 routine chdir</h2>
 <pre class="code">sub chdir(Str() $path, :$test = 'r' --&gt; IO::Path);
multi method chdir(IO::Path:U: $path, :$test = 'r' --&gt; IO::Path);
multi method chdir(IO::Path:D: Str() $path is copy, :$test = 'r' --&gt; IO::Path);</pre>
 <p>Alter the processes notion of the current working directory (as found in <span class="code">$*CWD</span>.)</p>
 <p>The subroutine and class method forms both change the directory relative to <span class="code">$*CWD</span> if the supplied <span class="code">$path</span> is not absolute. The object method form changes the directory relative to the path of the invocant if <span class="code">$path</span> is not absolute. The optional named parameter <span class="code">test</span> can specify a file test that should be applied to the target path if the operation is successful. The default <span class="code">test</span> is that the directory is readable.</p>
 <p>If the directory change is successful then the <a href="#_type_IO::Path.pod6">IO::Path</a> representing the target directory is returned, otherwise it will <a href="#_routine_fail.pod6">fail</a> with <a href="#_type_X::IO::Chdir.pod6">X::IO::Chdir</a>.</p>
 <a name="t81.1.23"></a><h2 id="_type_IO_Path.pod6-routine_mkdir">81.1.23 routine mkdir</h2>
 <pre class="code">multi sub mkdir(Int:D $mode, *@dirnames --&gt; @success-dirnames);
multi sub mkdir($path, $mode = 0o777 --&gt; Bool);
method    mkdir(IO::Path:D: $mode 0o777 --&gt; Bool)</pre>
 <p>Creates one or more directories with the <a href="https://en.wikipedia.org/wiki/File_system_permissions#Numeric_notation">permissions</a> specified as an integer (thought still subject to <a href="https://en.wikipedia.org/wiki/Umask">umask</a>).</p>
 <p>Throws an exception of type <a href="#_type_X::IO::Mkdir.pod6">X::IO::Mkdir</a> if the directory cannot be created, except for the <span class="code">*@dirnames</span> form which returns the names of the directories that were successfully created.</p>
 <a name="t81.1.24"></a><h2 id="_type_IO_Path.pod6-routine_rmdir">81.1.24 routine rmdir</h2>
 <pre class="code">sub    rmdir($dir as IO --&gt; Bool)
method rmdir(IO::Path:D: --&gt; Bool)</pre>
 <p>Remove the given directory if it is empty.</p>
 <p>Returns <span class="code">True</span> on success. Throws an exception of type <a href="#_type_X::IO::Rmdir.pod6">X::IO::Rmdir</a> if the directory cannot be removed (e.g. the directory is not empty, or the path is not a directory).</p>
 <a name="t81.1.25"></a><h2 id="_type_IO_Path.pod6-routine_chmod">81.1.25 routine chmod</h2>
 <pre class="code">sub    chmod($mode, *@filenames --&gt; @success-filenames)
method chmod(IO::Path:D: $mode --&gt; Bool)</pre>
 <p>Changes the POSIX permissions of a file (or in the subroutine form, any number of files) to <span class="code">$mode</span>.</p>
 <p>The subroutine form returns the names of the files for which setting the new mode was successful. The method form returns True on success, and otherwise <a href="#_routine_fail.pod6">fails</a> with <a href="#_type_X::IO::Chmod.pod6">X::IO::Chmod</a>.</p>
 <p>The mode is expected as an integer following the <a href="https://en.wikipedia.org/wiki/File_system_permissions#Numeric_notation">standard numeric notation</a>, and is best written as an octal number:</p>
 <pre class="code">chmod 0o755, "myfile1", "myfile2"; # make two files executable by the owner
"myfile".IO.chmod(0o444);          # make a file read-only
$*CWD.chmod(0o544);                # make the working directory read-only</pre>
 <p>Make sure you <i>don't</i> accidentally pass the intended octal digits as a decimal number (or string containing a decimal number):</p>
 <pre class="code">chmod '0444', 'myfile';            # BAD!!! (interpreted as mode 0o674)</pre>
 <a name="t81.1.26"></a><h2 id="_type_IO_Path.pod6-routine_rename">81.1.26 routine rename</h2>
 <pre class="code">method rename(IO::Path:D: $to, :$createonly --&gt; Bool);
sub    rename($from, $to, :$createonly --&gt; Bool);</pre>
 <p>Renames a file. Both <span class="code">$from</span> (the file to be renamed) and <span class="code">$to</span> (the destination) can take arbitrary paths. If <span class="code">:createonly</span> is set to <span class="code">True</span>, the rename fails if a file already exists in the destination. Returns <span class="code">True</span> upon success, or <a href="#_routine_fail.pod6">fails</a> with <a href="#_type_X::IO::Rename.pod6">X::IO::Rename</a> if the operation could not be completed.</p>
 <p>Please use <a href="#_routine_move.pod6">move</a> if a file could not be moved by renaming (usually because the destination is on a different physical storage device).</p>
 <a name="t81.1.27"></a><h2 id="_type_IO_Path.pod6-routine_copy">81.1.27 routine copy</h2>
 <pre class="code">method copy(IO::Path:D: $to, :$createonly)
sub    copy($from, $to, :$createonly);</pre>
 <p>Copies a file, as indicated by <span class="code">$from</span> or the invocant, to the destination specified. If <span class="code">:createonly</span> is set to <span class="code">True</span>, copy fails if a file already exists in the destination. Returns <span class="code">True</span> upon success, or an appropriate <span class="code">Failure</span> if the operation could not be completed.</p>
 <a name="t81.1.28"></a><h2 id="_type_IO_Path.pod6-routine_move">81.1.28 routine move</h2>
 <pre class="code">method move(IO::Path:D: $to, :$createonly)
sub    move($from, $to, :$createonly);</pre>
 <p>Moves a file. Both <span class="code">$from</span> (the file to be moved) and <span class="code">$to</span> (the destination) can take arbitrary paths. If <span class="code">:createonly</span> is set to <span class="code">True</span>, the move fails if a file already exists in the destination. Returns <span class="code">True</span> upon success, or <a href="#_routine_fail.pod6">fails</a> with <a href="#_type_X::IO::Move.pod6">X::IO::Move</a> if the operation could not be completed.</p>
 <p>Please use <a href="#_routine_rename.pod6">rename</a> if a file can be moved by renaming (which is usually possible if the destination is on the same different physical storage device).</p>
 <a name="t81.1.29"></a><h2 id="_type_IO_Path.pod6-routine_symlink">81.1.29 routine symlink</h2>
 <pre class="code">method symlink(IO::Path:D: Str $name --&gt; Bool);
sub    symlink(Str $target, Str $name --&gt; Bool);</pre>
 <p>Create a new symbolic link named as $target (or the name of the invocant in the method form,) to the existing file named <span class="code">$name</span>.</p>
 <p>Both forms will return <span class="code">True</span> on success or <a href="#_routine_fail.pod6">fail</a> with <a href="#_type_X::IO::Symlink.pod6">X::IO::Symlink</a> if the symbolic link could not be created.</p>
 <a name="t81.1.30"></a><h2 id="_type_IO_Path.pod6-routine_link">81.1.30 routine link</h2>
 <pre class="code">method link(IO::Path:D: Str $name --&gt; Bool);
sub    link(Str $target, Str $name --&gt; Bool);</pre>
 <p>Create a new link named as $target (or the name of the invocant in the method form,) to the existing file named <span class="code">$name</span>.</p>
 <p>Both forms will return <span class="code">True</span> on success or <a href="#_routine_fail.pod6">fail</a> with <a href="#_type_X::IO::Link.pod6">X::IO::Link</a> if the link operation could not be performed.</p>
 <a name="t81.1.31"></a><h2 id="_type_IO_Path.pod6-routine_unlink">81.1.31 routine unlink</h2>
 <pre class="code">method unlink(IO::Path:D: --&gt; Bool);
sub    unlink(*@filenames --&gt; @success-filenames);</pre>
 <p>Delete all specified ordinary files, links, or symbolic links.</p>
 <p>The subroutine form returns the names of the files that were successfully deleted. The method form returns <span class="code">True</span> on success, or <a href="#_routine_fail.pod6">fails</a> with <a href="#_type_X::IO::Unlink.pod6">X::IO::Unlink</a> if the operation could not be completed.</p>
 <a name="t81.1.32"></a><h2 id="_type_IO_Path.pod6-method_IO">81.1.32 method IO</h2>
 <pre class="code">method IO(IO::Path:D: --&gt; IO::Path)</pre>
 <p>Returns the invocant.</p>
 <a name="t81.1.33"></a><h2 id="_type_IO_Path.pod6-method_SPEC">81.1.33 method SPEC</h2>
 <pre class="code">method SPEC(IO::Path:D: --&gt; IO::Spec)</pre>
 <p>Returns the <a href="#_type_IO::Spec.pod6">IO::Spec</a> object that was (implicitly) specified at object creation time.</p>
 <pre class="code">my $io = IO::Path.new("/bin/bash");
say $io.SPEC;                            # (Unix)
say $io.SPEC.dir-sep;                    # /</pre>
 <a name="t81.2"></a><h1 id="_type_IO_Path.pod6-File_test_operators">81.2 File test operators</h1>
 <p><span class="indexed"><a id="539" name="">-e</a></span> <span class="indexed"><a id="540" name="">-f</a></span></p>
 <p>The <span class="code">-e</span> and <span class="code">-f</span> file test operators do not exist in Perl 6. Use instead <span class="code">:e</span> and <span class="code">:f</span>.</p>
 <p><span class="indexed"><a id="541" name="">-M</a></span> <span class="indexed"><a id="542" name="">-A</a></span> <span class="indexed"><a id="543" name="">-C</a></span></p>
 <p>The <span class="code">-M</span>, <span class="code">-A</span> and <span class="code">-C</span> file test operators do not exist in Perl 6, use instead the <a href="#_type_IO::Path.pod6-method_modified">modified</a>, <a href="#_type_IO::Path.pod6-method_accessed">accessed</a> and <a href="#_type_IO::Path.pod6-method_changed">changed</a> methods instead.</p>
 <p><span class="indexed"><a id="544" name="">:e</a></span> <span class="indexed"><a id="545" name="">:d</a></span> <span class="indexed"><a id="546" name="">:f</a></span> <span class="indexed"><a id="547" name="">:l</a></span> <span class="indexed"><a id="548" name="">:r</a></span> <span class="indexed"><a id="549" name="">:w</a></span> <span class="indexed"><a id="550" name="">:x</a></span> <span class="indexed"><a id="551" name="">:s</a></span> <span class="indexed"><a id="552" name="">:z</a></span> <span class="indexed"><a id="553" name="">:rw</a></span> <span class="indexed"><a id="554" name="">:rwx</a></span></p>
 <pre class="code">:e   Exists
:d   Directory
:f   File
:l   Symbolic link
:r   Readable
:w   Writable
:x   Executable
:s   Size
:z   Zero size
:rw  Readable and writable
:rwx Readable, writable, and executable</pre>
 <p>Usage:</p>
 <p>If you have a string - a path to something in the filesystem:</p>
 <pre class="code">if "path/to/file".IO ~~ :e {
    say 'file exists';
}

my $file = "path/to/file";
if $file.IO ~~ :e {
    say 'file exists';
}</pre>
 <p>Instead of the colonpair syntax, you can use method calls too:</p>
 <pre class="code">if 'path/to/file'.IO.e {
    say 'file exists';
}</pre>
 <p>If you already have an IO object in $file, either by creating one yourself, or by getting it from another subroutine, such as <span class="code">dir</span>, you can write this:</p>
 <pre class="code">my $file = "path/to/file".IO;
if $file ~~ :e {
    say 'file exists';
}</pre>
 <a name="t81.3"></a><h1 id="_type_IO_Path.pod6-File_timestamp_retrieval">81.3 File timestamp retrieval</h1>
 <p>There are also 3 methods for fetching the 3 timestamps of a file (inode), on Operating Systems where these are available:</p>
 <a name="t81.3.1"></a><h2 id="_type_IO_Path.pod6-method_modified">81.3.1 method modified</h2>
 <p>Return an <a href="#_type_Instant.pod6">Instant</a> object representing the timestamp when the file was last modified.</p>
 <pre class="code">say "path/to/file".IO.modified;   #  e.g. Instant:1424089165</pre>
 <p>To obtain a human-readable form of the timestamp, call <span class="code">DateTime</span> method on the returned <span class="code">Instant</span>, to convert it into a <a href="#_type_DateTime.pod6">DateTime</a> object:</p>
 <pre class="code">say "path/to/file".IO.modified.DateTime;  # e.g. 2015-02-16T12:18:50Z</pre>
 <a name="t81.3.2"></a><h2 id="_type_IO_Path.pod6-method_accessed">81.3.2 method accessed</h2>
 <p>Return an <a href="#_type_Instant.pod6">Instant</a> object representing the timestamp when the file was last accessed.</p>
 <pre class="code">say "path/to/file".IO.accessed;   #  e.g. Instant:1424353577</pre>
 <p>To obtain a human-readable form of the timestamp, use a <a href="#_type_DateTime.pod6">DateTime</a> object:</p>
 <pre class="code">say DateTime.new("path/to/file".IO.accessed);  # e.g. 2015-02-19T13:45:42Z</pre>
 <p>or more readably:</p>
 <pre class="code">my $access_instant = "path/to/file".IO.accessed;
my $access_time = DateTime.new($access_instant);
say $access_time;         # e.g. 2015-02-19T13:45:42Z</pre>
 <a name="t81.3.3"></a><h2 id="_type_IO_Path.pod6-method_changed">81.3.3 method changed</h2>
 <p>Return an <a href="#_type_Instant.pod6">Instant</a> object representing the timestamp when the inode was last changed.</p>
 <pre class="code">"path/to/file".IO.changed;        #  e.g. Instant:1424089165</pre>
 <p>To obtain a human-readable form of the timestamp, use a <a href="#_type_DateTime.pod6">DateTime</a> object:</p>
 <pre class="code">say DateTime.new("path/to/file".IO.changed);  # e.g. 2015-02-16T12:18:50Z</pre>
 <p>or more readably:</p>
 <pre class="code">my $change_instant = "path/to/file".IO.changed;
my $change_time = DateTime.new($chnge_instant);
say $change_time;         # e.g. 2015-02-16T12:18:50Z</pre>
 <a name="t81.4"></a><h1 id="_type_IO_Path.pod6-File_permissions_retrieval">81.4 File permissions retrieval</h1>
 <a name="t81.4.1"></a><h2 id="_type_IO_Path.pod6-method_mode">81.4.1 method mode</h2>
 <p>Return an <a href="#_type_IntStr.pod6">IntStr</a> object representing the POSIX permissions of a file. The Str part of the result is the octal representation of the file permission, like the form accepted by the chmod(1) utility.</p>
 <pre class="code">say ~"path/to/file".IO.mode;        # e.g. '0644'
say +"path/to/file".IO.mode;        # e.g. 420, where sprintf('%04o', 420) eq '0644'</pre>
 <p>The result of this can be used in the other methods that take a mode as an argument.</p>
 <pre class="code">"path/to/file1".IO.chmod("path/to/file2".IO.mode);  # will change the
                                                    # permissions of file1
                                                    # to be the same as file2</pre>
 <a name="t81.5"></a><h1 id="_type_IO_Path.pod6-Related_roles_and_classes">81.5 Related roles and classes</h1>
 <p>See also the related role <a href="#_type_IO.pod6">IO</a> and the related class <a href="#_type_IO::Handle.pod6">IO::Handle</a>.</p>
</div> <!-- /type/IO/Pipe.pod6 --><div class="pod-body"><a id="_type_IO_Pipe.pod6"></a><a name="t82"><h1 class="title">82 class IO::Pipe</h1></a> <p class="subtitle">Buffered inter-process string or binary stream</p> <pre class="code">class IO::Pipe is IO::Handle { ... }</pre>
 <p>An <span class="code">IO::Pipe</span> object closely corresponds to a UNIX pipe. It has one end where it consumes string or binary data, and another where it reproduces the same data. It is buffered, so that a write without a read doesn't immediately block.</p>
 <p>Pipes can be easily constructed with <a href="#_type_Proc.pod6">sub run and Proc.new</a>.</p>
 <a name="t82.1"></a><h1 id="_type_IO_Pipe.pod6-Methods">82.1 Methods</h1>
 <a name="t82.1.1"></a><h2 id="_type_IO_Pipe.pod6-method_proc">82.1.1 method proc</h2>
 <pre class="code">method proc(IO::Pipe:) returns Proc:D</pre>
 <p>Returns the <a href="#_type_Proc.pod6">Proc</a> object from which the pipe originates.</p>
</div> <!-- /type/IO/Socket.pod6 --><div class="pod-body"><a id="_type_IO_Socket.pod6"></a><a name="t83"><h1 class="title">83 role IO::Socket</h1></a> <p class="subtitle">Network socket</p> <pre class="code">role IO::Socket does IO { ... }</pre>
 <p><span class="code">IO::Socket</span> contains read and write methods for sockets. It is usually used through <a href="#_type_IO::Socket::INET.pod6">IO::Socket::INET</a>.</p>
 <a name="t83.1"></a><h1 id="_type_IO_Socket.pod6-Methods">83.1 Methods</h1>
 <a name="t83.1.1"></a><h2 id="_type_IO_Socket.pod6-method_recv">83.1.1 method recv</h2>
 <pre class="code">method recv(IO::Socket:D: Cool $elems = Inf, :$bin)</pre>
 <p>Receive a package and return it, either as a <a href="#_type_Blob.pod6">Blob</a> if <span class="code">:bin</span> was passed, or a <a href="#_type_Str.pod6">Str</a> if not. If <span class="code">$elems</span> is supplied, only that many bytes or characters are returned.</p>
 <p>Fails if the socket is not connected.</p>
 <a name="t83.1.2"></a><h2 id="_type_IO_Socket.pod6-method_read">83.1.2 method read</h2>
 <pre class="code">method read(IO::Socket:D: Int(Cool) $bytes)</pre>
 <p>Reads <span class="code">$bytes</span> bytes from the socket and returns them in a <a href="#_type_Blob.pod6">Blob</a>.</p>
 <p>Fails if the socket is not connected.</p>
 <a name="t83.1.3"></a><h2 id="_type_IO_Socket.pod6-method_print">83.1.3 method print</h2>
 <pre class="code">method print(IO::Socket:D: Str(Cool) $string)</pre>
 <p>Writes the supplied string to the socket, thus sending it to other end of the connection. The binary version is <a href="#82-method write">#method write</a>.</p>
 <p>Fails if the socket is not connected.</p>
 <a name="t83.1.4"></a><h2 id="_type_IO_Socket.pod6-method_write">83.1.4 method write</h2>
 <pre class="code">method write(IO::Socket:D: Blob:D $buf)</pre>
 <p>Writes the supplied buffer to the socket, thus sending it to other end of the connection. The string version is <a href="#82-method print">#method print</a>.</p>
 <p>Fails if the socket is not connected.</p>
 <a name="t83.1.5"></a><h2 id="_type_IO_Socket.pod6-method_put">83.1.5 method put</h2>
 <pre class="code">method put(IO::Socket:D: Str(Cool) $string)</pre>
 <p>Writes the supplied string, with a <span class="code">\n</span> appended to it, to the socket, thus sending it to other end of the connection.</p>
 <p>Fails if the socket is not connected.</p>
 <a name="t83.1.6"></a><h2 id="_type_IO_Socket.pod6-method_close">83.1.6 method close</h2>
 <pre class="code">method close(IO::Socket:D)</pre>
 <p>Closes the socket.</p>
 <p>Fails if the socket is not connected.</p>
 <a name="t83.1.7"></a><h2 id="_type_IO_Socket.pod6-method_native-descriptor">83.1.7 method native-descriptor</h2>
 <pre class="code">method native-descriptor()</pre>
 <p>This returns a value that the operating system would understand as a "socket descriptor" and is suitable for passing to a native function that requires a socket descriptor as an argument such as <span class="code">setsockopt</span>.</p>
</div> <!-- /type/IO/Socket/Async.pod6 --><div class="pod-body"><a id="_type_IO_Socket_Async.pod6"></a><a name="t84"><h1 class="title">84 class IO::Socket::Async</h1></a> <p class="subtitle">Asynchronous TCP socket</p> <pre class="code">class IO::Socket::Async does IO::Socket { ... }</pre>
 <p><span class="code">IO::Socket::Async</span> provides asynchronous TCP sockets, for both the server and the client side.</p>
 <p>Here is the equivalent example to that in <a href="#_type_IO::Socket::INET.pod6">IO::Socket::INET</a> of a simple echo server that listens on port 3333:</p>
 <pre class="code">use v6; 
 
 react { 
     whenever IO::Socket::Async.listen('localhost', 3333) -&gt; $conn { 
         whenever $conn.Supply(:bin) -&gt; $buf { 
             await $conn.write: $buf 
         } 
     } 
 } 
</pre>
 <p>And a client that connects to it, and prints out what the server answers:</p>
 <pre class="code">use v6; 
 
 await IO::Socket::Async.connect('localhost', 3333).then( -&gt; $p { 
     if $p.status { 
         given $p.result { 
             .print('Hello, Perl 6'); 
             react { 
                 whenever .Supply() -&gt; $v { 
                     $v.say; 
                     done; 
                 } 
             } 
             .close; 
         } 
     } 
 }); 
</pre>
 <p>Alternatively <a href="#_type_IO::Socket::Async.pod6">IO::Socket::Async</a> can send and receive UDP messages. An example server that outputs all the data it receives would be:</p>
 <pre class="code">my $socket = IO::Socket::Async.bind-udp('localhost', 3333); 
 
 react { 
     whenever $socket.Supply -&gt; $v { 
         if $v.chars &gt; 0 { 
             say $v; 
         } 
     } 
 } 
</pre>
 <p>And an associated client might be:</p>
 <pre class="code">my $socket = IO::Socket::Async.udp(); 
 await $socket.print-to('localhost', 3333, "Hello, Perl 6!"); 
 
</pre>
 <a name="t84.1"></a><h1 id="_type_IO_Socket_Async.pod6-Methods">84.1 Methods</h1>
 <p>The <a href="#_type_IO::Socket::Async.pod6">IO::Socket::Async</a> cannot be constructed directly, either <span class="code">connect</span> or <span class="code">listen</span> (for TCP connections, ) or <span class="code">udp</span> or <span class="code">bind-udp</span> (for UDP data,) should be used to create a client or a server respectively.</p>
 <a name="t84.1.1"></a><h2 id="_type_IO_Socket_Async.pod6-method_connect">84.1.1 method connect</h2>
 <pre class="code">method connect(Str $host, Int $port) returns Promise</pre>
 <p>Attempts to connect to the TCP server specified by <span class="code">$host</span> and <span class="code">$port</span>, returning a <a href="#_type_Promise.pod6">Promise</a> that will either be kept with a connected <a href="#_type_IO::Socket::Async.pod6">IO::Socket::Async</a> or broken if the connection cannot be made.</p>
 <a name="t84.1.2"></a><h2 id="_type_IO_Socket_Async.pod6-method_listen">84.1.2 method listen</h2>
 <pre class="code">method listen(Str $host, Int $port) returns Supply</pre>
 <p>Creates a listening socket on the specified <span class="code">$host</span> and <span class="code">$port</span>, returning a <a href="#_type_Supply.pod6">Supply</a> to which the accepted client <a href="#_type_IO::Socket::Async.pod6">IO::Socket::Async</a>s will be <span class="code">emit</span>ted. This <a href="#_type_Supply.pod6">Supply</a> should be tapped to process the client connections.</p>
 <p>To close the underlying listening socket the <a href="#_type_Supply.pod6">Supply</a> should be <span class="code">close</span>d.</p>
 <a name="t84.1.3"></a><h2 id="_type_IO_Socket_Async.pod6-method_udp">84.1.3 method udp</h2>
 <pre class="code">method udp(IO::Socket::Async:U: :$broadcast ) returns IO::Socket::Async</pre>
 <p>Returns an initialised <span class="code">IO::Socket::Async</span> client object that is configured to send UDP messages using <span class="code">print-to</span> or <span class="code">write-to</span>. The <span class="code">:broadcast</span> adverb will set the <span class="code">SO_BROADCAST</span> option which will allow the socket to send packets to a broadcast address.</p>
 <a name="t84.1.4"></a><h2 id="_type_IO_Socket_Async.pod6-method_bind-udp">84.1.4 method bind-udp</h2>
 <pre class="code">method bind-udp(IO::Socket::Async:U: Str() $host, Int() $port, :$broadcast) returns IO::Socket::Async</pre>
 <p>This returns an initialised <span class="code">IO::Socket::Async</span> server object that is configured to receive UDP messages sent to the specified <span class="code">$host</span> and <span class="code">$port</span> and is equivalent to <span class="code">listen</span> for a TCP socket. The <span class="code">:broadcast</span> adverb can be specified to allow the receipt of messages sent to the broadcast address.</p>
 <a name="t84.1.5"></a><h2 id="_type_IO_Socket_Async.pod6-method_print">84.1.5 method print</h2>
 <pre class="code">method print(Str $str) returns Promise</pre>
 <p>Attempt to send <span class="code">$str</span> on the <a href="#_type_IO::Socket::Async.pod6">IO::Socket::Async</a> that will have been obtained indirectly via <span class="code">connect</span> or <span class="code">listen</span>, returning a <a href="#_type_Promise.pod6">Promise</a> that will be kept with the number of bytes sent or broken if there was an error sending.</p>
 <a name="t84.1.6"></a><h2 id="_type_IO_Socket_Async.pod6-method_print-to">84.1.6 method print-to</h2>
 <pre class="code">method print-to(IO::Socket::Async:D: Str() $host, Int() $port, Str() $str) returns Promise</pre>
 <p>This is the equivalent of <span class="code">print</span> for UDP sockets that have been created with the <span class="code">udp</span> method, it will try send a UDP message of <span class="code">$str</span> to the specified <span class="code">$host</span> and <span class="code">$port</span> returning a <a href="#_type_Promise.pod6">Promise</a> that will be kept when the data is successfully sent or broken if it was unable to send the data. In order to send to a broadcast address the <span class="code">:broadcast</span> flag must have been specified when the socket was created.</p>
 <a name="t84.1.7"></a><h2 id="_type_IO_Socket_Async.pod6-method_write">84.1.7 method write</h2>
 <pre class="code">method write(Blob $b) returns Promise</pre>
 <p>Attempt to send the bytes in <span class="code">$b</span> on the <a href="#_type_IO::Socket::Async.pod6">IO::Socket::Async</a> that will have been obtained indirectly via <span class="code">connect</span> or <span class="code">listen</span>, returning a <a href="#_type_Promise.pod6">Promise</a> that will be kept with the number of bytes sent or broken if there was an error sending.</p>
 <a name="t84.1.8"></a><h2 id="_type_IO_Socket_Async.pod6-method_write-to">84.1.8 method write-to</h2>
 <pre class="code">method write-to(IO::Socket::Async:D: Str() $host, Int() $port, Blob $b) returns Promise</pre>
 <p>This is the equivalent of <span class="code">write</span> for UDP sockets that have been created with the <span class="code">udp</span> method, it will try send a UDP message comprised of the bytes in the <a href="#_type_Blob.pod6">Blob</a> <span class="code">$b</span> to the specified <span class="code">$host</span> and <span class="code">$port</span> returning a <a href="#_type_Promise.pod6">Promise</a> that will be kept when the data is successfully sent or broken if it was unable to send the data. In order to send to a broadcast address the <span class="code">:broadcast</span> flag must have been specified when the socket was created.</p>
 <a name="t84.1.9"></a><h2 id="_type_IO_Socket_Async.pod6-method_Supply">84.1.9 method Supply</h2>
 <pre class="code">method Supply(:$bin, :$buf = buf8.new) returns Supply</pre>
 <p>Returns a <a href="#_type_Supply.pod6">Supply</a> which can be tapped to obtain the data read from the connected <a href="#_type_IO::Socket::Async.pod6">IO::Socket::Async</a> as it arrives. By default the data will be emitted as characters, but if the <span class="code">:bin</span> adverb is provided a <a href="#_type_Buf.pod6">Buf</a> of bytes will be emitted instead, optionally in this case you can provide your own <span class="code">Buf</span> with the <span class="code">:buf</span> named parameter.</p>
 <a name="t84.1.10"></a><h2 id="_type_IO_Socket_Async.pod6-method_close">84.1.10 method close</h2>
 <pre class="code">method close()</pre>
 <p>Close the connected client <a href="#_type_IO::Socket::Async.pod6">IO::Socket::Async</a> which will have been obtained from the <span class="code">listen</span> <a href="#_type_Supply.pod6">Supply</a> or the <span class="code">connect</span> <a href="#_type_Promise.pod6">Promise</a>.</p>
 <p>In order to close the underlying listening socket created by <span class="code">listen</span> you can simply <span class="code">close</span> the <a href="#_type_Supply.pod6">Supply</a>.</p>
</div> <!-- /type/IO/Socket/INET.pod6 --><div class="pod-body"><a id="_type_IO_Socket_INET.pod6"></a><a name="t85"><h1 class="title">85 class IO::Socket::INET</h1></a> <p class="subtitle">TCP Socket</p> <pre class="code">class IO::Socket::INET does IO::Socket { ... }</pre>
 <p><span class="code">IO::Socket::INET</span> provides TCP sockets, both the server and the client side.</p>
 <p>Here is an example of a very simplistic "echo" server that listens on localhost, port 3333:</p>
 <pre class="code">use v6; 
 
 my $listen = IO::Socket::INET.new(:listen, :localport(3333)); 
 loop { 
     my $conn = $listen.accept; 
     while my $buf = $conn.recv(:bin) { 
         $conn.write: $buf; 
     } 
     $conn.close; 
 } 
</pre>
 <p>And a client that connects to it, and prints out what the server answers:</p>
 <pre class="code">use v6; 
 
 my $conn = IO::Socket::INET.new(:host&amp;lt;localhost&gt;, :port(3333)); 
 $conn.print: 'Hello, Perl 6'; 
 say $conn.recv; 
 $conn.close; 
</pre>
 <a name="t85.1"></a><h1 id="_type_IO_Socket_INET.pod6-Methods">85.1 Methods</h1>
 <a name="t85.1.1"></a><h2 id="_type_IO_Socket_INET.pod6-method_new">85.1.1 method new</h2>
 <pre class="code">multi method new(
        :$host,
        :$port,
        :$family = 2,
        :$encoding = 'utf-8',
        :$nl-in = "\r\n",
    ) returns IO::Socket::INET:D
multi method new(
        :$localhost,
        :$localport,
        :$family = 2,
        :$listen,
        :$encoding = 'utf-8',
        :$nl-in = "\r\n",
    ) returns IO::Socket::INET:D</pre>
 <p>Creates a new socket.</p>
 <p>If <span class="code">:$listen</span> is True, creates a new socket that listen on <span class="code">$localhost</span> (which can be an IP address or a domain name) on port <span class="code">$localport</span>. Otherwise it opens a connection to <span class="code">$host</span> on port <span class="code">$port</span>.</p>
 <p><span class="code">$family</span> defaults to 2 for IPv4, and can be set to 3 for IPv6.</p>
 <p>For text operations (such as <a href="#84-method lines">#method lines</a> and <a href="#84-method get">#method get</a>), <span class="code">$encoding</span> specifies the encoding, and <span class="code">$nl-in</span> determines the character(s) that separate lines.</p>
 <a name="t85.2"></a><h1 id="_type_IO_Socket_INET.pod6-Methods">85.2 Methods</h1>
 <a name="t85.2.1"></a><h2 id="_type_IO_Socket_INET.pod6-method_get">85.2.1 method get</h2>
 <pre class="code">method get()</pre>
 <p>Reads a line from the socket and returns it. Returns the <a href="#_type_Str.pod6">Str</a> type object on end-of-file (EOF).</p>
 <a name="t85.2.2"></a><h2 id="_type_IO_Socket_INET.pod6-method_lines">85.2.2 method lines</h2>
 <pre class="code">method lines()</pre>
 <p>Returns a lazy list of lines read from the socket.</p>
 <a name="t85.2.3"></a><h2 id="_type_IO_Socket_INET.pod6-method_accept">85.2.3 method accept</h2>
 <pre class="code">method accept()</pre>
 <p>In listen/server mode, waits for a new incoming connection, and returns it.</p>
</div> <!-- /type/IO/Spec.pod6 --><div class="pod-body"><a id="_type_IO_Spec.pod6"></a><a name="t86"><h1 class="title">86 class IO::Spec</h1></a> <p class="subtitle">Platform specific operations on file and directory paths</p> <pre class="code">class IO::Spec { }</pre>
 <p>Objects of this class are not used directly but as a sub-class specific to the platform perl is running on via the <span class="code">$*SPEC</span> variable which will contain an object of the appropriate type.</p>
 <p>The sub-classes are documented separately, with the platform-specific differences documented in <a href="#_type_IO::Spec::Cygwin.pod6">IO::Spec::Cygwin</a>, <a href="#_type_IO::Spec::QNX.pod6">IO::Spec::QNX</a>, <a href="#_type_IO::Spec::Unix.pod6">IO::Spec::Unix</a> and <a href="#_type_IO::Spec::Win32.pod6">IO::Spec::Win32</a>.</p>
 <a name="t86.1"></a><h1 id="_type_IO_Spec.pod6-Methods">86.1 Methods</h1>
 <a name="t86.1.1"></a><h2 id="_type_IO_Spec.pod6-method_canonpath">86.1.1 method canonpath</h2>
 <pre class="code">method canonpath(IO::Spec:D: Str $patharg, Str :$parent) returns Str</pre>
 TODO
 <a name="t86.1.2"></a><h2 id="_type_IO_Spec.pod6-method_dir-sep">86.1.2 method dir-sep</h2>
 <pre class="code">method dir-sep(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t86.1.3"></a><h2 id="_type_IO_Spec.pod6-method_curdir">86.1.3 method curdir</h2>
 <pre class="code">method curdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t86.1.4"></a><h2 id="_type_IO_Spec.pod6-method_updir">86.1.4 method updir</h2>
 <pre class="code">method updir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t86.1.5"></a><h2 id="_type_IO_Spec.pod6-method_curupdir">86.1.5 method curupdir</h2>
 <pre class="code">method curupdir(IO::Spec:D:) returns Junction</pre>
 TODO
 <a name="t86.1.6"></a><h2 id="_type_IO_Spec.pod6-method_rootdir">86.1.6 method rootdir</h2>
 <pre class="code">method rootdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t86.1.7"></a><h2 id="_type_IO_Spec.pod6-method_devnull">86.1.7 method devnull</h2>
 <pre class="code">method devnull(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t86.1.8"></a><h2 id="_type_IO_Spec.pod6-method_basename">86.1.8 method basename</h2>
 <pre class="code">method basename(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t86.1.9"></a><h2 id="_type_IO_Spec.pod6-method_extension">86.1.9 method extension</h2>
 <pre class="code">method extension(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t86.1.10"></a><h2 id="_type_IO_Spec.pod6-method_tmpdir">86.1.10 method tmpdir</h2>
 <pre class="code">method tmpdir(IO::Spec:D:) returns IO::Path</pre>
 TODO
 <a name="t86.1.11"></a><h2 id="_type_IO_Spec.pod6-method_is-absolute">86.1.11 method is-absolute</h2>
 <pre class="code">method is-absolute(IO::Spec:D: Str $file ) returns Bool</pre>
 TODO
 <a name="t86.1.12"></a><h2 id="_type_IO_Spec.pod6-method_path">86.1.12 method path</h2>
 <pre class="code">method path(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t86.1.13"></a><h2 id="_type_IO_Spec.pod6-method_splitpath">86.1.13 method splitpath</h2>
 <pre class="code">method splitpath(IO::Spec:D: Str $path, Bool :$nofile = False )</pre>
 TODO
 <a name="t86.1.14"></a><h2 id="_type_IO_Spec.pod6-method_split">86.1.14 method split</h2>
 <pre class="code">method split(IO::Spec:D: Cool:D $path is copy )</pre>
 TODO
 <a name="t86.1.15"></a><h2 id="_type_IO_Spec.pod6-method_join">86.1.15 method join</h2>
 <pre class="code">method join(IO::Spec:D: $, $dirname, $file)</pre>
 TODO
 <a name="t86.1.16"></a><h2 id="_type_IO_Spec.pod6-method_catpath">86.1.16 method catpath</h2>
 <pre class="code">method catpath(IO::Spec:D:  $, $dirname, $file )</pre>
 TODO
 <a name="t86.1.17"></a><h2 id="_type_IO_Spec.pod6-method_catdir">86.1.17 method catdir</h2>
 <pre class="code">method catdir(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t86.1.18"></a><h2 id="_type_IO_Spec.pod6-method_splitdir">86.1.18 method splitdir</h2>
 <pre class="code">method splitdir(IO::Spec:D: Str $path )</pre>
 TODO
 <a name="t86.1.19"></a><h2 id="_type_IO_Spec.pod6-method_catfile">86.1.19 method catfile</h2>
 <pre class="code">method catfile(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t86.1.20"></a><h2 id="_type_IO_Spec.pod6-method_abs2rel">86.1.20 method abs2rel</h2>
 <pre class="code">method abs2rel(IO::Spec:D: Str $path is copy, Str $base is copy = Str )</pre>
 TODO
 <a name="t86.1.21"></a><h2 id="_type_IO_Spec.pod6-method_rel2abs">86.1.21 method rel2abs</h2>
 <pre class="code">method rel2abs(IO::Spec:D Str $path, Str $base? is copy)</pre>
 TODO
</div> <!-- /type/IO/Spec/Cygwin.pod6 --><div class="pod-body"><a id="_type_IO_Spec_Cygwin.pod6"></a><a name="t87"><h1 class="title">87 class IO::Spec::Cygwin</h1></a> <p class="subtitle">Platform specific operations on file and directory paths for Cygwin</p> <pre class="code">class IO::Spec::QNX is IO::Spec { }</pre>
 <p>This sub-class of <a href="#_type_IO::Spec.pod6">IO::Spec</a> will be available from the <span class="code">$*SPEC</span> variable for a perl running on <span class="code">Cygwin</span> .</p>
 <a name="t87.1"></a><h1 id="_type_IO_Spec_Cygwin.pod6-Methods">87.1 Methods</h1>
 <a name="t87.1.1"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_canonpath">87.1.1 method canonpath</h2>
 <pre class="code">method canonpath(IO::Spec:D: Str $patharg, Str :$parent) returns Str</pre>
 TODO
 <a name="t87.1.2"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_dir-sep">87.1.2 method dir-sep</h2>
 <pre class="code">method dir-sep(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t87.1.3"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_curdir">87.1.3 method curdir</h2>
 <pre class="code">method curdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t87.1.4"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_updir">87.1.4 method updir</h2>
 <pre class="code">method updir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t87.1.5"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_curupdir">87.1.5 method curupdir</h2>
 <pre class="code">method curupdir(IO::Spec:D:) returns Junction</pre>
 TODO
 <a name="t87.1.6"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_rootdir">87.1.6 method rootdir</h2>
 <pre class="code">method rootdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t87.1.7"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_devnull">87.1.7 method devnull</h2>
 <pre class="code">method devnull(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t87.1.8"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_basename">87.1.8 method basename</h2>
 <pre class="code">method basename(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t87.1.9"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_extension">87.1.9 method extension</h2>
 <pre class="code">method extension(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t87.1.10"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_tmpdir">87.1.10 method tmpdir</h2>
 <pre class="code">method tmpdir(IO::Spec:D:) returns IO::Path</pre>
 TODO
 <a name="t87.1.11"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_is-absolute">87.1.11 method is-absolute</h2>
 <pre class="code">method is-absolute(IO::Spec:D: Str $file ) returns Bool</pre>
 TODO
 <a name="t87.1.12"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_path">87.1.12 method path</h2>
 <pre class="code">method path(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t87.1.13"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_splitpath">87.1.13 method splitpath</h2>
 <pre class="code">method splitpath(IO::Spec:D: Str $path, Bool :$nofile = False )</pre>
 TODO
 <a name="t87.1.14"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_split">87.1.14 method split</h2>
 <pre class="code">method split(IO::Spec:D: Cool:D $path is copy )</pre>
 TODO
 <a name="t87.1.15"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_join">87.1.15 method join</h2>
 <pre class="code">method join(IO::Spec:D: $, $dirname, $file)</pre>
 TODO
 <a name="t87.1.16"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_catpath">87.1.16 method catpath</h2>
 <pre class="code">method catpath(IO::Spec:D:  $, $dirname, $file )</pre>
 TODO
 <a name="t87.1.17"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_catdir">87.1.17 method catdir</h2>
 <pre class="code">method catdir(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t87.1.18"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_splitdir">87.1.18 method splitdir</h2>
 <pre class="code">method splitdir(IO::Spec:D: Str $path )</pre>
 TODO
 <a name="t87.1.19"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_catfile">87.1.19 method catfile</h2>
 <pre class="code">method catfile(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t87.1.20"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_abs2rel">87.1.20 method abs2rel</h2>
 <pre class="code">method abs2rel(IO::Spec:D: Str $path is copy, Str $base is copy = Str )</pre>
 TODO
 <a name="t87.1.21"></a><h2 id="_type_IO_Spec_Cygwin.pod6-method_rel2abs">87.1.21 method rel2abs</h2>
 <pre class="code">method rel2abs(IO::Spec:D Str $path, Str $base? is copy)</pre>
 TODO
</div> <!-- /type/IO/Spec/QNX.pod6 --><div class="pod-body"><a id="_type_IO_Spec_QNX.pod6"></a><a name="t88"><h1 class="title">88 class IO::Spec::QNX</h1></a> <p class="subtitle">Platform specific operations on file and directory paths QNX</p> <pre class="code">class IO::Spec::QNX is IO::Spec { }</pre>
 <p>This sub-class of <a href="#_type_IO::Spec.pod6">IO::Spec</a> specific to QNX will be available via <span class="code">$*SPEC</span> if the perl is running on QNX.</p>
 <a name="t88.1"></a><h1 id="_type_IO_Spec_QNX.pod6-Methods">88.1 Methods</h1>
 <a name="t88.1.1"></a><h2 id="_type_IO_Spec_QNX.pod6-method_canonpath">88.1.1 method canonpath</h2>
 <pre class="code">method canonpath(IO::Spec:D: Str $patharg, Str :$parent) returns Str</pre>
 TODO
 <a name="t88.1.2"></a><h2 id="_type_IO_Spec_QNX.pod6-method_dir-sep">88.1.2 method dir-sep</h2>
 <pre class="code">method dir-sep(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t88.1.3"></a><h2 id="_type_IO_Spec_QNX.pod6-method_curdir">88.1.3 method curdir</h2>
 <pre class="code">method curdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t88.1.4"></a><h2 id="_type_IO_Spec_QNX.pod6-method_updir">88.1.4 method updir</h2>
 <pre class="code">method updir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t88.1.5"></a><h2 id="_type_IO_Spec_QNX.pod6-method_curupdir">88.1.5 method curupdir</h2>
 <pre class="code">method curupdir(IO::Spec:D:) returns Junction</pre>
 TODO
 <a name="t88.1.6"></a><h2 id="_type_IO_Spec_QNX.pod6-method_rootdir">88.1.6 method rootdir</h2>
 <pre class="code">method rootdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t88.1.7"></a><h2 id="_type_IO_Spec_QNX.pod6-method_devnull">88.1.7 method devnull</h2>
 <pre class="code">method devnull(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t88.1.8"></a><h2 id="_type_IO_Spec_QNX.pod6-method_basename">88.1.8 method basename</h2>
 <pre class="code">method basename(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t88.1.9"></a><h2 id="_type_IO_Spec_QNX.pod6-method_extension">88.1.9 method extension</h2>
 <pre class="code">method extension(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t88.1.10"></a><h2 id="_type_IO_Spec_QNX.pod6-method_tmpdir">88.1.10 method tmpdir</h2>
 <pre class="code">method tmpdir(IO::Spec:D:) returns IO::Path</pre>
 TODO
 <a name="t88.1.11"></a><h2 id="_type_IO_Spec_QNX.pod6-method_is-absolute">88.1.11 method is-absolute</h2>
 <pre class="code">method is-absolute(IO::Spec:D: Str $file ) returns Bool</pre>
 TODO
 <a name="t88.1.12"></a><h2 id="_type_IO_Spec_QNX.pod6-method_path">88.1.12 method path</h2>
 <pre class="code">method path(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t88.1.13"></a><h2 id="_type_IO_Spec_QNX.pod6-method_splitpath">88.1.13 method splitpath</h2>
 <pre class="code">method splitpath(IO::Spec:D: Str $path, Bool :$nofile = False )</pre>
 TODO
 <a name="t88.1.14"></a><h2 id="_type_IO_Spec_QNX.pod6-method_split">88.1.14 method split</h2>
 <pre class="code">method split(IO::Spec:D: Cool:D $path is copy )</pre>
 TODO
 <a name="t88.1.15"></a><h2 id="_type_IO_Spec_QNX.pod6-method_join">88.1.15 method join</h2>
 <pre class="code">method join(IO::Spec:D: $, $dirname, $file)</pre>
 TODO
 <a name="t88.1.16"></a><h2 id="_type_IO_Spec_QNX.pod6-method_catpath">88.1.16 method catpath</h2>
 <pre class="code">method catpath(IO::Spec:D:  $, $dirname, $file )</pre>
 TODO
 <a name="t88.1.17"></a><h2 id="_type_IO_Spec_QNX.pod6-method_catdir">88.1.17 method catdir</h2>
 <pre class="code">method catdir(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t88.1.18"></a><h2 id="_type_IO_Spec_QNX.pod6-method_splitdir">88.1.18 method splitdir</h2>
 <pre class="code">method splitdir(IO::Spec:D: Str $path )</pre>
 TODO
 <a name="t88.1.19"></a><h2 id="_type_IO_Spec_QNX.pod6-method_catfile">88.1.19 method catfile</h2>
 <pre class="code">method catfile(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t88.1.20"></a><h2 id="_type_IO_Spec_QNX.pod6-method_abs2rel">88.1.20 method abs2rel</h2>
 <pre class="code">method abs2rel(IO::Spec:D: Str $path is copy, Str $base is copy = Str )</pre>
 TODO
 <a name="t88.1.21"></a><h2 id="_type_IO_Spec_QNX.pod6-method_rel2abs">88.1.21 method rel2abs</h2>
 <pre class="code">method rel2abs(IO::Spec:D Str $path, Str $base? is copy)</pre>
 TODO
</div> <!-- /type/IO/Spec/Unix.pod6 --><div class="pod-body"><a id="_type_IO_Spec_Unix.pod6"></a><a name="t89"><h1 class="title">89 class IO::Spec::Unix</h1></a> <p class="subtitle">Platform specific operations on file and directory paths for POSIX</p> <pre class="code">class IO::Spec::Unix is IO::Spec  { }</pre>
 <p>On object of this type is available via the variable <span class="code">$*SPEC</span> if the perl is running on a Unix-like platform.</p>
 <a name="t89.1"></a><h1 id="_type_IO_Spec_Unix.pod6-Methods">89.1 Methods</h1>
 <a name="t89.1.1"></a><h2 id="_type_IO_Spec_Unix.pod6-method_canonpath">89.1.1 method canonpath</h2>
 <pre class="code">method canonpath(IO::Spec:D: Str $patharg, Str :$parent) returns Str</pre>
 TODO
 <a name="t89.1.2"></a><h2 id="_type_IO_Spec_Unix.pod6-method_dir-sep">89.1.2 method dir-sep</h2>
 <pre class="code">method dir-sep(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t89.1.3"></a><h2 id="_type_IO_Spec_Unix.pod6-method_curdir">89.1.3 method curdir</h2>
 <pre class="code">method curdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t89.1.4"></a><h2 id="_type_IO_Spec_Unix.pod6-method_updir">89.1.4 method updir</h2>
 <pre class="code">method updir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t89.1.5"></a><h2 id="_type_IO_Spec_Unix.pod6-method_curupdir">89.1.5 method curupdir</h2>
 <pre class="code">method curupdir(IO::Spec:D:) returns Junction</pre>
 TODO
 <a name="t89.1.6"></a><h2 id="_type_IO_Spec_Unix.pod6-method_rootdir">89.1.6 method rootdir</h2>
 <pre class="code">method rootdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t89.1.7"></a><h2 id="_type_IO_Spec_Unix.pod6-method_devnull">89.1.7 method devnull</h2>
 <pre class="code">method devnull(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t89.1.8"></a><h2 id="_type_IO_Spec_Unix.pod6-method_basename">89.1.8 method basename</h2>
 <pre class="code">method basename(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t89.1.9"></a><h2 id="_type_IO_Spec_Unix.pod6-method_extension">89.1.9 method extension</h2>
 <pre class="code">method extension(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t89.1.10"></a><h2 id="_type_IO_Spec_Unix.pod6-method_tmpdir">89.1.10 method tmpdir</h2>
 <pre class="code">method tmpdir(IO::Spec:D:) returns IO::Path</pre>
 TODO
 <a name="t89.1.11"></a><h2 id="_type_IO_Spec_Unix.pod6-method_is-absolute">89.1.11 method is-absolute</h2>
 <pre class="code">method is-absolute(IO::Spec:D: Str $file ) returns Bool</pre>
 TODO
 <a name="t89.1.12"></a><h2 id="_type_IO_Spec_Unix.pod6-method_path">89.1.12 method path</h2>
 <pre class="code">method path(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t89.1.13"></a><h2 id="_type_IO_Spec_Unix.pod6-method_splitpath">89.1.13 method splitpath</h2>
 <pre class="code">method splitpath(IO::Spec:D: Str $path, Bool :$nofile = False )</pre>
 TODO
 <a name="t89.1.14"></a><h2 id="_type_IO_Spec_Unix.pod6-method_split">89.1.14 method split</h2>
 <pre class="code">method split(IO::Spec:D: Cool:D $path is copy )</pre>
 TODO
 <a name="t89.1.15"></a><h2 id="_type_IO_Spec_Unix.pod6-method_join">89.1.15 method join</h2>
 <pre class="code">method join(IO::Spec:D: $, $dirname, $file)</pre>
 TODO
 <a name="t89.1.16"></a><h2 id="_type_IO_Spec_Unix.pod6-method_catpath">89.1.16 method catpath</h2>
 <pre class="code">method catpath(IO::Spec:D:  $, $dirname, $file )</pre>
 TODO
 <a name="t89.1.17"></a><h2 id="_type_IO_Spec_Unix.pod6-method_catdir">89.1.17 method catdir</h2>
 <pre class="code">method catdir(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t89.1.18"></a><h2 id="_type_IO_Spec_Unix.pod6-method_splitdir">89.1.18 method splitdir</h2>
 <pre class="code">method splitdir(IO::Spec:D: Str $path )</pre>
 TODO
 <a name="t89.1.19"></a><h2 id="_type_IO_Spec_Unix.pod6-method_catfile">89.1.19 method catfile</h2>
 <pre class="code">method catfile(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t89.1.20"></a><h2 id="_type_IO_Spec_Unix.pod6-method_abs2rel">89.1.20 method abs2rel</h2>
 <pre class="code">method abs2rel(IO::Spec:D: Str $path is copy, Str $base is copy = Str )</pre>
 TODO
 <a name="t89.1.21"></a><h2 id="_type_IO_Spec_Unix.pod6-method_rel2abs">89.1.21 method rel2abs</h2>
 <pre class="code">method rel2abs(IO::Spec:D Str $path, Str $base? is copy)</pre>
 TODO
</div> <!-- /type/IO/Spec/Win32.pod6 --><div class="pod-body"><a id="_type_IO_Spec_Win32.pod6"></a><a name="t90"><h1 class="title">90 class IO::Spec::Win32</h1></a> <p class="subtitle">Platform specific operations on file and directory paths for Windows</p> <pre class="code">class IO::Spec::Win32 is IO::Spec { }</pre>
 <p>Objects of this class are not used directly but as a sub-class specific to the platform perl is running on via the <span class="code">$*SPEC</span> variable which will contain an object of the appropriate type.</p>
 <a name="t90.1"></a><h1 id="_type_IO_Spec_Win32.pod6-Methods">90.1 Methods</h1>
 <a name="t90.1.1"></a><h2 id="_type_IO_Spec_Win32.pod6-method_canonpath">90.1.1 method canonpath</h2>
 <pre class="code">method canonpath(IO::Spec:D: Str $patharg, Str :$parent) returns Str</pre>
 TODO
 <a name="t90.1.2"></a><h2 id="_type_IO_Spec_Win32.pod6-method_dir-sep">90.1.2 method dir-sep</h2>
 <pre class="code">method dir-sep(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t90.1.3"></a><h2 id="_type_IO_Spec_Win32.pod6-method_curdir">90.1.3 method curdir</h2>
 <pre class="code">method curdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t90.1.4"></a><h2 id="_type_IO_Spec_Win32.pod6-method_updir">90.1.4 method updir</h2>
 <pre class="code">method updir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t90.1.5"></a><h2 id="_type_IO_Spec_Win32.pod6-method_curupdir">90.1.5 method curupdir</h2>
 <pre class="code">method curupdir(IO::Spec:D:) returns Junction</pre>
 TODO
 <a name="t90.1.6"></a><h2 id="_type_IO_Spec_Win32.pod6-method_rootdir">90.1.6 method rootdir</h2>
 <pre class="code">method rootdir(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t90.1.7"></a><h2 id="_type_IO_Spec_Win32.pod6-method_devnull">90.1.7 method devnull</h2>
 <pre class="code">method devnull(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t90.1.8"></a><h2 id="_type_IO_Spec_Win32.pod6-method_basename">90.1.8 method basename</h2>
 <pre class="code">method basename(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t90.1.9"></a><h2 id="_type_IO_Spec_Win32.pod6-method_extension">90.1.9 method extension</h2>
 <pre class="code">method extension(IO::Spec:D: Str $path) returns Str</pre>
 TODO
 <a name="t90.1.10"></a><h2 id="_type_IO_Spec_Win32.pod6-method_tmpdir">90.1.10 method tmpdir</h2>
 <pre class="code">method tmpdir(IO::Spec:D:) returns IO::Path</pre>
 TODO
 <a name="t90.1.11"></a><h2 id="_type_IO_Spec_Win32.pod6-method_is-absolute">90.1.11 method is-absolute</h2>
 <pre class="code">method is-absolute(IO::Spec:D: Str $file ) returns Bool</pre>
 TODO
 <a name="t90.1.12"></a><h2 id="_type_IO_Spec_Win32.pod6-method_path">90.1.12 method path</h2>
 <pre class="code">method path(IO::Spec:D:) returns Str</pre>
 TODO
 <a name="t90.1.13"></a><h2 id="_type_IO_Spec_Win32.pod6-method_splitpath">90.1.13 method splitpath</h2>
 <pre class="code">method splitpath(IO::Spec:D: Str $path, Bool :$nofile = False )</pre>
 TODO
 <a name="t90.1.14"></a><h2 id="_type_IO_Spec_Win32.pod6-method_split">90.1.14 method split</h2>
 <pre class="code">method split(IO::Spec:D: Cool:D $path is copy )</pre>
 TODO
 <a name="t90.1.15"></a><h2 id="_type_IO_Spec_Win32.pod6-method_join">90.1.15 method join</h2>
 <pre class="code">method join(IO::Spec:D: $, $dirname, $file)</pre>
 TODO
 <a name="t90.1.16"></a><h2 id="_type_IO_Spec_Win32.pod6-method_catpath">90.1.16 method catpath</h2>
 <pre class="code">method catpath(IO::Spec:D:  $, $dirname, $file )</pre>
 TODO
 <a name="t90.1.17"></a><h2 id="_type_IO_Spec_Win32.pod6-method_catdir">90.1.17 method catdir</h2>
 <pre class="code">method catdir(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t90.1.18"></a><h2 id="_type_IO_Spec_Win32.pod6-method_splitdir">90.1.18 method splitdir</h2>
 <pre class="code">method splitdir(IO::Spec:D: Str $path )</pre>
 TODO
 <a name="t90.1.19"></a><h2 id="_type_IO_Spec_Win32.pod6-method_catfile">90.1.19 method catfile</h2>
 <pre class="code">method catfile(IO::Spec:D: *@parts )</pre>
 TODO
 <a name="t90.1.20"></a><h2 id="_type_IO_Spec_Win32.pod6-method_abs2rel">90.1.20 method abs2rel</h2>
 <pre class="code">method abs2rel(IO::Spec:D: Str $path is copy, Str $base is copy = Str )</pre>
 TODO
 <a name="t90.1.21"></a><h2 id="_type_IO_Spec_Win32.pod6-method_rel2abs">90.1.21 method rel2abs</h2>
 <pre class="code">method rel2abs(IO::Spec:D Str $path, Str $base? is copy)</pre>
 TODO
</div> <!-- /type/IO/Special.pod6 --><div class="pod-body"><a id="_type_IO_Special.pod6"></a><a name="t91"><h1 class="title">91 class IO::Special</h1></a> <p class="subtitle">Represent a Standard I/O device</p> <p>This provides a similar interface for the special standard input and output handles <span class="code">$*IN</span>, <span class="code">$*OUT</span> and <span class="code">$*ERR</span> to that of <a href="#_type_IO::Path.pod6">IO::Path</a> for regular files. It is typically returned by the <a href="#_type_IO::Handle.pod6-method_path">path method</a> of those handles so that they can be used interchangeably with the handles of regular files.</p>
 <a name="t91.1"></a><h1 id="_type_IO_Special.pod6-Methods">91.1 Methods</h1>
 <a name="t91.1.1"></a><h2 id="_type_IO_Special.pod6-method_new">91.1.1 method new</h2>
 <pre class="code">method new(:$!what!)</pre>
 <p>The constructor has a single required named argument <span class="code">what</span> that will be '&lt;STDIN>', '&lt;STDOUT>' or '&lt;STDERR>' as appropriate. It is unlikely that you will ever need to construct one of these objects yourself however as it will be done for you when the special handles are initialised.</p>
 <a name="t91.1.2"></a><h2 id="_type_IO_Special.pod6-method_WHICH">91.1.2 method WHICH</h2>
 <pre class="code">method WHICH(IO::Special:D:) returns Str</pre>
 <p>This returns a string which identifies the object.</p>
 <a name="t91.1.3"></a><h2 id="_type_IO_Special.pod6-method_Str">91.1.3 method Str</h2>
 <pre class="code">method Str(IO::Special:D:)</pre>
 <p>This returns '&lt;STDIN>', '&lt;STDOUT>' or '&lt;STDERR>' as appropriate.</p>
 <a name="t91.1.4"></a><h2 id="_type_IO_Special.pod6-method_IO">91.1.4 method IO</h2>
 <pre class="code">method IO(IO::Special:D:) returns IO::Special</pre>
 <p>This returns the <span class="code">IO::Special</span> object, it is provided for conformance to the <span class="code">IO::Path</span> interface.</p>
 <a name="t91.1.5"></a><h2 id="_type_IO_Special.pod6-method_e">91.1.5 method e</h2>
 <pre class="code">method e(IO::Special:D:) returns Bool</pre>
 <p>The 'exists' file test operator, always returns <span class="code">True</span>.</p>
 <a name="t91.1.6"></a><h2 id="_type_IO_Special.pod6-method_d">91.1.6 method d</h2>
 <pre class="code">method d(IO::Special:D:) returns Bool</pre>
 <p>The 'directory' file test operator, always returns <span class="code">False</span>.</p>
 <a name="t91.1.7"></a><h2 id="_type_IO_Special.pod6-method_f">91.1.7 method f</h2>
 <pre class="code">method f(IO::Special:D:) returns Bool</pre>
 <p>The 'file' file test operator, always returns <span class="code">False</span>.</p>
 <a name="t91.1.8"></a><h2 id="_type_IO_Special.pod6-method_s">91.1.8 method s</h2>
 <pre class="code">method s(IO::Special:D:) returns Int</pre>
 <p>The 'size' file test operator, always returns 0.</p>
 <a name="t91.1.9"></a><h2 id="_type_IO_Special.pod6-method_l">91.1.9 method l</h2>
 <pre class="code">method l(IO::Special:D:) returns Bool</pre>
 <p>The 'symbolic links' file test operator, always returns <span class="code">False</span>.</p>
 <a name="t91.1.10"></a><h2 id="_type_IO_Special.pod6-method_r">91.1.10 method r</h2>
 <pre class="code">method r(IO::Special:D:) returns Bool</pre>
 <p>The 'read access' file test operator, returns <span class="code">True</span> if this is the standard input handle, <span class="code">False</span> otherwise.</p>
 <a name="t91.1.11"></a><h2 id="_type_IO_Special.pod6-method_w">91.1.11 method w</h2>
 <pre class="code">method w(IO::Special:D:) returns Bool</pre>
 <p>The 'write access' file test operator, returns <span class="code">True</span> if this is the standard output or standard error handle, <span class="code">False</span> if it is the standard input.</p>
 <a name="t91.1.12"></a><h2 id="_type_IO_Special.pod6-method_x">91.1.12 method x</h2>
 <pre class="code">method x(IO::Special:D:) returns Bool</pre>
 <p>The 'execute access' file test operator, always returns <span class="code">False</span>.</p>
 <a name="t91.1.13"></a><h2 id="_type_IO_Special.pod6-method_modified">91.1.13 method modified</h2>
 <pre class="code">method modified(IO::Special:D:) returns Instant</pre>
 <p>The last modified time always returns an undefined <a href="#_type_Instant.pod6">Instant</a>.</p>
 <a name="t91.1.14"></a><h2 id="_type_IO_Special.pod6-method_accessed">91.1.14 method accessed</h2>
 <pre class="code">method accessed(IO::Special:D:) returns Instant</pre>
 <p>The last accessed time always returns an undefined <a href="#_type_Instant.pod6">Instant</a></p>
 <a name="t91.1.15"></a><h2 id="_type_IO_Special.pod6-method_changed">91.1.15 method changed</h2>
 <pre class="code">method changed(IO::Special:D:) returns Instant</pre>
 <p>The last changed time always returns an undefined <a href="#_type_Instant.pod6">Instant</a></p>
 <a name="t91.1.16"></a><h2 id="_type_IO_Special.pod6-method_mode">91.1.16 method mode</h2>
 <pre class="code">method mode(IO::Special:D:) returns Nil</pre>
 <p>The mode always returns <a href="#_type_Nil.pod6">Nil</a></p>
</div> <!-- /type/Instant.pod6 --><div class="pod-body"><a id="_type_Instant.pod6"></a><a name="t92"><h1 class="title">92 class Instant</h1></a> <p class="subtitle">Specific moment in time</p> <pre class="code">class Instant is Cool does Real { }</pre>
 <p>An <span class="code">Instant</span> is a particular moment in time measured in atomic seconds, with fractions. It is not tied to or aware of any epoch.</p>
 <p>An <span class="code">Instant</span> can be used to create a <a href="#_type_DateTime.pod6">DateTime</a> object set to that <span class="code">Instant</span>. The pseudo-constant <span class="code">now</span> returns the current time as an <span class="code">Instant</span>.</p>
 <p>Basic math is defined for <span class="code">Instant</span>s (as well as <a href="#_type_Duration.pod6">Duration</a>s). Adding an <span class="code">Instant</span> to a <span class="code">Duration</span> returns another Instant. Subtracting two <span class="code">Instant</span>s will yield a <span class="code">Duration</span>. Adding two <span class="code">Instant</span>s is explicitly disallowed. All other operations with Instants are undefined.</p>
 <a name="t92.1"></a><h1 id="_type_Instant.pod6-Methods">92.1 Methods</h1>
 <a name="t92.1.1"></a><h2 id="_type_Instant.pod6-method_from-posix">92.1.1 method from-posix</h2>
 <pre class="code">method from-posix($posix, Bool $prefer-leap-second = False)</pre>
 <p>Converts the POSIX timestamp <span class="code">$posix</span> to an Instant. If <span class="code">$prefer-leap-second</span> is <span class="code">True</span>, the return value will be the first of the two possible seconds in the case of a leap second.</p>
 <pre class="code">say DateTime.new(Instant.from-posix(915148800, True));  # 1998-12-31T23:59:60Z
say DateTime.new(Instant.from-posix(915148800));        # 1999-01-01T00:00:00Z</pre>
 <a name="t92.1.2"></a><h2 id="_type_Instant.pod6-method_to-posix">92.1.2 method to-posix</h2>
 <pre class="code">method to-posix()</pre>
 <p>Converts the invocant to a POSIX timestamp and returns a two element list containing the POSIX timestamp and a <span class="code">Bool</span>. It is the inverse of <a href="#91-method from-posix">#method from-posix</a>, except that the second return value is <span class="code">True</span> if *and only if* this Instant is in a leap second.</p>
 <pre class="code">say DateTime.new("1999-01-01T00:00:00Z").Instant.to-posix  # (915148800 False)
say DateTime.new('1998-12-31T23:59:60Z').Instant.to-posix; # (915148800 True)</pre>
 <a name="t92.1.3"></a><h2 id="_type_Instant.pod6-method_Date">92.1.3 method Date</h2>
 <p>Defined as:</p>
 <pre class="code">method Date(Instant:D:) returns Date:D</pre>
 <p>Returns a <a href="#_type_Date.pod6">Date</a> object set to the date of the invocant.</p>
 <pre class="code"># the results given will vary from system to system
my $i = "/etc/passwd".IO.modified;
say $i;                                       # Instant:1451489025.878018
say $i.Date;                                  # 2015-12-30</pre>
</div> <!-- /type/Int.pod6 --><div class="pod-body"><a id="_type_Int.pod6"></a><a name="t93"><h1 class="title">93 class Int</h1></a> <p class="subtitle">Integer (arbitrary-precision)</p> <pre class="code">class Int is Cool does Real { ... }</pre>
 <p><span class="code">Int</span> objects store integral numbers of arbitrary size. <span class="code">Int</span>s are immutable.</p>
 <p>There are two main syntax forms for <span class="code">Int</span> literals</p>
 <pre class="code">123         # Int in decimal notation
:16&amp;lt;BEEF&gt;   # Int in radix notations</pre>
 <p>For your convenience common radix forms come with a prefix shortcut.</p>
 <pre class="code">say so :2&amp;lt;11111111&gt; == 0b11111111 == :8&amp;lt;377&gt; == 0o377 == 255 == 0d255 == :16&amp;lt;ff&gt; == 0xff;
# OUTPUT«True␤»</pre>
 <p>All forms allow underscores between any two digits which can serve as visual separators, but don't carry any meaning:</p>
 <pre class="code">5_00000       # five Lakhs
500_000       # five hundred thousand
0xBEEF_CAFE   # a strange place
:2&amp;lt;1010_1010&gt; # 0d170</pre>
 <a name="t93.1"></a><h1 id="_type_Int.pod6-Methods">93.1 Methods</h1>
 <a name="t93.1.1"></a><h2 id="_type_Int.pod6-routine_chr">93.1.1 routine chr</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    chr(Int:D ) returns Str:D
multi method chr(Int:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">chr INTEGER
INTEGER.chr</pre>
 <p>Returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.</p>
 <p>Example:</p>
 <pre class="code">65.chr  # returns "A"
196.chr # returns "Ä"</pre>
 <a name="t93.1.2"></a><h2 id="_type_Int.pod6-routine_expmod">93.1.2 routine expmod</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    expmod(Int:D: Int $y, Int $mod) returns Int:D
multi method expmod(Int:D: Int $y, Int $mod) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">expmod(INTEGER, POWER, MODULUS)
INTEGER.expmod(POWER, MODULUS)</pre>
 <p>Returns the given <span class="code">Int</span> raised to the <span class="code">$y</span> power within modulus <span class="code">$mod</span>.</p>
 <pre class="code">say expmod(4, 2, 5);    # 1
say 7.expmod(2, 5);     # 4</pre>
 <a name="t93.1.3"></a><h2 id="_type_Int.pod6-method_polymod">93.1.3 method polymod</h2>
 <p>Defined as:</p>
 <pre class="code">method polymod(Int:D: +@mods)</pre>
 <p>Usage:</p>
 <pre class="code">INTEGER.polymod(LIST)</pre>
 <p>Returns a sequence of mod results corresponding to the divisors in <span class="code">@mods</span>. The divisors are given from smallest "unit" to the largest (e.g. 60 seconds per minute, 60 minutes per hour) and the results are returned in the same way: from smallest to the largest (5 seconds, 4 minutes).</p>
 <p>Returns one more item in the result than the number of given divisors. If the divisors are given as a lazy list, runs until the remainder is 0 or the list of divisors is exhausted. All divisors must be <span class="code">Int</span>s, unless the method is called on a non-<span class="code">Int</span> number.</p>
 <pre class="code">my $seconds = 1 * 60*60*24 # days
            + 3 * 60*60    # hours
            + 4 * 60       # minutes
            + 5;           # seconds

say $seconds.polymod(60, 60);              # (5 4 27)
say $seconds.polymod(60, 60, 24);          # (5 4 3 1)

say 120.polymod:      1, 10, 10², 10³, 10⁴;  # (0 0 12 0 0 0)
say 120.polymod: lazy 1, 10, 10², 10³, 10⁴;  # (0 0 12)
say 120.polymod:      1, 10, 10² … ∞;        # (0 0 12)

say ⅔.polymod(⅓);                          # (0 2)
say 5.Rat.polymod(.3, .2);                 # (0.2 0 80)</pre>
 <p>To illustrate how the <span class="code">Int</span>, non-lazy version of polymod works, consider this code that implements it:</p>
 <pre class="code">my $seconds = 2 * 60*60*24 # days
            + 3 * 60*60    # hours
            + 4 * 60       # minutes
            + 5;           # seconds

my @pieces;
for 60, 60, 24 -&gt; $divisor {
    @pieces.push: $seconds mod $divisor;
    $seconds div= $divisor
}
@pieces.push: $seconds;

say @pieces; # [5 4 3 2]</pre>
 <p>For a more detailed discussion, see <a href="http://perl6.party/post/Perl6-.polymod-break-up-a-number-into-denominations">this blog post</a></p>
 <a name="t93.1.4"></a><h2 id="_type_Int.pod6-routine_is-prime">93.1.4 routine is-prime</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    is-prime (Int:D $number) returns Bool:D
multi method is-prime (Int:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">is-prime INTEGER
INTEGER.is-prime</pre>
 <p>Returns <span class="code">True</span> if this <span class="code">Int</span> is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.</p>
 <p>Returns <span class="code">False</span> if this <span class="code">Int</span> is known not to be a prime.</p>
 <pre class="code">say 2.is-prime;         # True
say is-prime(9);        # False</pre>
 <a name="t93.1.5"></a><h2 id="_type_Int.pod6-routine_lsb">93.1.5 routine lsb</h2>
 <p>Defined as:</p>
 <pre class="code">multi method lsb(Int:D:)
multi sub    lsb(Int:D)</pre>
 <p>Usage:</p>
 <pre class="code">lsb INTEGER
INTEGER.lsb</pre>
 <p>Returns <a href="#_type_Nil.pod6">Nil</a> if the number is 0. Otherwise returns the zero-based index from the right of the first 1 in the binary representation of the number.</p>
 <pre class="code">say 0b01011.lsb;        # 0
say 0b01010.lsb;        # 1
say 0b10100.lsb;        # 2
say 0b01000.lsb;        # 3
say 0b10000.lsb;        # 4</pre>
 <a name="t93.1.6"></a><h2 id="_type_Int.pod6-routine_msb">93.1.6 routine msb</h2>
 <p>Defined as:</p>
 <pre class="code">multi method msb(Int:D:)
multi sub    msb(Int:D)</pre>
 <p>Usage:</p>
 <pre class="code">msb INTEGER
INTEGER.msb</pre>
 <p>Returns <a href="#_type_Nil.pod6">Nil</a> if the number is 0. Otherwise returns the zero-based index from the left of the first 1 in the binary representation of the number.</p>
 <pre class="code">say 0b00001.msb;        # 0
say 0b00011.msb;        # 1
say 0b00101.msb;        # 2
say 0b01010.msb;        # 3
say 0b10011.msb;        # 4</pre>
 <a name="t93.1.7"></a><h2 id="_type_Int.pod6-routine_unival">93.1.7 routine unival</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    unival(Int:D)  returns Numeric
multi method unival(Int:D:) returns Numeric</pre>
 <p>Usage:</p>
 <pre class="code">unival INTEGER
INTEGER.unival</pre>
 <p>Returns the number represented by the Unicode codepoint with the given integer number, or <a href="#_type_Num.pod6-NaN">NaN</a> if it does not represent a number.</p>
 <pre class="code">say ord("¾").unival;    # 0.75
say 190.unival;         # 0.75
say unival(65);         # NaN</pre>
 <a name="t93.2"></a><h1 id="_type_Int.pod6-Operators">93.2 Operators</h1>
 <a name="t93.2.1"></a><h2 id="_type_Int.pod6-infix_div">93.2.1 infix div</h2>
 <pre class="code">multi sub infix:&amp;lt;div&gt;(Int:D, Int:D) returns Int:D</pre>
 <p>Does an integer division, rounded down.</p>
</div> <!-- /type/IntStr.pod6 --><div class="pod-body"><a id="_type_IntStr.pod6"></a><a name="t94"><h1 class="title">94 class IntStr</h1></a> <p class="subtitle">Dual Value Integer and String</p> <pre class="code">class IntStr is Int is Str</pre>
 <p>The dual value types (often referred to as <a href="#_language_glossary.pod6-Allomorph">allomorphs</a>) allow for the representation of a value as both a string and a numeric type, typically they will be created for you when the context is "stringy" but they can be determined to be numbers, such as in some <a href="#_language_quoting.pod6">quoting constructs</a>:</p>
 <pre class="code">my $f = &amp;lt;42&gt;; say $f.WHAT; # (IntStr)</pre>
 <p>An <span class="code">IntStr</span> can be used interchangeably where one might use a <a href="#_type_Str.pod6">Str</a> or an <a href="#_type_Int.pod6">Int</a> :</p>
 <pre class="code">my $f = &amp;lt;42&gt;;
my $i = $f + 1;
my $s = $f ~ " and a bit";</pre>
 <a name="t94.1"></a><h1 id="_type_IntStr.pod6-Methods">94.1 Methods</h1>
 <a name="t94.1.1"></a><h2 id="_type_IntStr.pod6-method_new">94.1.1 method new</h2>
 <pre class="code">method new(Int $i, Str $s)</pre>
 <p>The constructor requires both the <span class="code">Int</span> and the <span class="code">Str</span> value, when constructing one directly the values can be whatever is required:</p>
 <pre class="code">my $f = IntStr.new(42, "forty two");
say +$f; # -&gt; 42
say ~$f; # -&gt; "forty two"</pre>
 <a name="t94.1.2"></a><h2 id="_type_IntStr.pod6-method_Numeric">94.1.2 method Numeric</h2>
 <pre class="code">method Numeric</pre>
 <p>The numeric coercion is applied when the <span class="code">IntStr</span> is used in a numeric context, such as a numeric comparison or smart match against a numeric value. It will return the <span class="code">Int</span> value.</p>
 <a name="t94.1.3"></a><h2 id="_type_IntStr.pod6-method_Int">94.1.3 method Int</h2>
 <pre class="code">method Int</pre>
 <p>Returns the integer value of the <span class="code">IntStr</span>.</p>
 <a name="t94.1.4"></a><h2 id="_type_IntStr.pod6-method_Str">94.1.4 method Str</h2>
 <p>Returns the string value of the <span class="code">IntStr</span>.</p>
 <a name="t94.2"></a><h1 id="_type_IntStr.pod6-Operators">94.2 Operators</h1>
 <a name="t94.2.1"></a><h2 id="_type_IntStr.pod6-infix_cmp">94.2.1 infix cmp</h2>
 <pre class="code">multi sub infix:&amp;lt;cmp&gt;(IntStr:D $a, IntStr:D $b)</pre>
 <p>Compare two <span class="code">IntStr</span> objects. The comparison is done on the <span class="code">Int</span> value first and then on the <span class="code">Str</span> value. If you want to compare in a different order then you would coerce to a <span class="code">Int</span> or <span class="code">Str</span> value first:</p>
 <pre class="code">my $f = IntStr.new(42, "smaller");
my $g = IntStr.new(43, "larger");
say $f cmp $g;          # Less
say $f.Str cmp $g.Str;  # More</pre>
</div> <!-- /type/Iterable.pod6 --><div class="pod-body"><a id="_type_Iterable.pod6"></a><a name="t95"><h1 class="title">95 role Iterable</h1></a> <p class="subtitle">Interface for container objects that can be iterated over</p> <pre class="code">role Iterable { }</pre>
 <p><span class="code">Iterable</span> serves as an API for objects that can be iterated with the <span class="code">for</span> construct and related iteration constructs, like hyper operators.</p>
 <p><span class="code">Iterable</span> objects nested in other <span class="code">Iterable</span> objects (but not within scalar containers) flatten in certain contexts, for example when passed to a slurpy parameter (<span class="code">*@a</span>), or on explicit calls to <span class="code">flat</span>.</p>
 <p>Its important aspect is a method stub for <span class="code">iterator</span>.</p>
 <pre class="code">role DNA does Iterable {
    method iterator(){ self.comb.iterator }
};

my @a does DNA = 'GAATCC';
.say for @a; # OUTPUT«G␤G␤A␤T␤C␤C␤»</pre>
 <a name="t95.1"></a><h1 id="_type_Iterable.pod6-Methods">95.1 Methods</h1>
 <a name="t95.1.1"></a><h2 id="_type_Iterable.pod6-method_iterator">95.1.1 method iterator</h2>
 <p>Defined as:</p>
 <pre class="code">method iterator() returns Iterator:D { ... }</pre>
 <p>Method stub that ensures all classes doing the <span class="code">Iterable</span> role have a method <span class="code">iterator</span>.</p>
 <p>It is supposed to return an <a href="#_type_Iterator.pod6">Iterator</a>.</p>
 <a name="t95.1.2"></a><h2 id="_type_Iterable.pod6-method_flat">95.1.2 method flat</h2>
 <p>Defined as:</p>
 <pre class="code">method flat() return Iterable</pre>
 <p>Usage:</p>
 <pre class="code">ITERABLE.flat</pre>
 <p>Returns another <a href="#_type_Iterable.pod6">Iterable</a> that flattens out all iterables that the first one returns.</p>
 <p>For example</p>
 <pre class="code">say (&amp;lt;a b&gt;, 'c').elems;         # 2
say (&amp;lt;a b&gt;, 'c').flat.elems;    # 3</pre>
 <p>because <span class="code">&lt;a b> </span> is a <a href="#_type_List.pod6">List</a> and thus iterable, so <span class="code">(&lt;a b>, 'c').flat </span> returns <span class="code">('a', 'b', 'c')</span>, which has three elems.</p>
 <p>Note that the flattening is recursive, so <span class="code">((("a", "b"), "c"), "d").flat</span> returns <span class="code">("a", "b", "c", "d")</span>, but it does not flatten itemized sublists:</p>
 <pre class="code">say ($('a', 'b'), 'c').perl;    # ($("a", "b"), "c").Seq</pre>
 <a name="t95.1.3"></a><h2 id="_type_Iterable.pod6-method_lazy">95.1.3 method lazy</h2>
 <p>Defined as:</p>
 <pre class="code">method lazy() returns Iterable</pre>
 <p>Usage:</p>
 <pre class="code">ITERABLE.lazy</pre>
 <p>Returns a lazy iterable wrapping the invocant.</p>
 <a name="t95.1.4"></a><h2 id="_type_Iterable.pod6-method_hyper">95.1.4 method hyper</h2>
 <p>Defined as:</p>
 <pre class="code">method hyper(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4)
            returns Iterable</pre>
 <p>Usage:</p>
 <pre class="code">ITERABLE.hyper(BATCH?, DEGREE?)</pre>
 <p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.</p>
 <p>The order of elements is preserved.</p>
 <a name="t95.1.5"></a><h2 id="_type_Iterable.pod6-method_race">95.1.5 method race</h2>
 <p>Defined as:</p>
 <pre class="code">method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4)
            returns Iterable</pre>
 <p>Usage:</p>
 <pre class="code">ITERABLE.race(BATCH?, DEGREE?)</pre>
 <p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).</p>
 <p>Unlike <span class="code">hyper</span>, <span class="code">race</span> does not preserve the order of elements.</p>
</div> <!-- /type/Iterator.pod6 --><div class="pod-body"><a id="_type_Iterator.pod6"></a><a name="t96"><h1 class="title">96 role Iterator</h1></a> <p class="subtitle">Generic API for producing a sequence of values</p> <pre class="code">constant IterationEnd
role Iterator { }</pre>
 <p>A <span class="code">Iterator</span> is an object that can generate or provide elements of a sequence. Users usually don't have to care about iterators, their usage is hidden behind iteration APIs such as <span class="code">for @list { }</span>, <a href="#_routine_map.pod6">map</a>, <a href="#_routine_grep.pod6">grep</a> and list indexing with <span class="code">.[$idx]</span>.</p>
 <p>Iterators generally only allow one iteration over the sequence; afterwards they are exhausted.</p>
 <p>The main API is the <span class="code">pull-one</span> method, which either returns the next value, or the sentinel value <span class="code">IterationEnd</span> if no more elements are available. Each class implementing <span class="code">Iterator</span> must provide a <span class="code">pull-one</span> method. All other Iterator API methods can be implemented in terms of <span class="code">pull-one</span>, but also overridden for performance reasons.</p>
 <p>Note: The only valid use of the sentinel value <span class="code">IterationEnd</span> in a program is identity comparison (using <span class="code">=:=</span>) with the result of a method in the iterator API. Any other behavior is undefined and implementation dependent.</p>
 <a name="t96.1"></a><h1 id="_type_Iterator.pod6-Methods">96.1 Methods</h1>
 <a name="t96.1.1"></a><h2 id="_type_Iterator.pod6-method_pull-one">96.1.1 method pull-one</h2>
 <p>Defined as:</p>
 <pre class="code">method pull-one(Iterator:D:) returns Mu { ... }</pre>
 <p>Usage:</p>
 <pre class="code">ITERATOR.pull-one</pre>
 <p>This method stub ensures that classes implementing the <span class="code">Iterator</span> role provide a method named <span class="code">pull-one</span>.</p>
 <p>The <span class="code">pull-one</span> method is supposed to return the next value if available, or the sentinel value <span class="code">IterationEnd</span> if no more elements are available.</p>
 <a name="t96.1.2"></a><h2 id="_type_Iterator.pod6-method_push-exactly">96.1.2 method push-exactly</h2>
 <p>Defined as:</p>
 <pre class="code">method push-exactly(Iterator:D: $target, int $count) returns Mu</pre>
 <p>Usage:</p>
 <pre class="code">ITERATOR.push-exactly(TARGET, COUNT)</pre>
 <p>Produces <span class="code">$count</span> elements, and for each of them, calls <span class="code">$target.push($value)</span>.</p>
 <p>If fewer than <span class="code">$count</span> elements are available from the iterator, it returns the sentinel value <span class="code">IterationEnd</span>. Otherwise it returns <span class="code">$count</span>.</p>
 <a name="t96.1.3"></a><h2 id="_type_Iterator.pod6-method_push-at-least">96.1.3 method push-at-least</h2>
 <p>Defined as:</p>
 <pre class="code">method push-at-least(Iterator:D: $target, int $count) returns Mu</pre>
 <p>Usage:</p>
 <pre class="code">ITERATOR.push-at-least(TARGET, COUNT)</pre>
 <p>Produces at least <span class="code">$count</span> elements, and for each of them, calls <span class="code">$target.push($value)</span>.</p>
 <p>If fewer than <span class="code">$count</span> elements are available from the iterator, it returns the sentinel value <span class="code">IterationEnd</span>. Otherwise it returns <span class="code">$count</span>.</p>
 <p>Iterators with side effects should produce exactly <span class="code">$count</span> elements; iterators without side effects (such as <a href="#_type_Range.pod6">Range</a> iterators) can produce more elements to achieve better performance.</p>
 <a name="t96.1.4"></a><h2 id="_type_Iterator.pod6-method_push-all">96.1.4 method push-all</h2>
 <p>Defined as:</p>
 <pre class="code">method push-all(Iterator:D: $target)</pre>
 <p>Usage:</p>
 <pre class="code">ITERATOR.push-all(TARGET)</pre>
 <p>Produces all elements from the iterator and pushes them to <span class="code">$target</span>.</p>
 <p>The fallback is implemented in terms of repeated <span class="code">push-at-least</span> with a large <span class="code">$count</span>.</p>
 <a name="t96.1.5"></a><h2 id="_type_Iterator.pod6-method_push-until-lazy">96.1.5 method push-until-lazy</h2>
 <p>Defined as:</p>
 <pre class="code">method push-until-lazy(Iterator:D: $target) returns Mu</pre>
 <p>Usage:</p>
 <pre class="code">ITERATOR.push-until-lazy(TARGET)</pre>
 <p>Produces values until it considers itself to be lazy, and pushes them onto <span class="code">$target</span>.</p>
 <p>This matters mostly for iterators that have other iterators embedded, some of which might be lazy, while others aren't.</p>
 <a name="t96.1.6"></a><h2 id="_type_Iterator.pod6-method_is-lazy">96.1.6 method is-lazy</h2>
 <p>Defined as:</p>
 <pre class="code">method is-lazy(Iterator:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">ITERATOR.is-lazy</pre>
 <p>Returns <span class="code">True</span> for iterators that consider themselves lazy, and <span class="code">False</span> otherwise.</p>
 <p>Built-in operations that know that they can produce infinitely many values return <span class="code">True</span> here, for example <span class="code">(1..6).roll(*)</span>.</p>
 <a name="t96.1.7"></a><h2 id="_type_Iterator.pod6-method_count-only">96.1.7 method count-only</h2>
 <p>Defined as:</p>
 <pre class="code">method count-only(Iterator:D:) returns int</pre>
 <p>Usage:</p>
 <pre class="code">ITERATOR.count-only</pre>
 <p>Produces and discards all elements until it returns the end of the iteration, and returns the number of elements produced. This is useful to reduce memory usage in scenarios such as <span class="code">open($file).lines.elems</span>.</p>
 <a name="t96.1.8"></a><h2 id="_type_Iterator.pod6-method_sink-all">96.1.8 method sink-all</h2>
 <p>Defined as:</p>
 <pre class="code">method sink-all(Iterator:D:)</pre>
 <p>Usage:</p>
 <pre class="code">ITERATOR.sink-all</pre>
 <p>Exhausts the iterator (while discarding generated elements) purely for the side effects of the iteration.</p>
</div> <!-- /type/Junction.pod6 --><div class="pod-body"><a id="_type_Junction.pod6"></a><a name="t97"><h1 class="title">97 class Junction</h1></a> <p class="subtitle">Logical superposition of values</p> <pre class="code">class Junction is Mu { }</pre>
 <p>A junction is an unordered composite value of zero or more values. Junctions <i>autothread</i> over many operations, which means that the operation is carried out for each junction element (also known as <i>eigenstate</i>), and the result is junction of the return values of all those operators.</p>
 <p>Junctions collapse into a single value in boolean context. The semantics depend on the <i>junction type</i>, which can be <span class="code">all</span>, <span class="code">any</span>, <span class="code">one</span> or <span class="code">none</span>.</p>
 <table>
<tr><th>type</th> <th>constructor</th> <th>operator</th> <th>True if ...</th></tr>
<tr><td>all</td> <td>all</td> <td>&amp;</td> <td>no value evaluates to False</td></tr>
 <tr><td>any</td> <td>any</td> <td>|</td> <td>at least one value evaluates to True</td></tr>
 <tr><td>one</td> <td>one</td> <td>^</td> <td>exactly one value evaluates to True</td></tr>
 <tr><td>none</td> <td>none</td> <td></td> <td>no value evaluates to True</td></tr>
</table> <p>Autothreading happens when a junction is bound to a parameter of a code object that doesn't accept values of type <span class="code">Junction</span>. Instead of producing an error, the signature binding is repeated for each value of the junction.</p>
 <p>Example:</p>
 <pre class="code">my $j = 1|2;
if 3 == $j + 1 {
    say 'yes';
}</pre>
 <p>First autothreads over the <span class="code">infix:&lt;+> </span> operator, producing the Junction <span class="code">2|3</span>. The next autothreading step is over <span class="code">infix:&lt;==> </span>, which produces <span class="code">False|True</span>. The <span class="code">if</span> conditional evaluates the junction in boolean context, which collapses it to <span class="code">True</span>. So the code prints <span class="code">yes\n</span>.</p>
 <p>Note that the compiler is allowed to parallelize and short-circuit autothreading (and Junction behavior in general), so it is usually an error to autothread junctions over code with side effects.</p>
 <p>Junctions are meant to be used as matchers in boolean context; introspection of junctions is not supported. If you feel the urge to introspect a junction, use a <a href="#_type_Set.pod6">Set</a> or a related type instead.</p>
 <p>Usage examples:</p>
 <pre class="code">my @bool_or_int = grep Bool|Int, @list;

sub is_prime(Int $x) returns Bool {
    # 'so' is for boolean context
    so $x %% none(2..$x.sqrt);
}
my @primes_ending_in_1 = grep &amp;amp;is_prime &amp;amp; / 1$ /, 2..100;
say @primes_ending_in_1;        # 11 31 41 61 71

my @exclude = &amp;lt;~ .git&gt;;
for dir(".") { say .Str if .Str.ends-with(none @exclude) }</pre>
 <p>Special care should be taken when using <span class="code">all</span> with arguments that may produce an empty list:</p>
 <pre class="code">my @a = ();
so all(@a) # True, because there are 0 False's</pre>
 <p>To express "all, but at least one", you can use <span class="code">@a &amp;&amp; all(@a)</span></p>
 <pre class="code">say so @a &amp;amp;&amp;amp; all(@a);   # False</pre>
 <p>Negated operators are special-cased when it comes to autothreading. <span class="code">$a !op $b</span> is rewritten internally as <span class="code">!($a op $b)</span>. The outer negation collapses any junctions, so the return value always a plain <a href="#_type_Bool.pod6">Bool</a>.</p>
 <pre class="code">my $word = 'yes';
my @negations = &amp;lt;no none never&gt;;
if $word !eq any @negations {
    say '"yes" is not a negation';
}</pre>
 <p>Note that without this special-casing, an expression like <span class="code">$word ne any @words</span> would always evaluate to <span class="code">True</span> for non-trivial lists on one side.</p>
 <p>For this purpose, <span class="code">infix:&lt;ne> </span> counts as a negation of <span class="code">infix:&lt;eq> </span>.</p>
 <p>In general it is more readable to use a positive comparison operator and a negated junction:</p>
 <pre class="code">my $word = 'yes';
my @negations = &amp;lt;no none never&gt;;
if $word eq none @negations {
    say '"yes" is not a negation';
}</pre>
 <a name="t97.1"></a><h1 id="_type_Junction.pod6-See_Also">97.1 See Also</h1>
 <ul><li><p><a href="http://perlgeek.de/blog-en/perl-5-to-6/08-junctions.html">http://perlgeek.de/blog-en/perl-5-to-6/08-junctions.html</a></p>
</li></ul> <ul><li><p><a href="http://perl6maven.com/perl6-is-a-value-in-a-given-list-of-values">http://perl6maven.com/perl6-is-a-value-in-a-given-list-of-values</a></p>
</li></ul> <ul><li><p><a href="https://perl6advent.wordpress.com/2009/12/13/day-13-junctions/">https://perl6advent.wordpress.com/2009/12/13/day-13-junctions/</a></p>
</li></ul></div> <!-- /type/Label.pod6 --><div class="pod-body"><a id="_type_Label.pod6"></a><a name="t98"><h1 class="title">98 class Label</h1></a> <p class="subtitle">Tagged location in the source code</p> <pre class="code">class Label { ... }</pre>
 <p>In Perl 6, you can give for example loops a label, and use it to control that loop (instead of the inner-most loop).</p>
 <pre class="code">USERS:          # the label
for @users -&gt; $u {
    for $u.pets -&gt; $pet {
        # usage of a label
        next USERS if $pet.barks;
    }
    say "None of {$u}'s pets barks";
}
say USERS.^name;        # Label</pre>
 <p>Those label are objects of type <span class="code">Label</span>.</p>
 <a name="t98.1"></a><h1 id="_type_Label.pod6-Methods">98.1 Methods</h1>
 <a name="t98.1.1"></a><h2 id="_type_Label.pod6-method_next">98.1.1 method next</h2>
 <p>Defined as:</p>
 <pre class="code">method next(Label:)</pre>
 <p>Usage:</p>
 <pre class="code">next LABEL</pre>
 <p>Begin the next iteration of the loop associated with the label.</p>
 <a name="t98.1.2"></a><h2 id="_type_Label.pod6-method_last">98.1.2 method last</h2>
 <p>Defined as:</p>
 <pre class="code">method last(Label:)</pre>
 <p>Usage:</p>
 <pre class="code">last LABEL</pre>
 <p>Terminate the execution of the loop associated with the label.</p>
</div> <!-- /type/List.pod6 --><div class="pod-body"><a id="_type_List.pod6"></a><a name="t99"><h1 class="title">99 class List</h1></a> <p class="subtitle">Sequence of values</p> <pre class="code">my class List is Iterable does Positional { .. }</pre>
 <p><span class="code">List</span> stores items sequentially and potentially lazily.</p>
 <p>Indexes into lists and arrays start at 0 by default.</p>
 <p>You can assign to list elements if they are containers. Use Arrays to have every value of the list stored in a container.</p>
 <a name="t99.1"></a><h1 id="_type_List.pod6-Items,_Flattening_and_Sigils">99.1 Items, Flattening and Sigils</h1>
 <p>In Perl 6, assigning a <span class="code">List</span> to a scalar variable does not lose information. The difference is that iteration generally treats a list (or any other list-like object, like a <a href="#_type_Seq.pod6">Seq</a> or an <a href="#_type_Array.pod6">Array</a>) inside a scalar as a single element, as long as it's part of another .</p>
 <pre class="code">my @a = 1, 2, 3;
for @a { }      # three iterations

my $s = @a;
for $s { }      # one iteration
for @a.item { } # one iteration
for $s.list { } # three iterations</pre>
 <p>Lists generally don't interpolate (flatten) into other lists, except when they are not itemized, and the single argument to an operation such as <span class="code">append</span>:</p>
 <pre class="code">my @a = 1, 2, 3;
my @nested = @a, @a;           # two elements
my @flat = flat @a, @a;        # six elements, with explicit flat
my @b = 'a', 'b';
@b.append: @a;                 # @b now has 5 elements, because @a
                               # is the sole argument to append
my @c = 'a', 'b';
@c.append: $@a;                # @b now has 3 elements, because of the
                               # itemization with $
say @c.elems;</pre>
 <p><span class="code">.item</span> can often be written as <span class="code">$( ... )</span>, and on an array variable even as <span class="code">$@a</span>.</p>
 <p>The same flattening behavior applies all objects that do the <a href="#_type_Iterable.pod6">Iterable</a> role, notable <a href="#_type_Hash.pod6">hashes</a>:</p>
 <pre class="code">my %h = a =&gt; 1, b =&gt; 2;
my @b = %h;   say @b.elems;     # 2
my @c = %h, ; say @c.elems;     # 1
my @d = $%h;  say @d.elems;     # 1</pre>
 <p>Slurpy parameters (<span class="code">*@a</span>) flatten non-itemized sublists:</p>
 <pre class="code">sub fe(*@flat) { @flat.elems }
say fe(&amp;lt;a b&gt;, &amp;lt;d e&gt;);           # 4
say fe(&amp;lt;a b&gt;, &amp;lt;d e&gt;.item);      # 3</pre>
 <a name="t99.2"></a><h1 id="_type_List.pod6-Methods">99.2 Methods</h1>
 <a name="t99.2.1"></a><h2 id="_type_List.pod6-routine_elems">99.2.1 routine elems</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    elems($list)  returns Int:D
multi method elems(List:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">elems LIST
LIST.elems</pre>
 <p>Returns the number of elements in the list.</p>
 <a name="t99.2.2"></a><h2 id="_type_List.pod6-routine_end">99.2.2 routine end</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    end($list)  returns Int:D
multi method end(List:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">end LIST
LIST.end</pre>
 <p>Returns the index of the last element.</p>
 <a name="t99.2.3"></a><h2 id="_type_List.pod6-routine_keys">99.2.3 routine keys</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    keys($list)  returns Seq:D
multi method keys(List:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">keys LIST
LIST.keys</pre>
 <p>Returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).</p>
 <a name="t99.2.4"></a><h2 id="_type_List.pod6-routine_values">99.2.4 routine values</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    values($list)  returns Seq:D
multi method values(List:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">values LIST
LIST.values</pre>
 <p>Returns a sequence of the list elements, in order.</p>
 <a name="t99.2.5"></a><h2 id="_type_List.pod6-routine_kv">99.2.5 routine kv</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    kv($list)  returns Seq:D
multi method kv(List:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">kv LIST
LIST.kv</pre>
 <p>Returns an interleaved sequence of indexes and values. For example</p>
 <pre class="code">&amp;lt;a b c&gt;.kv</pre>
 <p>Returns</p>
 <pre class="code">(0, 'a', 1, 'b', 2, 'c').Seq</pre>
 <a name="t99.2.6"></a><h2 id="_type_List.pod6-routine_pairs">99.2.6 routine pairs</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    pairs($list)   returns Seq:D
multi method pairs(List:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">pairs LIST
LIST.pairs</pre>
 <p>Returns a sequence of pairs, with the indexes as keys and the list values as values.</p>
 <pre class="code">&amp;lt;a b c&gt;.pairs   # (0 =&gt; 'a', 1 =&gt; 'b', 2 =&gt; 'c').Seq</pre>
 <a name="t99.2.7"></a><h2 id="_type_List.pod6-routine_join">99.2.7 routine join</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    join($separator, *@list) returns Str:D
multi method join(List:D: $separator) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">join SEPARATOR, LIST
LIST.join(SEPARATOR)</pre>
 <p>Treats the elements of the list as strings, interleaves them with <span class="code">$separator</span> and concatenates everything into a single string.</p>
 <p>Example:</p>
 <pre class="code">join ', ', &amp;lt;a b c&gt;;             # a, b, c</pre>
 <p>Note that the method form does not flatten sublists:</p>
 <pre class="code">say (1, &amp;lt;a b c&gt;).join('|');     # 1|a b c</pre>
 <a name="t99.2.8"></a><h2 id="_type_List.pod6-routine_map">99.2.8 routine map</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    map(&amp;amp;code, *@elems) returns Seq:D
multi method map(List:D: &amp;amp;code) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">map CODE, LIST
LIST.map(CODE)</pre>
 <p>Invokes <span class="code">&amp;code</span> for each element and gathers the return values in a sequence and returns it. This happens lazily, i.e. <span class="code">&amp;code</span> is only invoked when the return values are accessed.</p>
 <p>Examples:</p>
 <pre class="code">&gt; ('hello', 1, 22/7, 42, 'world').map: { .WHAT.perl }
(Str Int Rat Int Str)
&gt; map *.Str.chars, 'hello', 1, 22/7, 42, 'world'
(5 1 8 2 5)</pre>
 <p><span class="code">map</span> inspects the arity of the code object, and tries to pass as many arguments to it as expected:</p>
 <pre class="code">sub b($a, $b) { "$a before $b" };
say &amp;lt;a b x y&gt;.map(&amp;amp;b).join(', ');   # a before b, x before y</pre>
 <p>iterates the list two items at a time.</p>
 <p>Note that <span class="code">map</span> does not flatten embedded lists and arrays, so</p>
 <pre class="code">((1, 2), &amp;lt;a b&gt;).map({ .join(',')})</pre>
 <p>passes <span class="code">(1, 2)</span> and <span class="code">&lt;a b> </span> in turn to the block, leading to a total of two iterations and the result sequence <span class="code">"1,2", "a,b"</span>. See <a href="#_type_List.pod6-method_flatmap">method flatmap</a> for an alternative that flattens.</p>
 <a name="t99.2.9"></a><h2 id="_type_List.pod6-sub_flat">99.2.9 sub flat</h2>
 <p>Defined as:</p>
 <pre class="code">sub flat(**@list is raw)</pre>
 <p>Constructs a list which contains any arguments provided in the order provided, and returns the result of calling the <span class="code">.flat</span> method (<a href="#_type_Any.pod6-method_flat">inherited from  <span class="code">Any</span> </a>) on that list:</p>
 <pre class="code">flat 1, (2, (3, 4), $(5, 6)));  # (1, 2, 3, 4, $(5, 6)).Seq</pre>
 <a name="t99.2.10"></a><h2 id="_type_List.pod6-method_flatmap">99.2.10 method flatmap</h2>
 <p>Defined as:</p>
 <pre class="code">method flatmap(List:D: &amp;amp;code) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.flatmap(CODE)</pre>
 <p>Like <span class="code">map</span> iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.</p>
 <p>Unlike <span class="code">map</span> it flattens non-itemized lists and arrays, so</p>
 <pre class="code">say ((1, 2), &amp;lt;a b&gt;).flatmap(&amp;amp;uc).join('|');     # 1|2|A|B</pre>
 <p>invokes <a href="#_type_Str.pod6-routine_uc">uc</a> four times.</p>
 <a name="t99.2.11"></a><h2 id="_type_List.pod6-routine_grep">99.2.11 routine grep</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    grep(Mu $matcher, *@elems, :k, :kv, :p, :v) returns Seq:D
multi method grep(List:D:  Mu $matcher, :k, :kv, :p, :v) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">grep MATCHER, LIST
grep MATCHER, LIST, :RETURN_AS
LIST.grep(MATCHER)
LIST.grep(MATCHER, :RETURN_AS)</pre>
 <p>Returns a sequence of elements against which <span class="code">$matcher</span> smart-matches. The elements are returned in the order in which they appear in the original list.</p>
 <p>Examples:</p>
 <pre class="code">&gt; ('hello', 1, 22/7, 42, 'world').grep: Int
(1 42)
&gt; grep { .Str.chars &gt; 3 }, 'hello', 1, 22/7, 42, 'world'
(hello 3.142857 world)</pre>
 <p>The optional named parameters <span class="code">:k</span>, <span class="code">:kv</span>, <span class="code">:p</span>, <span class="code">:v</span> provide the same functionality as on slices:</p>
 <ul><li><p>k</p>
</li></ul> <p>Only return the index values of the matching elements in order.</p>
 <ul><li><p>kv</p>
</li></ul> <p>Return both the index and matched elements in order.</p>
 <ul><li><p>p</p>
</li></ul> <p>Return the index and the matched element as a <span class="code">Pair</span>, in order.</p>
 <ul><li><p>v</p>
</li></ul> <p>Only return the matched elements (same as not specifying any named parameter at all).</p>
 <p>Examples:</p>
 <pre class="code">&gt; ('hello', 1, 22/7, 42, 'world').grep: Int, :k
(1 3)
&gt; grep { .Str.chars &gt; 3 }, :kv, 'hello', 1, 22/7, 42, 'world'
(0 hello 2 3.142857 4 world)
&gt; grep { .Str.chars &gt; 3 }, :p, 'hello', 1, 22/7, 42, 'world'
(0 =&gt; hello 2 =&gt; 3.142857 4 =&gt; world)</pre>
 <a name="t99.2.12"></a><h2 id="_type_List.pod6-routine_first">99.2.12 routine first</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    first(Mu $matcher, *@elems, :k, :kv, :p, :end)
multi method first(List:D:  Mu $matcher, :k, :kv, :p, :end)</pre>
 <p>Usage:</p>
 <pre class="code">first MATCHER, LIST, :RETURN_AS, :FROM_END
LIST.first(MATCHER, :RETURN_AS, :FROM_END)</pre>
 <p>Returns the first item of the list which smart-matches against <span class="code">$matcher</span>, returns Nil when no values match. The optional named parameter <span class="code">:end</span> indicates that the search should be from the <b>end</b> of the list, rather than from the start.</p>
 <p>Examples:</p>
 <pre class="code">say (1, 22/7, 42, 300).first: * &gt; 5;                  # 42
say (1, 22/7, 42, 300).first: * &gt; 5, :end;            # 300
say ('hello', 1, 22/7, 42, 'world').first: Complex;   # Nil</pre>
 <p>The optional named parameters <span class="code">:k</span>, <span class="code">:kv</span>, <span class="code">:p</span> provide the same functionality as on slices:</p>
 <ul><li><p>k</p>
</li></ul> <p>Return the index value of the matching element. Index is always counted from the beginning of the list, regardless of whether the <span class="code">:end</span> named parameter is specified or not.</p>
 <ul><li><p>kv</p>
</li></ul> <p>Return both the index and matched element.</p>
 <ul><li><p>p</p>
</li></ul> <p>Return the index and the matched element as a <span class="code">Pair</span>.</p>
 <p>Examples:</p>
 <pre class="code">say (1, 22/7, 42, 300).first: * &gt; 5, :k;        # 2
say (1, 22/7, 42, 300).first: * &gt; 5, :p;        # 2 =&gt; 42
say (1, 22/7, 42, 300).first: * &gt; 5, :kv, :end; # 3 300</pre>
 <a name="t99.2.13"></a><h2 id="_type_List.pod6-method_head">99.2.13 method head</h2>
 <p>Defined as:</p>
 <pre class="code">multi method head(List:D: Int(Cool) $number = 1) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.head
LIST.head(NUMBER)</pre>
 <p>Returns the <b>first</b> NUMBER items of the list. Returns an empty list if NUMBER &lt;= 0. Defaults to the first element seen if no NUMBER specified.</p>
 <p>Examples:</p>
 <pre class="code">say ^10 .head(5)       # 0 1 2 3 4
say ^Inf .head(5)      # 0 1 2 3 4
say ^10 .head          # 0
say ^Inf .head         # 0</pre>
 <a name="t99.2.14"></a><h2 id="_type_List.pod6-method_tail">99.2.14 method tail</h2>
 <p>Defined as:</p>
 <pre class="code">multi method tail(List:D: Int(Cool) $number = 1) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.tail
LIST.tail(NUMBER)</pre>
 <p>Returns a <a href="#_type_Seq.pod6">Seq</a> containing the <b>last</b> NUMBER items of the list. Returns an empty Seq if NUMBER &lt;= 0. Defaults to the last element if no NUMBER is specified. Throws an exception if the list is lazy.</p>
 <p>Examples:</p>
 <pre class="code">say ^10 .tail(5)      # 5 6 7 8 9
say ^Inf .tail(5)     # Cannot tail a lazy list
say ^10 .tail         # 9
say ^Inf .tail        # Cannot tail a lazy list</pre>
 <a name="t99.2.15"></a><h2 id="_type_List.pod6-routine_categorize">99.2.15 routine categorize</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    categorize(&amp;amp;mapper, *@values) returns Hash:D
multi method categorize(List:D: &amp;amp;mapper)   returns Hash:D</pre>
 <p>Usage:</p>
 <pre class="code">categorize MAPPER, LIST
LIST.categorize(MAPPER)</pre>
 <p>Transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.</p>
 <p>Note that, unlike <a href="#_routine_classify.pod6">classify</a>, which assumes that the return value of the mapper is a single value, <span class="code">categorize</span> always assumes that the return value of the mapper is a list of categories that are appropriate to the current value.</p>
 <p>Example:</p>
 <pre class="code">sub mapper(Int $i) returns List {
    $i %% 2 ?? 'even' !! 'odd',
    $i.is-prime ?? 'prime' !! 'not prime'
}
say categorize &amp;amp;mapper, (1, 7, 6, 3, 2);   # {even =&gt; [6 2], not prime =&gt; [1 6],
                                           #  odd =&gt; [1 7 3], prime =&gt; [7 3 2]}</pre>
 <a name="t99.2.16"></a><h2 id="_type_List.pod6-routine_classify">99.2.16 routine classify</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    classify(&amp;amp;mapper, *@values) returns Hash:D
multi method classify(List:D: &amp;amp;mapper)   returns Hash:D</pre>
 <p>Usage:</p>
 <pre class="code">classify MAPPER, LIST
LIST.classify(MAPPER)</pre>
 <p>Transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.</p>
 <p>Example:</p>
 <pre class="code">say classify { $_ %% 2 ?? 'even' !! 'odd' }, (1, 7, 6, 3, 2);
    #-&gt; even =&gt; 6 2, odd =&gt; 1 7 3
say ('hello', 1, 22/7, 42, 'world').classify: { .Str.chars };
    #-&gt; 1 =&gt; 1, 2 =&gt; 42, 5 =&gt; hello world, 8 =&gt; 3.142857</pre>
 <a name="t99.2.17"></a><h2 id="_type_List.pod6-method_Bool">99.2.17 method Bool</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Bool(List:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.Bool</pre>
 <p>Returns <span class="code">True</span> if the list has at least one element, and <span class="code">False</span> for the empty list.</p>
 <a name="t99.2.18"></a><h2 id="_type_List.pod6-method_Str">99.2.18 method Str</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Str(List:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.Str</pre>
 <p>Stringifies the elements of the list and joins them with spaces (same as <span class="code">.join(' ')</span>).</p>
 <a name="t99.2.19"></a><h2 id="_type_List.pod6-method_Int">99.2.19 method Int</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Int(List:D:) return Int:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.Int</pre>
 <p>Returns the number of elements in the list (same as <span class="code">.elems</span>).</p>
 <a name="t99.2.20"></a><h2 id="_type_List.pod6-method_Numeric">99.2.20 method Numeric</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Numeric(List:D:) return Int:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.Numeric</pre>
 <p>Returns the number of elements in the list (same as <span class="code">.elems</span>).</p>
 <a name="t99.2.21"></a><h2 id="_type_List.pod6-method_Capture">99.2.21 method Capture</h2>
 <p>Defined as:</p>
 <pre class="code">method Capture() returns Capture:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.Capture</pre>
 <p>Returns a <a href="#_type_Capture.pod6">Capture</a> where each <a href="#_type_Pair.pod6">Pair</a>, if any, in the <span class="code">List</span> has been converted to a named argument. All other elements in the <span class="code">List</span> are converted to positional arguments in the order they are found, i.e. the first non pair item in the list becomes the first positional argument, which gets index <span class="code">0</span>, the second non pair item becomes the second positional argument, getting index <span class="code">1</span> etc.</p>
 <pre class="code">my $list = (7, 5, a =&gt; 2, b =&gt; 17);
my $capture = $list.Capture;
say $capture.keys;                                # (0 1 a b)
my-sub(|$capture);                                # 7, 5, 2, 17

sub my-sub($first, $second, :$a, :$b) {
    say "$first, $second, $a, $b"
}</pre>
 <p>A more advanced example demonstrating the returned <span class="code">Capture</span> being matched against a <a href="#_type_Signature.pod6">Signature</a>.</p>
 <pre class="code">my $list = (7, 5, a =&gt; 2, b =&gt; 17);
say so $list.Capture ~~ :($ where * == 7,$,:$a,:$b); # True

$list = (8, 5, a =&gt; 2, b =&gt; 17);
say so $list.Capture ~~ :($ where * == 7,$,:$a,:$b); # False</pre>
 <a name="t99.2.22"></a><h2 id="_type_List.pod6-routine_pick">99.2.22 routine pick</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    pick($count, *@list) returns Seq:D
multi method pick(List:D: $count = 1) returns Mu</pre>
 <p>Usage:</p>
 <pre class="code">pick COUNT, LIST
LIST.pick(COUNT)</pre>
 <p>Returns <span class="code">$count</span> elements chosen at random and without repetition from the invocant. If <span class="code">*</span> is passed as <span class="code">$count</span>, or <span class="code">$count</span> is greater than or equal to the size of the list, then all elements from the invocant list are returned in a random sequence.</p>
 <p>Examples:</p>
 <pre class="code">say &amp;lt;a b c d e&gt;.pick;           # b
say &amp;lt;a b c d e&gt;.pick: 3;        # (c a e)
say  &amp;lt;a b c d e&gt;.pick: *;       # (e d a b c)</pre>
 <a name="t99.2.23"></a><h2 id="_type_List.pod6-routine_roll">99.2.23 routine roll</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    roll($count, *@list) returns Seq:D
multi method roll(List:D: $count = 1)</pre>
 <p>Usage:</p>
 <pre class="code">roll COUNT, LIST
LIST.roll(COUNT)</pre>
 <p>Returns a sequence of <span class="code">$count</span> elements, each randomly selected from the list. Each random choice is made independently, like a separate die roll where each die face is a list element.</p>
 <p>If <span class="code">*</span> is passed to <span class="code">$count</span>, returns a lazy, infinite sequence of randomly chosen elements from the original list.</p>
 <p>Examples:</p>
 <pre class="code">say &amp;lt;a b c d e&gt;.roll;       # b
say &amp;lt;a b c d e&gt;.roll: 3;    # c c e
say roll 8, &amp;lt;a b c d e&gt;;    # b a e d a e b c

my $random_digits := (^10).roll(*);
say $random_digits[^15];    # 3 8 7 6 0 1 3 2 0 8 8 5 8 0 5</pre>
 <a name="t99.2.24"></a><h2 id="_type_List.pod6-routine_eager">99.2.24 routine eager</h2>
 <p>Defined as:</p>
 <pre class="code">multi method eager(List:D:) returns List:D
sub eager(*@elems) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">eager LIST
LIST.eager</pre>
 <p>Evaluates all elements in the list eagerly, and returns them as a list.</p>
 <a name="t99.2.25"></a><h2 id="_type_List.pod6-routine_reverse">99.2.25 routine reverse</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    reverse(*@list ) returns List:D
multi method reverse(List:D:) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">reverse(LIST)
LIST.reverse</pre>
 <p>Returns a list with the same elements in reverse order.</p>
 <p>Note that <span class="code">reverse</span> always refers to reversing elements of a list; to reverse the characters in a string, use <a href="#_routine_flip.pod6">flip</a>.</p>
 <p>Examples:</p>
 <pre class="code">say &amp;lt;hello world!&gt;.reverse      #  world! hello
say reverse ^10                 # 9 8 7 6 5 4 3 2 1 0</pre>
 <a name="t99.2.26"></a><h2 id="_type_List.pod6-routine_rotate">99.2.26 routine rotate</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    rotate(@list,  Int:D $n = 1) returns List:D
multi method rotate(List:D: Int:D $n = 1) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">rotate(LIST, INTEGER?)
LIST.rotate(INTEGER?)</pre>
 <p>Returns the list rotated by <span class="code">$n</span> elements.</p>
 <p>Examples:</p>
 <pre class="code">&amp;lt;a b c d e&gt;.rotate(2);   # &amp;lt;c d e a b&gt;
&amp;lt;a b c d e&gt;.rotate(-1);  # &amp;lt;e a b c d&gt;</pre>
 <a name="t99.2.27"></a><h2 id="_type_List.pod6-routine_sort">99.2.27 routine sort</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    sort(*@elems)      returns Seq:D
multi sub    sort(&amp;amp;by, *@elems) returns Seq:D
multi method sort(List:D:)      returns Seq:D
multi method sort(List:D:, &amp;amp;by) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">sort LIST
sort SORT_BY, LIST
LIST.sort
LIST.sort(SORT_BY)</pre>
 <p>Sorts the list, smallest element first. By default <span class="code">infix:&lt;cmp> </span> is used for comparing list elements.</p>
 <p>If <span class="code">&amp;by</span> is provided, and it accepts two arguments, it is invoked for pairs of list elements, and should return <span class="code">Order::Increase</span>, <span class="code">Order::Same</span> or <span class="code">Order::Decrease</span>.</p>
 <p>If <span class="code">&amp;by</span> accepts only one argument, the list elements are sorted according to <span class="code">by($a) cmp by($b) </span>. The return values of <span class="code">&amp;by</span> are cached, so that <span class="code">&amp;by</span> is only called once per list element.</p>
 <p>Examples:</p>
 <pre class="code">say (3, -4, 7, -1, 2, 0).sort;                  # -4 -1 0 2 3 7
say (3, -4, 7, -1, 2, 0).sort: *.abs;           # 0 -1 2 3 -4 7
say (3, -4, 7, -1, 2, 0).sort: { $^b leg $^a }; # 7 3 2 0 -4 -1</pre>
 <a name="t99.2.28"></a><h2 id="_type_List.pod6-routine_unique">99.2.28 routine unique</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    unique(*@values, :&amp;amp;as, :&amp;amp;with) returns Seq:D
multi method unique(List:D:,  :&amp;amp;as, :&amp;amp;with) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">unique LIST, :COMPARE_AS, :COMPARE_WITH
LIST.unique(:COMPARE_AS, :COMPARE_WITH)</pre>
 <p>Returns a sequence of <b>unique</b> values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list. <span class="code">unique</span> uses the semantics of the <a href="===">===</a> operator to decide whether two objects are the same, unless the optional <span class="code">:with</span> parameter is specified with another comparator. The order of the original list is preserved even as duplicates are removed.</p>
 <p>Examples:</p>
 <pre class="code">say &amp;lt;a a b b b c c&gt;.unique    # a b c
say &amp;lt;a b b c c b a&gt;.unique    # a b c</pre>
 <p>(Use <a href=" &lt;span class=&quot;code&quot;&gt;squish&lt;/span&gt; "> <span class="code">squish</span> </a> instead if you know the input is sorted such that identical objects are adjacent.)</p>
 <p>The optional <span class="code">:as</span> parameter allows you to normalize/canonicalize the elements before unique-ing. The values are transformed for the purposes of comparison, but it's still the original values that make it to the result list:</p>
 <p>Example:</p>
 <pre class="code">say &amp;lt;a A B b c b C&gt;.unique(:as(&amp;amp;lc))          # a B c</pre>
 <p>One can also specify the comparator with the optional <span class="code">:with</span> parameter. For instance if one wants a list of unique hashes, one could use the <span class="code">eqv</span> comparator.</p>
 <p>Example:</p>
 <pre class="code">my @list = {a =&gt; 42}, {b =&gt; 13}, {a =&gt; 42};
say @list.unique(:with(&amp;amp;[eqv]))               # {a=&gt;42} {b=&gt;13}</pre>
 <a name="t99.2.29"></a><h2 id="_type_List.pod6-routine_repeated">99.2.29 routine repeated</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    repeated(*@values, :&amp;amp;as, :&amp;amp;with) returns Seq:D
multi method repeated(List:D:,  :&amp;amp;as, :&amp;amp;with) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">repeated LIST, :COMPARE_AS, :COMPARE_WITH
LIST.repeated(:COMPARE_AS, :COMPARE_WITH)</pre>
 <p>Returns a sequence of <b>repeated</b> values from the invocant/argument list. It takes the same parameters as <a href=" &lt;span class=&quot;code&quot;&gt;unique&lt;/span&gt; "> <span class="code">unique</span> </a>, but instead of passing through any elements when they're first seen, they're only passed through as soon as they're seen for the second time (or more).</p>
 <p>Examples:</p>
 <pre class="code">say &amp;lt;a a b b b c c&gt;.repeated                    # a b b c
say &amp;lt;a b b c c b a&gt;.repeated                    # b c b a
say &amp;lt;a A B b c b C&gt;.repeated(:as(&amp;amp;lc))          # A b b C

my @list = {a =&gt; 42}, {b =&gt; 13}, {a =&gt; 42};
say @list.repeated(:with(&amp;amp;[eqv]))               # {a=&gt;42}</pre>
 <a name="t99.2.30"></a><h2 id="_type_List.pod6-routine_squish">99.2.30 routine squish</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    squish(*@values, :&amp;amp;as) returns Seq:D
multi method squish(List:D:,  :&amp;amp;as) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">squish LIST, :COMPARE_AS
LIST.squish(:COMPARE_AS)</pre>
 <p>Returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance. Like <a href=" &lt;span class=&quot;code&quot;&gt;unique&lt;/span&gt; "> <span class="code">unique</span> </a>, <span class="code">squish</span> uses the semantics of the <a href="===">===</a> operator to decide whether two objects are the same. Unlike <a href=" &lt;span class=&quot;code&quot;&gt;unique&lt;/span&gt; "> <span class="code">unique</span> </a>, this function only removes adjacent duplicates; identical values further apart are still kept. The order of the original list is preserved even as duplicates are removed.</p>
 <p>Examples:</p>
 <pre class="code">say &amp;lt;a a b b b c c&gt;.squish  # a b c
say &amp;lt;a b b c c b a&gt;.squish  # a b c b a</pre>
 <p>The optional <span class="code">:as</span> parameter, just like with <a href=" &lt;span class=&quot;code&quot;&gt;unique&lt;/span&gt; "> <span class="code">unique</span> </a>, allows values to be temporarily transformed before comparison.</p>
 <a name="t99.2.31"></a><h2 id="_type_List.pod6-routine_reduce">99.2.31 routine reduce</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    reduce(&amp;amp;with, *@values)
multi method reduce(List:D: &amp;amp;with)</pre>
 <p>Usage:</p>
 <pre class="code">reduce CODE, LIST
LIST.reduce(CODE)</pre>
 <p>Generates a single "combined" value from a list of arbitrarily many of values, by repeatedly applying a function which knows how to combine <i>two</i> values.</p>
 <p>More precisely, the specified <span class="code">&amp;with</span> is first called for the first two values of the list, then for the result of that calculation and the third value, and so on - and the final result is returned. In other words, <span class="code">(2, 4, 6, 8).reduce(*+*)</span> is the same as <span class="code">(((2+4)+6)+8)</span>.</p>
 <p>If <span class="code">@values</span> contains just a single element, that element is returned immediately. If it contains no elements, an exception is thrown. For this reason, you may want to prefix the input list with an explicit identity value:</p>
 <pre class="code">say reduce { $^a ~ $^b }, '', |@strings;               # like @strings.join
say reduce { $^a &gt; $^b ?? $^a !! $^b }, 0, |@numbers;  # like @numbers.max</pre>
 <p>As a special case, if <span class="code">&amp;with</span> is the function object of an <i>operator</i>, its inherent identity value and associativity is respected - in other words, <span class="code">(VAL1, VAL2, VAL3).reduce(&amp;[OP])</span> is the same as <span class="code">VAL1 OP VAL2 OP VAL3</span> even for operators which aren't left-associative, and an empty <span class="code">@values</span> list is allowed now. And since reducing with an infix operator is a common thing to do, the <span class="code">[ ]</span> meta-operator provides a syntactic shortcut:</p>
 <pre class="code"># The following all do the same thing...
say reduce { $^a + $^b }, 0, |@numbers;
say reduce * + *, 0, |@numbers;
say reduce &amp;amp;[+], @numbers;
say [+] @numbers;</pre>
 <p>Since <span class="code">reduce</span> is an implicit loop, it responds to <span class="code">next</span>, <span class="code">last</span> and <span class="code">redo</span> statements.</p>
 <p>Practical example:</p>
 <pre class="code"># Generate a random-ish math formula like "(4 + ((3 * x) + 11) / 6))"

my @ops = [Z] (&amp;lt;+ - * /&gt;, 1..20)».roll(4);

say ('x', |@ops).reduce: -&gt; $formula, [$op, $number] {
    Bool.pick ?? "($formula $op $number)"
              !! "($number $op $formula)"
}</pre>
 <p><i>Note:</i> In the functional programming world, this operation is generally called a <a href="https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29#Folds_on_lists">left fold</a>.</p>
 <a name="t99.2.32"></a><h2 id="_type_List.pod6-routine_combinations">99.2.32 routine combinations</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    combinations($n, $k)                     returns Seq:D
multi method combinations(List:D: Int:D $of)          returns Seq:D
multi method combinations(List:D: Range:D $of = 0..*) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">combinations INTEGER, INTEGER
LIST.combinations(INTEGER)
LIST.combinations(RANGE)</pre>
 <p>The <span class="code">Int</span> variant returns all <span class="code">$of</span>-combinations of the invocant list. For example</p>
 <pre class="code">say .join('|') for &amp;lt;a b c&gt;.combinations(2);</pre>
 <p>prints</p>
 <pre class="code">a|b
a|c
b|c</pre>
 <p>because all the 2-combinations of <span class="code">'a', 'b', 'c'</span> are <span class="code">['a', 'b'], ['a', 'c'], ['b', 'c']</span>.</p>
 <p>The <span class="code">Range</span> variant combines all the individual combinations into a single list, so</p>
 <pre class="code">say .join('|') for &amp;lt;a b c&gt;.combinations(2..3);</pre>
 <p>prints</p>
 <pre class="code">a|b
a|c
b|c
a|b|c</pre>
 <p>because that's the list of all 2- and 3-combinations.</p>
 <p>The subroutine form <span class="code">combinations($n, $k)</span> is equivalent to <span class="code">(^$n).combinations($k)</span>, so</p>
 <pre class="code">.say for combinations(4, 2)</pre>
 <p>prints</p>
 <pre class="code">0 1
0 2
0 3
1 2
1 3
2 3</pre>
 <a name="t99.2.33"></a><h2 id="_type_List.pod6-routine_permutations">99.2.33 routine permutations</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    permutations($n)      returns Seq:D
multi method permutations(List:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">permutations(INTEGER)
LIST.permutations</pre>
 <p>Returns all possible permutations of a list as a sequence of lists. So</p>
 <pre class="code">say .join('|') for &amp;lt;a b c&gt;.permutations</pre>
 <p>prints</p>
 <pre class="code">a|b|c
a|c|b
b|a|c
b|c|a
c|a|b
c|b|a</pre>
 <p><span class="code">permutations</span> treats all list elements as distinguishable, so <span class="code">(1, 1, 2).permutations</span> still returns a list of 6 elements, even though there are only three distinct permutations.</p>
 <p>The subroutine form <span class="code">permutations($n)</span> is equivalent to <span class="code">(^$n).permutations</span>, so</p>
 <pre class="code">.say for permutations 3;</pre>
 <p>prints</p>
 <pre class="code">1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1</pre>
 <a name="t99.2.34"></a><h2 id="_type_List.pod6-method_rotor">99.2.34 method rotor</h2>
 <p>Defined as:</p>
 <pre class="code">method rotor(*@cycle, Bool() :$partial) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">LIST.rotor(EXPR, :partial?)</pre>
 <p>Returns a sequence of lists, where each sublist is made up of elements of the invocant.</p>
 <p>In the simplest case, <span class="code">@cycle</span> contains just one integer, in which case the invocant list is split into sublists with as many elements as the integer specifies. If <span class="code">:$partial</span> is True, the final chunk is included even if it doesn't satisfy the length requirement:</p>
 <pre class="code">say ('a'..'h').rotor(3).join('|');              # a b c|d e f
say ('a'..'h').rotor(3, :partial).join('|');    # a b c|d e f|g h</pre>
 <p>If the element of <span class="code">@cycle</span> is a <a href="#_type_Pair.pod6">Pair</a> instead, the key of the pair specifies the length of the return sublist, and the value the gap between sublists; negative gaps produce overlap:</p>
 <pre class="code">say ('a'..'h').rotor(2 =&gt; 1).join('|');         # a b|d e|g h
say ('a'..'h').rotor(3 =&gt; -1).join('|');        # a b c|c d e|e f g</pre>
 <p>If <span class="code">@cycle</span> contains more than element, <span class="code">rotor</span> cycles through it to find the number of elements for each sublist:</p>
 <pre class="code">say ('a'..'h').rotor(2, 3).join('|');           # a b|c d e|f g
say ('a'..'h').rotor(1 =&gt; 1, 3).join('|');      # a|c d e|f</pre>
 <p>Combining multiple cycles and <span class="code">:partial</span> also works:</p>
 <pre class="code">say ('a'..'h').rotor(1 =&gt; 1, 3 =&gt; -1, :partial).join('|');
                                                # a|c d e|e|g h</pre>
 <p>See <a href="http://perl6.party/post/Perl-6-.rotor-The-King-of-List-Manipulation">this blog post for more elaboration on rotor</a>.</p>
 <a name="t99.2.35"></a><h2 id="_type_List.pod6-routine_zip">99.2.35 routine zip</h2>
 <p>Defined as:</p>
 <pre class="code">sub zip(**@e) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">zip LISTS</pre>
 <p>Zips two or more lists or other <a href="#_type_Iterable.pod6">iterables</a> together by returning a sequence made of a list of all first elements of all lists, then a list of all second elements of a list etc.</p>
 <pre class="code">say .join for zip  &amp;lt;a b c&gt;, &amp;lt;d e f&gt;;</pre>
 <p>Produces the output</p>
 <pre class="code">ad
be
cf</pre>
 <p><span class="code">zip</span> has an infix synonym, the <span class="code">Z</span> operator.</p>
 <pre class="code">say .join for &amp;lt;a b c&gt; Z &amp;lt;d e f&gt;;    # same output as above</pre>
 <p>When the first input list is exhausted, no more elements are returned; so trailing elements from longer input lists are discarded.</p>
 <p>If you just wish to skip missing entries in shorter sublists, use <a href="#_type_List.pod6-sub_roundrobin">roundrobin</a> instead:</p>
 <pre class="code">for roundrobin(@queue1, @queue2, @queue3) -&gt; $next {
    ...
}</pre>
 <a name="t99.2.36"></a><h2 id="_type_List.pod6-sub_roundrobin">99.2.36 sub roundrobin</h2>
 <p>Defined as:</p>
 <pre class="code">multi roundrobin(List:D: --&gt; Seq)</pre>
 <p>Usage:</p>
 <pre class="code">roundrobin LISTS</pre>
 <p><span class="code">roundrobin</span> is very similar to <a href="#_type_List.pod6-routine_zip">zip</a>. The difference is that <span class="code">roundrobin</span> will not stop on lists that run out of elements but simply skip any undefined value:</p>
 <pre class="code">my @a = 1;
my @b = 1..2;
my @c = 1..3;
for flat roundrobin(@a, @b, @c) -&gt; $x { $x.say }</pre>
 <p>will display the following values: <span class="code">1, 1, 1, 2, 2, 3</span></p>
 <a name="t99.2.37"></a><h2 id="_type_List.pod6-routine_sum">99.2.37 routine sum</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    sum($list)  returns Numeric:D
multi method sum(List:D:) returns Numeric:D</pre>
 <p>Usage:</p>
 <pre class="code">sum LIST
LIST.sum</pre>
 <p>Returns the sum of all elements in the list or 0 if the list is empty. Throws an exception if an element can not be coerced into Numeric.</p>
 <pre class="code">say (1, 3, pi).sum;       # 7.14159265358979
say (1, "0xff").sum;      # 256
say sum(0b1111, 5);       # 20</pre>
 <a name="t99.2.38"></a><h2 id="_type_List.pod6-method_fmt">99.2.38 method fmt</h2>
 <p>Defined as:</p>
 <pre class="code">method fmt($format = '%s', $separator = ' ') returns Str:D</pre>
 <p>Returns a string where each element in the list has been formatted according to <span class="code">$format</span> and where each element is separated by <span class="code">$separator</span>.</p>
 <p>For more information about formats strings, see <a href="#_routine_sprintf.pod6">sprintf</a>.</p>
 <pre class="code">my @a = 8..11;
say @a.fmt('%03d', ',');                          # 008,009,010,011</pre>
</div> <!-- /type/Lock.pod6 --><div class="pod-body"><a id="_type_Lock.pod6"></a><a name="t100"><h1 class="title">100 class Lock</h1></a> <p class="subtitle">Low-level thread locking primitive</p> <pre class="code">class Lock { ... }</pre>
 <p>A Lock is a low-level constructor for ensuring that only one thread works with a certain object at a given time, or runs a piece of code (called the <i>critical section</i>).</p>
 <pre class="code">my $x = 0;
my $l = Lock.new;
await (^10).map: {
    start {
        $l.protect({ $x++ });
    }
}
say $x;         # 10</pre>
 <p>Locks are reentrant, that is, a thread that holds the lock can lock it again without blocking.</p>
 <p>High-level Perl 6 code should avoid the direct usage of locks, because they are not composable. Instead, high-level constructs such as <a href="#_type_Promise.pod6">Promise</a>, <a href="#_type_Channel.pod6">Channel</a> and Supply should be used whenever possible.</p>
 <a name="t100.1"></a><h1 id="_type_Lock.pod6-Methods">100.1 Methods</h1>
 <a name="t100.1.1"></a><h2 id="_type_Lock.pod6-method_protect">100.1.1 method protect</h2>
 <p>Defined as:</p>
 <pre class="code">method protect(Lock:D: &amp;amp;code)</pre>
 <p>Usage:</p>
 <pre class="code">LOCK.protect(CODE)</pre>
 <p>Runs <span class="code">&amp;code</span> and makes sure it is only run in one thread at once.</p>
 <a name="t100.1.2"></a><h2 id="_type_Lock.pod6-method_lock">100.1.2 method lock</h2>
 <p>Defined as:</p>
 <pre class="code">method lock(Lock:D:)</pre>
 <p>Usage:</p>
 <pre class="code">LOCK.lock</pre>
 <p>Acquires the lock. If it is currently not available, waits for it.</p>
 <a name="t100.1.3"></a><h2 id="_type_Lock.pod6-method_unlock">100.1.3 method unlock</h2>
 <p>Defined as:</p>
 <pre class="code">method unlock(Lock:D:)</pre>
 <p>Usage:</p>
 <pre class="code">LOCK.unlock</pre>
 <p>Releases the lock.</p>
 <a name="t100.1.4"></a><h2 id="_type_Lock.pod6-method_condition">100.1.4 method condition</h2>
 <p>Defined as:</p>
 <pre class="code">my class ConditionVariable {
    method wait();
    method signal();
    method signal_all();
}

method condition(Lock:D:) returns ConditionVariable:D</pre>
 <p>Usage:</p>
 <pre class="code">LOCK.condition</pre>
 <p>Returns a condition variable. Compare <a href="http://web.stanford.edu/class/cs140/cgi-bin/lecture.php?topic=locks">http://web.stanford.edu/class/cs140/cgi-bin/lecture.php?topic=locks</a> or <a href="https://en.wikipedia.org/wiki/Monitor_%28synchronization%29">https://en.wikipedia.org/wiki/Monitor_%28synchronization%29</a> for background.</p>
</div> <!-- /type/Macro.pod6 --><div class="pod-body"><a id="_type_Macro.pod6"></a><a name="t101"><h1 class="title">101 class Macro</h1></a> <p class="subtitle">Compile-time routine</p> <pre class="code">class Macro is Routine { }</pre>
 <p>A macro is a Routine whose invocation typically happens during parsing. By returning an <a href="#_type_AST.pod6">AST</a>, a macro can inject code into the calling location.</p>
</div> <!-- /type/Map.pod6 --><div class="pod-body"><a id="_type_Map.pod6"></a><a name="t102"><h1 class="title">102 class Map</h1></a> <p class="subtitle">Immutable mapping from strings to values</p> <pre class="code">class Map does Associative is Iterable { }</pre>
 <p>A Map is an immutable mapping from string keys to values of arbitrary types. It serves as a base class for <a href="#_type_Hash.pod6">Hash</a>, which is mutable.</p>
 <p>In list context a Map behaves as a list of <a href="#_type_Pair.pod6">Pair</a> objects.</p>
 <p>Note that the order in which keys, values and pairs are retrieved is generally arbitrary, but the <span class="code">keys</span>, <span class="code">values</span> and <span class="code">pairs</span> methods return them always in the same order when called on the same object.</p>
 <pre class="code">my %e := Map.new('a', 1, 'b', 2);
say %e.keys;    # can print "a b\n" or "b a\n";
say %e.values;  # prints "1 2\n" if the previous line
                # printed "a b\n", "b a\n" otherwise</pre>
 <a name="t102.1"></a><h1 id="_type_Map.pod6-Methods">102.1 Methods</h1>
 <a name="t102.1.1"></a><h2 id="_type_Map.pod6-method_new">102.1.1 method new</h2>
 <p>Defined as:</p>
 <pre class="code">proto method new(*@, *%) {*}
multi method new(*@args, *%pairs)</pre>
 <p>Usage:</p>
 <pre class="code">Map.new(ARGS)</pre>
 <p>Creates a new Map from a list of alternating keys and values, with the same semantics as described for hash assigning in the <a href="#_type_Hash.pod6">Hash</a> documentation.</p>
 <a name="t102.1.2"></a><h2 id="_type_Map.pod6-method_elems">102.1.2 method elems</h2>
 <p>Defined as:</p>
 <pre class="code">method elems(Map:D:) returns Int:D:</pre>
 <p>Usage:</p>
 <pre class="code">MAP.elems</pre>
 <p>Returns the number of pairs stored in the Map.</p>
 <a name="t102.1.3"></a><h2 id="_type_Map.pod6-method_ACCEPTS">102.1.3 method ACCEPTS</h2>
 <p>Defined as:</p>
 <pre class="code">multi method ACCEPTS(Map:D: Positional $topic)
multi method ACCEPTS(Map:D: Cool:D     $topic)
multi method ACCEPTS(Map:D: Regex      $topic)
multi method ACCEPTS(Map:D: Any        $topic)</pre>
 <p>Usage:</p>
 <pre class="code">MAP.ACCEPTS(TOPIC)</pre>
 <p>Used in smart-matching if the right-hand side is an <span class="code">Map</span>.</p>
 <p>If the topic is list-like (<a href="#_type_Positional.pod6">Positional</a>), returns True if any of the list elements exist as a key in the Map.</p>
 <p>If the topic is of type <span class="code">Cool</span> (strings, integers etc.), returns True if the topic exists as a key.</p>
 <p>If the topic is a regex, returns True if any of the keys match the regex.</p>
 <p>As a fallback, the topic is coerced to a list, and the <span class="code">Positional</span> behavior is applied.</p>
 <p>To retrieve a value from the Map by key, use the <span class="code">{ }</span> postcircumfix operator:</p>
 <pre class="code">my $value = $map{$key};</pre>
 <p>To check whether a given key is stored in a Map, modify the access with the <span class="code">:exists</span> adverb:</p>
 <pre class="code">if %h{$key}:exists {
    say "%h{} has key $key";
}</pre>
 <a name="t102.1.4"></a><h2 id="_type_Map.pod6-method_keys">102.1.4 method keys</h2>
 <p>Defined as:</p>
 <pre class="code">method keys(Map:D:) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.keys</pre>
 <p>Returns a list of all keys in the Map.</p>
 <a name="t102.1.5"></a><h2 id="_type_Map.pod6-method_values">102.1.5 method values</h2>
 <p>Defined as:</p>
 <pre class="code">method values(Map:D:) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.values</pre>
 <p>Returns a list of all values in the Map.</p>
 <a name="t102.1.6"></a><h2 id="_type_Map.pod6-method_pairs">102.1.6 method pairs</h2>
 <p>Defined as:</p>
 <pre class="code">method pairs(Map:D:) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.pairs</pre>
 <p>Returns a list of all pairs in the Map.</p>
 <a name="t102.1.7"></a><h2 id="_type_Map.pod6-method_antipairs">102.1.7 method antipairs</h2>
 <p>Defined as:</p>
 <pre class="code">method antipairs(Map:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.antipairs</pre>
 <p>Returns all keys and their respective values as a <a href="#_type_Seq.pod6">Seq</a> of <span class="code">Pair</span>s where the keys and values have been exchanged, i.e. the opposite of method <a href="#101-method_pairs">pairs</a>. Unlike the <a href="#101-method_invert">invert</a> method, there is no attempt to expand list values into multiple pairs.</p>
 <pre class="code">my $m = Map.new('a' =&gt; (2, 3), 'b' =&gt; 17);
say $m.antipairs;                                  # ((2 3) =&gt; a 17 =&gt; b)</pre>
 <a name="t102.1.8"></a><h2 id="_type_Map.pod6-method_invert">102.1.8 method invert</h2>
 <p>Defined as:</p>
 <pre class="code">method invert(Map:D:) returns Seq:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.invert</pre>
 <p>Returns all keys and their respective values as a <a href="#_type_Seq.pod6">Seq</a> of <span class="code">Pair</span>s where the keys and values have been exchanged. The difference between <span class="code">invert</span> and <a href="#101-method_antipairs">antipairs</a> is that <span class="code">invert</span> expands list values into multiple pairs.</p>
 <pre class="code">my $m = Map.new('a' =&gt; (2, 3), 'b' =&gt; 17);
say $m.invert;                                    # (2 =&gt; a 3 =&gt; a 17 =&gt; b)</pre>
 <a name="t102.1.9"></a><h2 id="_type_Map.pod6-method_kv">102.1.9 method kv</h2>
 <p>Defined as:</p>
 <pre class="code">method kv(Map:D:) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.kv</pre>
 <p>Returns a list of keys and values interleaved.</p>
 <pre class="code">Map.new('a', 1, 'b', 2).kv  # a, 1, b, 2 OR b, 2, a, 1</pre>
 <a name="t102.1.10"></a><h2 id="_type_Map.pod6-method_Int">102.1.10 method Int</h2>
 <p>Defined as:</p>
 <pre class="code">method Int(Map:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.Int</pre>
 <p>Returns the number of pairs stored in the <span class="code">Map</span> (same as <span class="code">.elems</span>).</p>
 <pre class="code">my $m = Map.new('a' =&gt; 2, 'b' =&gt; 17);
say $m.Int;                                       # 2</pre>
 <a name="t102.1.11"></a><h2 id="_type_Map.pod6-method_Numeric">102.1.11 method Numeric</h2>
 <p>Defined as:</p>
 <pre class="code">method Numeric(Map:D:) returns Int:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.Numeric</pre>
 <p>Returns the number of pairs stored in the <span class="code">Map</span> (same as <span class="code">.elems</span>).</p>
 <pre class="code">my $m = Map.new('a' =&gt; 2, 'b' =&gt; 17);
say $m.Numeric;                                   # 2</pre>
 <a name="t102.1.12"></a><h2 id="_type_Map.pod6-method_Bool">102.1.12 method Bool</h2>
 <p>Defined as:</p>
 <pre class="code">method Bool(Map:D:) returns Bool:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.Bool</pre>
 <p>Returns <span class="code">True</span> if the invocant contains at least one key/value pair.</p>
 <pre class="code">my $m = Map.new('a' =&gt; 2, 'b' =&gt; 17);
say $m.Bool;                                      # True</pre>
 <a name="t102.1.13"></a><h2 id="_type_Map.pod6-method_Capture">102.1.13 method Capture</h2>
 <p>Defined as:</p>
 <pre class="code">method Capture(Map:D:) returns Capture:D</pre>
 <p>Usage:</p>
 <pre class="code">MAP.Capture</pre>
 <p>Returns a <a href="#_type_Capture.pod6">Capture</a> where each key, if any, has been converted to a named argument with the same value as it had in the original <span class="code">Map</span>. The returned <span class="code">Capture</span> will not contain any positional arguments.</p>
 <pre class="code">my $map = Map.new('a' =&gt; 2, 'b' =&gt; 17);
my $capture = $map.Capture;
my-sub(|$capture);                                # 2, 17

sub my-sub(:$a, :$b) {
    say "$a, $b"
}</pre>
</div> <!-- /type/Match.pod6 --><div class="pod-body"><a id="_type_Match.pod6"></a><a name="t103"><h1 class="title">103 class Match</h1></a> <p class="subtitle">Result of a successful regex match</p> <pre class="code">class Match is Capture is Cool { ... }</pre>
 <p><span class="code">Match</span> objects are the result of a successful regex match. They store a reference to the original string (<span class="code">.orig</span>), positional and named captures, the positions of the start and end of the match in the original string, and a payload referred to as <i>AST</i> (abstract syntax tree), which can be used to build data structures from complex regexes and grammars.</p>
 <p>Submatches are also <span class="code">Match</span> objects (or lists of <span class="code">Match</span> objects, if the corresponding regex was quantified), so each match object can be seen as the root of a tree of match objects.</p>
 <a name="t103.1"></a><h1 id="_type_Match.pod6-Methods">103.1 Methods</h1>
 <a name="t103.1.1"></a><h2 id="_type_Match.pod6-method_orig">103.1.1 method orig</h2>
 <p>Returns the original string that the regex was matched against.</p>
 <a name="t103.1.2"></a><h2 id="_type_Match.pod6-method_from">103.1.2 method from</h2>
 <p>Returns the index of the starting position of the match.</p>
 <a name="t103.1.3"></a><h2 id="_type_Match.pod6-method_to">103.1.3 method to</h2>
 <p>Returns the index of the end position of the match.</p>
 <a name="t103.1.4"></a><h2 id="_type_Match.pod6-method_made">103.1.4 method made</h2>
 <p>Returns the payload that was set with <a href="#102-method make">#method make</a>.</p>
 <a name="t103.1.5"></a><h2 id="_type_Match.pod6-method_ast">103.1.5 method ast</h2>
 <p>Alias for <a href="#102-method made">#method made</a>.</p>
 <a name="t103.1.6"></a><h2 id="_type_Match.pod6-method_Str">103.1.6 method Str</h2>
 <p>Returns the matched text.</p>
 <a name="t103.1.7"></a><h2 id="_type_Match.pod6-method_caps">103.1.7 method caps</h2>
 <p>Returns a list of pairs, with the index or submatch name as key and the submatches as values. The list is ordered by starting position of the submatches.</p>
 <a name="t103.1.8"></a><h2 id="_type_Match.pod6-method_chunks">103.1.8 method chunks</h2>
 <p>Returns a list of pairs, with the index or submatch name as key and the submatches as values. The list is ordered by starting position of the submatches.</p>
 <p>Those parts of the string that were not matched by submatches are interleaved with the other pairs, with the string <span class="code">~</span> as key.</p>
 <a name="t103.1.9"></a><h2 id="_type_Match.pod6-method_list">103.1.9 method list</h2>
 <p>Returns a list of positional submatches.</p>
 <a name="t103.1.10"></a><h2 id="_type_Match.pod6-method_hash">103.1.10 method hash</h2>
 <p>Returns a hash of named submatches.</p>
 <a name="t103.1.11"></a><h2 id="_type_Match.pod6-method_prematch">103.1.11 method prematch</h2>
 <p>Returns the part of the original string leading up to the match.</p>
 <a name="t103.1.12"></a><h2 id="_type_Match.pod6-method_postmatch">103.1.12 method postmatch</h2>
 <p>Returns the part of the original string following the match.</p>
 <a name="t103.1.13"></a><h2 id="_type_Match.pod6-method_make">103.1.13 method make</h2>
 <pre class="code">method make(Match:D: Mu $ast)
sub make(Mu $ast)</pre>
 <p>Sets the AST to <span class="code">$ast</span>, and returns it.</p>
 <p>This is just a little sugar for <span class="code">$/.made = $ast</span> which is a very common operation in actions. <span class="code">$ast</span> may be anything that makes sense for the use case. It's typically some tree node.</p>
 <p>The sub form operates on the current <span class="code">$/</span>, which can be a convenient shortcut:</p>
 <pre class="code">method my-action ($/) {
    make "foo: $/";
}</pre>
</div> <!-- /type/Metamodel/AttributeContainer.pod6 --><div class="pod-body"><a id="_type_Metamodel_AttributeContainer.pod6"></a><a name="t104"><h1 class="title">104 role Metamodel::AttributeContainer</h1></a> <p class="subtitle">Metaobject that can hold attributes</p> <pre class="code">role Metamodel::AttributeContainer { ... }</pre>
 <p>Classes, roles and grammars can have attributes. Storage and introspection of attributes is implemented by this role.</p>
 <a name="t104.1"></a><h1 id="_type_Metamodel_AttributeContainer.pod6-Methods">104.1 Methods</h1>
 <a name="t104.1.1"></a><h2 id="_type_Metamodel_AttributeContainer.pod6-method_add_attribute">104.1.1 method add_attribute</h2>
 <pre class="code">method add_attribute(Metamodel::AttributeContainer: $obj, $name, $attribute)</pre>
 <p>Adds an attribute. <span class="code">$attribute</span> must be an object that supports the methods <span class="code">name</span>, <span class="code">type</span> and <span class="code">package</span>, which are called without arguments. It can for example be of <a href="#_type_Attribute.pod6">type Attribute</a>.</p>
 <a name="t104.1.2"></a><h2 id="_type_Metamodel_AttributeContainer.pod6-method_attributes">104.1.2 method attributes</h2>
 <pre class="code">method attributes(Metamodel::AttributeContainer: $obj)</pre>
 <p>Returns a list of attributes. For most Perl 6 types, these will be objects of <a href="#_type_Attribute.pod6">type Attribute</a>.</p>
 <a name="t104.1.3"></a><h2 id="_type_Metamodel_AttributeContainer.pod6-method_set_rw">104.1.3 method set_rw</h2>
 <pre class="code">method set_rw(Metamodel::AttributeContainer: $obj)</pre>
 <p>Marks a type whose attributes default to having a write accessor. For example in</p>
 <pre class="code">class Point is rw {
    has $.x;
    has $.y;
}</pre>
 <p>The <span class="code">is rw</span> trait on the class calls the <span class="code">set_rw</span> method on the meta class, making all the attributes implicitly writable, so that you can write;</p>
 <pre class="code">my $p = Point.new(x =&gt; 1, y =&gt; 2);
$p.x = 42;</pre>
 <a name="t104.1.4"></a><h2 id="_type_Metamodel_AttributeContainer.pod6-method_rw">104.1.4 method rw</h2>
 <pre class="code">method rw(Metamodel::AttributeContainer: $obj)</pre>
 <p>Returns a true value if <a href="#103-method set_rw">method set_rw</a> has been called on this object, that is, if new public attributes are writable by default.</p>
 TODO: compose_attributes, get_attribute_for_usage

Also TODO: describe :local, :excl, :all options of method attributes

</div> <!-- /type/Metamodel/C3MRO.pod6 --><div class="pod-body"><a id="_type_Metamodel_C3MRO.pod6"></a><a name="t105"><h1 class="title">105 role Metamodel::C3MRO</h1></a> <p class="subtitle">Metaobject that supports the C3 method resolution order</p> <pre class="code">role Metamodel::C3MRO { }</pre>
 <p><a href="#_language_mop.pod6">Meta model</a> role for the <a href="https://en.wikipedia.org/wiki/C3_linearization"> <i>C3</i>  method resolution order (MRO)</a>.</p>
 <p>The <i>method resolution order</i> for a type is a flat list of types including the type itself, and (recursively) all super classes. It determines in which order the types will be visited for determining which method to call with a given name, or for finding the next method in a chain with <a href="#_language_functions.pod6-index-entry-nextsame-nextsame">nextsame</a>, <a href="#_language_functions.pod6-index-entry-callsame-callsame">callsame</a>, <a href="#_language_functions.pod6-index-entry-nextwith-nextwith">nextwith</a> or <a href="#_language_functions.pod6-index-entry-callwith-callwith">callwith</a>.</p>
 <pre class="code">class CommonAncestor { };   # implicitly inherits from Any 
 class Child1 is CommonAncestor { } 
 class Child2 is CommonAncestor { } 
 class GrandChild2 is Child2 { } 
 class Weird is Child1 is GrandChild2 { }; 
 
 say Weird.^mro; 
     # (Weird) (Child1) (GrandChild2) (Child2) (CommonAncestor) (Any) (Mu) 
</pre>
 <p>C3 is the default resolution order for classes and grammars in Perl 6. Note that roles generally do not appear in the method resolution order (unless they are punned into a class, from which another type inherits), because methods are copied into classes at role application time.</p>
 <a name="t105.1"></a><h1 id="_type_Metamodel_C3MRO.pod6-Methods">105.1 Methods</h1>
 <a name="t105.1.1"></a><h2 id="_type_Metamodel_C3MRO.pod6-compute_mro">105.1.1 compute_mro</h2>
 <pre class="code">method compute_mro($type)</pre>
 <p>Computes the method resolution order.</p>
 <a name="t105.1.2"></a><h2 id="_type_Metamodel_C3MRO.pod6-mro">105.1.2 mro</h2>
 <pre class="code">method mro($type)</pre>
 <p>Returns a list of types in the method resolution order.</p>
 <pre class="code">say Int.^mro    # (Int) (Cool) (Any) (Mu)</pre>
 <p>Returns a list of types in the method resolution order, even those that are marked <span class="code">is hidden</span>.</p>
 <a name="t105.1.3"></a><h2 id="_type_Metamodel_C3MRO.pod6-mro_unhidden">105.1.3 mro_unhidden</h2>
 <pre class="code">method mro_unhidden($type)</pre>
 <p>Returns a list of types in method resolution order, excluding those that are marked with <span class="code">is hidden</span>.</p>
</div> <!-- /type/Metamodel/ClassHOW.pod6 --><div class="pod-body"><a id="_type_Metamodel_ClassHOW.pod6"></a><a name="t106"><h1 class="title">106 class Metamodel::ClassHOW</h1></a> <p class="subtitle">Metaobject representing a Perl 6 class.</p> <pre class="code">class Metamodel::ClassHOW
    does Metamodel::Naming
    does Metamodel::Documenting
    does Metamodel::Versioning
    does Metamodel::Stashing
    does Metamodel::AttributeContainer
    does Metamodel::MethodContainer
    does Metamodel::PrivateMethodContainer
    does Metamodel::MultiMethodContainer
    does Metamodel::RoleContainer
    does Metamodel::MultipleInheritance
    does Metamodel::DefaultParent
    does Metamodel::C3MRO
    does Metamodel::MROBasedMethodDispatch
    does Metamodel::MROBasedTypeChecking
    does Metamodel::Trusting
    does Metamodel::BUILDPLAN
    does Metamodel::Mixins
    does Metamodel::ArrayType
    does Metamodel::BoolificationProtocol
    does Metamodel::REPRComposeProtocol
    does Metamodel::InvocationProtocol
    does Metamodel::Finalization
        { }</pre>
 <p><span class="code">Metamodel::ClassHOW</span> is the meta class behind the <span class="code">class</span> keyword.</p>
 <pre class="code">say so Int.HOW ~~ Metamodel::ClassHOW;      # True
say say Int.^methods(:all).pick.name;       # sin</pre>
 <a name="t106.1"></a><h1 id="_type_Metamodel_ClassHOW.pod6-Methods">106.1 Methods</h1>
 <a name="t106.1.1"></a><h2 id="_type_Metamodel_ClassHOW.pod6-method_add_fallback">106.1.1 method add_fallback</h2>
 <pre class="code">method add_fallback(Metamodel::ClassHOW:D: $condition, $calculator)</pre>
 <p>Installs a method fallback, that is, add a way to call methods that weren't statically added.</p>
 <p>Both <span class="code">$condition</span> and <span class="code">$calculator</span> must be callables that receive the invocant and the method name once a method is called that can't be found in the method cache.</p>
 <p>If <span class="code">$condition</span> returns a true value, <span class="code">$calculator</span> is called with the same arguments, and must return the code object to be invoked as the method, and is added to the method cache..</p>
 <p>If <span class="code">$condition</span> returns a false value, the next fallback (if any) is tried, and if none matches, an exception <a href="#_type_X::Method::NotFound.pod6">of type X::Method::NotFound</a> is thrown.</p>
 <p>User-facing code (that is, code not dabbling with meta classes) should use method <span class="code">FALLBACK</span> instead.</p>
 <a name="t106.1.2"></a><h2 id="_type_Metamodel_ClassHOW.pod6-method_can">106.1.2 method can</h2>
 <pre class="code">method can(Metamodel::ClassHOW:D: $obj, $method-name)</pre>
 <p>Given a method names, it returns a <a href="#_type_List.pod6">List</a> of methods that are available with this name.</p>
 <pre class="code">class A      { method x($a) {} };
class B is A { method x()   {} };
say B.^can('x').elems;              # 2
for B.^can('x') {
    say .arity;                     # 1, 2
}</pre>
 <p>In this example, class <span class="code">B</span> has two possible methods available with name <span class="code">x</span> (though a normal method call would only invoke the one installed in <span class="code">B</span> directly). The one in <span class="code">B</span> has arity 1 (i.e. it expects one argument, the invocant (<span class="code">self</span>)), and the one in <span class="code">A</span> expects 2 arguments (<span class="code">self</span> and <span class="code">$a</span>).</p>
 <a name="t106.1.3"></a><h2 id="_type_Metamodel_ClassHOW.pod6-method_compose">106.1.3 method compose</h2>
 <pre class="code">method compose(Metamodel::ClassHOW:D: $obj)</pre>
 <p>A call to <span class="code">compose</span> brings the meta object and thus the class it represents into a fully functional state, so if you construct or modify a class, you must call the compose method before working with the class.</p>
 <p>It updates the method cache, checks that all methods that are required by roles are implemented, does the actual role composition work, and sets up the class to work well with language interoperability.</p>
</div> <!-- /type/Metamodel/Finalization.pod6 --><div class="pod-body"><a id="_type_Metamodel_Finalization.pod6"></a><a name="t107"><h1 class="title">107 role Metamodel::Finalization</h1></a> <p class="subtitle">Metaobject supporting object finalization</p> <p><span class="indexed"><a id="555" name="">DESTROY</a></span></p>
 <pre class="code">role Metamodel::Finalization { ... }</pre>
 <p>This role takes care that <span class="code">DESTROY</span> submethods are called (if they exist) when an object is garbage-collected.</p>
 <a name="t107.1"></a><h1 id="_type_Metamodel_Finalization.pod6-Methods">107.1 Methods</h1>
 <a name="t107.1.1"></a><h2 id="_type_Metamodel_Finalization.pod6-method_setup_finalization">107.1.1 method setup_finalization</h2>
 <pre class="code">method setup_finalization(Metamodel::Finalization:D: $obj)</pre>
 <p>Collects the <span class="code">DESTROY</span> submethods from this class and all its superclasses, and marks the class as needing action on garbage collection.</p>
 <p>A metamodel for a kind that implements finalization semantics must call this method at type composition time.</p>
 <a name="t107.1.2"></a><h2 id="_type_Metamodel_Finalization.pod6-method_destroyers">107.1.2 method destroyers</h2>
 <pre class="code">method destroyers(Metamodel::Finalization:D: $obj) returns List:D</pre>
 <p>Returns a list of all finalization methods.</p>
</div> <!-- /type/Metamodel/MROBasedMethodDispatch.pod6 --><div class="pod-body"><a id="_type_Metamodel_MROBasedMethodDispatch.pod6"></a><a name="t108"><h1 class="title">108 role Metamodel::MROBasedMethodDispatch</h1></a> <p class="subtitle">Metaobject that supports resolving inherited methods</p> <pre class="code">role Metamodel::MROBasedMethodDispatch { ... }</pre>
 <p>This role implements locating methods based on the method resolution order of related (usually "super"/"parent") types.</p>
 <a name="t108.1"></a><h1 id="_type_Metamodel_MROBasedMethodDispatch.pod6-Methods">108.1 Methods</h1>
 <a name="t108.1.1"></a><h2 id="_type_Metamodel_MROBasedMethodDispatch.pod6-method_find_method">108.1.1 method find_method</h2>
 <pre class="code">method find_method(Metamodel::MROBasedMethodDispatch:D: $obj, $name, $no_fallback)</pre>
 <p>Given a method name, returns the method object of that name which is closest in the method resolution order (MRO). If no method can be found, it returns a VM-specific sentinel value (typically a low-level NULL value).</p>
 <p>If <span class="code">:no_fallback</span> is supplied, fallback methods are not considered.</p>
 <a name="t108.1.2"></a><h2 id="_type_Metamodel_MROBasedMethodDispatch.pod6-method_find_method_qualified">108.1.2 method find_method_qualified</h2>
 <pre class="code">method find_method(Metamodel::MROBasedMethodDispatch:D: $obj, $type, $name)</pre>
 <p>Given a method name and a type, returns the method from that type. This is used in calls like</p>
 <pre class="code">self.SomeParentClass::the_method();</pre>
 TODO: publish_method_cache

</div> <!-- /type/Metamodel/MethodContainer.pod6 --><div class="pod-body"><a id="_type_Metamodel_MethodContainer.pod6"></a><a name="t109"><h1 class="title">109 role Metamodel::MethodContainer</h1></a> <p class="subtitle">Metaobject that supports storing and introspecting methods</p> <pre class="code">class Metamodel::MethodContainer { ... }</pre>
 <p>roles, classes, grammars and enums can contain methods. This role implements the API around storing and introspecting them.</p>
 <pre class="code">say .name for Int.^methods(:all);

# don't do that, because it changes type Int globally.
# just for demonstration purposes.
Int.^add_method('double', method ($x:) { 2 * $x });
say 21.double;</pre>
 <a name="t109.1"></a><h1 id="_type_Metamodel_MethodContainer.pod6-Methods">109.1 Methods</h1>
 <a name="t109.1.1"></a><h2 id="_type_Metamodel_MethodContainer.pod6-method_add_method">109.1.1 method add_method</h2>
 <pre class="code">method add_method(Metamodel::MethodContainer: $obj, $name, $code)</pre>
 <p>Adds a method to the meta class, to be called with name <span class="code">$name</span>. This should only be done before a type is composed.</p>
 <a name="t109.1.2"></a><h2 id="_type_Metamodel_MethodContainer.pod6-method_methods">109.1.2 method methods</h2>
 <pre class="code">method methods(Metamodel::MethodContainer: $obj, :$all, :$local)</pre>
 <p>Returns a list of public methods available on the class (which includes methods from superclasses and roles). By default this stops at the classes <a href="#_type_Cool.pod6">Cool</a>, <a href="#_type_Any.pod6">Any</a> or <a href="#_type_Mu.pod6">Mu</a>; to really get all methods, use the <span class="code">:all</span> adverb. If <span class="code">:local</span> is set, only methods declared directly in the class are returned.</p>
 <pre class="code">class A {
    method x() { };
}

say A.^methods();                   # x
say A.^methods(:all);               # x infinite defined ...</pre>
 <p>The returned list contains objects of type <a href="#_type_Method.pod6">Method</a>, which you can use to introspect their signatures and call them.</p>
 <p>Some introspection method-look-alikes like <a href="#_language_mop.pod6-WHAT"> <span class="code">WHAT</span> </a> will not show up, although they are present in any Perl 6 object. They are handled at the grammar level and will likely remain so for bootstrap reasons.</p>
 <a name="t109.1.3"></a><h2 id="_type_Metamodel_MethodContainer.pod6-method_method_table">109.1.3 method method_table</h2>
 <pre class="code">method method_table(Metamodel::MethodContainer:D: $obj) returns Hash:D</pre>
 <p>Returns a hash where the keys are method names, and the values are <a href="#_type_Method.pod6">methods</a>. Note that the keys are the names by which the methods can be called, not necessarily the names by which the methods know themselves.</p>
 TODO: submethod_table, declares_method, lookup, cache, cache_get, cache_add

</div> <!-- /type/Metamodel/MultipleInheritance.pod6 --><div class="pod-body"><a id="_type_Metamodel_MultipleInheritance.pod6"></a><a name="t110"><h1 class="title">110 role Metamodel::MultipleInheritance</h1></a> <p class="subtitle">Metaobject that supports multiple inheritance</p> <pre class="code">role Metamodel::MultipleInheritance { ... }</pre>
 <p>Classes, roles and grammars can have parent classes, that is, classes to which method lookups fall back to, and to whose type the child class conforms to.</p>
 <p>This role implements the capability of having zero, one or more parent (or <i>super</i>) classes.</p>
 <p>In addition, it supports the notion of <i>hidden</i> classes, whose methods are excluded from the normal dispatching chain, so that for example <span class="code">nextsame</span> ignores it.</p>
 <p>This can come in two flavors: methods from a class marked as <span class="code">is hidden</span> are generally excluded from dispatching chains, and <span class="code">class A hides B</span> adds <span class="code">B</span> as a parent class to <span class="code">A</span>, but hides it from the method resolution order, so that <a href="#_type_Metamodel::C3MRO.pod6-method mro_unhidden">mro_unhidden</a> skips it.</p>
 <a name="t110.1"></a><h1 id="_type_Metamodel_MultipleInheritance.pod6-Methods">110.1 Methods</h1>
 <a name="t110.1.1"></a><h2 id="_type_Metamodel_MultipleInheritance.pod6-method_add_parent">110.1.1 method add_parent</h2>
 <pre class="code">method add_parent(Metamodel::MultipleInheritance:D: $Obj, $parent, :$hides)</pre>
 <p>Adds <span class="code">$parent</span> as a parent type. If <span class="code">$hides</span> is set to a true value, the parent type is added as a hidden parent.</p>
 <p><span class="code">$parent</span> must be a fully <a href="#_language_mop.pod6-Composition_time_and_static_reasoning">composed</a> typed. Otherwise an exception of type <a href="#_type_X::Inheritance::NotComposed.pod6">X::Inheritance::NotComposed</a> is thrown.</p>
 <a name="t110.1.2"></a><h2 id="_type_Metamodel_MultipleInheritance.pod6-method_parents">110.1.2 method parents</h2>
 <pre class="code">method parents(Metamodel::MultipleInheritance:D: $obj, :$all, :$tree)</pre>
 <p>Returns the list of parent classes. By default it stops at <a href="#_type_Cool.pod6">Cool</a>, <a href="#_type_Any.pod6">Any</a> or <a href="#_type_Mu.pod6">Mu</a>, which you can suppress by supplying the <span class="code">:all</span> adverb. With <span class="code">:tree</span>, a nested list is returned.</p>
 <pre class="code">class D { };
class C1 is D { };
class C2 is D { };
class B is C1 is C2 { };
class A is B { };

say A.^parents(:all).perl;          # (B, C1, C2, D, Any, Mu)
say A.^parents(:all, :tree).perl;
    # ([B, [C1, [D, [Any, [Mu]]]], [C2, [D, [Any, [Mu]]]]],)</pre>
 <a name="t110.1.3"></a><h2 id="_type_Metamodel_MultipleInheritance.pod6-method_hides">110.1.3 method hides</h2>
 <pre class="code">method hides(Metamodel::MultipleInheritance:D: $obj)</pre>
 <p>Returns a list of all hidden parent classes.</p>
 <a name="t110.1.4"></a><h2 id="_type_Metamodel_MultipleInheritance.pod6-method_hidden">110.1.4 method hidden</h2>
 <pre class="code">method hidden(Metamodel::MultipleInheritance:D: $obj)</pre>
 <p>Returns a true value if (and only if) the class is marked <span class="code">is hidden</span>.</p>
 <a name="t110.1.5"></a><h2 id="_type_Metamodel_MultipleInheritance.pod6-method_set_hidden">110.1.5 method set_hidden</h2>
 <pre class="code">method set_hidden(Metamodel::MultipleInheritance:D: $obj)</pre>
 <p>Marks the type as hidden.</p>
</div> <!-- /type/Metamodel/Naming.pod6 --><div class="pod-body"><a id="_type_Metamodel_Naming.pod6"></a><a name="t111"><h1 class="title">111 role Metamodel::Naming</h1></a> <p class="subtitle">Metaobject that supports named types</p> <pre class="code">role Metamodel::Naming { }</pre>
 <p><a href="#_language_mop.pod6">Meta model</a> role for (optionally) named things, like classes, roles and enums.</p>
 <a name="t111.1"></a><h1 id="_type_Metamodel_Naming.pod6-Methods">111.1 Methods</h1>
 <a name="t111.1.1"></a><h2 id="_type_Metamodel_Naming.pod6-method_name">111.1.1 method name</h2>
 <pre class="code">method name($type)</pre>
 <p>Returns the name of the meta object, if any.</p>
 <pre class="code">say 42.^name;       # Int</pre>
 <a name="t111.1.2"></a><h2 id="_type_Metamodel_Naming.pod6-method_set_name">111.1.2 method set_name</h2>
 <pre class="code">method set_name($type, $new_name)</pre>
 <p>Sets the new name of the meta object.</p>
</div> <!-- /type/Metamodel/Primitives.pod6 --><div class="pod-body"><a id="_type_Metamodel_Primitives.pod6"></a><a name="t112"><h1 class="title">112 class Metamodel::Primitives</h1></a> <p class="subtitle">Metaobject that supports low-level type operations</p> <pre class="code">class Metamodel::Primitives is SuperClass { ... }</pre>
 <p><span class="code">Metamodel::Primitives</span> provides low-level operations for working with types, which are otherwise only available as implementation-dependent directives.</p>
 <p>These primitives are available as class methods.</p>
 <p>Here is an example that steals the meta model instance from the <a href="#_type_Int.pod6">Int</a> class to create a custom type (usually you would create your own meta class if you mess with something as low-level), which allows calling of just one method called <span class="code">why</span>:</p>
 <pre class="code">my Mu $type := Metamodel::Primitives.create_type(Int.HOW, 'P6opaque');
$type.^set_name('why oh why?');
my %methods =  why =&gt; sub ($) { say 42 };
Metamodel::Primitives.install_method_cache($type, %methods, :authoritative);
$type.why;      # 42
$type.list;     # No such method 'list' for invocant of type 'why oh why?'</pre>
 <a name="t112.1"></a><h1 id="_type_Metamodel_Primitives.pod6-Methods">112.1 Methods</h1>
 <a name="t112.1.1"></a><h2 id="_type_Metamodel_Primitives.pod6-method_create_type">112.1.1 method create_type</h2>
 <pre class="code">method create_type(Mu $how, $repr = 'P6opaque')</pre>
 <p>Creates and returns a new type from a meta object <span class="code">$how</span> and a representation name.</p>
 <a name="t112.1.2"></a><h2 id="_type_Metamodel_Primitives.pod6-method_set_package">112.1.2 method set_package</h2>
 <pre class="code">method set_package(Mu $type, $package)</pre>
 <p>Sets the package associated with the type.</p>
 <a name="t112.1.3"></a><h2 id="_type_Metamodel_Primitives.pod6-method_install_method_cache">112.1.3 method install_method_cache</h2>
 <pre class="code">method install_method_cache( Mu $type, %cache, :$authoritative = True)</pre>
 <p>Installs a method cache, that is, a mapping from method names to code objects. If <span class="code">:authoritative</span> is missing, or set to <span class="code">True</span>, then calls of methods that do not exist in the cache will throw an exception of type <a href="#_type_X::Method::NotFound.pod6">X::Method::NotFound</a>. If <span class="code">:authoritative</span> is set to <span class="code">False</span>, the usual fallback mechanism are tried.</p>
 <a name="t112.1.4"></a><h2 id="_type_Metamodel_Primitives.pod6-method_configure_type_checking">112.1.4 method configure_type_checking</h2>
 <pre class="code">method configure_type_checking(
    Mu $type,
    @cache,
    :$authoritative = True,
    :$call_accepts = False
)</pre>
 <p>Configures the type checking for <span class="code">$type</span>. <span class="code">@cache</span> is a list of known types against which <span class="code">$type</span> checks positively (so in a classical class-based system, the type itself and all recursive superclasses). If <span class="code">:authoritative</span> is missing or <span class="code">True</span>, this type will fail checks against all types not in <span class="code">@cache</span>. If <span class="code">:call_accepts</span> is True, the method <a href="#_routine_ACCEPTS.pod6">ACCEPTS</a> will be called for type checks against this type.</p>
 <a name="t112.1.5"></a><h2 id="_type_Metamodel_Primitives.pod6-method_configure_destroy">112.1.5 method configure_destroy</h2>
 <pre class="code">method configure_destroy(Mu $type, $destroy)</pre>
 <p>Configures whether <span class="code">DESTROY</span> methods are called (if present) when the garbage collector collects an object of this type (if <span class="code">$destroy</span> is set to a true value). This comes with a performance overhead, so should only be set to a true value if necessary.</p>
 <a name="t112.1.6"></a><h2 id="_type_Metamodel_Primitives.pod6-method_compose_type">112.1.6 method compose_type</h2>
 <pre class="code">method compose_type(Mu $type, $configuration)</pre>
 <p>Composes <span class="code">$type</span> (that is, finalizes it to be ready for instantiation). See <a href="https://github.com/perl6/nqp/blob/master/docs/6model/repr-compose-protocol.markdown">https://github.com/perl6/nqp/blob/master/docs/6model/repr-compose-protocol.markdown</a> for what <span class="code">$configuration</span> can contain (until we have better docs, sorry).</p>
 <a name="t112.1.7"></a><h2 id="_type_Metamodel_Primitives.pod6-method_rebless">112.1.7 method rebless</h2>
 <pre class="code">method rebless(Mu $object, Mu $type)</pre>
 <p>Changes <span class="code">$obj</span> to be of type <span class="code">$type</span>. This only works if <span class="code">$type</span> type-checks against the current type of <span class="code">$obj</span>, and if the storage of <span class="code">$object</span> is a subset of that of <span class="code">$type</span>.</p>
 <a name="t112.1.8"></a><h2 id="_type_Metamodel_Primitives.pod6-method_is_type">112.1.8 method is_type</h2>
 <pre class="code">method is_type(Mu \obj, Mu \type) returns Bool:D</pre>
 <p>Type-checks <span class="code">obj</span> against <span class="code">type</span></p>
</div> <!-- /type/Metamodel/PrivateMethodContainer.pod6 --><div class="pod-body"><a id="_type_Metamodel_PrivateMethodContainer.pod6"></a><a name="t113"><h1 class="title">113 role Metamodel::PrivateMethodContainer</h1></a> <p class="subtitle">Metaobject that supports private methods</p> <pre class="code">role Metamodel::PrivateMethodContainer { ... }</pre>
 <p>In Perl 6, classes, roles and grammars can have private methods, that is, methods that are only callable from within the class, and are not inherited to types derived by inheritance.</p>
 <pre class="code">class A {
    # the ! declares a private method
    method !double($x) {
        say 2 * $x;
    }
    method call-double($y) {
        # call with ! instead of .
        self!double($y);
    }
}</pre>
 <p>For the purposes of dispatching and scoping, private methods are closer to subroutines than to methods. However they share access to <span class="code">self</span> and attributes with methods.</p>
 <a name="t113.1"></a><h1 id="_type_Metamodel_PrivateMethodContainer.pod6-Methods">113.1 Methods</h1>
 <a name="t113.1.1"></a><h2 id="_type_Metamodel_PrivateMethodContainer.pod6-method_add_private_method">113.1.1 method add_private_method</h2>
 <pre class="code">method add_private_method(Metamodel::PrivateMethodContainer: $obj, $name, $code)</pre>
 <p>Adds a private method <span class="code">$code</span> with name <span class="code">$name</span>.</p>
 <a name="t113.1.2"></a><h2 id="_type_Metamodel_PrivateMethodContainer.pod6-method_private_method_table">113.1.2 method private_method_table</h2>
 <pre class="code">method private_method_table(Metamodel::PrivateMethodContainer: $obj)</pre>
 <p>Returns a hash of <span class="code">name => &amp;method_object</span></p>
 TODO: document find_private_method, once we've figured out how to represent
or catch nqp::null in Perl 6 land

</div> <!-- /type/Metamodel/RoleContainer.pod6 --><div class="pod-body"><a id="_type_Metamodel_RoleContainer.pod6"></a><a name="t114"><h1 class="title">114 role Metamodel::RoleContainer</h1></a> <p class="subtitle">Metaobject that supports holding/containing roles</p> <pre class="code">role Metamodel::RoleContainer { ... }</pre>
 <p>Implements the ability to hold roles to be held for composition.</p>
 <pre class="code">class A does SomeRole { ... }</pre>
 <p>roughly corresponds to</p>
 <pre class="code">class A {
    BEGIN A.^add_role(SomeRole);
}</pre>
 <a name="t114.1"></a><h1 id="_type_Metamodel_RoleContainer.pod6-Methods">114.1 Methods</h1>
 <a name="t114.1.1"></a><h2 id="_type_Metamodel_RoleContainer.pod6-method_add_role">114.1.1 method add_role</h2>
 <pre class="code">method add_role(Metamodel::RoleContainer:D: $obj, Mu $role)</pre>
 <p>Adds the <span class="code">$role</span> to the list of roles to be composed.</p>
 <a name="t114.1.2"></a><h2 id="_type_Metamodel_RoleContainer.pod6-method_roles_to_compose">114.1.2 method roles_to_compose</h2>
 <pre class="code">method roles_to_compose(Metamodel::RoleContainer:D: $obj) returns List:D</pre>
 <p>returns a list of roles added with <span class="code">add_role</span>, which are to be composed at type composition time.</p>
</div> <!-- /type/Metamodel/Trusting.pod6 --><div class="pod-body"><a id="_type_Metamodel_Trusting.pod6"></a><a name="t115"><h1 class="title">115 role Metamodel::Trusting</h1></a> <p class="subtitle">Metaobject that supports trust relations between types</p> <pre class="code">role Metamodel::Trusting is SuperClass { ... }</pre>
 <p>Normally, code in a class or role can only access its own private methods. If another type declares that it trusts that first class, then access to private methods of that second type is possible. <span class="code">Metamodel::Trusting</span> implements that aspect of the Perl 6 object system.</p>
 <pre class="code">class A {
    my class B {
        trusts A;   # that's where Metamodel::Trusting comes in
        method !private_method() {
            say "Private method in B";
        }
    }
    method build-and-poke {
        # call a private method from B
        # disallowed if A doesn't trust B
        B.new()!B::private_method();
    }
}

A.build-and-poke    # Private method in A</pre>
 <a name="t115.1"></a><h1 id="_type_Metamodel_Trusting.pod6-Methods">115.1 Methods</h1>
 <a name="t115.1.1"></a><h2 id="_type_Metamodel_Trusting.pod6-method_add_trustee">115.1.1 method add_trustee</h2>
 <pre class="code">method add_trustee(Metamodel::Trusting:D: $type, Mu $trustee)</pre>
 <p>Trust <span class="code">$trustee</span>.</p>
 <pre class="code">class A {
    BEGIN A.^add_trustee(B);
    # same as 'trusts B';
}</pre>
 <a name="t115.1.2"></a><h2 id="_type_Metamodel_Trusting.pod6-method_trusts">115.1.2 method trusts</h2>
 <pre class="code">method trusts(Metamodel::Trusting:D: $type) returns List</pre>
 <p>Returns a list of types that the invocant trusts.</p>
 <pre class="code">class A { trusts Int; };
say .^name for A.^trusts;       # Int</pre>
 <a name="t115.1.3"></a><h2 id="_type_Metamodel_Trusting.pod6-method_is_trusted">115.1.3 method is_trusted</h2>
 <pre class="code">method is_trusted(Metamodel::Trusting:D: $type, $claimant)</pre>
 <p>Returns 1 if <span class="code">$type</span> trusts <span class="code">$claimant</span>, and 0 otherwise. Types always trust themselves.</p>
</div> <!-- /type/Method.pod6 --><div class="pod-body"><a id="_type_Method.pod6"></a><a name="t116"><h1 class="title">116 class Method</h1></a> <p class="subtitle">Member function</p> <pre class="code">class Method is Routine { }</pre>
 <p>A type for methods. To create a method outside a <a href="#_language_typesystem.pod6-Methods">class definition</a>, use the declarators <span class="code">my</span> and <span class="code">method</span>:</p>
 <pre class="code">my $m = method ($invocant: $param) {
    say "$invocant: '$param'";
}
"greeting".$m("hello");         # greeting: 'hello'

&amp;lt;a b c&gt;.&amp;amp;(my method (List:D:){dd self; self}).say;
# OUTPUT«("a", "b", "c")␤(a b c)␤»</pre>
</div> <!-- /type/Mix.pod6 --><div class="pod-body"><a id="_type_Mix.pod6"></a><a name="t117"><h1 class="title">117 class Mix</h1></a> <p class="subtitle">Immutable collection of distinct objects with Real weights</p> <pre class="code">class Mix does Mixy { }</pre>
 <p>A <span class="code">Mix</span> is an immutable mix, meaning a collection of distinct elements in no particular order that each have a real-number weight assigned to them. (For <i>mutable</i> mixes, see <a href="#_type_MixHash.pod6">MixHash</a> instead.)</p>
 <p><span class="code">Mix</span>es are often used for performing weighted random selections - see <a href="#_routine_roll.pod6">.roll</a>.</p>
 <p>Objects/values of any type are allowed as mix elements. Within a <span class="code">Mix</span>, items that would compare positively with the <a href="===">===</a> operator are considered the same element, with a combined weight.</p>
 <pre class="code">my $recipe = (butter =&gt; 0.22, sugar =&gt; 0.1, 
               flour =&gt; 0.275, sugar =&gt; 0.02).Mix 
 
 say $recipe.elems;      # 3 
 say $recipe.keys.sort;  # butter flour sugar 
 say $recipe.pairs.sort; # "butter" =&gt; 0.22 "flour" =&gt; 0.275 "sugar" =&gt; 0.12 
 say $recipe.total;      # 0.615 
</pre>
 <p><span class="code">Mix</span>es can be treated as object hashes using the <span class="code">{ }</span> postcircumfix operator, which returns the corresponding numeric weight for keys that are elements of the mix, and <span class="code">0</span> for keys that aren't:</p>
 <pre class="code">say $recipe&amp;lt;butter&gt;;     # 0.22
say $recipe&amp;lt;sugar&gt;;      # 0.12
say $recipe&amp;lt;chocolate&gt;;  # 0</pre>
 <a name="t117.1"></a><h1 id="_type_Mix.pod6-Creating_Mix_objects">117.1 Creating <span class="code">Mix</span> objects</h1>
 <p><span class="code">Mix</span>es can be composed using the <a href="#116-sub mix">mix</a> subroutine (or <span class="code">Mix.new</span>, for which it is a shorthand). Any positional parameters, regardless of their type, become elements of the mix - with a weight of <span class="code">1</span> for each time the parameter occurred:</p>
 <pre class="code">my $n = mix "a", "a", "b" =&gt; 0, "c" =&gt; 3.14;
say $n.keys.map(&amp;amp;WHAT);  # (Str) (Pair) (Pair)
say $n.pairs;            # "a" =&gt; 2 ("b" =&gt; 0) =&gt; 1 ("c" =&gt; 3.14) =&gt; 1</pre>
 <p>Alternatively, the <span class="code">.Mix</span> coercer (or its functional form, <span class="code">Mix()</span>) can be called on an existing object to coerce it to a <span class="code">Mix</span>. Its semantics depend on the type and contents of the object. In general it evaluates the object in list context and creates a mix with the resulting items as elements, although for Hash-like objects or Pair items, only the keys become elements of the mix, and the (cumulative) values become the associated numeric weights:</p>
 <pre class="code">my $n = ("a", "a", "b" =&gt; 0, "c" =&gt; 3.14).Mix;
say $n.keys.map(&amp;amp;WHAT);  # (Str) (Str)
say $n.pairs;            # "a" =&gt; 2 "c" =&gt; 3.14</pre>
 <a name="t117.2"></a><h1 id="_type_Mix.pod6-Operators">117.2 Operators</h1>
 TODO: Expand this section (using the corresponding section in lib/Type/Bag.pod
as a guide) after ab5tract's set/bag/mix operator redesign.
 <p>See <a href="#_language_setbagmix.pod6-Set/Bag_Operators">Set/Bag Operators</a> for a complete list of set and bag operators with detailed explanations.</p>
 <a name="t117.2.1"></a><h2 id="_type_Mix.pod6-sub_mix">117.2.1 sub mix</h2>
 <pre class="code">sub mix(*@args --&gt; Mix)</pre>
 <p>Creates a new <span class="code">Mix</span> from <span class="code">@args</span>.</p>
 <a name="t117.3"></a><h1 id="_type_Mix.pod6-See_Also">117.3 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/MixHash.pod6 --><div class="pod-body"><a id="_type_MixHash.pod6"></a><a name="t118"><h1 class="title">118 class MixHash</h1></a> <p class="subtitle">Mutable collection of distinct objects with Real weights</p> <pre class="code">class MixHash does Mixy { }</pre>
 <p>A <span class="code">MixHash</span> is a mutable mix, meaning a collection of distinct elements in no particular order that each have a real-number weight assigned to them. (For <i>immutable</i> mixes, see <a href="#_type_Mix.pod6">Mix</a> instead.)</p>
 <p>Objects/values of any type are allowed as mix elements. Within a <span class="code">MixHash</span>, items that would compare positively with the <a href="===">===</a> operator are considered the same element, with a combined weight.</p>
 <pre class="code">my $recipe = (butter =&gt; 0.22, sugar =&gt; 0.1, 
               flour =&gt; 0.275, sugar =&gt; 0.02).MixHash 
 
 say $recipe.elems;      # 3 
 say $recipe.keys.sort;  # butter flour sugar 
 say $recipe.pairs.sort; # "butter" =&gt; 0.22 "flour" =&gt; 0.275 "sugar" =&gt; 0.12 
 say $recipe.total;      # 0.615 
</pre>
 <p><span class="code">MixHash</span>es can be treated as object hashes using the <span class="code">{ }</span> postcircumfix operator, which returns the corresponding numeric weight for keys that are elements of the mix, and <span class="code">0</span> for keys that aren't. It can also be used to modify weights; Setting a weight to <span class="code">0</span> automatically removes that element from the mix, and setting a weight to a non-zero number adds that element if it didn't already exist:</p>
 <pre class="code">say $recipe&amp;lt;butter&gt;;     # 0.22 
 say $recipe&amp;lt;sugar&gt;;      # 0.12 
 say $recipe&amp;lt;chocolate&gt;;  # 0 
 
 $recipe&amp;lt;butter&gt; = 0; 
 $recipe&amp;lt;chocolate&gt; = 0.30; 
 say $recipe.pairs;       # "sugar" =&gt; 0.12 "flour" =&gt; 0.275 "chocolate" =&gt; 0.3 
</pre>
 <a name="t118.1"></a><h1 id="_type_MixHash.pod6-Creating_MixHash_objects">118.1 Creating <span class="code">MixHash</span> objects</h1>
 <p><span class="code">MixHash</span>es can be composed using <span class="code">MixHash.new</span>. Any positional parameters, regardless of their type, become elements of the mix - with a weight of <span class="code">1</span> for each time the parameter occurred:</p>
 <pre class="code">my $n = MixHash.new: "a", "a", "b" =&gt; 0, "c" =&gt; 3.14;
say $n.keys.map(&amp;amp;WHAT);  # (Str) (Pair) (Pair)
say $n.pairs;            # "a" =&gt; 2 ("b" =&gt; 0) =&gt; 1 ("c" =&gt; 3.14) =&gt; 1</pre>
 <p>Alternatively, the <span class="code">.MixHash</span> coercer (or its functional form, <span class="code">MixHash()</span>) can be called on an existing object to coerce it to a <span class="code">MixHash</span>. Its semantics depend on the type and contents of the object. In general it evaluates the object in list context and creates a mix with the resulting items as elements, although for Hash-like objects or Pair items, only the keys become elements of the mix, and the (cumulative) values become the associated numeric weights:</p>
 <pre class="code">my $n = ("a", "a", "b" =&gt; 0, "c" =&gt; 3.14).MixHash;
say $n.keys.map(&amp;amp;WHAT);  # (Str) (Str)
say $n.pairs;            # "a" =&gt; 2 "c" =&gt; 3.14</pre>
 <a name="t118.2"></a><h1 id="_type_MixHash.pod6-Operators">118.2 Operators</h1>
 TODO: Expand this section (using the corresponding section in
lib/Type/BagHash.pod as a guide) after ab5tract's set/bag/mix operator redesign.

 <p>See <a href="#_language_setbagmix.pod6-Set/Bag_Operators">Set/Bag Operators</a> for a complete list of set and bag operators with detailed explanations.</p>
 <a name="t118.3"></a><h1 id="_type_MixHash.pod6-See_Also">118.3 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/Mixy.pod6 --><div class="pod-body"><a id="_type_Mixy.pod6"></a><a name="t119"><h1 class="title">119 role Mixy</h1></a> <p class="subtitle">Collection of distinct objects with Real weights</p> <pre class="code">role Mixy does Baggy { }</pre>
 <p>A role for collections of weighted values. See <a href="#_type_Mix.pod6">Mix</a> and <a href="#_type_MixHash.pod6">MixHash</a>. <span class="code">Mixy</span> objects differ from <a href="#_type_Baggy.pod6">Baggy</a> objects in that the weights of <span class="code">Mixy</span> are <a href="#_type_Real.pod6">Real</a>s rather than <a href="#_type_Int.pod6">Int</a>s.</p>
 <a name="t119.1"></a><h1 id="_type_Mixy.pod6-Methods">119.1 Methods</h1>
 <a name="t119.1.1"></a><h2 id="_type_Mixy.pod6-method_total">119.1.1 method total</h2>
 <pre class="code">method total(--&gt; Real)</pre>
 <p>Returns the sum of all the weights</p>
 <pre class="code">mix('a', 'b', 'c', 'a', 'a', 'd').total == 6; # True
{a =&gt; 5.6, b =&gt; 2.4}.Mix.total == 8; # True</pre>
 <a name="t119.1.2"></a><h2 id="_type_Mixy.pod6-method_roll">119.1.2 method roll</h2>
 <pre class="code">method roll($count = 1)</pre>
 <p>Similar to a <a href="#_type_Bag.pod6">Bag</a>.roll, but with <span class="code">Real</span> weights rather than integral ones.</p>
 <a name="t119.2"></a><h1 id="_type_Mixy.pod6-See_Also">119.2 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/Mu.pod6 --><div class="pod-body"><a id="_type_Mu.pod6"></a><a name="t120"><h1 class="title">120 class Mu</h1></a> <p class="subtitle">The root of the Perl 6 type hierarchy.</p> <pre class="code">class Mu { ... }</pre>
 <p>The root of the Perl 6 type hierarchy. For the origin of the name, see <a href="https://en.wikipedia.org/wiki/Mu_%28negative%29">https://en.wikipedia.org/wiki/Mu_%28negative%29</a>. One can also say that there are many undefined values in Perl 6, and <span class="code">Mu</span> is the <i>most undefined</i> value.</p>
 <p>Note that most classes do not derive from <span class="code">Mu</span> directly, but rather from <a href="#_type_Any.pod6">Any</a>.</p>
 <a name="t120.1"></a><h1 id="_type_Mu.pod6-Methods">120.1 Methods</h1>
 <a name="t120.1.1"></a><h2 id="_type_Mu.pod6-routine_defined">120.1.1 routine defined</h2>
 <pre class="code">multi sub    defined(Mu) returns Bool:D
multi method defined()   returns Bool:D</pre>
 <p>Returns <span class="code">False</span> on the type object, and <span class="code">True</span> otherwise.</p>
 <pre class="code">say Int.defined;                # False
say 42.defined;                 # True</pre>
 <p>Very few types (like <a href="#_type_Failure.pod6">Failure</a>) override <span class="code">defined</span> to return <span class="code">False</span> even for instances:</p>
 <pre class="code">sub fails() { fail 'oh noe' };
say fails().defined;            # False</pre>
 <a name="t120.1.2"></a><h2 id="_type_Mu.pod6-routine_isa">120.1.2 routine isa</h2>
 <pre class="code">multi method isa(Mu $type)      returns Bool:D
multi method isa(Str:D $type)   returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if the invocant is an instance of class <span class="code">$type</span>, a subset type or a derived class (through inheritance) of <span class="code">$type</span>.</p>
 <pre class="code">my $i = 17;
say $i.isa("Int");   # True
say $i.isa(Any);     # True</pre>
 <p>A more idiomatic way to do this is to use the smartmatch operator <a href="#_routine_~~.pod6">~~</a> instead.</p>
 <pre class="code">my $s = "String";
say $s ~~ Str;       # True</pre>
 <a name="t120.1.3"></a><h2 id="_type_Mu.pod6-routine_does">120.1.3 routine does</h2>
 <pre class="code">method does(Mu $type)      returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if and only if the invocant conforms to type <span class="code">$type</span>.</p>
 <pre class="code">my $d = Date.new('2016-06-03');
say $d.does(Dateish);             # True    (Date does role Dateish)
say $d.does(Any);                 # True    (Date is a subclass of Any)
say $d.does(DateTime);            # False   (Date is not a subclass of DateTime)</pre>
 <p>Using the smart match operator <a href="#_routine_~~.pod6">~~</a> is a more idiomatic alternative.</p>
 <pre class="code">my $d = Date.new('2016-06-03');
say $d ~~ Dateish;                # True
say $d ~~ Any;                    # True
say $d ~~ DateTime;               # False</pre>
 <a name="t120.1.4"></a><h2 id="_type_Mu.pod6-routine_Bool">120.1.4 routine Bool</h2>
 <pre class="code">multi sub    Bool(Mu) returns Bool:D
multi method Bool()   returns Bool:D</pre>
 <p>Returns <span class="code">False</span> on the type object, and <span class="code">True</span> otherwise.</p>
 <p>Many built-in types override this to be <span class="code">False</span> for empty collections, the empty <a href="#_type_Str.pod6">string</a> or numerical zeros</p>
 <pre class="code">say Mu.Bool;                    # False
say Mu.new.Bool;                # True
say [1, 2, 3].Bool;             # True
say [].Bool;                    # False
say { 'hash' =&gt; 'full'}.Bool;   # True
say {}.Bool;                    # False</pre>
 <a name="t120.1.5"></a><h2 id="_type_Mu.pod6-method_Str">120.1.5 method Str</h2>
 <pre class="code">multi method Str()   returns Str</pre>
 <p>Returns a string representation of the invocant, intended to be machine readable. Method <span class="code">Str</span> warns on type objects, and produces the empty string.</p>
 <pre class="code">say Mu.Str;                     #!&gt; use of uninitialized value of type Mu in string context</pre>
 <a name="t120.1.6"></a><h2 id="_type_Mu.pod6-routine_gist">120.1.6 routine gist</h2>
 <pre class="code">multi sub    gist(Mu) returns Str
multi method gist()   returns Str</pre>
 <p>Returns a string representation of the invocant, optimized for fast recognition by humans. As such lists will be truncated at 100 elements. Use <span class="code">.perl</span> to get all elements.</p>
 <p>The default <span class="code">gist</span> method in <span class="code">Mu</span> re-dispatches to the <a href="#_routine_perl.pod6">perl</a> method for defined invocants, and returns the type name in parenthesis for type object invocants. Many built-in classes override the case of instances to something more specific that may truncate output.</p>
 <p><span class="code">gist</span> is the method that <a href="#_routine_say.pod6">say</a> calls implicitly, so <span class="code">say $something</span> and <span class="code">say $something.gist</span> generally produce the same output.</p>
 <pre class="code">say Mu.gist;        # (Mu)
say Mu.new.gist;    # Mu.new()</pre>
 <a name="t120.1.7"></a><h2 id="_type_Mu.pod6-routine_perl">120.1.7 routine perl</h2>
 <pre class="code">multi sub    perl(Mu) returns Str
multi method perl()   returns Str</pre>
 <p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with <a href="#_routine_EVAL.pod6">EVAL</a> to regenerate the object). The exact output of <span class="code">perl</span> is implementation specific, since there are generally many ways to write a Perl expression that produces a particular value</p>
 <a name="t120.1.8"></a><h2 id="_type_Mu.pod6-method_clone">120.1.8 method clone</h2>
 <pre class="code">method clone(*%twiddles)</pre>
 <p>Creates a shallow clone of the invocant. If named arguments are passed to it, their values are used in every place where an attribute name matches the name of a named argument.</p>
 <pre class="code">class Point2D { 
     has ($.x, $.y); 
     multi method gist(Point2D:D:) { 
         "Point($.x, $.y)"; 
     } 
 } 
 
 my $p = Point2D.new(x =&gt; 2, y =&gt; 3); 
 
 say $p;                     # Point(2, 3) 
 say $p.clone(y =&gt; -5);      # Point(2, -5) 
</pre>
 <a name="t120.1.9"></a><h2 id="_type_Mu.pod6-method_new">120.1.9 method new</h2>
 <pre class="code">multi method new(*%attrinit)</pre>
 <p>Default method for constructing (create + initialize) new objects of a class. This method expects only named arguments which are then used to initialize attributes with accessors of the same name.</p>
 <p>Classes may provide their own <span class="code">new</span> method to override this default.</p>
 <p><span class="code">new</span> triggers an object construction mechanism that calls submethods named <span class="code">BUILD</span> in each class of an inheritance hierarchy, if they exist. See <a href="#_language_objects.pod6-Object_Construction">the documentation on object construction</a> for more information.</p>
 <a name="t120.1.10"></a><h2 id="_type_Mu.pod6-method_bless">120.1.10 method bless</h2>
 <pre class="code">method bless(*%attrinit) returns Mu:D</pre>
 <p>Lower-level object construction method than <span class="code">new</span>.</p>
 <p>Creates a new object of the same type as the invocant, uses the named arguments to initialize attributes, and returns the created object.</p>
 <p>You can use this method when writing custom constructors:</p>
 <pre class="code">class Point {
    has $.x;
    has $.y;
    multi method new($x, $y) {
        self.bless(:$x, :$y);
    }
}
my $p = Point.new(-1, 1);</pre>
 <p>(Though each time you write a custom constructor, remember that it makes subclassing harder).</p>
 <a name="t120.1.11"></a><h2 id="_type_Mu.pod6-method_CREATE">120.1.11 method CREATE</h2>
 <pre class="code">method CREATE() returns Mu:D</pre>
 <p>Allocates a new object of the same type as the invocant, without initializing any attributes.</p>
 <pre class="code">say Mu.CREATE.defined;  # True</pre>
 <a name="t120.1.12"></a><h2 id="_type_Mu.pod6-method_print">120.1.12 method print</h2>
 <pre class="code">multi method print() returns Bool:D</pre>
 <p>Prints value to <span class="code">$*OUT</span> after stringification using <span class="code">.Str</span> method without adding a newline at end.</p>
 <pre class="code">"abc\n".print;          # abc␤</pre>
 <a name="t120.1.13"></a><h2 id="_type_Mu.pod6-method_put">120.1.13 method put</h2>
 <pre class="code">multi method put() returns Bool:D</pre>
 <p>Prints value to <span class="code">$*OUT</span> after stringification using <span class="code">.Str</span> method adding a newline at end.</p>
 <pre class="code">"abc".put;              # abc␤</pre>
 <a name="t120.1.14"></a><h2 id="_type_Mu.pod6-method_say">120.1.14 method say</h2>
 <pre class="code">multi method say() returns Bool:D</pre>
 <p>Prints value to <span class="code">$*OUT</span> after stringification using <span class="code">.gist</span> method with newline at end. To produce machine readable output use <span class="code">.put</span>.</p>
 <pre class="code">say 42;                 # 42␤</pre>
 <a name="t120.1.15"></a><h2 id="_type_Mu.pod6-method_ACCEPTS">120.1.15 method ACCEPTS</h2>
 <pre class="code">multi method ACCEPTS(Mu:U: $other)</pre>
 <p><span class="code">ACCEPTS</span> is the method that smart matching with the <a href="#_routine_~~.pod6">infix ~~</a> operator and given/when invokes on the right-hand side (the matcher).</p>
 <p>The <span class="code">Mu:U</span> multi performs a type check. Returns <span class="code">True</span> if <span class="code">$other</span> conforms to the invocant (which is always a type object or failure).</p>
 <pre class="code">say 42 ~~ Mu;           # True
say 42 ~~ Int;          # True
say 42 ~~ Str;          # False</pre>
 <p>Note that there is no multi for defined invocants; this is to allow autothreading of <a href="#_type_Junction.pod6">junctions</a>, which happens as a fallback mechanism when no direct candidate is available to dispatch to.</p>
 <a name="t120.1.16"></a><h2 id="_type_Mu.pod6-method_WHICH">120.1.16 method WHICH</h2>
 <pre class="code">multi method WHICH() returns ObjAt:D</pre>
 <p>Returns an object of type <a href="#_type_ObjAt.pod6">ObjAt</a> which uniquely identifies the object. Value types override this method which makes sure that two equivalent objects return the same return value from <span class="code">WHICH</span>.</p>
 <pre class="code">say 42.WHICH eq 42.WHICH;       # True</pre>
 <a name="t120.1.17"></a><h2 id="_type_Mu.pod6-method_WHERE">120.1.17 method WHERE</h2>
 <pre class="code">method WHERE() returns Int</pre>
 <p>Returns an <span class="code">Int</span> representing the memory address of the object.</p>
 <a name="t120.1.18"></a><h2 id="_type_Mu.pod6-method_WHY">120.1.18 method WHY</h2>
 <pre class="code">multi method WHY()</pre>
 <p>Returns the attached Pod value. For instance,</p>
 <pre class="code">    sub cast(Spell $s) 
     #= Initiate a specified spell normally 
     #= (do not use for class 7 spells) 
     { 
     do-raw-magic($s); 
     } 
     say &amp;amp;cast.WHY; 
</pre>
 <p>prints</p>
 <pre class="code">Initiate a specified spell normally (do not use for class 7 spells)</pre>
 <p>See the <a href="https://design.perl6.org/S26.html">documentation specification</a> for details about attaching Pod to variables, classes, functions, methods, etc.</p>
 <a name="t120.1.19"></a><h2 id="_type_Mu.pod6-trait_is_export">120.1.19 trait is export</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Mu:U \type, :$export!)</pre>
 <p>Marks a type as being exported, that is, available to external users.</p>
 <pre class="code">my class SomeClass is export { }</pre>
 <p>A user of a module or class automatically gets all the symbols imported that are marked as <span class="code">is export</span>.</p>
 <p>See <a href="#_language_modules.pod6-Exporting_and_Selective_Importing">Exporting and Selective Importing Modules</a> for more details.</p>
 <a name="t120.1.20"></a><h2 id="_type_Mu.pod6-method_return">120.1.20 method return</h2>
 <pre class="code">method return();</pre>
 <p>The method <span class="code">return</span> will stop execution of a subroutine or method, run all relevant <a href="#_language_phasers.pod6-Block_Phasers">phasers</a> and provide invocant as a return value to the caller. If a return <a href="#_type_Signature.pod6-Constraining_Return_Types">type constraint</a> is provided it will be checked unless the return value is <span class="code">Nil</span>. A control exception is raised and can be caught with <a href="#_language_phasers.pod6-CONTROL">CONTROL</a>.</p>
 <pre class="code">sub f { (1|2|3).return };
dd f(); # OUTPUT«any(1, 2, 3)␤»</pre>
 <a name="t120.1.21"></a><h2 id="_type_Mu.pod6-method_return-rw">120.1.21 method return-rw</h2>
 <p>Same as method <a href="#_type_Mu.pod6-return"> <span class="code">return</span> </a> but provides the invocant as a writeable container to the invocant.</p>
 <a name="t120.1.22"></a><h2 id="_type_Mu.pod6-method_take">120.1.22 method take</h2>
 <pre class="code">method take()</pre>
 <p>Takes the given item and passes it to the enclosing <span class="code">gather</span> block.</p>
 <pre class="code">#| randomly select numbers for lotto
my $num-selected-numbers = 6;
my $max-lotto-numbers = 49;
gather for ^$num-selected-numbers {
    take (1 .. $max-lotto-numbers).pick(1);
}.say;    #-&gt; 32 22 1 17 32 9  (for example)</pre>
 <a name="t120.1.23"></a><h2 id="_type_Mu.pod6-method_so">120.1.23 method so</h2>
 <pre class="code">method so()</pre>
 <p>Returns a <span class="code">Bool</span> value representing the logical non-negation of an expression. One can use this method similarly to the English sentence: "If that is <b>so</b>, then do this thing". For instance,</p>
 <pre class="code">my @args = &amp;lt;-a -e -b -v&gt;;
my $verbose-selected = any(@args) eq '-v' | '-V';
if $verbose-selected.so {
    say "Verbose option detected in arguments";
} #-&gt; Verbose option detected in arguments</pre>
 <a name="t120.1.24"></a><h2 id="_type_Mu.pod6-method_not">120.1.24 method not</h2>
 <pre class="code">method not()</pre>
 <p>Returns a <span class="code">Bool</span> value representing the logical negation of an expression. Thus it is the opposite of <span class="code">so</span>.</p>
 <pre class="code">my @args = &amp;lt;-a -e -b&gt;;
my $verbose-selected = any(@args) eq '-v' | '-V';
if $verbose-selected.not {
    say "Verbose option not present in arguments";
} #-&gt; Verbose option not present in arguments</pre>
 <p>Since there is also a prefix version of <span class="code">not</span>, the above code reads better like so:</p>
 <pre class="code">my @args = &amp;lt;-a -e -b&gt;;
my $verbose-selected = any(@args) eq '-v' | '-V';
if not $verbose-selected {
    say "Verbose option not present in arguments";
} #-&gt; Verbose option not present in arguments</pre>
</div> <!-- /type/NFC.pod6 --><div class="pod-body"><a id="_type_NFC.pod6"></a><a name="t121"><h1 class="title">121 class NFC</h1></a> <p class="subtitle">Codepoint-String in Normal Form C (Composed)</p> <pre class="code">class NFC is Uni { ... }</pre>
 <p>A Codepoint string in the "C" <a href="http://www.unicode.org/reports/tr15/">Unicode Normalization Form</a></p>
</div> <!-- /type/NFD.pod6 --><div class="pod-body"><a id="_type_NFD.pod6"></a><a name="t122"><h1 class="title">122 class NFD</h1></a> <p class="subtitle">Codepoint-String in Normal Form D (Decomposed)</p> <pre class="code">class NFD is Uni { ... }</pre>
 <p>A Codepoint string in the "D" <a href="http://www.unicode.org/reports/tr15/">Unicode Normalization Form</a></p>
</div> <!-- /type/NFKC.pod6 --><div class="pod-body"><a id="_type_NFKC.pod6"></a><a name="t123"><h1 class="title">123 class NFKC</h1></a> <p class="subtitle">Codepoint-String in Normal Form KC (Compatibility Composed)</p> <pre class="code">class NFKC is Uni { ... }</pre>
 <p>A Codepoint string in the "KC" <a href="http://www.unicode.org/reports/tr15/">Unicode Normalization Form</a></p>
</div> <!-- /type/NFKD.pod6 --><div class="pod-body"><a id="_type_NFKD.pod6"></a><a name="t124"><h1 class="title">124 class NFKD</h1></a> <p class="subtitle">Codepoint-String in Normal Form KD (Compatibility Decomposed)</p> <pre class="code">class NFKD is Uni { ... }</pre>
 <p>A Codepoint string in the "KD" <a href="http://www.unicode.org/reports/tr15/">Unicode Normalization Form</a></p>
</div> <!-- /type/Nil.pod6 --><div class="pod-body"><a id="_type_Nil.pod6"></a><a name="t125"><h1 class="title">125 class Nil</h1></a> <p class="subtitle">Absence of a value or a benign failure</p> <pre class="code">class Nil is Cool { }</pre>
 <p>The value <span class="code">Nil</span> may be used to fill a spot where a value would normally go, and in so doing, explicitly indicate that no value is present. It may also used as a cheaper and less explosive alternative to a <a href="#_type_Failure.pod6"> <span class="code">Failure</span> </a>.</p>
 <p>The class <span class="code">Nil</span> is the same exact thing as its only possible value, <span class="code">Nil</span>.</p>
 <pre class="code">say Nil === Nil.new         #-&gt; True</pre>
 <p>Along with <span class="code">Failure</span>, <span class="code">Nil</span> is one of the two types which may always be returned from a routine even when the routine specifies a particular return type. It may also be returned regardless of the definedness of the return type, however, <span class="code">Nil</span> is considered undefined for all other purposes.</p>
 <pre class="code">sub a( --&gt; Int:D ) { return Nil }
a().say;                    #-&gt; Nil</pre>
 <p><span class="code">Nil</span> is what is returned from empty routines or clauses, or routines that use a bare <span class="code">return</span> statement.</p>
 <pre class="code">sub a { }; a().say;         #-&gt; Nil
sub b { return }; b().say;  #-&gt; Nil
say (if 1 { });             #-&gt; Nil
{ ; }().say;                #-&gt; Nil
say EVAL "";                #-&gt; Nil</pre>
 <p>In a list, <span class="code">Nil</span> takes the space of one value. Iterating a <span class="code">Nil</span> behaves like iteration of any non-iterable value, producing a sequence of one <span class="code">Nil</span>.</p>
 <pre class="code">(1, Nil, 3).elems.say;      #-&gt; 3
(for Nil { $_ }).perl.say;  #-&gt; (Nil,)</pre>
 <p>Any method call on <span class="code">Nil</span> other than those specifically listed below, and consequently, any subscripting operation, will succeed and return <span class="code">Nil</span>.</p>
 <pre class="code">say Nil.ITotallyJustMadeThisUp;  #-&gt; Nil
say (Nil)[100];                  #-&gt; Nil
say (Nil){100};                  #-&gt; Nil</pre>
 <p>When assigned, a <span class="code">Nil</span> evaporates into the type object of the type of the container you assigned it into.</p>
 <pre class="code">my Int $x = 42;
$x = Nil;
$x.say;                     #-&gt; (Int)</pre>
 <p>Because an untyped variable is type <span class="code">Any</span>, assigning a <span class="code">Nil</span> to one will result in an <a href="#_type_Any.pod6">(Any)</a> type object.</p>
 <pre class="code">my $x = Nil;
$x.say;          #-&gt; (Any)
my Int $y = $x;  # error:  Type check failed in assignment to '$y';
                 # expected 'Int' but got 'Any'</pre>
 <p>If you are looking for a variable which transforms objects into type objects when said variable appears on the RHS, you can type the container as <span class="code">Nil</span>.</p>
 <pre class="code">my Nil $x;
my Str $s = $x;
$s.say;          #-&gt; (Str)</pre>
 <p>There is an important exception to this transforms-into-type-object rule: assigning <span class="code">Nil</span> to a variable which has a default will restore that default.</p>
 <pre class="code">my Int $x is default(42) = -1;
my $y = 1;
for $x, $y -&gt; $val is rw { $val = Nil unless $val &gt; 0 }
$x.say;          #-&gt; 42</pre>
 <a name="t125.1"></a><h1 id="_type_Nil.pod6-Methods">125.1 Methods</h1>
 <a name="t125.1.1"></a><h2 id="_type_Nil.pod6-method_append">125.1.1 method append</h2>
 <pre class="code">method append(*@)</pre>
 <p>Warns the user that they tried to append onto a <span class="code">Nil</span>.</p>
 <a name="t125.1.2"></a><h2 id="_type_Nil.pod6-method_gist">125.1.2 method gist</h2>
 <pre class="code">method gist() returns Str:D</pre>
 <p>Returns <span class="code">"Nil"</span>.</p>
 <a name="t125.1.3"></a><h2 id="_type_Nil.pod6-method_Str">125.1.3 method Str</h2>
 <pre class="code">method Str()</pre>
 <p>Warns the user that they tried to stringify a <span class="code">Nil</span>.</p>
 <a name="t125.1.4"></a><h2 id="_type_Nil.pod6-method_new">125.1.4 method new</h2>
 <pre class="code">method new(*@)</pre>
 <p>Returns <span class="code">Nil</span></p>
 <a name="t125.1.5"></a><h2 id="_type_Nil.pod6-method_prepend">125.1.5 method prepend</h2>
 <pre class="code">method prepend(*@)</pre>
 <p>Warns the user that they tried to prepend onto a <span class="code">Nil</span>.</p>
 <a name="t125.1.6"></a><h2 id="_type_Nil.pod6-method_push">125.1.6 method push</h2>
 <pre class="code">method push(*@)</pre>
 <p>Warns the user that they tried to push onto a <span class="code">Nil</span>.</p>
 <a name="t125.1.7"></a><h2 id="_type_Nil.pod6-method_unshift">125.1.7 method unshift</h2>
 <pre class="code">method unshift(*@)</pre>
 <p>Warns the user that they tried to unshift onto a <span class="code">Nil</span>.</p>
 <a name="t125.1.8"></a><h2 id="_type_Nil.pod6-method_Numeric">125.1.8 method Numeric</h2>
 <pre class="code">method Numeric()</pre>
 <p>Warns the user that they tried to numify a <span class="code">Nil</span>.</p>
</div> <!-- /type/Num.pod6 --><div class="pod-body"><a id="_type_Num.pod6"></a><a name="t126"><h1 class="title">126 class Num</h1></a> <p class="subtitle">Floating-point number</p> <pre class="code">class Num is Cool does Real { }</pre>
 <p>A <span class="code">Num</span> object stores a floating-point number. It is immutable. On most platforms, it's an IEEE 754 64-bit floating point numbers, aka "double precision".</p>
 <a name="t126.0.1"></a><h2 id="_type_Num.pod6-NaN">126.0.1 NaN</h2>
 <p>The value <span class="indexed"><a id="556" name="NaN (definition)"> <span class="code">NaN</span> </a></span> is an instance of <span class="code">Num</span> and represents a float point not-a-number value. It is defined and boolifies to True. <span class="code">NaN</span> is the result of undefined float point number operations and depends on the CPU or software implementation of float point numbers on the system running the code.</p>
 <a name="t126.0.2"></a><h2 id="_type_Num.pod6-method_rand">126.0.2 method rand</h2>
 <pre class="code">method rand(Num:D:) returns Num</pre>
 <p>Returns a pseudo random number between 0 and the invocant.</p>
 <a name="t126.0.3"></a><h2 id="_type_Num.pod6-sub_srand">126.0.3 sub srand</h2>
 <pre class="code">sub srand(Int $seed) returns Int:D</pre>
 <p>Seeds the pseudo random number generator used by <a href="#_type_Num.pod6-rand">Num.rand</a> with the provided value. Note that <span class="code">srand</span> is called with a platform dependent value when a Perl 6 program is started.</p>
</div> <!-- /type/NumStr.pod6 --><div class="pod-body"><a id="_type_NumStr.pod6"></a><a name="t127"><h1 class="title">127 class NumStr</h1></a> <p class="subtitle">Dual Value Floating-point number and String</p> <pre class="code">class NumStr is Num is Str</pre>
 <p>The dual value types (often referred to as <a href="#_language_glossary.pod6-Allomorph">allomorphs</a>) allow for the representation of a value as both a string and a numeric type, typically they will be created for you when the context is "stringy" but they can be determined to be numbers, such as in some <a href="#_language_quoting.pod6">quoting constructs</a>:</p>
 <pre class="code">my $f = &amp;lt;42.1e0&gt;; say $f.WHAT; # (NumStr)</pre>
 <p>A <span class="code">NumStr</span> can be used interchangeably where one might use a <a href="#_type_Str.pod6">Str</a> or a <a href="#_type_Num.pod6">Num</a> :</p>
 <pre class="code">my $f = &amp;lt;42.1e0&gt;;
my $i = $f + 0.1e0;
my $s = $f ~ " and a bit more";</pre>
 <a name="t127.1"></a><h1 id="_type_NumStr.pod6-Methods">127.1 Methods</h1>
 <a name="t127.1.1"></a><h2 id="_type_NumStr.pod6-method_new">127.1.1 method new</h2>
 <pre class="code">method new(Num $i, Str $s)</pre>
 <p>The constructor requires both the <span class="code">Num</span> and the <span class="code">Str</span> value, when constructing one directly the values can be whatever is required:</p>
 <pre class="code">my $f = NumStr.new(42.1e0, "forty two and a bit");
say +$f; # -&gt; 42.1
say ~$f; # -&gt; "forty two and a bit"</pre>
 <a name="t127.1.2"></a><h2 id="_type_NumStr.pod6-method_Numeric">127.1.2 method Numeric</h2>
 <pre class="code">method Numeric</pre>
 <p>The numeric coercion is applied when the <span class="code">NumStr</span> is used in a numeric context, such as a numeric comparison or smart match against a numeric value. It will return the <span class="code">Num</span> value.</p>
 <a name="t127.1.3"></a><h2 id="_type_NumStr.pod6-method_Num">127.1.3 method Num</h2>
 <pre class="code">method Num</pre>
 <p>Returns the <span class="code">Num</span> value of the <span class="code">NumStr</span>.</p>
 <a name="t127.1.4"></a><h2 id="_type_NumStr.pod6-method_Str">127.1.4 method Str</h2>
 <p>Returns the string value of the <span class="code">NumStr</span>.</p>
 <a name="t127.2"></a><h1 id="_type_NumStr.pod6-Operators">127.2 Operators</h1>
 <a name="t127.2.1"></a><h2 id="_type_NumStr.pod6-infix_cmp">127.2.1 infix cmp</h2>
 <pre class="code">multi sub infix:&amp;lt;cmp&gt;(NumStr:D $a, NumStr:D $b)</pre>
 <p>Compare two <span class="code">NumStr</span> objects. The comparison is done on the <span class="code">Num</span> value first and then on the <span class="code">Str</span> value. If you want to compare in a different order then you would coerce to a <span class="code">Num</span> or <span class="code">Str</span> value first:</p>
 <pre class="code">my $f = NumStr.new(42.1e0, "smaller");
my $g = NumStr.new(43.1e0, "larger");
say $f cmp $g;          # Less
say $f.Str cmp $g.Str;  # More</pre>
</div> <!-- /type/Numeric.pod6 --><div class="pod-body"><a id="_type_Numeric.pod6"></a><a name="t128"><h1 class="title">128 role Numeric</h1></a> <p class="subtitle">Number or object that can act as a number</p> <pre class="code">role Numeric { ... }</pre>
 <p>Common role for numbers and types that can act as numbers.</p>
 <p>Binary numeric operations return an object of the "wider" type:</p>
 <pre class="code">Int         narrowest
Rat
FatRat
Num
Complex     widest</pre>
 <p>So for example the product of a <a href="#_type_Rat.pod6">Rat</a> and an <a href="#_type_Int.pod6">Int</a> is a <a href="#_type_Rat.pod6">Rat</a>.</p>
 <p>Unary operations that in pure math usually return an irrational number generally return <a href="#_type_Num.pod6">Num</a> in Perl 6.</p>
 <a name="t128.1"></a><h1 id="_type_Numeric.pod6-Methods">128.1 Methods</h1>
 <a name="t128.1.1"></a><h2 id="_type_Numeric.pod6-method_Real">128.1.1 method Real</h2>
 <pre class="code">method Real(Numeric:D:) returns Real:D</pre>
 <p>If this <span class="code">Numeric</span> is equivalent to a <span class="code">Real</span>, return that <span class="code">Real</span>. Fail with <span class="code">X::Numeric::Real</span> otherwise.</p>
 <a name="t128.1.2"></a><h2 id="_type_Numeric.pod6-method_Int">128.1.2 method Int</h2>
 <pre class="code">method Int(Numeric:D:) returns Int:D</pre>
 <p>If this <span class="code">Numeric</span> is equivalent to a <span class="code">Real</span>, return the equivalent of calling <span class="code">truncate</span> on that <span class="code">Real</span> to get an <span class="code">Int</span>. Fail with <span class="code">X::Numeric::Real</span> otherwise.</p>
 <a name="t128.1.3"></a><h2 id="_type_Numeric.pod6-method_Rat">128.1.3 method Rat</h2>
 <pre class="code">method Rat(Numeric:D: Real $epsilon = 1.0e-6) returns Rat:D</pre>
 <p>If this <span class="code">Numeric</span> is equivalent to a <span class="code">Real</span>, return a <span class="code">Rat</span> which is within <span class="code">$epsilon</span> of that <span class="code">Real</span>'s value. Fail with <span class="code">X::Numeric::Real</span> otherwise.</p>
 <a name="t128.1.4"></a><h2 id="_type_Numeric.pod6-method_Num">128.1.4 method Num</h2>
 <pre class="code">method Num(Numeric:D:) returns Num:D</pre>
 <p>If this <span class="code">Numeric</span> is equivalent to a <span class="code">Real</span>, return that <span class="code">Real</span> as a <span class="code">Num</span> as accurately as is possible. Fail with <span class="code">X::Numeric::Real</span> otherwise.</p>
 <a name="t128.1.5"></a><h2 id="_type_Numeric.pod6-method_narrow">128.1.5 method narrow</h2>
 <pre class="code">method narrow(Numeric:D) returns Numeric:D</pre>
 <p>Returns the number converted to the narrowest type that can hold it without loss of precision.</p>
 <pre class="code">say (4.0 + 0i).narrow.perl;     # 4
say (4.0 + 0i).narrow.^name;    # Int</pre>
 <a name="t128.1.6"></a><h2 id="_type_Numeric.pod6-method_ACCEPTS">128.1.6 method ACCEPTS</h2>
 <pre class="code">multi method ACCEPTS(Numeric:D: $other)</pre>
 <p>Returns True if <span class="code">$other</span> is numerically the same as the invocant.</p>
 <a name="t128.1.7"></a><h2 id="_type_Numeric.pod6-routine_log">128.1.7 routine log</h2>
 <pre class="code">multi sub    log(Numeric:D, Numeric $base = e) returns Numeric:D
multi method log(Numeric:D: Numeric $base = e) returns Numeric:D</pre>
 <p>Calculates the logarithm to base <span class="code">$base</span>. Defaults to the natural logarithm.</p>
 <a name="t128.1.8"></a><h2 id="_type_Numeric.pod6-routine_log10">128.1.8 routine log10</h2>
 <pre class="code">multi sub    log10(Numeric:D ) returns Numeric:D
multi method log10(Numeric:D:) returns Numeric:D</pre>
 <p>Calculates the logarithm to base 10.</p>
 <a name="t128.1.9"></a><h2 id="_type_Numeric.pod6-routine_exp">128.1.9 routine exp</h2>
 <pre class="code">multi sub    exp(Numeric:D, Numeric:D $base = e) returns Numeric:D
multi method exp(Numeric:D: Numeric:D $base = e) returns Numeric:D</pre>
 <p>Returns <span class="code">$base</span> to the power of the number, or <span class="code">e</span> to the power of the number if called without a second argument.</p>
 <a name="t128.1.10"></a><h2 id="_type_Numeric.pod6-method_roots">128.1.10 method roots</h2>
 <pre class="code">multi method roots(Numeric:D: Int:D $n) returns Positional</pre>
 <p>Returns a list of the <span class="code">$n</span> complex roots, which evaluate to the original number when raised to the <span class="code">$n</span>th power.</p>
 <a name="t128.1.11"></a><h2 id="_type_Numeric.pod6-routine_abs">128.1.11 routine abs</h2>
 <pre class="code">multi sub    abs(Numeric:D ) returns Real:D
multi method abs(Numeric:D:) returns Real:D</pre>
 <p>Returns the absolute value of the number.</p>
 <a name="t128.1.12"></a><h2 id="_type_Numeric.pod6-routine_sqrt">128.1.12 routine sqrt</h2>
 <pre class="code">multi sub    sqrt(Numeric:D) returns Numeric:D
multi method sqrt(Numeric:D) returns Numeric:D</pre>
 <p>Returns a square root of the number. For real numbers the positive square root is returned.</p>
 <p>On negative real numbers, <span class="code">sqrt</span> returns <a href="#_type_Num.pod6-NaN"> <span class="code">NaN</span> </a> rather than a complex number, in order to not confuse people who are not familiar with complex arithmetic. If you want to calculate complex square roots, coerce to <span class="code">Complex</span> first, or use the <span class="code">roots</span> method.</p>
 <a name="t128.1.13"></a><h2 id="_type_Numeric.pod6-method_conj">128.1.13 method conj</h2>
 <pre class="code">multi method conj(Numeric:D) returns Numeric:D</pre>
 <p>Returns the complex conjugate of the number. Returns the number itself for real numbers.</p>
 <a name="t128.1.14"></a><h2 id="_type_Numeric.pod6-method_Bool">128.1.14 method Bool</h2>
 <pre class="code">multi method Bool(Numeric:D:)</pre>
 <p>Returns <span class="code">False</span> if the number is equivalent to zero, and <span class="code">True</span> otherwise.</p>
 <a name="t128.1.15"></a><h2 id="_type_Numeric.pod6-method_succ">128.1.15 method succ</h2>
 <pre class="code">method succ(Numeric:D:)</pre>
 <p>Returns the number incremented by one (successor).</p>
 <a name="t128.1.16"></a><h2 id="_type_Numeric.pod6-method_pred">128.1.16 method pred</h2>
 <pre class="code">method pred(Numeric:D:)</pre>
 <p>Returns the number decremented by one (predecessor).</p>
</div> <!-- /type/ObjAt.pod6 --><div class="pod-body"><a id="_type_ObjAt.pod6"></a><a name="t129"><h1 class="title">129 class ObjAt</h1></a> <p class="subtitle">Unique identification for an object</p> <pre class="code">class ObjAt { }</pre>
 <p>Objects of type <span class="code">ObjAt</span> are the return value of <span class="code">.WHICH</span> calls on other objects, and identify an object uniquely.</p>
 <p>If two objects compare equally via <span class="code">===</span>, their <span class="code">.WHICH</span> methods return the same ObjAt object.</p>
</div> <!-- /type/Order.pod6 --><div class="pod-body"><a id="_type_Order.pod6"></a><a name="t130"><h1 class="title">130 enum Order</h1></a> <p class="subtitle">Human readable form for comparison operators.</p> <pre class="code">enum Order (:Less(-1), :Same(0), :More(1));</pre>
 <a name="t130.1"></a><h1 id="_type_Order.pod6-Operators">130.1 Operators</h1>
 <a name="t130.1.1"></a><h2 id="_type_Order.pod6-infix_cmp">130.1.1 infix cmp</h2>
 <pre class="code">multi sub infix:&amp;lt;cmp&gt;(\a, \b) returns Order:D</pre>
 <p>Coerces it's arguments to Stringy.</p>
 <a name="t130.1.2"></a><h2 id="_type_Order.pod6-infix_&lt;=>">130.1.2 infix &lt;=></h2>
 <pre class="code">multi sub infix:«&amp;lt;=&gt;»(Int:D \a, Int:D \b) returns Order:D</pre>
 <p>Specialized form for Int.</p>
</div> <!-- /type/Pair.pod6 --><div class="pod-body"><a id="_type_Pair.pod6"></a><a name="t131"><h1 class="title">131 class Pair</h1></a> <p class="subtitle">Key/value pair</p> <pre class="code">class Pair does Associative { ... }</pre>
 <p>Consists of two parts, a <i>key</i> and a <i>value</i>. <span class="code">Pair</span>s can be seen as the atomic units in <span class="code">Hash</span>es, and they are also used in conjunction with named arguments and parameters.</p>
 <p><span class="indexed"><a id="557" name=":"></a></span> <span class="indexed"><a id="558" name="=&gt; "></a></span> <span class="indexed"><a id="559" name=":!"></a></span> <span class="indexed"><a id="560" name=":$"></a></span> There are many syntaxes for creating <span class="code">Pair</span>s:</p>
 <pre class="code">Pair.new('key', 'value') # The canonical way
'key' =&gt; 'value'         # this...
:key&amp;lt;value&gt;              # ...means the same as this
:key&amp;lt;value1 value2&gt;      # But this is  key =&gt; &amp;lt;value1 value2&gt;
:foo(127)                # short for  foo =&gt; 127
:127foo                  # the same   foo =&gt; 127</pre>
 <p>Variants of this are</p>
 <pre class="code">:key                     # same as   key =&gt; True
:!key                    # same as   key =&gt; False</pre>
 <p>Any variable can be turned into a <span class="code">Pair</span> of it's name and it's value.</p>
 <pre class="code">my $bar = 10;
my %h = :$bar;
dd %h; OUTPUT«Hash %h = {:bar(10)}␤»</pre>
 <a name="t131.1"></a><h1 id="_type_Pair.pod6-Methods">131.1 Methods</h1>
 <a name="t131.1.1"></a><h2 id="_type_Pair.pod6-method_antipair">131.1.1 method antipair</h2>
 <p>Defined as:</p>
 <pre class="code">method antipair() returns Pair:D</pre>
 <p>Usage:</p>
 <pre class="code">PAIR.antipair</pre>
 <p>Returns a new <span class="code">Pair</span> object with key and value exchanged.</p>
 <pre class="code">my $p = (6 =&gt; 'Perl').antipair;
say $p.key;         # Perl
say $p.value;       # 6</pre>
 <a name="t131.1.2"></a><h2 id="_type_Pair.pod6-method_key">131.1.2 method key</h2>
 <p>Defined as:</p>
 <pre class="code">multi method key(Pair:D:)</pre>
 <p>Usage:</p>
 <pre class="code">PAIR.key</pre>
 <p>Returns the <i>key</i> part of the <span class="code">Pair</span>.</p>
 <a name="t131.1.3"></a><h2 id="_type_Pair.pod6-method_value">131.1.3 method value</h2>
 <p>Defined as:</p>
 <pre class="code">multi method value(Pair:D:) is rw</pre>
 <p>Usage:</p>
 <pre class="code">PAIR.value</pre>
 <p>Returns the <i>value</i> part of the <span class="code">Pair</span>.</p>
 <a name="t131.1.4"></a><h2 id="_type_Pair.pod6-infix_cmp">131.1.4 infix cmp</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub infix:&amp;lt;cmp&gt;(Pair:D, Pair:D)</pre>
 <p>Usage:</p>
 <pre class="code">PAIR1 cmp PAIR2</pre>
 <p>The type-agnostic comparator; compares two <span class="code">Pair</span>s. Compares first their <i>key</i> parts, and then compares the <i>value</i> parts if the keys are equal.</p>
 <a name="t131.1.5"></a><h2 id="_type_Pair.pod6-method_fmt">131.1.5 method fmt</h2>
 <p>Defined as:</p>
 <pre class="code">multi method fmt(Pair:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">PAIR.fmt(FORMATSTRING)</pre>
 <p>Takes a <i>format string</i>, and returns a string the <i>key</i> and <i>value</i> parts of the <span class="code">Pair</span> formatted. Here's an example:</p>
 <pre class="code">my $pair = :Earth(1);
say $pair.fmt("%s is %.3f AU away from the sun")
# Prints "Earth is 1.000 AU away from the sun"</pre>
 <p>For more about format strings, see <a href="#_routine_sprintf.pod6">sprintf</a>.</p>
 <a name="t131.1.6"></a><h2 id="_type_Pair.pod6-method_kv">131.1.6 method kv</h2>
 <p>Defined as:</p>
 <pre class="code">multi method kv(Pair:D:) returns List:D</pre>
 <p>Usage:</p>
 <pre class="code">PAIR.kv</pre>
 <p>Returns a two-element <span class="code">List</span> with the <i>key</i> and <i>value</i> parts of <span class="code">Pair</span>, in that order. This method is a special case of the same-named method on <span class="code">Hash</span>, which returns all its entries as a list of keys and values.</p>
 <a name="t131.1.7"></a><h2 id="_type_Pair.pod6-method_pairs">131.1.7 method pairs</h2>
 <p>Defined as:</p>
 <pre class="code">multi method pairs(Pair:D:)</pre>
 <p>Usage:</p>
 <pre class="code">PAIR.pairs</pre>
 <p>Returns a list of one <span class="code">Pair</span>, namely this one.</p>
 <a name="t131.1.8"></a><h2 id="_type_Pair.pod6-method_freeze">131.1.8 method freeze</h2>
 <p>Defined as:</p>
 <pre class="code">method freeze(Pair:D:)</pre>
 <p>Usage:</p>
 <pre class="code">PAIR.freeze</pre>
 <p>Makes the <i>value</i> of the <span class="code">Pair</span> read-only, by removing it from its <a href="#_language_containers.pod6-Scalar_containers">Scalar container</a>, and returns it.</p>
 <pre class="code">my $str = "apple";
my $p = Pair.new('key', $str);
$p.value = "orange";              # this works as expected
$p.say;                           # key =&gt; orange
$p.freeze.say;                    # orange
$p.value = "a new apple";         # Fails with 'Cannot modify an immutable Str'</pre>
 <a name="t131.1.9"></a><h2 id="_type_Pair.pod6-method_Str">131.1.9 method Str</h2>
 <p>Defined as:</p>
 <pre class="code">multi method Str(Pair:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">Pair.Str</pre>
 <p>Returns a string representation of the invocant formatted as <i>key ~ \t ~ value</i>.</p>
 <pre class="code">my $b = eggs =&gt; 3;
say $b.Str;                                       # eggs  3</pre>
</div> <!-- /type/Parameter.pod6 --><div class="pod-body"><a id="_type_Parameter.pod6"></a><a name="t132"><h1 class="title">132 class Parameter</h1></a> <p class="subtitle">Element of a </p> <pre class="code">class Parameter { }</pre>
 <p>Represents a parameter, for purpose of introspection.</p>
 <p>The usual way to obtain a Parameter object is to create a signature, and call <span class="code">.params</span> on it to obtain a list of the Parameters.</p>
 <pre class="code">my $sig   = :(Str $x);
my $param = $sig.params[0];
say $param.type;              # Str()</pre>
 <p>See <a href="#_type_Signature.pod6">Signature</a> for more information, and also for an explanation on what most of the concepts related to parameters mean.</p>
 <a name="t132.1"></a><h1 id="_type_Parameter.pod6-Methods">132.1 Methods</h1>
 <a name="t132.1.1"></a><h2 id="_type_Parameter.pod6-method_name">132.1.1 method name</h2>
 <p>Returns the variable name, which includes all sigils and twigils. This name is used internally when applied to code, or in a declaration determines the name declared. This name is not necessarily useable by a caller -- if it is, it will also appear as an <a href="#131-method named_names">alias</a>. Often, the name will chosen descriptively as a form of self-documentation.</p>
 <p>If the parameter is anonymous, <span class="code">Nil</span> will be returned.</p>
 <a name="t132.1.2"></a><h2 id="_type_Parameter.pod6-method_sigil">132.1.2 method sigil</h2>
 <p>Returns a string containing the parameter's sigil, for a looser definition of "sigil" than what is considered part of the variable's <span class="code">name|method name</span>. Still returns a sigil even if the parameter is anonymous.</p>
 <p>This "sigil" is actually an introspection used to help determine the normal binding style of a parameter, if it has not been altered through a <a href="#_type_Signature.pod6-Parameter_Traits_and_Modifiers">trait</a>.</p>
 <table>
<tr><th>Will bind to Default behavior</th></tr>
<tr><td>C&lt;$> Scalar Generate new Scalar, use instead of Scalar in argument, if any</td></tr>
 <tr><td>C&lt;@> Positional Bind directly to the argument</td></tr>
 <tr><td>C&lt;@> PositionalBindFailover If binding failed, call argument's .cache method, bind to result</td></tr>
 <tr><td>C&lt;%> Associative Bind directly to the argument</td></tr>
 <tr><td>C&lt;&amp;> Callable Bind directly to the argument</td></tr>
 <tr><td>C&lt;|> (anything) Bind to all remaining arguments, make new Capture if needed</td></tr>
 <tr><td>C&lt;\> (anything) Bind directly to the argument, keep existing Scalar, if any</td></tr>
</table> <a name="t132.1.3"></a><h2 id="_type_Parameter.pod6-method_type">132.1.3 method type</h2>
 <p>Returns the <a href="#_type_Signature.pod6-Type_Constraints">nominal type constraint</a> of the parameter.</p>
 <a name="t132.1.4"></a><h2 id="_type_Parameter.pod6-method_constraints">132.1.4 method constraints</h2>
 <p>Returns <a href="#_type_Signature.pod6-Type_Constraints">additional constraints</a> on the parameter (usually as an <span class="code">all</span>-Junction).</p>
 <a name="t132.1.5"></a><h2 id="_type_Parameter.pod6-method_named">132.1.5 method named</h2>
 <p>Returns <span class="code">True</span> if it's a <a href="#_type_Signature.pod6-Positional_vs._Named">named parameter</a>.</p>
 <a name="t132.1.6"></a><h2 id="_type_Parameter.pod6-method_named_names">132.1.6 method named_names</h2>
 <p>Returns the list of externally usable names/aliases for a <a href="#_type_Signature.pod6-Positional_vs._Named">named parameter</a>.</p>
 <a name="t132.1.7"></a><h2 id="_type_Parameter.pod6-method_positional">132.1.7 method positional</h2>
 <p>Returns <span class="code">True</span> if the parameter is <a href="#_type_Signature.pod6-Positional_vs._Named">positional</a>.</p>
 <a name="t132.1.8"></a><h2 id="_type_Parameter.pod6-method_slurpy">132.1.8 method slurpy</h2>
 <p>Returns <span class="code">True</span> for <a href="#_type_Signature.pod6-Slurpy_(A.K.A._Variadic)_Parameters">slurpy parameters</a>.</p>
 <a name="t132.1.9"></a><h2 id="_type_Parameter.pod6-method_twigil">132.1.9 method twigil</h2>
 <p>Returns a string containing the twigil part of the parameter's name.</p>
 <a name="t132.1.10"></a><h2 id="_type_Parameter.pod6-method_optional">132.1.10 method optional</h2>
 <p>Returns <span class="code">True</span> for <a href="#_type_Signature.pod6-Optional_and_Mandatory_Parameters">optional parameters</a>.</p>
 <a name="t132.1.11"></a><h2 id="_type_Parameter.pod6-method_raw">132.1.11 method raw</h2>
 <p>Returns <span class="code">True</span> for raw parameters.</p>
 <pre class="code">sub f(\raw) {
    raw = 5;
}
f(my $x);   # works
f(42);      # dies in the assignment</pre>
 <p>Raw parameters bind either a variable or a value passed to it, with no decontainerization taking place. That means that if a variable was passed to it, you can assign to the parameter. This is different from <a href="#131-method_rw">rw</a>-parameter which can only bind to variables, never to values.</p>
 <p>This is the normal behavior for parameters declared with a <a href="#131-method sigil">sigil</a> of <span class="code">'\'</span>, which is not really a sigil insofar as it is only used on the parameter. Other parameters may become raw through use of the '<span class="code">is raw</span>' <a href="#_type_Signature.pod6-Parameter_Traits_and_Modifiers">trait</a>. These still use their sigil in code.</p>
 <pre class="code">sub f($raw is raw) {
    $raw = 5;
}</pre>
 <a name="t132.1.12"></a><h2 id="_type_Parameter.pod6-method_capture">132.1.12 method capture</h2>
 <p>Returns <span class="code">True</span> for parameters that capture the rest of the argument list into a single <a href="#_type_Capture.pod6">Capture</a> object.</p>
 <pre class="code">sub how_many_extra_positionals($!, |capture) { capture.elems.say }
how_many_extra_positionals(0, 1, 2, 3);                        #-&gt; 3
say &amp;amp;how_many_extra_positionals.signature.params[1].capture;   #-&gt; True</pre>
 <p>Like raw parameters, Capture parameters do not force any context on the values bound to them, which is why their sigils are only used in declarations.</p>
 <a name="t132.1.13"></a><h2 id="_type_Parameter.pod6-method_rw">132.1.13 method rw</h2>
 <p>Returns <span class="code">True</span> for <a href="#_type_Signature.pod6-Parameter_Traits_and_Modifiers"> <span class="code">is rw</span> </a> parameters.</p>
 <a name="t132.1.14"></a><h2 id="_type_Parameter.pod6-method_copy">132.1.14 method copy</h2>
 <p>Returns <span class="code">True</span> for <a href="#_type_Signature.pod6-Parameter_Traits_and_Modifiers"> <span class="code">is copy</span> </a> parameters.</p>
 <a name="t132.1.15"></a><h2 id="_type_Parameter.pod6-method_readonly">132.1.15 method readonly</h2>
 <p>Returns <span class="code">True</span> for read-only parameters (the default).</p>
 <a name="t132.1.16"></a><h2 id="_type_Parameter.pod6-method_invocant">132.1.16 method invocant</h2>
 <p>Returns <span class="code">True</span> if the parameter is the <a href="#_type_Signature.pod6-Parameter_Separators">invocant parameter</a>.</p>
 <a name="t132.1.17"></a><h2 id="_type_Parameter.pod6-method_default">132.1.17 method default</h2>
 <p>Returns a closure that upon invocation returns the <a href="#_type_Signature.pod6-Optional_and_Mandatory_Parameters">default value</a> for this parameter, or <span class="code">Any</span> if no default was provided.</p>
 <a name="t132.1.18"></a><h2 id="_type_Parameter.pod6-method_type_captures">132.1.18 method type_captures</h2>
 <p>Returns a list of variable names of type captures associated with this parameter. Type captures define a type name within the attached code, which is an alias to the type gleaned from the argument during a call.</p>
 <pre class="code">sub a(::T ::U $x) { T.say }
a(8);                                       #-&gt; Int
say &amp;amp;a.signature.params[0].type_captures;   #-&gt; T U
sub b($x) { $x.WHAT.say } # does the same thing, but uglier.</pre>
 <p>The type used may change from call to call. Once they are defined, type captures can be used wherever you would use a type, even later in same the signature:</p>
 <pre class="code">sub c(::T $x, T $y, $z) { my T $zz = $z };
c(4, 5, 6);          # OK
c(4, 5, "six");      # Fails when assigning to $zz, wants Int not Str
c("four", 5, "six"); # Fails when binding $y, wants Str, not Int</pre>
 <p>Type captures may be used at the same time as <a href="#_type_Signature.pod6-Type_Constraints">type constraints</a>.</p>
 <pre class="code">sub d(::T Numeric $x, T $y);
d(4, 5);            # OK
d(4e0, 5e0);        # OK
d(4e0, 5);          # Fails when binding $y
d("four", "five");  # Fails when binding $x</pre>
 <a name="t132.1.19"></a><h2 id="_type_Parameter.pod6-method_sub_signature">132.1.19 method sub_signature</h2>
 <p>If the parameter has a <a href="#_type_Signature.pod6-Destructuring_Parameters">sub-signature</a>, returns a <span class="code">Signature</span> object for it. Otherwise returns <span class="code">Any</span>.</p>
</div> <!-- /type/Pod/Block.pod6 --><div class="pod-body"><a id="_type_Pod_Block.pod6"></a><a name="t133"><h1 class="title">133 class Pod::Block</h1></a> <p class="subtitle">Block in a Pod document</p> <pre class="code">class Pod::Block { }</pre>
 <p>Class for a Pod block, and base class for most other Pod classes.</p>
 <p>A Pod block has contents (more pod blocks or strings) and a config hash.</p>
 <p>Useful subclasses:</p>
 <table>
<tr><th>Class</th> <th>Used for</th></tr>
<tr><td>L&lt;Pod::Block::Para></td> <td>paragraphs</td></tr>
 <tr><td>L&lt;Pod::Block::Named></td> <td>named blocks</td></tr>
 <tr><td>L&lt;Pod::Block::Code></td> <td>code blocks</td></tr>
 <tr><td>L&lt;Pod::Block::Comment></td> <td>comments</td></tr>
 <tr><td>L&lt;Pod::Block::Table></td> <td>=begin/end table</td></tr>
 <tr><td></td> <td>tabular data</td></tr>
 <tr><td>L&lt;Pod::Heading></td> <td>=head1 etc. headings</td></tr>
 <tr><td>L&lt;Pod::Item></td> <td>list items</td></tr>
</table> <a name="t133.1"></a><h1 id="_type_Pod_Block.pod6-Methods">133.1 Methods</h1>
 <a name="t133.1.1"></a><h2 id="_type_Pod_Block.pod6-method_contents">133.1.1 method contents</h2>
 <pre class="code">method contents() returns Positional:D</pre>
 <p>Returns a list of contents of this block.</p>
 <a name="t133.1.2"></a><h2 id="_type_Pod_Block.pod6-method_config">133.1.2 method config</h2>
 <pre class="code">method config returns Map:D</pre>
 <p>Returns a hash of configs.</p>
</div> <!-- /type/Pod/Block/Code.pod6 --><div class="pod-body"><a id="_type_Pod_Block_Code.pod6"></a><a name="t134"><h1 class="title">134 class Pod::Block::Code</h1></a> <p class="subtitle">Verbatim code block in a Pod document</p> <pre class="code">class Pod::Block::Code is Pod::Block { }</pre>
 <p>Class for a code (verbatim) Pod block.</p>
 <a name="t134.1"></a><h1 id="_type_Pod_Block_Code.pod6-Methods">134.1 Methods</h1>
 <a name="t134.1.1"></a><h2 id="_type_Pod_Block_Code.pod6-method_allowed">134.1.1 method allowed</h2>
 <pre class="code">method allowed() returns Positional:D</pre>
 <p>Returns a list of formatting codes that are allowed inside the code block.</p>
</div> <!-- /type/Pod/Block/Named.pod6 --><div class="pod-body"><a id="_type_Pod_Block_Named.pod6"></a><a name="t135"><h1 class="title">135 class Pod::Block::Named</h1></a> <p class="subtitle">Named block in a Pod document</p> <pre class="code">class Pod::Block::Named is Pod::Block { }</pre>
 <p>Class for a named Pod block. For example</p>
 <p>...</p>
 <p>creates a <span class="code">Pod::Block::Named</span> with name <span class="code">mysection</span>.</p>
 <a name="t135.1"></a><h1 id="_type_Pod_Block_Named.pod6-Methods">135.1 Methods</h1>
 <a name="t135.1.1"></a><h2 id="_type_Pod_Block_Named.pod6-method_name">135.1.1 method name</h2>
 <pre class="code">method name() returns Str:D</pre>
 <p>Returns the name of the block.</p>
</div> <!-- /type/Pod/Block/Para.pod6 --><div class="pod-body"><a id="_type_Pod_Block_Para.pod6"></a><a name="t136"><h1 class="title">136 class Pod::Block::Para</h1></a> <p class="subtitle">Paragraph in a Pod document</p> <pre class="code">class Pod::Block::Para is Pod::Block { }</pre>
 <p>Class for a Pod paragraph.</p>
</div> <!-- /type/Pod/Item.pod6 --><div class="pod-body"><a id="_type_Pod_Item.pod6"></a><a name="t137"><h1 class="title">137 class Pod::Item</h1></a> <p class="subtitle">Item in a Pod enumeration list</p> <pre class="code">class Pod::Item is Pod::Block</pre>
 <p>Class for items in Pod enumeration lists.</p>
 <a name="t137.1"></a><h1 id="_type_Pod_Item.pod6-Methods">137.1 Methods</h1>
 <a name="t137.1.1"></a><h2 id="_type_Pod_Item.pod6-method_level">137.1.1 method level</h2>
 <pre class="code">method level() returns Int</pre>
 <p>Returns the level of the enumeration list, starting at 1.</p>
</div> <!-- /type/Positional.pod6 --><div class="pod-body"><a id="_type_Positional.pod6"></a><a name="t138"><h1 class="title">138 role Positional</h1></a> <p class="subtitle">Object that supports looking up values by index</p> <pre class="code">role Positional { ... }</pre>
 <p>Role for objects which support indexing them using <span class="code">postcircumfix:«[ ]»</span> (usually list-like objects). Example types with Positional role include <a href="#_type_List.pod6">List</a>, <a href="#_type_Array.pod6">Array</a>, <a href="#_type_Range.pod6">Range</a>, and <a href="#_type_Buf.pod6">Buf</a>.</p>
 <a name="t138.1"></a><h1 id="_type_Positional.pod6-Methods">138.1 Methods</h1>
 <a name="t138.1.1"></a><h2 id="_type_Positional.pod6-method_of">138.1.1 method of</h2>
 <pre class="code">method of()</pre>
 <p>Returns the type constraint for elements of the positional container. Defaults to <a href="#_type_Mu.pod6">Mu</a>.</p>
</div> <!-- /type/PositionalBindFailover.pod6 --><div class="pod-body"><a id="_type_PositionalBindFailover.pod6"></a><a name="t139"><h1 class="title">139 role PositionalBindFailover</h1></a> <p class="subtitle">Failover for binding an Iterable to a Positional</p> <pre class="code">role PositionalBindFailover { ... }</pre>
 <p>This role provides an interface by which an <a href="#_type_Iterable.pod6">Iterable</a> can be coerced into a <a href="#_type_Positional.pod6">Positional</a>, so that you can for example write:</p>
 <pre class="code">sub fifths(@a) {       # @a is constraint to Positional
    @a[4];
}
my $seq := gather {     # a Seq, which is not Positional
    take $_ for 1..*;
}
say fifths($seq);       # 5</pre>
 <p>The invocation of <span class="code">fifths</span> in the example above would ordinarily give a type error, because <span class="code">$seq</span> is of type <a href="#_type_Seq.pod6">Seq</a>, which doesn't do the <a href="#_type_Positional.pod6">Positional</a> interface that the <span class="code">@</span>-sigil implies.</p>
 <p>But the signature binder recognizes that <span class="code">Seq</span> does the <span class="code">PositionalBindFailover</span> role, and calls its <span class="code">cache</span> method to coerce it to a <a href="#_type_List.pod6">List</a>, which does the <span class="code">Positional</span> role.</p>
 <a name="t139.1"></a><h1 id="_type_PositionalBindFailover.pod6-Methods">139.1 Methods</h1>
 <a name="t139.1.1"></a><h2 id="_type_PositionalBindFailover.pod6-method_cache">139.1.1 method cache</h2>
 <pre class="code">method cache(PositionalBindFailover:D:) returns List:D</pre>
 <p>Returns a <a href="#_type_List.pod6">List</a> based on the <span class="code">iterator</span> method, and caches it. Subsequent calls to <span class="code">cache</span> always return the same <span class="code">List</span> object.</p>
 <a name="t139.1.2"></a><h2 id="_type_PositionalBindFailover.pod6-method_list">139.1.2 method list</h2>
 <pre class="code">method list(PositionalBindFailover:D:) returns List:D</pre>
 <p>Returns a <a href="#_type_List.pod6">List</a> based on the <span class="code">iterator</span> method without caching it.</p>
 <a name="t139.1.3"></a><h2 id="_type_PositionalBindFailover.pod6-method_iterator">139.1.3 method iterator</h2>
 <pre class="code">method iterator(PositionalBindFailover:D:) { ... }</pre>
 <p>This method stub ensure that a class implementing role <span class="code">PositionalBindFailover</span> provides an <span class="code">iterator</span> method.</p>
</div> <!-- /type/Proc.pod6 --><div class="pod-body"><a id="_type_Proc.pod6"></a><a name="t140"><h1 class="title">140 class Proc</h1></a> <p class="subtitle">Running process (filehandle-based interface)</p> <pre class="code">class Proc { ... }</pre>
 <p><span class="code">Proc</span> is a representation of an invocation of an external process. It provides access to the input, output and error stream as well as the exit code. It is typically created through the <span class="code">run</span> subroutine:</p>
 <pre class="code">my $proc = run 'echo', 'Hallo world', :out;
my $captured-output = $proc.out.slurp-rest;
say "Output was $captured-output.perl()";       # Output was "Hallo world\n"</pre>
 <p>Piping several commands is easy too. To achieve the equivalent of the pipe <span class="code">echo "Hello, world" | cat -n</span> in Perl 6, and capture the output from the second command, you can do</p>
 <pre class="code">my $p1 = run 'echo', 'Hello, world', :out;
my $p2 = run 'cat', '-n', :in($p1.out), :out;
say $p2.out.get;</pre>
 <a name="t140.1"></a><h1 id="_type_Proc.pod6-Methods">140.1 Methods</h1>
 <a name="t140.1.1"></a><h2 id="_type_Proc.pod6-method_new">140.1.1 method new</h2>
 <pre class="code">method new(Proc:U:
        :$in = '-',
        :$out = '-',
        :$err = '-',
        Bool :$bin = False,
        Bool :$chomp = True,
        Bool :$merge = False,
        Str:D :$enc = 'UTF-8',
        Str:D $nl = "\n",
    ) returns Proc:D
sub run(
        :$in = '-',
        :$out = '-',
        :$err = '-',
        Bool :$bin = False,
        Bool :$chomp = True,
        Bool :$merge = False,
        Str:D :$enc = 'UTF-8',
        Str:D $nl = "\n",
        :$cwd = $*CWD,
        Hash() :$env = %*ENV,
        *@args
)  returns Proc:D</pre>
 <p><span class="code">new</span> creates a new <span class="code">Proc</span> object, whereas <span class="code">run</span> creates one, and spawns it with the command and arguments provided in <span class="code">@args</span>.</p>
 <p><span class="code">$in</span>, <span class="code">$out</span> and <span class="code">$err</span> are the three standard streams of the to-be-launched program, and default to <span class="code">"-"</span>, which means they inherit the stream from the parent process. Setting one (or more) of them to <span class="code">True</span> makes the stream available as an <a href="#_type_IO::Pipe.pod6">IO::Pipe</a> object of the same name, so for example <span class="code">$proc.out</span>. Or you can pass an existing <a href="#_type_IO::Handle.pod6">IO::Handle</a> object (for example IO::Pipe) in, in which case this handle is used for the stream.</p>
 <p><span class="code">$bin</span> controls whether the streams are handled as binary (i.e. <a href="#_type_Blob.pod6">Blob</a> object) or text (i.e. <a href="#_type_Str.pod6">Str</a> objects). If <span class="code">$bin</span> is False, <span class="code">$enc</span> holds the character encoding to encode strings sent to the input stream and decode binary data from the output and error streams.</p>
 <p>With <span class="code">$chomp</span> set to <span class="code">True</span>, newlines are stripped from the output and err streams when reading with <span class="code">lines</span> or <span class="code">get</span>. <span class="code">$nl</span> controls what your idea of a newline is.</p>
 <p>If <span class="code">$merge</span> is set to True, the standard output and error stream end up merged in <span class="code">$proc.out</span>.</p>
 <a name="t140.1.2"></a><h2 id="_type_Proc.pod6-method_sink">140.1.2 method sink</h2>
 <p>When sunk, the <span class="code">Proc</span> object will throw <a href="#_type_X::Proc::Unsuccessful.pod6">X::Proc::Unsuccessful</a> if the process it run exited unsuccessfully.</p>
 <a name="t140.1.3"></a><h2 id="_type_Proc.pod6-method_spawn">140.1.3 method spawn</h2>
 <pre class="code">method spawn(Proc:D *@args ($, *@), :$cwd = $*CWD, Hash() :$env = %*ENV) returns Bool:D</pre>
 <p>Runs the <span class="code">Proc</span> objects with the given command, argument list, working directory and environment.</p>
 <a name="t140.1.4"></a><h2 id="_type_Proc.pod6-method_exitcode">140.1.4 method exitcode</h2>
 <pre class="code">method exitcode(Proc:D) returns Int:D</pre>
 <p>Returns the exit code of the external process, or -1 if it has not exited yet.</p>
 <a name="t140.1.5"></a><h2 id="_type_Proc.pod6-method_signal">140.1.5 method signal</h2>
 <pre class="code">method signal(Proc:D)</pre>
 <p>Returns the signal number with which the external process was killed, or 0 or an undefined value otherwise.</p>
 <a name="t140.1.6"></a><h2 id="_type_Proc.pod6-method_pid">140.1.6 method pid</h2>
 <pre class="code">method pid(Proc:D)</pre>
 <p>Returns the Process Identifier (pid) of the external process, if available.</p>
</div> <!-- /type/Proc/Async.pod6 --><div class="pod-body"><a id="_type_Proc_Async.pod6"></a><a name="t141"><h1 class="title">141 class Proc::Async</h1></a> <p class="subtitle">Running process (asynchronous interface)</p> <pre class="code">class Proc::Async { ... }</pre>
 <p><b>Note:</b> only the MoarVM backend of Rakudo implements <span class="code">Proc::Async</span> at the moment.</p>
 <p><span class="code">Proc::Async</span> allows you to run external commands asynchronously, capturing standard output and error handles, and optionally write to its standard input.</p>
 <pre class="code">    # command with arguments 
     my $proc = Proc::Async.new('echo', 'foo', 'bar'); 
 
     # subscribe to new output from out and err handles: 
     $proc.stdout.tap(-&gt; $v { print "Output: $v" }); 
     $proc.stderr.tap(-&gt; $v { print "Error:  $v" }); 
 
     say "Starting..."; 
     my $promise = $proc.start; 
 
     # wait for the external program to terminate 
     await $promise; 
     say "Done."; 
</pre>
 <p>This produces the following output:</p>
 <pre class="code">Starting...
Output: foo bar
Done.</pre>
 <p>An example that opens an external program for writing:</p>
 <pre class="code">use v6;
my $prog = Proc::Async.new(:w, 'hexdump', '-C');
my $promise = $prog.start;
await $prog.write(Buf.new(12, 42));
$prog.close-stdin;
await $promise;</pre>
 <a name="t141.1"></a><h1 id="_type_Proc_Async.pod6-Methods">141.1 Methods</h1>
 <a name="t141.1.1"></a><h2 id="_type_Proc_Async.pod6-method_new">141.1.1 method new</h2>
 <pre class="code">method new(:$path, *@args, :$w) returns Proc::Async:D</pre>
 <p>Creates a new <span class="code">Proc::Async</span> object with external program name or path <span class="code">$path</span> and the command line arguments <span class="code">@args</span>.</p>
 <p>If <span class="code">:w</span> is passed to <span class="code">new</span>, then a pipe to the external program's standard input stream (stdin) is opened, to which you can write with <span class="code">write</span> and <span class="code">say</span>.</p>
 <a name="t141.1.2"></a><h2 id="_type_Proc_Async.pod6-method_stdout">141.1.2 method stdout</h2>
 <pre class="code">method stdout(Proc::Async:D: :$bin) returns Supply:D</pre>
 <p>Returns the <a href="#_type_Supply.pod6">Supply</a> for the external program's standard output stream. If <span class="code">:bin</span> is passed, the standard output is passed along in binary as <a href="#_type_Blob.pod6">Blob</a>, otherwise it is interpreted as UTF-8, decoded, and passed along as <a href="#_type_Str.pod6">Str</a>.</p>
 <pre class="code">$proc.stdout.tap( -&gt; $str {
    say "Got output '$str' from the external program";
});</pre>
 <p>You must call <span class="code">stdout</span> before you call <a href="#140-method start">#method start</a>. Otherwise an exception of class <a href="#_type_X::Proc::Async::TapBeforeSpawn.pod6">X::Proc::Async::TapBeforeSpawn</a> is thrown.</p>
 <p>If <span class="code">stdout</span> is not called, the external program's standard output is not captured at all.</p>
 <p>Note that you cannot call <span class="code">stdout</span> both with and without <span class="code">:bin</span> on the same object; it will throw an exception of type <a href="#_type_X::Proc::Async::CharsOrBytes.pod6">X::Proc::Async::CharsOrBytes</a> if you try.</p>
 <a name="t141.1.3"></a><h2 id="_type_Proc_Async.pod6-method_stderr">141.1.3 method stderr</h2>
 <pre class="code">method stderr(Proc::Async:D: :$bin) returns Supply:D</pre>
 <p>Returns the <a href="#_type_Supply.pod6">Supply</a> for the external program's standard error stream. If <span class="code">:bin</span> is passed, the standard error is passed along in binary as <a href="#_type_Blob.pod6">Blob</a>, otherwise it is interpreted as UTF-8, decoded, and passed along as <a href="#_type_Str.pod6">Str</a>.</p>
 <pre class="code">$proc.stderr.tap( -&gt; $str {
    say "Got error '$str' from the external program";
});</pre>
 <p>You must call <span class="code">stderr</span> before you call <a href="#140-method start">#method start</a>. Otherwise an exception of class <a href="#_type_X::Proc::Async::TapBeforeSpawn.pod6">X::Proc::Async::TapBeforeSpawn</a> is thrown.</p>
 <p>If <span class="code">stderr</span> is not called, the external program's standard error stream is not captured at all.</p>
 <p>Note that you cannot call <span class="code">stderr</span> both with and without <span class="code">:bin</span> on the same object; it will throw an exception of type <a href="#_type_X::Proc::Async::CharsOrBytes.pod6">X::Proc::Async::CharsOrBytes</a> if you try.</p>
 <a name="t141.1.4"></a><h2 id="_type_Proc_Async.pod6-method_w">141.1.4 method w</h2>
 <pre class="code">method w(Proc::Async:D:)</pre>
 <p>Returns a true value if <span class="code">:w</span> was passed to the constructor, that is, if the external program is started with its input stream made available to output to the program through the <span class="code">.print</span>, <span class="code">.say</span> and <span class="code">.write</span> methods.</p>
 <a name="t141.1.5"></a><h2 id="_type_Proc_Async.pod6-method_start">141.1.5 method start</h2>
 <pre class="code">method start(Proc::Async:D:, :$scheduler = $*SCHEDULER, :$cwd = $*CWD) returns Promise:D</pre>
 <p>Initiates spawning of the external program. Returns a promise that will be kept with a <a href="#_type_Proc.pod6">Proc</a> object once the external program exits, and that will be broken if the program cannot be started.</p>
 <p>If <span class="code">start</span> is called on a Proc::Async object on which it has already been called before, an exception of <a href="#_type_X::Proc::Async::AlreadyStarted.pod6">type X::Proc::Async::AlreadyStarted</a> is thrown.</p>
 <p>Note: If you wish to <span class="code">await</span> the Promise and discard its result, using</p>
 <pre class="code">try await $p.start;</pre>
 <p><b>will throw</b> if the program exited with non-zero status, as the <span class="code">Proc</span> returned as the result of the Promise throws when sunk and in this case it will get sunk outside the <span class="code">try</span>. To avoid that, sink it yourself <i>inside</i> the <span class="code">try</span>:</p>
 <pre class="code">try sink await $p.start;</pre>
 <a name="t141.1.6"></a><h2 id="_type_Proc_Async.pod6-method_started">141.1.6 method started</h2>
 <pre class="code">method started(Proc::Async:D:) returns Bool:D</pre>
 <p>Returns <span class="code">False</span> before <span class="code">.start</span> has been called, and <span class="code">True</span> afterwards.</p>
 <a name="t141.1.7"></a><h2 id="_type_Proc_Async.pod6-method_path">141.1.7 method path</h2>
 <pre class="code">method path(Proc::Async:D:)</pre>
 <p>Returns the name and/or path of the external program that was passed to the <span class="code">new</span> method as first argument.</p>
 <a name="t141.1.8"></a><h2 id="_type_Proc_Async.pod6-method_args">141.1.8 method args</h2>
 <pre class="code">method args(Proc::Async:D:) returns Positional:D</pre>
 <p>Returns the command line arguments for the external programs, as passed to the <span class="code">new</span> method.</p>
 <a name="t141.1.9"></a><h2 id="_type_Proc_Async.pod6-method_write">141.1.9 method write</h2>
 <pre class="code">method write(Proc::Async:D: Blob:D $b, :$scheduler = $*SCHEDULER)</pre>
 <p>Write the binary data in <span class="code">$b</span> to the standard input stream of the external program.</p>
 <p>Returns a <a href="#_type_Promise.pod6">Promise</a> that will be kept once the data has fully landed in the input buffer of the external program.</p>
 <p>The <span class="code">Proc::Async</span> object must be created for writing (with <span class="code">Proc::Async.new(:w, $path, @args)</span>). Otherwise an <a href="#_type_X::Proc::Async::OpenForWriting.pod6">X::Proc::Async::OpenForWriting</a> exception will the thrown.</p>
 <p><span class="code">start</span> must have been called before calling method write, otherwise an <a href="#_type_X::Proc::Async::MustBeStarted.pod6">X::Proc::Async::MustBeStarted</a> exception is thrown.</p>
 <a name="t141.1.10"></a><h2 id="_type_Proc_Async.pod6-method_print">141.1.10 method print</h2>
 <pre class="code">method print(Proc::Async:D: Str(Any) $str, :$scheduler = $*SCHEDULER)</pre>
 <p>Write the text data in <span class="code">$str</span> to the standard input stream of the external program, encoding it as UTF-8.</p>
 <p>Returns a <a href="#_type_Promise.pod6">Promise</a> that will be kept once the data has fully landed in the input buffer of the external program.</p>
 <p>The <span class="code">Proc::Async</span> object must be created for writing (with <span class="code">Proc::Async.new(:w, $path, @args)</span>). Otherwise an <a href="#_type_X::Proc::Async::OpenForWriting.pod6">X::Proc::Async::OpenForWriting</a> exception will the thrown.</p>
 <p><span class="code">start</span> must have been called before calling method print, otherwise an <a href="#_type_X::Proc::Async::MustBeStarted.pod6">X::Proc::Async::MustBeStarted</a> exception is thrown.</p>
 <a name="t141.1.11"></a><h2 id="_type_Proc_Async.pod6-method_say">141.1.11 method say</h2>
 <pre class="code">method say(Proc::Async:D: $output, :$scheduler = $*SCHEDULER)</pre>
 <p>Calls method <span class="code">gist</span> on the <span class="code">$output</span>, adds a newline, encodes it as UTF-8, and sends it to the standard input stream of the external program, encoding it as UTF-8.</p>
 <p>Returns a <a href="#_type_Promise.pod6">Promise</a> that will be kept once the data has fully landed in the input buffer of the external program.</p>
 <p>The <span class="code">Proc::Async</span> object must be created for writing (with <span class="code">Proc::Async.new(:w, $path, @args)</span>). Otherwise an <a href="#_type_X::Proc::Async::OpenForWriting.pod6">X::Proc::Async::OpenForWriting</a> exception will the thrown.</p>
 <p><span class="code">start</span> must have been called before calling method say, otherwise an <a href="#_type_X::Proc::Async::MustBeStarted.pod6">X::Proc::Async::MustBeStarted</a> exception is thrown.</p>
 <a name="t141.1.12"></a><h2 id="_type_Proc_Async.pod6-method_close-stdin">141.1.12 method close-stdin</h2>
 <pre class="code">method close-stdin(Proc::Async:D:)</pre>
 <p>Closes the standard input stream of the external program. Programs that read from STDIN often only terminate when their input stream is closed. So if waiting for the promise from <span class="code">#method start</span> hangs (for a program opened for writing), it might be a forgotten <span class="code">close-stdin</span>.</p>
 <p>The <span class="code">Proc::Async</span> object must be created for writing (with <span class="code">Proc::Async.new(:w, $path, @args)</span>). Otherwise an <a href="#_type_X::Proc::Async::OpenForWriting.pod6">X::Proc::Async::OpenForWriting</a> exception will the thrown.</p>
 <p><span class="code">start</span> must have been called before calling method close-stdin, otherwise an <a href="#_type_X::Proc::Async::MustBeStarted.pod6">X::Proc::Async::MustBeStarted</a> exception is thrown.</p>
 <a name="t141.1.13"></a><h2 id="_type_Proc_Async.pod6-method_kill">141.1.13 method kill</h2>
 <pre class="code">kill(Proc::Async:D: $signal = "HUP")</pre>
 <p>Sends a signal to the running program. The signal can be a signal name ("KILL" or "SIGKILL"), an integer (9) or an element of the <span class="code">Signal</span> enum (Signal::SIGKILL).</p>
</div> <!-- /type/Promise.pod6 --><div class="pod-body"><a id="_type_Promise.pod6"></a><a name="t142"><h1 class="title">142 class Promise</h1></a> <p class="subtitle">Status/result of an asynchronous computation</p> <pre class="code">my enum PromiseStatus (:Planned(0), :Kept(1), :Broken(2));
class Promise { ... }</pre>
 <p>A <i>Promise</i> is used to handle the result of a computation that might not have finished. It allows the user to execute code once the computation is done (with the <span class="code">then</span> method), execution after a time delay (with <span class="code">in</span>), combining promises, and waiting for results.</p>
 <pre class="code">my $p = Promise.start({ sleep 2; 42});
$p.then({ say .result });   # will print 42 once the block finished
say $p.status;              # Planned
$p.result;                  # waits for the computation to finish
say $p.status;              # Kept</pre>
 <p>There are two typical scenarios for using promises. The first is to use a factory method (<span class="code">start</span>, <span class="code">in</span>, <span class="code">anyof</span>, <span class="code">allof</span>) on the type object; those will make sure that the promise is automatically kept or broken for you, and you can't call <span class="code">break</span> or <span class="code">keep</span> on these promises yourself.</p>
 <p>The second is to create your promises yourself with <span class="code">Promise.new</span>. If you want to ensure that only your code can keep or break the promise, you can use the <span class="code">vow</span> method to get a unique handle, and call <span class="code">keep</span> or <span class="code">break</span> on it:</p>
 <pre class="code">    sub async-get-with-promise($user-agent, $url) { 
         my $p = Promise.new; 
         my $v = $p.vow; 
 
         # do an asynchronous call on a fictive user agent, 
         # and return the promise: 
         $user-agent.async-get($url, 
                 on-error =&gt; -&gt; $error { 
                     $v.break($error); 
                 }, 
                 on-success =&gt; -&gt; $response { 
                     $v.keep($response); 
                 } 
         ); 
         return $p; 
     } 
</pre>
 <p>Further examples can be found in the <a href="#_language_concurrency.pod6-Promises">concurrency page</a>.</p>
 <a name="t142.1"></a><h1 id="_type_Promise.pod6-Methods">142.1 Methods</h1>
 <a name="t142.1.1"></a><h2 id="_type_Promise.pod6-method_start">142.1.1 method start</h2>
 <pre class="code">sub start(&amp;amp;code);
method start(Promise:U: &amp;amp;code, :$scheduler = $*SCHEDULER) returns Promise:D</pre>
 <p>Creates a new Promise that runs the given code object. The promise will be kept when the code terminates normally, or broken if it throws an exception. The return value or exception can be inspected with the <span class="code">result</span> method.</p>
 <p>The scheduler that handles this promise can be passed as a named argument.</p>
 <pre class="code"># these two are equivalent:
my $p1 = Promise.start({ do something here });
my $p2 = start { do something here };</pre>
 <a name="t142.1.2"></a><h2 id="_type_Promise.pod6-method_in">142.1.2 method in</h2>
 <pre class="code">method in(Promise:U: $seconds, :$scheduler = $*SCHEDULER) returns Promise:D</pre>
 <p>Creates a new Promise that will be kept in <span class="code">$seconds</span> seconds, or later.</p>
 <pre class="code">my $p = Promise.in(5).then({ say "5 seconds later" });
# do other stuff here

await $p;   # wait here until the 5 seconds are over</pre>
 <a name="t142.1.3"></a><h2 id="_type_Promise.pod6-method_at">142.1.3 method at</h2>
 <pre class="code">method at(Promise:U: $time, :$scheduler = $*SCHEDULER) returns Promise:D</pre>
 <p>Creates a new Promise that will be kept at the given time, or later.</p>
 <pre class="code">my $p = Promise.at(now + 5).then({ say "5 seconds later" });
# do other stuff here

await $p;   # wait here until the 5 seconds are over</pre>
 <a name="t142.1.4"></a><h2 id="_type_Promise.pod6-method_allof">142.1.4 method allof</h2>
 <pre class="code">method allof(Promise:U: *@promises) returns Promise:D</pre>
 <p>Returns a new promise that will be kept when all the promises passed as arguments are kept or broken. The result of the individual Promises is not reflected in the the result of the returned promise: it simply indicates that all the promises have been completed in some way. If the results of the individual promises are important then they should be inspected after the the <span class="code">allof</span> promise is kept.</p>
 <p>In the following requesting the <span class="code">result</span> of a broken promise will case the original Exception to be thrown. (You may need to run it several times to see the exception.)</p>
 <pre class="code">my @promises;
for 1..5 -&gt; $t {
    push @promises, start {
        sleep $t;
        die "OH NOEZ" if rand &amp;lt; 0.2;
    };
}
my $all-done = Promise.allof(@promises);
await $all-done;
@promises&gt;&gt;.result;
say "Promises kept so we get to live another day!";</pre>
 <a name="t142.1.5"></a><h2 id="_type_Promise.pod6-method_anyof">142.1.5 method anyof</h2>
 <pre class="code">method anyof(Promise:U: *@promises) returns Promise:D</pre>
 <p>Returns a new promise that will be kept as soon as any of the promises passed as arguments is kept or broken. The result of the completed Promise is not reflected in the result of the returned promise which will always be Kept.</p>
 <p>You can use this to wait at most a number of seconds for a promise:</p>
 <pre class="code">my $timeout = 5;
await Promise.anyof(
    Promise.in($timeout),
    start {
        # do a potentially long-running calculation here
    },
);</pre>
 <a name="t142.1.6"></a><h2 id="_type_Promise.pod6-method_then">142.1.6 method then</h2>
 <pre class="code">method then(Promise:D: &amp;amp;code)</pre>
 <p>Schedules a piece of code to be run after the invocant has been kept or broken, and returns a new promise for this computation. In other words, creates a chained promise.</p>
 <pre class="code">my $timer = Promise.in(2);
my $after = $timer.then({ say "2 seconds are over!"; 'result' });
say $after.result;  # 2 seconds are over
                    # result</pre>
 <a name="t142.1.7"></a><h2 id="_type_Promise.pod6-method_keep">142.1.7 method keep</h2>
 <pre class="code">multi method keep(Promise:D:);
multi method keep(Promise:D: \result);</pre>
 <p>Keeps a promise, optionally setting the result. If no result is passed, the result will be <span class="code">True</span>.</p>
 <p>Throws an exception of type X::Promise::Vowed if a vow has already been taken. See method <span class="code">vow</span> for more information.</p>
 <pre class="code">my $p = Promise.new;

if Bool.pick {
    $p.keep;
}
else {
     $p.break;
}</pre>
 <a name="t142.1.8"></a><h2 id="_type_Promise.pod6-method_break">142.1.8 method break</h2>
 <pre class="code">multi method break(Promise:D:);
multi method break(Promise:D: \result);</pre>
 <p>Breaks a promise, optionally setting the result. If no result is passed, the result will be <span class="code">False</span>.</p>
 <p>Throws an exception of type X::Promise::Vowed if a vow has already been taken. See method <span class="code">vow</span> for more information.</p>
 <pre class="code">my $p = Promise.new;

$p.break('sorry');
say $p.status;          # Broken
say $p.cause;           # sorry</pre>
 <a name="t142.1.9"></a><h2 id="_type_Promise.pod6-method_result">142.1.9 method result</h2>
 <pre class="code">method result(Promise:D)</pre>
 <p>Waits for the promise to be kept or broken. If it is kept, returns the result; otherwise throws the result as an exception.</p>
 <a name="t142.1.10"></a><h2 id="_type_Promise.pod6-method_cause">142.1.10 method cause</h2>
 <pre class="code">method cause(Promise:D)</pre>
 <p>If the promise was broken, returns the result (or exception). Otherwise, throws an exception of type <span class="code">X::Promise::CauseOnlyValidOnBroken</span>.</p>
 <a name="t142.1.11"></a><h2 id="_type_Promise.pod6-method_Bool">142.1.11 method Bool</h2>
 <pre class="code">multi method Bool(Promise:D:)</pre>
 <p>Returns <span class="code">True</span> for a kept or broken promise, and <span class="code">False</span> for one in state <span class="code">Planned</span>.</p>
 <a name="t142.1.12"></a><h2 id="_type_Promise.pod6-method_status">142.1.12 method status</h2>
 <pre class="code">method status(Promise:D) returns PromiseStatus</pre>
 <p>Returns the current state of the promise: <span class="code">Kept</span>, <span class="code">Broken</span> or <span class="code">Planned</span>:</p>
 <pre class="code">say "promise got Kept" if $promise.status ~~ Kept;</pre>
 <a name="t142.1.13"></a><h2 id="_type_Promise.pod6-method_scheduler">142.1.13 method scheduler</h2>
 <pre class="code">method scheduler(Promise:D:)</pre>
 <p>Returns the scheduler that manages the promise.</p>
 <a name="t142.1.14"></a><h2 id="_type_Promise.pod6-method_vow">142.1.14 method vow</h2>
 <pre class="code">my class Vow {
    has Promise $.promise;
    method keep() { ... }
    method break() { ... }
}
method vow(Promise:D:) returns Vow:D</pre>
 <p>Returns an object that holds the sole authority over keeping or breaking a promise. Calling <span class="code">keep</span> or <span class="code">break</span> on a promise that has vow taken throws an exception of type <span class="code">X::Promise::Vowed</span>.</p>
 <pre class="code">my $p   = Promise.new;
my $vow = $p.vow;
$vow.keep;
say $p.status;          # Kept</pre>
 <a name="t142.1.15"></a><h2 id="_type_Promise.pod6-method_Supply">142.1.15 method Supply</h2>
 <pre class="code">method Supply(Promise:D:)</pre>
 <p>Returns a <a href="#_type_Supply.pod6">Supply</a> that will emit the <span class="code">result</span> of the <a href="#_type_Promise.pod6">Promise</a> being Kept or <span class="code">quit</span> with the <span class="code">cause</span> if the <a href="#_type_Promise.pod6">Promise</a> is Broken.</p>
 <a name="t142.1.16"></a><h2 id="_type_Promise.pod6-sub_await">142.1.16 sub await</h2>
 <pre class="code">multi sub await(Promise:D)
multi sub await(*@)</pre>
 <p>Waits until one or more promises are <i>all</i> fulfilled, and then returns their values. Also works on <a href="#_type_Channel.pod6">channels</a>. Any broken promises will rethrow their exceptions.</p>
</div> <!-- /type/Proxy.pod6 --><div class="pod-body"><a id="_type_Proxy.pod6"></a><a name="t143"><h1 class="title">143 class Proxy</h1></a> <p class="subtitle">Item container with custom storage and retrieval</p> <pre class="code">class Proxy { ... }</pre>
 <p>A Proxy is an object that allows you to execute whenever a value is retrieved from a container (<span class="code">FETCH</span>) or when it is set (<span class="code">STORE</span>).</p>
 <p>To create a container that returns twice of what was stored in it, you do something like this:</p>
 <pre class="code">sub double() is rw {
    my $storage = 0;
    Proxy.new(
        FETCH =&gt; method ()     { $storage },
        STORE =&gt; method ($new) { $storage = 2 * $new }
    )
 }
 my $doubled := double();
 $doubled = 4;
 say $doubled;       # 8</pre>
 <a name="t143.1"></a><h1 id="_type_Proxy.pod6-Methods">143.1 Methods</h1>
 <a name="t143.1.1"></a><h2 id="_type_Proxy.pod6-method_new">143.1.1 method new</h2>
 <pre class="code">method new(:&amp;amp;FETCH!, :&amp;amp;STORE!) returns Proxy:D</pre>
 <p>Creates a new <span class="code">Proxy</span> object. <span class="code">&amp;FETCH</span> is called with one argument (the proxy object) when the value is accessed, and must return the value that the fetch produces. <span class="code">&amp;STORE</span> is called with two arguments (the proxy object, and the new value) when a new value is stored in the container.</p>
</div> <!-- /type/QuantHash.pod6 --><div class="pod-body"><a id="_type_QuantHash.pod6"></a><a name="t144"><h1 class="title">144 role QuantHash</h1></a> <p class="subtitle">Collection of objects represented as hash keys</p> <pre class="code">role QuantHash does Associative { }</pre>
 <p>A <span class="code">QuantHash</span> represents a set of objects, represented as the keys of a <span class="code">Hash</span>. When asked to behave as a list it ignores its <span class="code">.values</span> and returns only <span class="code">.keys</span> (possibly replicated by weight in the case of bag types). For any <span class="code">QuantHash</span>, the <span class="code">.total</span> methods returns the current sum of the values.</p>
 <p>All standard QuantHash containers have a default value that is false (such as <span class="code">0</span> or <span class="code">''</span> or <span class="code">Nil</span> or <span class="code">Bool::False</span>), and keep around only those entries with non-default values, automatically deleting any entry if its value goes to that (false) default value.</p>
</div> <!-- /type/Range.pod6 --><div class="pod-body"><a id="_type_Range.pod6"></a><a name="t145"><h1 class="title">145 class Range</h1></a> <p class="subtitle">Interval of ordered values</p> <pre class="code">class Range is Iterable does Positional { ... }</pre>
 <p>Ranges serve two main purposes: to generate lists of consecutive numbers or strings, and to act as a matcher to check if a number or string is within a certain range.</p>
 <p>Ranges are constructed using one of the four possible range operators, which consist of two dots, and optionally a caret which indicates that the endpoint marked with it is excluded from the range.</p>
 <pre class="code">1 .. 5  # 1 &amp;lt;= $x &amp;lt;= 5
1^.. 5  # 1 &amp;lt;  $x &amp;lt;= 5
1 ..^5  # 1 &amp;lt;= $x &amp;lt;  5
1^..^5  # 1 &amp;lt;  $x &amp;lt;  5</pre>
 <p>The caret is also a prefix operator for constructing numeric ranges starting from zero:</p>
 <pre class="code">^$x     # same as 0 ..^ $x.Numeric</pre>
 <p>Iterating a range (or calling the <span class="code">list</span> method) uses the same semantics as the <span class="code">++</span> prefix and postfix operators, i.e., it calls the <span class="code">succ</span> method on the start point, and then the generated elements.</p>
 <p>Ranges always go from small to larger elements; if the start point is bigger than the end point, the range is considered empty.</p>
 <pre class="code">for 1..5 { .say }       # five iterations
('a' ^..^ 'f').list     # 'b', 'c', 'd', 'e'
5 ~~ ^5;                # False
4.5 ~~ 0..^5            # True
(1.1..5).list;          # (1.1, 2.1, 3.1, 4.1)</pre>
 <p>Use the <span class="code">...</span> sequence operator to produce lists of elements that go from larger to smaller values, or to use offsets other than increment-by-1.</p>
 <p>Use <span class="code">Inf</span> or <span class="code">*</span> (Whatever) to indicate an end point to be open-ended.</p>
 <pre class="code">for 1..* { .say }       # start from 1, continue until stopped
for 1..Inf { .say }     # the same</pre>
 <a name="t145.1"></a><h1 id="_type_Range.pod6-Methods">145.1 Methods</h1>
 <a name="t145.1.1"></a><h2 id="_type_Range.pod6-method_min">145.1.1 method min</h2>
 <pre class="code">method min(Range:D:)</pre>
 <p>Returns the start point of the range.</p>
 <a name="t145.1.2"></a><h2 id="_type_Range.pod6-method_excludes-min">145.1.2 method excludes-min</h2>
 <pre class="code">method excludes-min(Range:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if the start point is excluded from the range, and <span class="code">False</span> otherwise.</p>
 <a name="t145.1.3"></a><h2 id="_type_Range.pod6-method_max">145.1.3 method max</h2>
 <pre class="code">method max(Range:D:)</pre>
 <p>Returns the end point of the range.</p>
 <a name="t145.1.4"></a><h2 id="_type_Range.pod6-method_excludes-max">145.1.4 method excludes-max</h2>
 <pre class="code">method excludes-max(Range:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if the end point is excluded from the range, and <span class="code">False</span> otherwise.</p>
 <a name="t145.1.5"></a><h2 id="_type_Range.pod6-method_bounds">145.1.5 method bounds</h2>
 <pre class="code">method bounds(Range:D:) returns Positional</pre>
 <p>Returns a list consisting of the start and end point.</p>
 <a name="t145.1.6"></a><h2 id="_type_Range.pod6-method_infinite">145.1.6 method infinite</h2>
 <pre class="code">method infinite(Range:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if either end point was declared with <span class="code">Inf</span> or <span class="code">*</span>.</p>
 <a name="t145.1.7"></a><h2 id="_type_Range.pod6-method_is-int">145.1.7 method is-int</h2>
 <pre class="code">method is-int(Range:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if both end points are <span class="code">Int</span> values.</p>
 <a name="t145.1.8"></a><h2 id="_type_Range.pod6-method_int-bounds">145.1.8 method int-bounds</h2>
 <pre class="code">method bounds(Range:D:) returns Positional</pre>
 <p>If the <span class="code">Range</span> is an integer range (as indicated by <a href="#_routine_is-int.pod6">is-int</a>), then this method returns a list with the first and last value it will iterate over (taking into account <a href="#_routine_excludes-min.pod6">excludes-min</a> and <a href="#_routine_excludes-max.pod6">excludes-max</a>). Returns a Failure if it is not an integer range.</p>
 <a name="t145.1.9"></a><h2 id="_type_Range.pod6-method_minmax">145.1.9 method minmax</h2>
 <p>Defined as:</p>
 <pre class="code">multi method minmax(Range:D:) returns List:D</pre>
 <p>If the <span class="code">Range</span> is an integer range (as indicated by <a href="#_routine_is-int.pod6">is-int</a>), then this method returns a list with the first and last value it will iterate over (taking into account <a href="#_routine_excludes-min.pod6">excludes-min</a> and <a href="#_routine_excludes-max.pod6">excludes-max</a>). If the range is not an integer range, the method will return a two element list containing the start and end point of the range unless either of <a href="#_routine_excludes-min.pod6">excludes-min</a> or <a href="#_routine_excludes-max.pod6">excludes-max</a> are <span class="code">True</span> in which case a <a href="#_type_Failure.pod6">Failure</a> is returned.</p>
 <pre class="code">my $r1 = (1..5); my $r2 = (1^..5);
say $r1.is-int, ', ', $r2.is-int;                 # True, True
say $r1.excludes-min, ', ', $r2.excludes-min;     # False, True
say $r1.minmax, ', ', $r2.minmax;                 # (1 5), (2 5)

my $r3 = (1.1..5.2); my $r4 = (1.1..^5.2);
say $r3.is-int, ', ', $r4.is-int;                 # False, False
say $r3.excludes-max, ', ', $r4.excludes-max;     # False, True
say $r3.minmax;                                   # (1.1 5.2)
say $r4.minmax;                                   # Failure</pre>
 <a name="t145.1.10"></a><h2 id="_type_Range.pod6-method_elems">145.1.10 method elems</h2>
 <pre class="code">method elems(Range:D:) returns Numeric:D</pre>
 <p>Returns the number of elements in the range, e.g. when being iterated over, or when used as a <span class="code">List</span>. Returns Inf if either end point was specified as <span class="code">Inf</span> or <span class="code">*</span>.</p>
 <a name="t145.1.11"></a><h2 id="_type_Range.pod6-method_list">145.1.11 method list</h2>
 <pre class="code">method list(Range:D:) returns List:D</pre>
 <p>Generates the list of elements that the range represents.</p>
 <a name="t145.1.12"></a><h2 id="_type_Range.pod6-method_flat">145.1.12 method flat</h2>
 <pre class="code">method flat(Range:D:) returns List:D</pre>
 <p>Generates the list of elements that the range represents.</p>
 <a name="t145.1.13"></a><h2 id="_type_Range.pod6-method_pick">145.1.13 method pick</h2>
 <pre class="code">method pick(Range:D:        ) returns Any:D
method pick(Range:D: $number) returns Seq:D</pre>
 <p>Performs the same function as <span class="code">Range.list.pick</span>, but attempts to optimize by not actually generating the list if it is not necessary.</p>
 <a name="t145.1.14"></a><h2 id="_type_Range.pod6-method_roll">145.1.14 method roll</h2>
 <pre class="code">method roll(Range:D:        ) returns Any:D
method roll(Range:D: $number) returns Seq:D</pre>
 <p>Performs the same function as <span class="code">Range.list.roll</span>, but attempts to optimize by not actually generating the list if it is not necessary.</p>
</div> <!-- /type/Rat.pod6 --><div class="pod-body"><a id="_type_Rat.pod6"></a><a name="t146"><h1 class="title">146 class Rat</h1></a> <p class="subtitle">Rational number (limited-precision)</p> <pre class="code">class Rat is Cool does Rational[Int, UInt64] { ... }</pre>
 <p><span class="code">Rat</span> objects store rational numbers as a pair of a numerator and denominator. Number literals with a dot but without exponent produce <span class="code">Rat</span>s.</p>
 <pre class="code">3.1;    # Rat.new(31, 10)</pre>
 <p>Thus arithmetic with short dotted-decimal numbers does not suffer from floating point errors.</p>
 <p>To prevent the numerator and denominator from becoming pathologically large, the denominator is limited to 64 bit storage. On overflow of the denominator a <span class="code">Num</span> (floating-point number) is returned instead.</p>
 <p>For example this function crudely approximates a square root, and overflows the denominator quickly:</p>
 <pre class="code">sub approx-sqrt($n, $iterations) {
    my $x = $n;
    $x = ($x + $n / $x) / 2 for ^$iterations;
    return $x;
}
say approx-sqrt(2, 5).WHAT;     # Rat()
say approx-sqrt(2, 10).WHAT;    # Num()</pre>
 <p>If you want arbitrary precision arithmetic with rational numbers, use the <span class="code">FatRat</span> type instead.</p>
 <p><span class="code">Rat</span> objects are immutable.</p>
 <a name="t146.1"></a><h1 id="_type_Rat.pod6-Methods">146.1 Methods</h1>
 <a name="t146.1.1"></a><h2 id="_type_Rat.pod6-method_perl">146.1.1 method perl</h2>
 <pre class="code">multi method perl(Rat:D:) returns Str:D</pre>
 <p>Returns a string representation corresponding to the unambiguous <span class="code">val()</span>-based representation of rational literals. If the number can be represented exactly in decimal, it will be. Otherwise uses the form "<span class="code">&lt;3/5> </span>", without internal spaces, and including the angles that keep the <span class="code">/</span> from being treated as a normal division operator.</p>
 <pre class="code">say (1/3).perl;                # &amp;lt;1/3&gt;
say (2/4).perl;                # 0.5</pre>
</div> <!-- /type/RatStr.pod6 --><div class="pod-body"><a id="_type_RatStr.pod6"></a><a name="t147"><h1 class="title">147 class RatStr</h1></a> <p class="subtitle">Dual Value Rational number and String</p> <pre class="code">class RatStr is Rat is Str</pre>
 <p>The dual value types (often referred to as <a href="#_language_glossary.pod6-Allomorph">allomorphs</a>) allow for the representation of a value as both a string and a numeric type, typically they will be created for you when the context is "stringy" but they can be determined to be numbers, such as in some <a href="#_language_quoting.pod6">quoting constructs</a>:</p>
 <pre class="code">my $f = &amp;lt;42.1&gt;; say $f.WHAT; # (RatStr)</pre>
 <p>A <span class="code">RatStr</span> can be used interchangeably where one might use a <a href="#_type_Str.pod6">Str</a> or a <a href="#_type_Rat.pod6">Rat</a> :</p>
 <pre class="code">my $f = &amp;lt;42.1&gt;;
my $i = $f + 0.1;
my $s = $f ~ " and a bit more";</pre>
 <a name="t147.1"></a><h1 id="_type_RatStr.pod6-Methods">147.1 Methods</h1>
 <a name="t147.1.1"></a><h2 id="_type_RatStr.pod6-method_new">147.1.1 method new</h2>
 <pre class="code">method new(Rat $i, Str $s)</pre>
 <p>The constructor requires both the <span class="code">Rat</span> and the <span class="code">Str</span> value, when constructing one directly the values can be whatever is required:</p>
 <pre class="code">my $f = RatStr.new(42.1, "forty two and a bit");
say +$f; # -&gt; 42.1
say ~$f; # -&gt; "forty two and a bit"</pre>
 <a name="t147.1.2"></a><h2 id="_type_RatStr.pod6-method_Numeric">147.1.2 method Numeric</h2>
 <pre class="code">method Numeric</pre>
 <p>The numeric coercion is applied when the <span class="code">RatStr</span> is used in a numeric context, such as a numeric comparison or smart match against a numeric value. It will return the <span class="code">Rat</span> value.</p>
 <a name="t147.1.3"></a><h2 id="_type_RatStr.pod6-method_Rat">147.1.3 method Rat</h2>
 <pre class="code">method Rat</pre>
 <p>Returns the <span class="code">Rat</span> value of the <span class="code">RatStr</span>.</p>
 <a name="t147.1.4"></a><h2 id="_type_RatStr.pod6-method_Str">147.1.4 method Str</h2>
 <p>Returns the string value of the <span class="code">RatStr</span>.</p>
 <a name="t147.2"></a><h1 id="_type_RatStr.pod6-Operators">147.2 Operators</h1>
 <a name="t147.2.1"></a><h2 id="_type_RatStr.pod6-infix_cmp">147.2.1 infix cmp</h2>
 <pre class="code">multi sub infix:&amp;lt;cmp&gt;(RatStr:D $a, RatStr:D $b)</pre>
 <p>Compare two <span class="code">RatStr</span> objects. The comparison is done on the <span class="code">Rat</span> value first and then on the <span class="code">Str</span> value. If you want to compare in a different order then you would coerce to the <span class="code">Rat</span> or <span class="code">Str</span> values first:</p>
 <pre class="code">my $f = RatStr.new(42.1, "smaller");
my $g = RatStr.new(43.1, "larger");
say $f cmp $g;          # Less
say $f.Str cmp $g.Str;  # More</pre>
</div> <!-- /type/Rational.pod6 --><div class="pod-body"><a id="_type_Rational.pod6"></a><a name="t148"><h1 class="title">148 role Rational</h1></a> <p class="subtitle">Number stored as numerator and denominator</p> <pre class="code">role Rational[::NuT, ::DeT] does Real { ... }</pre>
 <p><span class="code">Rational</span> is the common role for numbers that are stored as pairs of numerator and denominator. It is parameterized by the types of the numerator and denominator.</p>
 <p>Built into Perl 6 are <a href="#_type_Rat.pod6">Rat</a> and <a href="#_type_FatRat.pod6">FatRat</a>, which both do the <span class="code">Rational</span> role.</p>
 <a name="t148.1"></a><h1 id="_type_Rational.pod6-Methods">148.1 Methods</h1>
 <a name="t148.1.1"></a><h2 id="_type_Rational.pod6-method_new">148.1.1 method new</h2>
 <pre class="code">method new(NuT:D $numerator, DeT:D $denominator) returns Rational:D</pre>
 <p>Creates a new rational object from numerator and denominator.</p>
 <a name="t148.1.2"></a><h2 id="_type_Rational.pod6-method_numerator">148.1.2 method numerator</h2>
 <pre class="code">method numerator(Rational:D:) returns NuT:D</pre>
 <p>Returns the numerator.</p>
 <a name="t148.1.3"></a><h2 id="_type_Rational.pod6-method_denominator">148.1.3 method denominator</h2>
 <pre class="code">method denominator(Rational:D:) returns DeT:D</pre>
 <p>Returns the denominator.</p>
 <a name="t148.1.4"></a><h2 id="_type_Rational.pod6-method_nude">148.1.4 method nude</h2>
 <pre class="code">method nude(Rational:D:) returns Positional</pre>
 <p>Returns a list of the numerator and denominator.</p>
 <a name="t148.1.5"></a><h2 id="_type_Rational.pod6-method_norm">148.1.5 method norm</h2>
 <pre class="code">method norm(Rational:D:) returns Rational:D</pre>
 <p>Returns a normalized Rational object, i.e. with positive denominator, and numerator and denominator coprime.</p>
 <a name="t148.1.6"></a><h2 id="_type_Rational.pod6-method_base-repeating">148.1.6 method base-repeating</h2>
 <pre class="code">method base-repeating(Rational:D: Int:D() $base)</pre>
 <p>Returns a list of two strings that, when concatenated, represent the number in base <span class="code">$base</span>. The second element is the one that repeats. For example:</p>
 <pre class="code">my ($non-rep, $repeating) = (19/3).base-repeating(10);
say $non-rep;                               # 6.
say $repeating;                             # 3
printf '%s(%s)', $non-rep, $repeating;      # 6.(3)</pre>
 <p>19/3 is 6.333333... with the 3 repeating indefinitely.</p>
 <p>If no repetition occurs, the second string is empty:</p>
 <pre class="code">say (5/2).base-repeating(10).perl;          # ("2.5", "")</pre>
 <p>The precision for determining the repeating group is limited to 1000 characters, above that, the second string is <span class="code">???</span>.</p>
</div> <!-- /type/Real.pod6 --><div class="pod-body"><a id="_type_Real.pod6"></a><a name="t149"><h1 class="title">149 role Real</h1></a> <p class="subtitle">Non-complex number</p> <pre class="code">role Real does Numeric { ... }</pre>
 <p>Common role for non-Complex numbers.</p>
 <a name="t149.1"></a><h1 id="_type_Real.pod6-Methods">149.1 Methods</h1>
 <a name="t149.1.1"></a><h2 id="_type_Real.pod6-method_Rat">149.1.1 method Rat</h2>
 <pre class="code">method Rat(Real:D: Real $epsilon = 1e-6)</pre>
 <p>Converts the number to a <span class="code">Rat</span> with the precision <span class="code">$epsilon</span>.</p>
 <a name="t149.1.2"></a><h2 id="_type_Real.pod6-routine_rand">149.1.2 routine rand</h2>
 <pre class="code">sub term:&amp;lt;rand&gt; returns Num:D
method rand(Real:D:) returns Real:D</pre>
 <p>Returns a pseudo-random number between zero and the number.</p>
 <p>The term form returns a pseudo-random <span class="code">Num</span> between 0e0 and 1e0.</p>
 <a name="t149.1.3"></a><h2 id="_type_Real.pod6-method_sign">149.1.3 method sign</h2>
 <pre class="code">method sign(Real:D:)</pre>
 <p>Returns <span class="code">-1</span> if the number is negative, <span class="code">0</span> if it is zero and <span class="code">1</span> otherwise.</p>
 <a name="t149.1.4"></a><h2 id="_type_Real.pod6-method_round">149.1.4 method round</h2>
 <pre class="code">method round(Real:D: $scale = 1)</pre>
 <p>Rounds the number to scale <span class="code">$scale</span>. If <span class="code">$scale</span> is 1, rounds to an integer. If scale is <span class="code">0.1</span>, rounds to one digit after the comma etc.</p>
 <a name="t149.1.5"></a><h2 id="_type_Real.pod6-method_floor">149.1.5 method floor</h2>
 <pre class="code">method floor(Real:D) returns Int:D</pre>
 <p>Return the largest integer not greater than the number.</p>
 <a name="t149.1.6"></a><h2 id="_type_Real.pod6-method_ceiling">149.1.6 method ceiling</h2>
 <pre class="code">method ceiling(Real:D) returns Int:D</pre>
 <p>Returns the smallest integer not less than the number.</p>
 <a name="t149.1.7"></a><h2 id="_type_Real.pod6-method_truncate">149.1.7 method truncate</h2>
 <pre class="code">method truncate(Real:D) returns Int:D</pre>
 <p>Rounds the number towards zero.</p>
 <a name="t149.1.8"></a><h2 id="_type_Real.pod6-method_base">149.1.8 method base</h2>
 <pre class="code">method base(Real:D: Int:D $base where 2..36, $digits?) returns Str:D</pre>
 <p>Converts the number to a string, using <span class="code">$base</span> as base. For <span class="code">$base</span> larger than ten, capital Latin letters are used.</p>
 <pre class="code">255.base(16)            # 'FF'</pre>
 <p>The optional <span class="code">$digits</span> argument asks for that many digits of fraction (which may not be negative). If omitted, a reasonable default is chosen based on type. For Int this default is 0. For <a href="#_type_Num.pod6">Num</a>, the default is 8. For <a href="#_type_Rational.pod6">Rational</a>, the number of places is scaled to the size of the denominator, with a minimum of 6.</p>
 <p>The final digit produced is always rounded.</p>
 <pre class="code">say pi.base(10, 5);     # 3.14159</pre>
 <p>To convert a string to a number use the <span class="code">:16($string)</span> notation where 16 is the base:</p>
 <pre class="code">say :16("FF")           # 255
say :23("FF")           # 360</pre>
</div> <!-- /type/Regex.pod6 --><div class="pod-body"><a id="_type_Regex.pod6"></a><a name="t150"><h1 class="title">150 class Regex</h1></a> <p class="subtitle">String pattern</p> <pre class="code">class Regex is Method { }</pre>
 <p>A regex is a kind of pattern that describes a set of strings. The process of finding out whether a given string is in the set is called <i>matching</i>. The result of such a matching is a <a href="#_type_Match.pod6">Match</a> object, which evaluates to <span class="code">True</span> in boolean context if the string is in the set.</p>
 <p>A regex is typically constructed by a regex literal</p>
 <pre class="code">rx/ ^ab /;      # describes all strings starting with 'ab'
/ ^ ab /;       # same
rx/ \d ** 2/;   # describes all strings containing at least two digits</pre>
 <p>To match a string against a regex, you can use the smart match operator:</p>
 <pre class="code">my $match = 'abc' ~~ rx/ ^ab /;
say $match.Bool;                # True
say $match.orig;                # abc
say $match.Str;                 # ab
say $match.from;                # 0
say $match.to;                  # 2</pre>
 <p>Or you can evaluate the regex in boolean context, in which case it matches against the <span class="code">$_</span> variable</p>
 <pre class="code">$_ = 'abc';
if / ^ab / {
    say '"abc" begins with "ab"';
}
else {
    say 'This is a weird alternative Universe';
}</pre>
 <a name="t150.1"></a><h1 id="_type_Regex.pod6-Methods">150.1 Methods</h1>
 <a name="t150.1.1"></a><h2 id="_type_Regex.pod6-method_ACCEPTS">150.1.1 method ACCEPTS</h2>
 <pre class="code">multi method ACCEPTS(Regex:D: Mu) returns Match:D
multi method ACCEPTS(Regex:D: @)
multi method ACCEPTS(Regex:D: %)</pre>
 <p>Matches the regex against the argument passed in. If the argument is <a href="#_type_Positional.pod6">Positional</a>, it returns the first successful match of any list item. If the argument is <a href="#_type_Associative.pod6">Associative</a>, it returns the first successful match of any key. Otherwise it interprets the argument as a <a href="#_type_Str.pod6">Str</a> and matches against it.</p>
 <p>In the case of Positional and Associative matches, <a href="#_type_Nil.pod6">Nil</a> is returned on failure.</p>
 <a name="t150.1.2"></a><h2 id="_type_Regex.pod6-method_Bool">150.1.2 method Bool</h2>
 <pre class="code">multi method Bool(Regex:D:) returns Bool:D</pre>
 <p>Matches against the caller's <a href="#_syntax_$_.pod6">$_</a> variable, and returns <span class="code">True</span> for a match or <span class="code">False</span> for no match.</p>
</div> <!-- /type/Routine.pod6 --><div class="pod-body"><a id="_type_Routine.pod6"></a><a name="t151"><h1 class="title">151 class Routine</h1></a> <p class="subtitle">Code object with its own lexical scope and `return` handling</p> <pre class="code">class Routine is Block { }</pre>
 <p>A <span class="code">Routine</span> is a code object meant for larger unities of code than <a href="#_type_Block.pod6">Block</a>. Routine is the common superclass for <a href="#_type_Sub.pod6">Sub</a> and <a href="#_type_Method.pod6">Method</a>, the two primary code objects for code reuse.</p>
 <p>Routines serve as a scope limiter for <span class="code">return</span> (i.e. a <span class="code">return</span> returns from the innermost outer Routine).</p>
 <p>Routine is also the level at which multiness (multi subs and multi methods) are handled.</p>
 <a name="t151.1"></a><h1 id="_type_Routine.pod6-Methods">151.1 Methods</h1>
 <a name="t151.1.1"></a><h2 id="_type_Routine.pod6-method_name">151.1.1 method name</h2>
 <pre class="code">method name(Routine:D:) returns Str:D</pre>
 <p>Returns the name of the sub or method.</p>
 <a name="t151.1.2"></a><h2 id="_type_Routine.pod6-method_multi">151.1.2 method multi</h2>
 <pre class="code">method multi(Routine:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if the routine is a multi sub or method.</p>
 <a name="t151.1.3"></a><h2 id="_type_Routine.pod6-method_candidates">151.1.3 method candidates</h2>
 <pre class="code">method candidates(Routine:D:) returns Positional:D</pre>
 <p>Returns a list of multi candidates, or a one-element list with itself if it's not a multi</p>
 <a name="t151.1.4"></a><h2 id="_type_Routine.pod6-method_wrap">151.1.4 method wrap</h2>
 <pre class="code">method wrap(Routine:D: &amp;amp;wrapper)</pre>
 <p>Wraps (i.e. in-place modifies) the routine. That means a call to this routine first calls <span class="code">&amp;wrapper</span>, which then can (but doesn't have to) call the original routine with the <span class="code">callsame</span>, <span class="code">callwith</span>, <span class="code">nextsame</span> and <span class="code">nextwith</span> dispatchers. The return value from the routine is also the return value from the wrapper.</p>
 <p><span class="code">wrap</span> returns a wrap handler, which you can pass to <a href="#_routine_unwrap.pod6">unwrap</a> to restore the original routine.</p>
 <a name="t151.1.5"></a><h2 id="_type_Routine.pod6-method_unwrap">151.1.5 method unwrap</h2>
 <pre class="code">method unwrap(Routine:D: $wraphandler)</pre>
 <p>Restores the original routine after it has been wrapped with <a href="#_routine_wrap.pod6">wrap</a>.</p>
 <a name="t151.1.6"></a><h2 id="_type_Routine.pod6-method_yada">151.1.6 method yada</h2>
 <pre class="code">method yada(Routine:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if the routine is a stub</p>
 <pre class="code">say (sub f() { ... }).yada;      # True
say (sub g() { 1;  }).yada;      # False</pre>
 <a name="t151.1.7"></a><h2 id="_type_Routine.pod6-trait_is_cached">151.1.7 trait is cached</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Routine $r, :$cached!)</pre>
 <p><b>NOTE:</b> this feature is currently EXPERIMENTAL.</p>
 <p>Causes the return value of a routine to be stored, so that when subsequent calls with the same list of arguments are made, the stored value can be returned immediately instead of re-running the routine.</p>
 <p>Useful when storing and returning the computed value is much faster than re-computing it every time, and when the time saving trumps the cost of the use of more memory.</p>
 <p>Even if the arguments passed to the routine are "reference types" (such as objects or arrays), then for the purpose of caching they will only be compared based on their contents. Thus the second invocation will hit the cache in this case:</p>
 <pre class="code">say foo( [1, 2, 3] );   # runs foo
say foo( [1, 2, 3] );   # doesn't run foo, uses cached value</pre>
 <pre class="code">use experimental :cached; 
 
 sub nth-prime(Int:D $x where * &gt; 0) is cached { 
     say "Calculating {$x}th prime"; 
     return (2..*).grep(*.is-prime)[$x - 1]; 
 } 
 
 say nth-prime(43); 
 say nth-prime(43); 
 say nth-prime(43); 
</pre>
 <p>produces this output:</p>
 <pre class="code">Calculating 43th prime 
 191 
 191 
 191 
</pre>
 <a name="t151.1.8"></a><h2 id="_type_Routine.pod6-trait_is_pure">151.1.8 trait is pure</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Routine $r, :!$pure)</pre>
 <p>Marks a subroutine as <i>pure</i>, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.</p>
 <p>This is a hint to the compiler that it can constant-fold calls to such functions when the arguments are known at compile time.</p>
 <pre class="code">sub double(Numeric:D $x) is pure {
    2 * $x;
}</pre>
 <a name="t151.1.9"></a><h2 id="_type_Routine.pod6-trait_is_rw">151.1.9 trait is rw</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Routine $r, :$rw!)</pre>
 <p>When a routine is modified with this trait, its return value will be writable. This is useful when returning variables or writable elements of hashes or arrays, for example:</p>
 <pre class="code">sub walk(\thing, *@keys) is rw { 
     my $current := thing; 
     for @keys -&gt; $k { 
         if $k ~~ Int { 
             $current := $current[$k]; 
         } 
         else { 
             $current := $current{$k}; 
         } 
     } 
     $current; 
 } 
 
 my %hash; 
 walk(%hash, 'some', 'key', 1, 2) = 'autovivified'; 
 
 say %hash.perl; 
</pre>
 <p>produces</p>
 <pre class="code">("some" =&gt; {"key" =&gt; [Any, [Any, Any, "autovivified"]]}).hash 
</pre>
 <p>Note that <span class="code">return</span> marks return values as read only; if you need an early exit from an <span class="code">is rw</span> routine, you have to use <span class="indexed"><a id="561" name="return-rw"> <span class="code">return-rw</span> </a></span> instead.</p>
 <a name="t151.1.10"></a><h2 id="_type_Routine.pod6-trait_is_export">151.1.10 trait is export</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Routine $r, :$export!)</pre>
 <p>Marks a routine as exported to the rest of the world</p>
 <pre class="code">module Foo { 
     sub double($x)  &lt;b&gt;is export&lt;/b&gt;  { 
         2 * $x 
     } 
 } 
 
 import Foo;         # makes sub double available 
 say double 21;      # 42 
</pre>
 <p>From inside another file you'd say <span class="code">use Foo;</span> to load a module and import the exported functions.</p>
 <p>See <a href="#_language_modules.pod6-Exporting_and_Selective_Importing">Exporting and Selective Importing Modules</a> for more details.</p>
 <a name="t151.1.11"></a><h2 id="_type_Routine.pod6-trait_is_DEPRECATED">151.1.11 trait is DEPRECATED</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Routine:D $r, :$DEPRECATED!)</pre>
 <p>Marks a routine as deprecated, optionally with a message what to use instead.</p>
 <p>This code</p>
 <pre class="code">sub f() is DEPRECATED('the literal 42') { 42 } 
 say f(); 
</pre>
 <p>produces this output:</p>
 <pre class="code">42 
 Saw 1 occurrence of deprecated code. 
 ================================================================================ 
 Sub f (from GLOBAL) seen at: 
   deprecated.p6, line 2 
 Please use the literal 42 instead. 
 -------------------------------------------------------------------------------- 
 Please contact the author to have these occurrences of deprecated code 
 adapted, so that this message will disappear! 
</pre>
 <a name="t151.1.12"></a><h2 id="_type_Routine.pod6-trait_is_hidden-from-backtrace">151.1.12 trait is hidden-from-backtrace</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Routine:D, :$hidden-from-backtrace!)</pre>
 <p>Hides a routine from showing up in a default backtrace. For example</p>
 <pre class="code">sub inner { die "OH NOEZ" }; 
 sub outer { inner() }; 
 outer(); 
</pre>
 <p>produces the error message and backtrace</p>
 <pre class="code">OH NOEZ 
   in sub inner at bt.p6:1 
   in sub outer at bt.p6:2 
   in block &amp;lt;unit&gt; at bt.p6:3 
</pre>
 <p>but if <span class="code">inner</span> is marked with <span class="code">hidden-from-backtrace</span></p>
 <pre class="code">sub inner is hidden-from-backtrace { die "OH NOEZ" }; 
 sub outer { inner() }; 
 outer(); 
</pre>
 <p>the error backtrace does not show it:</p>
 <pre class="code">OH NOEZ 
   in sub outer at bt.p6:2 
   in block &amp;lt;unit&gt; at bt.p6:3 
</pre>
 TODO: explain export tags

</div> <!-- /type/Scalar.pod6 --><div class="pod-body"><a id="_type_Scalar.pod6"></a><a name="t152"><h1 class="title">152 class Scalar</h1></a> <p class="subtitle">A mostly transparent container used for indirections</p> <pre class="code">class Scalar { ... }</pre>
 <p>A <span class="code">Scalar</span> is an internal indirection which is for most purposes invisible during ordinary use of Perl 6. It is the default container type associated with the <span class="code">$</span> sigil. A literal <span class="code">Scalar</span> may be placed around a literal value by enclosing the value in <span class="code">$(…)</span>. This notation will appear in the output of a <span class="code">.perl</span> method in certain places where it is important to note the presence of <span class="code">Scalar</span>s.</p>
 <p>When a value is assigned to a <span class="code">$</span>-sigiled variable, the variable will actually bind to a <span class="code">Scalar</span>, which in turn will bind to the value. When a <span class="code">Scalar</span> is assigned to a <span class="code">$</span>-sigiled variable, the value bound to by that <span class="code">Scalar</span> will be bound to the <span class="code">Scalar</span> which that variable was bound to (a new one will be created if necessary.)</p>
 <p>In addition <span class="code">Scalar</span>s delegate all method calls to the value which they contain. As such, <span class="code">Scalar</span>s are for the most part invisible. There is, however, one important place where <span class="code">Scalar</span>s have a visible impact: a <span class="code">Scalar</span> will shield its contents from flattening by most Perl 6 core list operations.</p>
 <p>A <span class="code">$</span>-sigiled variable may be bound directly to a value with no intermediate <span class="code">Scalar</span> using the binding operator <span class="code">:=</span>. You can tell if this has been done by examining the introspective pseudo-method <span class="code">.VAR</span>:</p>
 <pre class="code">my $a = 1;
$a.WHAT.say;     # says "(Int)"
$a.VAR.WHAT.say; # says "(Scalar)"
my $b := 1;
$b.WHAT.say;     # says "(Int)"
$b.VAR.WHAT.say; # says "(Int)"</pre>
 <p>This same thing happens when values are assigned to an element of an <span class="code">Array</span>, however, <span class="code">List</span>s directly contain their values:</p>
 <pre class="code">my @a = 1, 2, 3;
@a[0].WHAT.say;            # says "(Int)"
@a[0].VAR.WHAT.say;        # says "(Scalar)"
[1, 2, 3][0].WHAT.say;     # says "(Int)"
[1, 2, 3][0].VAR.WHAT.say; # says "(Scalar)"
(1, 2, 3)[0].WHAT.say;     # says "(Int)"
(1, 2, 3)[0].VAR.WHAT.say; # says "(Int)"</pre>
 <p>Array elements may be bound directly to values using <span class="code">:=</span> as well, however this is to be discouraged as it may lead to confusion. Doing so will break exact round-tripping of <span class="code">.perl</span> output -- since <span class="code">Array</span>s are assumed to place <span class="code">Scalar</span>s around each element, <span class="code">Scalar</span>s are not denoted with <span class="code">$</span> in the output of <span class="code">Array.perl</span>.</p>
 <pre class="code">[1, $(2, 3)].perl.say      # says [1, (2, 3)]
(1, $(2, 3)).perl.say      # says (1, $(2, 3))</pre>
 <p>Binding a Scalar to a <span class="code">$</span>-sigiled variable replaces the existing <span class="code">Scalar</span> in that variable, if any, with the given <span class="code">Scalar</span>. That means more than one variable may refer to the same <span class="code">Scalar</span>. Because the <span class="code">Scalar</span> may be mutated, this makes it possible to alter the value of both variables by altering only one of them:</p>
 <pre class="code">my $a = 1;
my $b := $a;
$b = 2;
$a.say;       # says "2"</pre>
 <p>SSA-style constants bind directly to their value with no intervening <span class="code">Scalar</span>, even when <span class="code">=</span>/assignment is used. They may be forced to use a <span class="code">Scalar</span> by assigning a <span class="code">$</span>-sigiled variable to them, at which point, they behave entirely like <span class="code">$</span>-sigiled variables.</p>
 <pre class="code">my \c = 1;
c.WHAT.say;              # says "(Int)"
c.VAR.WHAT.say;          # says "(Int)"
my $a = 1;
my \d = $a;              # just "my \d = $ = 1" works, too
d.WHAT.say;              # says "(Int)"
d.VAR.WHAT.say;          # says "(Scalar)"
d = 2;                   # ok
c = 2;                   # error, cannot modify an immutable Int</pre>
</div> <!-- /type/Scheduler.pod6 --><div class="pod-body"><a id="_type_Scheduler.pod6"></a><a name="t153"><h1 class="title">153 role Scheduler</h1></a> <p class="subtitle">Scheme for automatically assigning tasks to threads</p> <pre class="code">role Scheduler {
    has &amp;amp;.uncaught_handler is rw
}</pre>
 <p>Common role for schedulers. A scheduler is a piece of code that determines which resources to use to run which task, and when.</p>
 <p>Some operations for example on <a href="#_type_Proc::Async.pod6">Proc::Async</a>, <a href="#_type_Promise.pod6">Promise</a>, <a href="#_type_Supply.pod6">Supply</a> allow you to specify a scheduler explicitly; they generally expect those schedulers to follow the interface defined by <span class="code">Scheduler</span></p>
 <a name="t153.1"></a><h1 id="_type_Scheduler.pod6-Methods">153.1 Methods</h1>
 <a name="t153.1.1"></a><h2 id="_type_Scheduler.pod6-method_uncaught_handler">153.1.1 method uncaught_handler</h2>
 <pre class="code">method uncaught_handler() is rw</pre>
 <p>RW-Accessor for the handler that is caught for uncaught exceptions from the code that is being scheduled and run.</p>
 <a name="t153.1.2"></a><h2 id="_type_Scheduler.pod6-method_cue">153.1.2 method cue</h2>
 <pre class="code">method cue(:&amp;amp;code, Instant :$at, :$in, :$every, :$times = 1; :&amp;amp;catch)</pre>
 <p>Schedules a callable (<span class="code">&amp;code</span>) for execution. The adverbs control when and how the code is run:</p>
 <p><span class="code">$at</span> can be an <a href="#_type_Instant.pod6">Instant</a> before which the code won't be run. Alternatively <span class="code">$in</span> is the number of seconds (possibly fractional) to wait before running the code.</p>
 <p>If <span class="code">$every</span> is specified, it is interpreted as the number of seconds (possibly fractional) to wait before re-executing the code.</p>
 <p><span class="code">$times</span> tells the scheduler how many times to run the code.</p>
 <p><span class="code">&amp;catch</span> is called with the <a href="#_type_Exception.pod6">Exception</a> as its sole argument if <span class="code">&amp;code</span> dies.</p>
</div> <!-- /type/Semaphore.pod6 --><div class="pod-body"><a id="_type_Semaphore.pod6"></a><a name="t154"><h1 class="title">154 class Semaphore</h1></a> <p class="subtitle">Control access to shared resources by multiple processes</p> <pre class="code">class Semaphore { }</pre>
 <p>Protect your shared code, data or device access using semaphores. An example is a printer manager managing a pool of printers without the need of storing print jobs when all printers are occupied. The next job is just blocked until a printer becomes available.</p>
 <pre class="code">class print-manager {
  has Array $!printers;
  has Semaphore $!print-control;

  method BUILD( Int:D :$nbr-printers ) {
    for ^$nbr-printers -&gt; $pc {
      $!printers[$pc] = { :name{"printer-$pc"}, ... };
    }

    $!print-control .= new($nbr-printers);
  }

  method print( $print-job ) {
    $!print-control.acquire;

    find-available-printer-and-print-it($job);

    $!print-control.release;
  }
}</pre>
 <p>Another example is a protection around code updating sensitive data. In such a case the semaphore is typically initialized to 1.</p>
 <p>It is important to have a release on every exit of your program! While this is obvious, it is easy to fall in traps such as throwing an exception caused by some event. When the program dies there is no problem. When the exception is caught your program might eventually come back to the acquire method and will hang indefinitely.</p>
 <a name="t154.1"></a><h1 id="_type_Semaphore.pod6-Methods">154.1 Methods</h1>
 <a name="t154.1.1"></a><h2 id="_type_Semaphore.pod6-method_new">154.1.1 method new</h2>
 <pre class="code">method new( int $permits )</pre>
 <p>Initialize the semaphore with the number of permitted accesses. E.g. when set to 2, program threads can pass the acquire method twice until it blocks on the third time acquire is called.</p>
 <a name="t154.1.2"></a><h2 id="_type_Semaphore.pod6-method_acquire">154.1.2 method acquire</h2>
 <pre class="code">method acquire()</pre>
 <p>Acquire access. When other threads have called the method before and the the number of permits are used up, the process blocks until threads passed before releases the semaphore.</p>
 <a name="t154.1.3"></a><h2 id="_type_Semaphore.pod6-method_try_acquire">154.1.3 method try_acquire</h2>
 <pre class="code">method try_acquire() returns Bool</pre>
 <p>Same as acquire but will not block. Instead it returns <span class="code">True</span> if access is permitted or <span class="code">False</span> otherwise.</p>
 <a name="t154.1.4"></a><h2 id="_type_Semaphore.pod6-method_release">154.1.4 method release</h2>
 <pre class="code">method release()</pre>
 <p>Release the semaphore raising the number of permissions. Any blocked thread will get access after that.</p>
</div> <!-- /type/Seq.pod6 --><div class="pod-body"><a id="_type_Seq.pod6"></a><a name="t155"><h1 class="title">155 class Seq</h1></a> <p class="subtitle">An iterable, lazy sequence of values</p> <pre class="code">class Seq is Cool does Iterable does PositionalBindFailover { }</pre>
 <p>A <span class="code">Seq</span> represents anything that can lazily produce a sequence of values. A <span class="code">Seq</span> is born in a state where iterating it will consume the values. However, calling .cache on a Seq will return a List that is still lazy, but stores the generated values for later access. The same is true when assigning a Seq to an array.</p>
 <p>A typical use case is <a href="#_type_IO::Handle.pod6-method_lines">method  <span class="code">lines</span>  in  <span class="code">IO::Handle</span> </a>, which could use quite much memory if it stored all the lines read from the file. So</p>
 <pre class="code">for open('README').lines -&gt; $line {
    say $line;
}</pre>
 <p>won't keep all lines from the file in memory.</p>
 <p>This implies that you cannot iterate the same <span class="code">Seq</span> object twice (otherwise it couldn't throw away old values), so this dies:</p>
 <pre class="code">my @a = 1, 2, 3; 
 my @b = &amp;lt;a b c&gt;; 
 my \c = @a Z=&gt; @b; 
 .say for c; 
 .say for c; # dies with "This Seq has already been iterated, and its values consumed [...]" 
             # of type  &lt;a href="#_type_X::Seq::Consumed.pod6"&gt;X::Seq::Consumed&lt;/a&gt;  
</pre>
 <p>A high-level construct to generate a <span class="code">Seq</span> is <span class="code">gather/take</span>, as well as many built-in methods like <span class="code">map</span> and <span class="code">grep</span>, low-level constructors to create a Seq from an iterator or from looping constructs are available too.</p>
 <a name="t155.1"></a><h1 id="_type_Seq.pod6-Methods">155.1 Methods</h1>
 <a name="t155.1.1"></a><h2 id="_type_Seq.pod6-method_new">155.1.1 method new</h2>
 <pre class="code">method new(Iterator:D $iter) returns Seq:D</pre>
 <p>Creates a new <span class="code">Seq</span> object from the iterator passed as the single argument.</p>
 <a name="t155.1.2"></a><h2 id="_type_Seq.pod6-method_iterator">155.1.2 method iterator</h2>
 <pre class="code">method iterator(Seq:D:) returns Iterator:D</pre>
 <p>Returns the underlying iterator, and marks the invocant as consumed. If called on an already consumed sequence, throws an error of type <a href="#_type_X::Seq::Consumed.pod6">X::Seq::Consumed</a>.</p>
 <a name="t155.1.3"></a><h2 id="_type_Seq.pod6-method_is-lazy">155.1.3 method is-lazy</h2>
 <pre class="code">method is-lazy(Seq:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if the sequence is lazy and potentially infinite, and <span class="code">False</span> otherwise. If called on an already consumed sequence, throws an error of type <a href="#_type_X::Seq::Consumed.pod6">X::Seq::Consumed</a>.</p>
 <a name="t155.1.4"></a><h2 id="_type_Seq.pod6-method_eager">155.1.4 method eager</h2>
 <pre class="code">method eager(Seq:D:) returns Bool:D</pre>
 <p>Returns an eagerly evaluated <a href="#_type_List.pod6">List</a> based on the invocant sequence, and marks it as consumed. If called on an already consumed sequence, throws an error of type <a href="#_type_X::Seq::Consumed.pod6">X::Seq::Consumed</a>.</p>
 <a name="t155.1.5"></a><h2 id="_type_Seq.pod6-method_from-loop">155.1.5 method from-loop</h2>
 <pre class="code">proto method from-loop(|) returns Seq:D
multi method from-loop(&amp;amp;body)
multi method from-loop(&amp;amp;body, &amp;amp;cond, :$repeat)
multi method from-loop(&amp;amp;body, &amp;amp;cond, &amp;amp;afterward)</pre>
 <p>Creates a new <span class="code">Seq</span> based callbacks.</p>
 <p>The first form produces an infinite <span class="code">Seq</span> by calling <span class="code">&amp;body</span> each time a new element is requested, using the return value from <span class="code">&amp;body</span> as the item. This emulates (or implements) a <span class="code">loop { body }</span> construct.</p>
 <p>The second form calls <span class="code">&amp;cond</span> before each call to <span class="code">&amp;body</span>, and terminates the sequence if <span class="code">&amp;cond</span> returns a false value. If <span class="code">$repeat</span> is set to a true value, the first call to <span class="code">&amp;cond</span> is omitted, and <span class="code">&amp;body</span> called right away. This emulates (or implements) <span class="code">while cond { body }</span> and <span class="code">repeat { body } while cond</span> loops.</p>
 <p>The third form enables C-style looping by calling a third callback, <span class="code">&amp;afterward</span>, after each call to <span class="code">&amp;body</span>.</p>
</div> <!-- /type/Set.pod6 --><div class="pod-body"><a id="_type_Set.pod6"></a><a name="t156"><h1 class="title">156 class Set</h1></a> <p class="subtitle">Immutable collection of distinct objects</p> <pre class="code">class Set does Setty { }</pre>
 <p>A <span class="code">Set</span> is an immutable set, meaning a collection of distinct elements in no particular order. (For <i>mutable</i> sets, see <a href="#_type_SetHash.pod6">SetHash</a> instead.)</p>
 <p>Objects/values of any type are allowed as set elements. Within a <span class="code">Set</span>, every element is guaranteed to be unique (in the sense that no two elements would compare positively with the <a href="===">===</a> operator):</p>
 <pre class="code">my $fruits = set &amp;lt;peach apple orange apple apple&gt;; 
 
 say $fruits.elems;      # 3 
 say $fruits.keys.sort;  # apple orange peach 
</pre>
 <p><span class="code">Set</span>s can be treated as object hashes using the <span class="code">{ }</span> postcircumfix operator, which returns the value <span class="code">True</span> for keys that are elements of the set, and <span class="code">False</span> for keys that aren't:</p>
 <pre class="code">say $fruits&amp;lt;apple&gt;;  # True
say $fruits&amp;lt;kiwi&gt;;   # False</pre>
 <a name="t156.1"></a><h1 id="_type_Set.pod6-Creating_Set_objects">156.1 Creating <span class="code">Set</span> objects</h1>
 <p><span class="code">Set</span>s can be composed using the <a href="#155-sub set">set</a> subroutine (or <span class="code">Set.new</span>, for which it is a shorthand). Any positional parameters, regardless of their type, become elements of the set:</p>
 <pre class="code">my $n = set "zero" =&gt; 0, "one" =&gt; 1, "two" =&gt; 2;
say $n.keys.perl;        # ("zero" =&gt; 0, "one" =&gt; 1, "two" =&gt; 2).list
say $n.keys.map(&amp;amp;WHAT);  # (Pair) (Pair) (Pair)</pre>
 <p>Alternatively, the <span class="code">.Set</span> coercer (or its functional form, <span class="code">Set()</span>) can be called on an existing object to coerce it to a <span class="code">Set</span>. Its semantics depend on the type and contents of the object. In general it evaluates the object in list context and creates a set with the resulting items as elements, although for Hash-like objects or Pair items, only the keys become elements of the set - and keys mapped to values which boolify to <span class="code">False</span> are skipped:</p>
 <pre class="code">my $n = ("zero" =&gt; 0, "one" =&gt; 1, "two" =&gt; 2).Set;
say $n.keys.perl;        # ("one", "two").list
say $n.keys.map(&amp;amp;WHAT);  # (Str) (Str)</pre>
 <p>Furthermore, you can get a <span class="code">Set</span> by using set operators (see next section) on objects of other types such as <a href="#_type_List.pod6">List</a>, which will internally call <span class="code">.Set</span> on them before performing the operation. Be aware of the tight precedence of those operators though, which may require you to use parens around arguments:</p>
 <pre class="code">say (1..5) (^) 4;  # set(1, 2, 3, 5)</pre>
 <a name="t156.2"></a><h1 id="_type_Set.pod6-Operators">156.2 Operators</h1>
 <p>Perl 6 provides common set operators, which can take <span class="code">Set</span>s (or any other collections) as input, and return result sets as new <span class="code">Set</span> objects. For example:</p>
 <pre class="code">my ($a, $b) = set(1, 2, 3), set(2, 4); 
 
 say $a (&amp;lt;) $b;  # False 
 say $a (&amp;amp;) $b;  # set(2) 
 say $a (^) $b;  # set(1, 3, 4) 
 
 # Unicode versions: 
 say $a ⊂ $b;  # False 
 say $a ∩ $b;  # set(2) 
 say $a ⊖ $b;  # set(1, 3, 4) 
</pre>
 <p>See <a href="#_language_setbagmix.pod6-Set/Bag_Operators">Set/Bag Operators</a> for a complete list of set operators with detailed explanations.</p>
 <a name="t156.3"></a><h1 id="_type_Set.pod6-Subroutines">156.3 Subroutines</h1>
 <a name="t156.3.1"></a><h2 id="_type_Set.pod6-sub_set">156.3.1 sub set</h2>
 <pre class="code">sub set(*@args --&gt; Set)</pre>
 <p>Creates a <span class="code">Set</span> from the given <span class="code">@args</span></p>
 <a name="t156.4"></a><h1 id="_type_Set.pod6-See_Also">156.4 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/SetHash.pod6 --><div class="pod-body"><a id="_type_SetHash.pod6"></a><a name="t157"><h1 class="title">157 class SetHash</h1></a> <p class="subtitle">Mutable collection of distinct objects</p> <pre class="code">class SetHash does Setty { }</pre>
 <p>A <span class="code">SetHash</span> is a mutable set, meaning a collection of distinct elements in no particular order. (For <i>immutable</i> sets, see <a href="#_type_Set.pod6">Set</a> instead.)</p>
 <p>Objects/values of any type are allowed as set elements. Within a <span class="code">Set</span>, every element is guaranteed to be unique (in the sense that no two elements would compare positively with the <a href="===">===</a> operator):</p>
 <pre class="code">my $fruits = &amp;lt;peach apple orange apple apple&gt;.SetHash; 
 
 say $fruits.elems;      # 3 
 say $fruits.keys.sort;  # apple orange peach 
</pre>
 <p><span class="code">SetHash</span>es can be treated as object hashes using the <span class="code">{ }</span> postcircumfix operator, which returns the value <span class="code">True</span> for keys that are elements of the set, and <span class="code">False</span> for keys that aren't. Assigning a value that boolifies to <span class="code">True</span> or <span class="code">False</span>, respectively, can be used to add or remove a set element:</p>
 <pre class="code">say $fruits&amp;lt;apple&gt;;     # True 
 say $fruits&amp;lt;kiwi&gt;;      # False 
 
 $fruits&amp;lt;apple kiwi&gt; = False, True; 
 say $fruits.keys.sort;  # kiwi orange peach 
</pre>
 <a name="t157.1"></a><h1 id="_type_SetHash.pod6-Creating_SetHash_objects">157.1 Creating <span class="code">SetHash</span> objects</h1>
 <p><span class="code">SetHash</span>es can be composed using <span class="code">SetHash.new</span>. Any positional parameters, regardless of their type, become elements of the set:</p>
 <pre class="code">my $n = SetHash.new: "zero" =&gt; 0, "one" =&gt; 1, "two" =&gt; 2;
say $n.keys.perl;        # ("zero" =&gt; 0, "one" =&gt; 1, "two" =&gt; 2).list
say $n.keys.map(&amp;amp;WHAT);  # (Pair) (Pair) (Pair)</pre>
 <p>Alternatively, the <span class="code">.SetHash</span> coercer (or its functional form, <span class="code">SetHash()</span>) can be called on an existing object to coerce it to a <span class="code">SetHash</span>. Its semantics depend on the type and contents of the object. In general it evaluates the object in list context and creates a set with the resulting items as elements, although for Hash-like objects or Pair items, only the keys become elements of the set - and keys mapped to values which boolify to <span class="code">False</span> are skipped:</p>
 <pre class="code">my $n = ("zero" =&gt; 0, "one" =&gt; 1, "two" =&gt; 2).SetHash;
say $n.keys.perl;        # ("one", "two").list
say $n.keys.map(&amp;amp;WHAT);  # (Str) (Str)</pre>
 <a name="t157.2"></a><h1 id="_type_SetHash.pod6-Operators">157.2 Operators</h1>
 <p>Perl 6 provides common set operators, which can take <span class="code">SetHash</span>es (or any other collections) as input, although result sets are returned as immutable <span class="code">Set</span>s. For example:</p>
 <pre class="code">my ($a, $b) = SetHash.new(1, 2, 3), SetHash.new(2, 4); 
 
 say $a (&amp;lt;) $b;  # False 
 say $a (&amp;amp;) $b;  # set(2) 
 say $a (^) $b;  # set(1, 3, 4) 
 say $a (|) $b;  # set(1, 2, 3, 4) 
 
 # Unicode versions: 
 say $a ⊂ $b;  # False 
 say $a ∩ $b;  # set(2) 
 say $a ⊖ $b;  # set(1, 3, 4) 
 say $a ∪ $b;  # set(1, 2, 3, 4) 
</pre>
 <p>See <a href="#_language_setbagmix.pod6-Set/Bag Operators">Set/Bag Operators</a> for a complete list of set operators with detailed explanations.</p>
 <a name="t157.3"></a><h1 id="_type_SetHash.pod6-See_Also">157.3 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/Setty.pod6 --><div class="pod-body"><a id="_type_Setty.pod6"></a><a name="t158"><h1 class="title">158 role Setty</h1></a> <p class="subtitle">Collection of distinct objects</p> <pre class="code">role Setty does QuantHash { }</pre>
 <p>A role for collections which make sure that each element can only appear once. See <a href="#_type_Set.pod6">Set</a> and <a href="#_type_SetHash.pod6">SetHash</a>.</p>
 <a name="t158.1"></a><h1 id="_type_Setty.pod6-Methods">158.1 Methods</h1>
 <a name="t158.1.1"></a><h2 id="_type_Setty.pod6-method_grab">158.1.1 method grab</h2>
 <pre class="code">method grab($count = 1)</pre>
 <p>Removes and returns <span class="code">$count</span> elements chosen at random (without repetition) from the set.</p>
 <p>If <span class="code">*</span> is passed as <span class="code">$count</span>, or <span class="code">$count</span> is greater than or equal to the size of the set, then all its elements are removed and returned in random order.</p>
 <p>Only works on mutable sets; When used on an immutable set, it results in an exception.</p>
 <a name="t158.1.2"></a><h2 id="_type_Setty.pod6-method_grabpairs">158.1.2 method grabpairs</h2>
 <pre class="code">method grabpairs($count = 1)</pre>
 <p>Removes <span class="code">$count</span> elements chosen at random (without repetition) from the set, and returns a list of <span class="code">Pair</span> objects whose keys are the grabbed elements and whose values are <span class="code">True</span>.</p>
 <p>If <span class="code">*</span> is passed as <span class="code">$count</span>, or <span class="code">$count</span> is greater than or equal to the size of the set, then all its elements are removed and returned as <span class="code">Pair</span>s in the aforementioned way in random order.</p>
 <p>Only works on mutable sets; When used on an immutable set, it results in an exception.</p>
 <a name="t158.1.3"></a><h2 id="_type_Setty.pod6-method_pick">158.1.3 method pick</h2>
 <pre class="code">multi method pick($count = 1)</pre>
 <p>Returns <span class="code">$count</span> elements chosen at random (without repetition) from the set.</p>
 <p>If <span class="code">*</span> is passed as <span class="code">$count</span>, or <span class="code">$count</span> is greater than or equal to the size of the set, then all its elements are returned in random order.</p>
 <a name="t158.1.4"></a><h2 id="_type_Setty.pod6-method_roll">158.1.4 method roll</h2>
 <pre class="code">multi method roll($count = 1)</pre>
 <p>Returns a lazy list of <span class="code">$count</span> elements, each randomly selected from the set. Each random choice is made independently, like a separate die roll where each die face is a set element.</p>
 <p>If <span class="code">*</span> is passed as <span class="code">$count</span>, the list is infinite.</p>
 <a name="t158.1.5"></a><h2 id="_type_Setty.pod6-method_keys">158.1.5 method keys</h2>
 <p>Returns a list of all elements of the set.</p>
 <a name="t158.1.6"></a><h2 id="_type_Setty.pod6-method_values">158.1.6 method values</h2>
 <p>Returns a list containing as many <span class="code">True</span> values as the set has elements.</p>
 <a name="t158.1.7"></a><h2 id="_type_Setty.pod6-method_kv">158.1.7 method kv</h2>
 <p>Returns a list of the set's elements and <span class="code">True</span> values interleaved.</p>
 <a name="t158.1.8"></a><h2 id="_type_Setty.pod6-method_elems">158.1.8 method elems</h2>
 <pre class="code">method elems(--&gt; Int)</pre>
 <p>The number of elements of the set.</p>
 <a name="t158.1.9"></a><h2 id="_type_Setty.pod6-method_total">158.1.9 method total</h2>
 <pre class="code">method total(--&gt; Int)</pre>
 <p>The total of all the values of the <span class="code">QuantHash</span> object. For a <span class="code">Setty</span> object, this is just the number of elements.</p>
 <a name="t158.1.10"></a><h2 id="_type_Setty.pod6-method_ACCEPTS">158.1.10 method ACCEPTS</h2>
 <pre class="code">method ACCEPTS($other)</pre>
 <p>Returns <span class="code">True</span> if <span class="code">$other</span> and <span class="code">self</span> contain all the same elements, and no others.</p>
 <a name="t158.2"></a><h1 id="_type_Setty.pod6-See_Also">158.2 See Also</h1>
 <p><a href="#_language_setbagmix.pod6">Sets, Bags, and Mixes</a></p>
</div> <!-- /type/Signature.pod6 --><div class="pod-body"><a id="_type_Signature.pod6"></a><a name="t159"><h1 class="title">159 class Signature</h1></a> <p class="subtitle">Parameter list pattern</p> <pre class="code">class Signature { ... }</pre>
 <p>A signature is a static description of the <a href="#_type_Parameter.pod6">parameter</a> list of a code object. That is, it describes what and how many arguments you need to pass to the code or function in order to call it.</p>
 <p>Passing arguments to a signature <i>binds</i> the arguments, contained in a <a href="#_type_Capture.pod6">Capture</a>, to the signature.</p>
 <p><span class="indexed"><a id="562" name="signature literal (Signature)"></a></span></p>
 <a name="t159.1"></a><h1 id="_type_Signature.pod6-Signature_Literals">159.1 Signature Literals</h1>
 <p>Signatures appear in parenthesis after subroutine and method names, on blocks after a <span class="code">-> </span> or <span class="code">&lt;-> </span> arrow, as the input to <a href="#_language_variables.pod6-Variable_Declarators_and_Scope">variable declarators</a> like <a href="#_syntax_my.pod6"> <span class="code">my</span> </a>, or as a separate term starting with a colon.</p>
 <pre class="code">sub f &lt;b&gt;($x)&lt;/b&gt;  { } 
 #    ^^^^ Signature of sub f 
 method x &lt;b&gt;()&lt;/b&gt;  { } 
 #       ^^ Signature of a method 
 my $s = sub  &lt;b&gt;(*@a)&lt;/b&gt;  { } 
 #           ^^^^^ Signature of an anonymous function 
 
 for @list -&gt;  &lt;b&gt;$x&lt;/b&gt;  { } 
 #            ^^   Signature of a  &lt;a href="#_type_Block.pod6"&gt;block&lt;/a&gt;  
 
 my  &lt;b&gt;($a, @b)&lt;/b&gt;  = 5, (6, 7, 8); 
 #  ^^^^^^^^ Signature of a variable declarator 
 
 my $sig =  &lt;b&gt;:($a, $b)&lt;/b&gt; ; 
 #          ^^^^^^^^ Standalone Signature object 
</pre>
 <p>Signature literals can be used to define the signature of a callback or a closure.</p>
 <pre class="code">sub f(&amp;amp;c:(Int)){}
sub will-work(Int){}
sub won't-work(Str){}
f(&amp;amp;will-work);
f(&amp;amp;won't-work); # fails at runtime
f(-&gt; Int { 'this works too' } );</pre>
 <p>Smart matching signatures against a List is supported.</p>
 <pre class="code">my $sig = :(Int $i, Str $s);
say (10, 'answer') ~~ $sig;
# OUTPUT«True␤»
given ('answer', 10) {
    when :(Str, Int) { say 'match' }
    when $sig { say 'mismatch' }
}
# OUTPUT«match␤»</pre>
 <p>When smart matching against a Hash, the signature is assumed to consist of the keys of the Hash.</p>
 <pre class="code">my %h = left =&gt; 1, right =&gt; 2;
say %h ~~ :(:$left, :$right);
# OUTPUT«True␤»</pre>
 <a name="t159.1.1"></a><h2 id="_type_Signature.pod6-Parameter_Separators">159.1.1 Parameter Separators</h2>
 <p>A signature consists of zero or more <i> <a href="#_type_Parameter.pod6">parameters</a> </i>, separated by comma.</p>
 <pre class="code">:($a &lt;b&gt;,&lt;/b&gt;  @b &lt;b&gt;,&lt;/b&gt;  %c) 
 sub add($a &lt;b&gt;,&lt;/b&gt;  $b) { $a + $b } 
</pre>
 <p>As an exception the first parameter may be followed by a colon instead of a comma to mark the invocant of a method. The invocant is the object that was used to call the method, which is usually bound to <a href=" &lt;span class=&quot;code&quot;&gt;self&lt;/span&gt; "> <span class="code">self</span> </a>. By specifying it in the signature, you can change the variable name it is bound to.</p>
 <pre class="code">:( &lt;b&gt;$a:&lt;/b&gt;  @b, %c)       # first argument is the invocant 
 
  &lt;a href="#_syntax_class.pod6"&gt;class&lt;/a&gt;  Foo { 
     method whoami( &lt;b&gt;$me:&lt;/b&gt; ) { 
         "Well I'm class  &lt;b&gt;$me&lt;/b&gt; .^ &lt;a href="#_routine_name.pod6"&gt;name&lt;/a&gt; (), of course!" 
     } 
 } 
 say Foo.whoami; # =&gt; Well I'm class Foo, of course! 
</pre>
 <p><span class="indexed"><a id="563" name="type constraint (Signature)"></a></span></p>
 <a name="t159.1.2"></a><h2 id="_type_Signature.pod6-Type_Constraints">159.1.2 Type Constraints <a name="564"></a></h2>
 <p>Parameters can optionally have a type constraint (the default is <a href=" &lt;span class=&quot;code&quot;&gt;Any&lt;/span&gt; "> <span class="code">Any</span> </a>). These can be used to restrict the allowed input to a function.</p>
 <pre class="code">:( &lt;b&gt; &lt;a href="#_type_Int.pod6"&gt;Int&lt;/a&gt; &lt;/b&gt;  $a,  &lt;b&gt; &lt;a href="#_type_Str.pod6"&gt;Str&lt;/a&gt; &lt;/b&gt;  $b) 
 
 sub divisors( &lt;b&gt; &lt;a href="#_type_Int.pod6"&gt;Int&lt;/a&gt; &lt;/b&gt;  $n) { $_ if $n  &lt;a href="%%"&gt;%%&lt;/a&gt;  $_ for 1..$n } 
 divisors 2.5; # !!! Calling 'divisors' will never work with argument types ( &lt;a href="#_type_Rat.pod6"&gt;Rat&lt;/a&gt; ) 
</pre>
 <p><span class="indexed"><a id="566" name="anonymouse arguments (Signature)"></a></span> Anonymous arguments are fine too, if a parameter is only needed for its type constraint.</p>
 <pre class="code">:( &lt;b&gt;$&lt;/b&gt; ,  &lt;b&gt;@&lt;/b&gt; , %a)               # two anonymous and a "normal" parameter 
 :( &lt;b&gt; &lt;a href="#_type_Int.pod6"&gt;Int&lt;/a&gt; &lt;/b&gt; ,  &lt;b&gt; &lt;a href="#_type_Positional.pod6"&gt;Positional&lt;/a&gt; &lt;/b&gt; )  # just a type is also fine (two parameters) 
 sub baz( &lt;b&gt; &lt;a href="#_type_Str.pod6"&gt;Str&lt;/a&gt; &lt;/b&gt; ) { "Got passed a Str" } 
</pre>
 <p>Type constraints may also be <a href="#_type_Signature.pod6-Type_Captures">type captures</a>.</p>
 <p><span class="indexed"><a id="567" name="where clause (Signature)"></a></span> In addition to those <i>nominal</i> types, additional constraints can be placed on parameters in the form of code blocks which must return a true value to pass the type check</p>
 <pre class="code">sub f(Real $x where { $x &gt; 0 }, Real $y where { $y &gt;= $x }) { }</pre>
 <p>In fact it doesn't need to be a code block, anything on the right of the <span class="code">where</span>-block will be used to smart-match the argument against it. So you can also write</p>
 <pre class="code">multi factorial(Int $ where 0) { 1 }
multi factorial(Int $x)        { $x * factorial($x - 1) }</pre>
 <p>The first of those can be shortened to</p>
 <pre class="code">multi factorial(0) { 1 }</pre>
 <p>i.e., you can use a literal directly as a type and value constraint on an anonymous parameter.</p>
 <a name="t159.1.2.1"></a><h3 id="_type_Signature.pod6-Constraining_Defined_and_Undefined_Values">159.1.2.1 <a name="568"></a>Constraining Defined and Undefined Values</h3>
 <p>Normally, a type constraint only checks whether the value passed is of the correct type.</p>
 <pre class="code">sub limit-lines (Str $s, Int $limit) { 
     my @lines = $s.lines; 
     @lines[0 .. min @lines.elems, $limit].join("\n") 
 } 
 say (limit-lines "a \n b \n c \n d \n", 3).perl; # "a \n b \n c " 
 say limit-lines Str,      3;  # Uh-oh. Dies with "Cannot call 'lines';" 
 say limit-lines "a \n b", Int # Always returns the max number of lines 
</pre>
 <p>In this case, we really only want to deal with defined strings. To do this, we use the <span class="code">:D</span> type constraint.</p>
 <pre class="code">sub limit-lines (Str &lt;b&gt;:D&lt;/b&gt;  $s, Int $limit) { 
     ... 
 } 
 # Dies with "Parameter '$s' requires an instance, but a type object was passed 
 #   in sub limit-lines" 
 say limit-lines Str, 3; 
</pre>
 <p>This is much better than the way the program failed before, since here the reason for failure is clearer.</p>
 <p>It's also possible undefined types are the only ones that make sense for a routine to accept. This can be constrained with the <span class="code">:U</span> type constraint. For example, we can turn the <span class="code">&amp;limit-lines</span> into a multi function to make use of the <span class="code">:U</span> constraint.</p>
 <pre class="code">multi limit-lines (Str $s, Int:D $limit) { 
     ... 
 } 
 multi limit-lines (Str $s, Int &lt;b&gt;:U&lt;/b&gt;  $) { $s } 
 say limit-lines "a \n b \n c", Int; # "a \n b \n c" 
</pre>
 <p>For explicitly indicating the normal behaviour, <span class="code">:_</span> can be used, but this is unnecessary. <span class="code">:(Num:_ $)</span> is the same as <span class="code">:(Num $)</span>.</p>
 <a name="t159.1.2.2"></a><h3 id="_type_Signature.pod6-Constraining_signatures_of_Callables">159.1.2.2 <a name="569"></a>Constraining signatures of Callables</h3>
 <p>To constrain block and subroutine references based on their signature write the signature after the argument name.</p>
 <pre class="code">sub f(&amp;amp;c:(Int, Str)) { say c(10, 'ten') };
sub g(Int $i, Str $s){ $s ~ $i };
f(&amp;amp;g);
# OUTPUT«ten10␤»</pre>
 <a name="t159.1.2.3"></a><h3 id="_type_Signature.pod6-Constraining_Return_Types">159.1.2.3 <a name="570"></a>Constraining Return Types</h3>
 <p>The token <span class="code">--</span>> followed by a type will force a type check on successful execution of a routine. The return type arrow has to be placed at the end of the parameter list. The keyword <span class="code">returns</span> following a signature declaration has the same function. <span class="code">Nil</span> is considered as being defined for the type check. Type objects and thus undefined values will pass the test unless the type smiley <span class="code">:D</span> is used.</p>
 <pre class="code">sub foo(--&gt; Int) { my Int $i; $i };
sub foo(--&gt; Int:D) { 1 }
sub foo() returns Int { 1 };
sub does-not-work(--&gt; Int) { "" }; # throws X::TypeCheck::Return</pre>
 <p>If the type constraint is a constant expression, it is used as the return value of the routine. Any return statement in that routine has to be argumentless.</p>
 <pre class="code">sub foo(--&gt; 123) { return }</pre>
 <p><a href="#_type_Nil.pod6"> <span class="code">Nil</span> </a> and <a href="#_type_Failure.pod6"> <span class="code">Failure</span> </a> are always allowed as return types, regardless of any type constraint.</p>
 <pre class="code">sub foo(--&gt; Int) { Nil };
say foo.perl; # Nil</pre>
 <p>Type captures and coercion types are not supported.</p>
 <a name="t159.1.2.4"></a><h3 id="_type_Signature.pod6-Coercion_Type">159.1.2.4 <a name="571"></a>Coercion Type</h3>
 <p>To accept one type but coerce it automatically to another, use the accepted type as an argument to the target type. If the accepted type is <span class="code">Any</span> it can be omitted.</p>
 <pre class="code">sub f(Int(Str) $want-int, Str() $want-str){ say $want-int.WHAT, $want-str.WHAT }
f '10', 10;
# OUTPUT«(Int)(Str)␤»</pre>
 <a name="t159.1.3"></a><h2 id="_type_Signature.pod6-Slurpy_(A.K.A._Variadic)_Parameters">159.1.3 <a name="572"></a>Slurpy (A.K.A. Variadic) Parameters</h2>
 <p>An array or hash parameter can be marked as <i>slurpy</i> by leading asterisk(s), which means it can bind to an arbitrary amount of arguments (zero or more).</p>
 <p>These are called "slurpy" because they slurp up any remaining arguments to a function, like someone slurping up noodles.</p>
 <pre class="code">:($a, @b)              # exactly two arguments, where the second one must be Positional 
 :($a,  &lt;b&gt;*@b&lt;/b&gt; )          # at least one argument, @b slurps up any beyond that 
 :( &lt;b&gt;*%h&lt;/b&gt; )              # no positional arguments, but any number of named arguments 
</pre>
 <pre class="code">sub one-arg (@)     { } 
 sub slurpy  ( &lt;b&gt;*@&lt;/b&gt; ) { } 
 one-arg(5, 6, 7) ; # !!! too many arguments 
 one-arg (5, 6, 7); # ok, same as one-arg((5, 6, 7)) 
 slurpy  (5, 6, 7); # ok 
 one-arg  5, 6, 7 ; # !!! too many arguments 
 slurpy   5, 6, 7 ; # ok 
</pre>
 <pre class="code">sub named-names ( &lt;b&gt;*%named-args&lt;/b&gt; ) { %named-args. &lt;a href="#_routine_keys.pod6"&gt;keys&lt;/a&gt;  } 
 say named-names :foo(42) :bar&amp;lt;baz&gt; # =&gt; foo bar 
</pre>
 <p>Note that positional parameters aren't allowed after slurpy parameters.</p>
 <pre class="code">:(*@args, $last) # !!! Cannot put required parameter after variadic parameters</pre>
 <p>Slurpy parameters declared with one asterisk will flatten arguments by dissolving one or more layers of bare <span class="code">Iterables</span>. Slurpy parameters declared with two stars do not do so:</p>
 <pre class="code">sub a(*@a) { @a.join("|").say };
a(1, [1, 2], ([3, 4], 5)); # 1|1|2|3|4|5
sub b(**@b) { @b.join("|").say };
b(1, [1, 2], ([3, 4], 5)); # 1|1 2|3 4 5</pre>
 <p>Normally a slurpy parameter will create an Array, create a new Scalar container for each argument, and assign the value from each argument to those Scalars. If the original argument also had an intermediary Scalar it is bypassed during this process, and is not available inside the called function.</p>
 <p>Slurpy parameters have special behaviors when combined with some <a href="#158-Parameter_Traits_and_Modifiers">traits and modifiers</a>, as described below.</p>
 <a name="t159.1.4"></a><h2 id="_type_Signature.pod6-Single_Argument_Rule_Slurpy">159.1.4 Single Argument Rule Slurpy</h2>
 <p>The single argument rule allows to treat arguments to subroutines, <span class="code">for</span>-loops and list constructors based on context. Many methods on positional types can work with a single arguments the same way as with a list or arguments. Using <span class="code">+@</span> as a sigil in a Signature provides syntactic sugar to make that task a little easier. Any single argument of a non-positional type will be promoted to a list with a single item.</p>
 <pre class="code">sub f(+@a){ dd @a };
f(1);
# OUTPUT«[1]␤»
f(1, 2, 3);
# OUTPUT«[1, 2, 3]␤»
my @b = &amp;lt;a b c&gt;;
f @b;
# OUTPUT«["a", "b", "c"]␤»</pre>
 <a name="t159.1.5"></a><h2 id="_type_Signature.pod6-Type_Captures">159.1.5 Type Captures</h2>
 <p>Type Captures allow to defer the specification of a type constraint to the time the function is called. They allow to refer to a type both in the signature and the function body.</p>
 <pre class="code">sub f(::T $p1, T $p2, ::C){
    # $p1 and $p2 are of the same type T, that we don't know yet
    # C will hold a type we derive from a type object or value
    my C $closure = $p1 / $p2;
        return sub (T $p1) {
                $closure * $p1;
        }
}

# The first parameter is Int and so must be the 2nd.
# We derive the 3rd type from calling the operator that is used in &amp;amp;f.
my &amp;amp;s = f(10, 2, Int.new / Int.new);
say s(2); # 10 / 2 * 2 == 10</pre>
 <p><span class="indexed"><a id="573" name="positional argument (Signature) named argument (Signature)"></a></span></p>
 <a name="t159.1.6"></a><h2 id="_type_Signature.pod6-Positional_vs._Named">159.1.6 Positional vs. Named</h2>
 <p>A parameter can be <i>positional</i> or <i>named</i>. All parameters are positional, except slurpy hash parameters and parameters marked with a leading colon <span class="code">:</span>.</p>
 <pre class="code">:($a)               # a positional parameter
:(:$a)              # a named parameter of name 'a'
:(*@a)              # a slurpy positional parameter
:(*%h)              # a slurpy named parameter</pre>
 <p>On the caller side, positional arguments are passed in the same order as the parameters were declared.</p>
 <pre class="code">sub pos($x, $y) { "x=$x y=$y" }
pos(4, 5);                          # x=4 y=5</pre>
 <p>In the case of named arguments and parameters, only the name is used for mapping arguments to parameters</p>
 <pre class="code">    sub named(:$x, :$y) { "x=$x y=$y" } 
     named( y  &lt;a href="=&amp;gt;"&gt;=&gt;&lt;/a&gt;  5, x =&gt; 4);             # x=4 y=5 
</pre>
 <p>It is possible to have a different name for a named parameter than the variable name:</p>
 <pre class="code">sub named(:official($private) { "Official business!" if $private }
named :official;</pre>
 <p>Aliases are also possible that way:</p>
 <pre class="code">sub paint( :color(:colour($c)) ) { }    # 'color' and 'colour' are both OK
sub paint( :color(:$colour) ) { }       # same API for the caller</pre>
 <p>A function with named arguments can be called dynamically, dereferencing a <a href="#_type_Pair.pod6">Pair</a> with <span class="code">|</span> to turn it into a named argument.</p>
 <pre class="code">multi f(:$named){ note &amp;amp;?ROUTINE.signature };
multi f(:$also-named){ note &amp;amp;?ROUTINE.signature };
for 'named', 'also-named' -&gt; $n {
    f(|($n =&gt; rand))                    # «(:$named)␤(:$also-named)␤»
}

my $pair = :named(1);
f |$pair;                               # «(:$named)␤»</pre>
 <p>The same can be used to convert a Hash into named arguments.</p>
 <pre class="code">my %pairs = also-named =&gt; 4;
f |%pairs;                              # «(:$also-named)␤»</pre>
 <p><span class="indexed"><a id="574" name="optional argument (Signature)"></a></span></p>
 <a name="t159.1.7"></a><h2 id="_type_Signature.pod6-Optional_and_Mandatory_Parameters">159.1.7 Optional and Mandatory Parameters</h2>
 <p>Positional parameters are mandatory by default, and can be made optional with a default value or a trailing question mark:</p>
 <pre class="code">:(Str $id)          # required parameter
:($base = 10)       # optional parameter, default value 10
:(Int $x?)          # optional parameter, default is the Int type object</pre>
 <p><span class="indexed"><a id="575" name="mandatory named argument (Signature)"></a></span> Named parameters are optional by default, and can be made mandatory with a trailing exclamation mark:</p>
 <pre class="code">:(:%config)         # optional parameter
:(:$debug = False)  # optional parameter, defaults to False
:(:$name!)          # mandatory 'name' named parameter</pre>
 <p>Default values can depend on previous parameters, and are (at least notionally) computed anew for each call</p>
 <pre class="code">:($goal, $accuracy = $goal / 100);
:(:$excludes = ['.', '..']);        # a new Array for every call</pre>
 <p><span class="indexed"><a id="576" name="destructuring arguments (Signature)"></a></span></p>
 <a name="t159.1.8"></a><h2 id="_type_Signature.pod6-Destructuring_Parameters">159.1.8 Destructuring Parameters</h2>
 <p>Parameters can be followed by a sub-signature in brackets, which will destructure the argument given. The destructuring of a list is just its elements:</p>
 <pre class="code">    sub first(@array  &lt;b&gt;($first, *@rest)&lt;/b&gt; ) { $first } 
</pre>
 <p>or</p>
 <pre class="code">    sub first( &lt;b&gt;[$f, *@]&lt;/b&gt; ) { $f } 
</pre>
 <p>While the destructuring of a hash is its pairs:</p>
 <pre class="code">    sub all-dimensions (%  &lt;b&gt;(:length(:$x), :width(:$y), :depth(:$z))&lt;/b&gt; ) { 
         $x  &lt;a href="#_routine_andthen.pod6"&gt;andthen&lt;/a&gt;  $y andthen $z andthen True 
     } 
</pre>
 <p>In general, an object is destructured based on its attributes. A common idiom is to unpack a <a href=" &lt;span class=&quot;code&quot;&gt;Pair&lt;/span&gt; "> <span class="code">Pair</span> </a>'s key and value in a for loop:</p>
 <pre class="code">    for @guest-list. &lt;a href="#_routine_pairs.pod6"&gt;pairs&lt;/a&gt;  -&gt;  &lt;b&gt;(:key($index), :value($guest)&lt;/b&gt; ) { 
         ... 
     } 
</pre>
 <p>However, this unpacking of objects as their attributes is only the default behavior. To make an object get destructured differently, change its <a href=" &lt;span class=&quot;code&quot;&gt;Capture&lt;/span&gt; "> <span class="code">Capture</span> </a> method.</p>
 <p><span class="indexed"><a id="577" name="Long Names"></a></span></p>
 <a name="t159.1.9"></a><h2 id="_type_Signature.pod6-Long_Names">159.1.9 Long Names</h2>
 <p>To exclude certain parameters from being considered in multiple dispatch, separate them with a double semi-colon.</p>
 <pre class="code">multi sub f(Int $i, Str $s;; :$b) { dd $i, $s, $b };
f(10, 'answer');
# OUTPUT«10␤"answer"␤Any $b = Any␤»</pre>
 <a name="t159.1.10"></a><h2 id="_type_Signature.pod6-Capture_Parameters">159.1.10 <a name="578"></a>Capture Parameters</h2>
 <p>Prefixing a parameter with a vertical bar <span class="code">|</span> makes the parameter a <a href=" &lt;span class=&quot;code&quot;&gt;Capture&lt;/span&gt; "> <span class="code">Capture</span> </a>, using up all the remaining positional and named arguments.</p>
 <p>This is often used in <span class="code">proto</span> definitions (like <span class="code">proto foo (|) {*}</span>) to indicate that the routine's <a href="#_routine_multi.pod6"> <span class="code">multi</span>  definitions</a> can have any <a href="#158-Type_Constraints">type constraints</a>. See <a href="#_language_functions.pod6-proto">proto</a> for an example.</p>
 <p>If bound to a variable arguments can be forwarded as a whole using the slip operator <span class="code">|</span>.</p>
 <pre class="code">sub a(Int $i, Str $s) { say $i.WHAT, $s.WHAT }
sub b(|c) { say c.WHAT; a(|c) }
b(42, "answer");
# OUTPUT«(Capture)␤(Int)(Str)␤»</pre>
 <a name="t159.1.11"></a><h2 id="_type_Signature.pod6-Parameter_Traits_and_Modifiers">159.1.11 <a name="579"></a>Parameter Traits and Modifiers</h2>
 <p>By default, parameters are bound to their argument and marked as read-only. One can change that with traits on the parameter.</p>
 <p>The <span class="code">is copy</span> trait causes the argument to be copied, and allows it to be modified inside the routine</p>
 <pre class="code">sub count-up ($x is copy) {
    $x = Inf if $x ~~ Whatever;
    .say for 1..$x;
}</pre>
 <p>The <span class="code">is rw</span> trait makes the parameter only bind to a variable (or other writable container). Assigning to the parameter changes the value of the variable at the caller side.</p>
 <pre class="code">sub swap($x is rw, $y is rw) {
    ($x, $y) = ($y, $x);
}</pre>
 <p>On slurpy parameters, <span class="code">is rw</span> is reserved for future use by language designers.</p>
 <p>The <a href="#_type_Parameter.pod6-method_raw"> <span class="code">is raw</span>  trait</a> is automatically applied to parameters declared with a <a href="#_language_variables.pod6-Sigilless_variables">backslash</a> as a "sigil", and may also be used to make normally sigiled parameters behave like these do. In the special case of slurpies, which normally produce an <span class="code">Array</span> full of <span class="code">Scalar</span>s as described above, <span class="code">is raw</span> will instead cause the parameter to produce a <span class="code">List</span>. Each element of that list will be bound directly as raw parameter.</p>
 <a name="t159.2"></a><h1 id="_type_Signature.pod6-Methods">159.2 Methods</h1>
 <a name="t159.2.1"></a><h2 id="_type_Signature.pod6-method_params">159.2.1 method params</h2>
 <pre class="code">method params(Signature:D:) returns Positional</pre>
 <p>Returns the list of <a href=" &lt;span class=&quot;code&quot;&gt;Parameter&lt;/span&gt; "> <span class="code">Parameter</span> </a> objects that make up the signature.</p>
 <a name="t159.2.2"></a><h2 id="_type_Signature.pod6-method_arity">159.2.2 method arity</h2>
 <pre class="code">method arity(Signature:D:) returns Int:D</pre>
 <p>Returns the <i>minimal</i> number of positional arguments required to satisfy the signature.</p>
 <a name="t159.2.3"></a><h2 id="_type_Signature.pod6-method_count">159.2.3 method count</h2>
 <pre class="code">method count(Signature:D:) returns Real:D</pre>
 <p>Returns the <i>maximal</i> number of positional arguments which can be bound to the signature. Returns <span class="code">Inf</span> if there is a slurpy positional parameter.</p>
 <a name="t159.2.4"></a><h2 id="_type_Signature.pod6-method_returns">159.2.4 method returns</h2>
 <p>Whatever the Signature's return constraint is:</p>
 <pre class="code">:($a, $b --&gt; Int).returns # Int</pre>
 <a name="t159.2.5"></a><h2 id="_type_Signature.pod6-method_ACCEPTS">159.2.5 method ACCEPTS</h2>
 <pre class="code">multi method ACCEPTS(Signature:D:  &lt;a href="#_type_Capture.pod6"&gt;Capture&lt;/a&gt;  $topic) 
 multi method ACCEPTS(Signature:D: @topic) 
 multi method ACCEPTS(Signature:D: %topic) 
 multi method ACCEPTS(Signature:D: Signature $topic) 
</pre>
 <p>The first three see if the argument could be bound to the capture, i.e., if a function with that <span class="code">Signature</span> would be able to be called with the <span class="code">$topic</span>:</p>
 <pre class="code">(1, 2, :foo) ~~ :($a, $b, :foo($bar))   # True
&amp;lt;a b c d&gt; ~~ :(Int $a)                  # False</pre>
 <p>The last returns <span class="code">True</span> if anything accepted by <span class="code">$topic</span> would also be accepted by the <span class="code">Signature</span>.</p>
 <pre class="code">:($a, $b) ~~ :($foo, $bar, $baz?)   # True
:(Int $n) ~~ :(Str)                 # False</pre>
</div> <!-- /type/Slip.pod6 --><div class="pod-body"><a id="_type_Slip.pod6"></a><a name="t160"><h1 class="title">160 class Slip</h1></a> <p class="subtitle">A kind of List that automatically flattens into an outer container</p> <pre class="code">class Slip is List { ... }</pre>
 <p>A <span class="code">Slip</span> is a <a href="#_type_List.pod6">List</a> that automatically flatten into an outer List (or other list-like container or iterable).</p>
 <p>For example it allows you to write a <a href="#_routine_map.pod6">map</a> that produces more than one value into the result without nesting:</p>
 <pre class="code">say &amp;lt;a b c&gt;.map({ ($_, $_.uc).Slip }).join('|');        # a|A|b|B|c|C</pre>
 <p>In contrast, when returning an ordinary List, the resulting list is nested:</p>
 <pre class="code">say &amp;lt;a b c&gt;.map({ $_, $_.uc }).join('|');               # a A|b B|c C</pre>
 <p>To create a <span class="code">Slip</span>, either coerce another list-like type to it by calling the <span class="code">Slip</span> method, or use the <span class="code">slip</span> subroutine:</p>
 <pre class="code"># This says "1" and then says "2", rather than saying "(1 2)"
.say for gather {
    take slip(1, 2);
}</pre>
 <p>A <span class="code">Slip</span> may also be created by using the <span class="code">prefix:&lt;|></span> operator. This differs from the <span class="code">slip</span> subroutine in both precedence and treatment of single arguments. In fact, <span class="code">prefix:&lt;|></span> only takes a single argument, so it that way, it behaves closer to the <span class="code">.Slip</span> method than the <span class="code">slip</span> subroutine.</p>
 <pre class="code">my $l = (1, 2, 3);
say (1, slip 2, 3).perl;  # says (1, 2, 3)      , slips 2, 3 into (1, …)
say (0, slip $l).perl;    # says (0, $(1, 2, 3)), $l does not break apart
say (0, $l.Slip).perl;    # says (0, 1, 2, 3)   , slips from $l into (0, …)
say (|$l).perl;           # says slip(1, 2, 3)  , breaks apart $l
say (0, (|$l, 4), 5);     # says (0 (1 2 3 4) 5), slips from $l into (…, 4)
say (0, ($l.Slip, 4), 5); # says (0 (1 2 3 4) 5), slips from $l into (…, 4)
say (0, (slip $l, 4), 5); # says (0 (1 2 3) 4 5), slips ($l, 4) into (0, …, 5)
say (0, ($l, 4).Slip, 5); # says (0 (1 2 3) 4 5), slips ($l, 4) into (0, …, 5)</pre>
 <p>Loops that do not want to produce a value for an iteration use <span class="code">Slips</span>, rather than empty <span class="code">List</span>s to do so, as do <span class="code">if</span> statements that do not run their blocks.</p>
 <a name="t160.1"></a><h1 id="_type_Slip.pod6-Methods">160.1 Methods</h1>
 <a name="t160.1.1"></a><h2 id="_type_Slip.pod6-sub_slip">160.1.1 sub slip</h2>
 <pre class="code">sub slip(*@) returns Slip:D</pre>
 <p>Creates a <a href="#_type_Slip.pod6">Slip</a> from its arguments.</p>
 <a name="t160.2"></a><h1 id="_type_Slip.pod6-Constants">160.2 Constants</h1>
 <a name="t160.2.1"></a><h2 id="_type_Slip.pod6-Empty">160.2.1 <a name="565"></a> <span class="code">Empty</span> </h2>
 <p><span class="code">Empty</span> is a <span class="code">Slip</span> of the empty <span class="code">List</span>.</p>
</div> <!-- /type/Stash.pod6 --><div class="pod-body"><a id="_type_Stash.pod6"></a><a name="t161"><h1 class="title">161 class Stash</h1></a> <p class="subtitle">Table for "our"-scoped symbols</p> <pre class="code">class Stash is Hash { }</pre>
 <p>A <span class="code">Stash</span> is a hash that is used for symbol tables at the package scoping level in Perl 6.</p>
 <p>To get a Stash, you can call the <span class="code">.WHO</span> pseudo-method on a package (because it answers the question <i>who lives here?</i>), or if you write the package name as a literal, append two colons:</p>
 <pre class="code">class Boring {
    class Nested { };
    our sub package_sub { }
    my sub lexical { };
    method a_method() { }
}

say Boring::.^name;             # Stash
say Boring.WHO === Boring::;    # True</pre>
 <p>Since it inherits from <a href="#_type_Hash.pod6">Hash</a>, you can use all the usual hash functionality:</p>
 <pre class="code">say Boring::.keys.sort;         # &amp;amp;package_sub Nested
say Boring::&amp;lt;Nested&gt;;           # (Nested)</pre>
 <p>As the example above shows only "our"-scoped things appear in the <span class="code">Stash</span> (nested classes are "our" by default, but can be excluded with "my".) Lexicals and methods are not included in a Stash, since they do not live in the package table. Lexicals live in a separate lexical pad, which is only visible from inside the scope. Methods (in the case that the package is also a class) have a separate method table, and are accessible through introspection on the class itself, via <span class="code">.can</span> and <span class="code">.^methods</span>.</p>
</div> <!-- /type/Str.pod6 --><div class="pod-body"><a id="_type_Str.pod6"></a><a name="t162"><h1 class="title">162 class Str</h1></a> <p class="subtitle">String of characters</p> <pre class="code">class Str is Cool does Stringy { }</pre>
 <p>Built-in class for strings. Objects of type <span class="code">Str</span> are immutable.</p>
 <a name="t162.1"></a><h1 id="_type_Str.pod6-Methods">162.1 Methods</h1>
 <a name="t162.1.1"></a><h2 id="_type_Str.pod6-routine_chop">162.1.1 routine chop</h2>
 <pre class="code">multi sub    chop(Str:D)  returns Str:D
multi method chop(Str:D: $chars = 1) returns Str:D</pre>
 <p>Returns the string with <span class="code">$chars</span> characters removed from the end.</p>
 <a name="t162.1.2"></a><h2 id="_type_Str.pod6-routine_chomp">162.1.2 routine chomp</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    chomp(Str:D ) returns Str:D
multi method chomp(Str:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">chomp($string);
$string.chomp;</pre>
 <p>Returns the string with a logical newline (any codepoint that has the <span class="code">NEWLINE</span> property) removed from the end.</p>
 <p>Examples:</p>
 <pre class="code">say chomp("abc\n");       # abc
say "def\r\n".chomp;      # def  NOTE: \r\n is a single grapheme!
say "foo\r".chomp;        # foo</pre>
 <a name="t162.1.3"></a><h2 id="_type_Str.pod6-routine_lc">162.1.3 routine lc</h2>
 <p>Defined as:</p>
 <pre class="code">multi sub    lc(Str:D ) returns Str:D
multi method lc(Str:D:) returns Str:D</pre>
 <p>Usage:</p>
 <pre class="code">lc($string);
$string.lc;</pre>
 <p>Returns a lower-case version of the string.</p>
 <p>Examples:</p>
 <pre class="code">lc("A"); # returns "a"
"A".lc;  # returns "a"</pre>
 <a name="t162.1.4"></a><h2 id="_type_Str.pod6-routine_uc">162.1.4 routine uc</h2>
 <pre class="code">multi sub    uc(Str:D ) returns Str:D
multi method uc(Str:D:) returns Str:D</pre>
 <p>Returns an uppercase version of the string.</p>
 <a name="t162.1.5"></a><h2 id="_type_Str.pod6-routine_fc">162.1.5 routine fc</h2>
 <pre class="code">multi sub    fc(Str:D ) returns Str:D
multi method fc(Str:D:) returns Str:D</pre>
 <p>Does a Unicode "fold case" operation suitable for doing caseless string comparisons. (In general, the returned string is unlikely to be useful for any purpose other than comparison.)</p>
 <a name="t162.1.6"></a><h2 id="_type_Str.pod6-routine_tc">162.1.6 routine tc</h2>
 <pre class="code">multi sub    tc(Str:D ) returns Str:D
multi method tc(Str:D:) returns Str:D</pre>
 <p>Does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping</p>
 <a name="t162.1.7"></a><h2 id="_type_Str.pod6-routine_tclc">162.1.7 routine tclc</h2>
 <pre class="code">multi sub    tclc(Str:D ) returns Str:D
multi method tclc(Str:D:) returns Str:D</pre>
 <p>Turns the first character to title case, and all other characters to lower case</p>
 <a name="t162.1.8"></a><h2 id="_type_Str.pod6-routine_wordcase">162.1.8 routine wordcase</h2>
 <pre class="code">multi sub    wordcase(Cool $x)  returns Str 
 multi sub    wordcase(Str:D $x) returns Str 
 multi method wordcase(Str:D: :&amp;amp;filter = &amp;amp; &lt;a href="#_routine_tclc.pod6"&gt;tclc&lt;/a&gt; , Mu :$where = True) returns Str 
</pre>
 <p>Returns a string in which <span class="code">&amp;filter</span> has been applied to all the words that match <span class="code">$where</span>. By default, this means that the first letter of every word is capitalized, and all the other letters lowercased.</p>
 <a name="t162.1.9"></a><h2 id="_type_Str.pod6-method_lcfirst">162.1.9 method lcfirst</h2>
 <p>Perl 6 does not have a <span class="code">lcfirst</span> function.</p>
 <a name="t162.1.10"></a><h2 id="_type_Str.pod6-method_ucfirst">162.1.10 method ucfirst</h2>
 <p>Perl 6 does not have a <span class="code">ucfirst</span> function. See <a href="#_routine_tc.pod6">tc</a>.</p>
 <a name="t162.1.11"></a><h2 id="_type_Str.pod6-method_unival">162.1.11 method unival</h2>
 <pre class="code">multi method unival(Str:D) returns Numeric</pre>
 <p>Returns the numeric value that the first codepoint in the invocant represents, or <span class="code">NaN</span> if it's not numeric.</p>
 <pre class="code">say '4'.unival;     # 4
say '¾'.unival;     # 0.75
say 'a'.unival;     # NaN</pre>
 <a name="t162.1.12"></a><h2 id="_type_Str.pod6-method_univals">162.1.12 method univals</h2>
 <pre class="code">multi method univals(Str:D) returns List</pre>
 <p>Returns a list of numeric values represented by each codepoint in the invocant string, and <span class="code">NaN</span> for non-numeric characters.</p>
 <pre class="code">say '4a¾".univals;  # 4 NaN 0.75</pre>
 <a name="t162.1.13"></a><h2 id="_type_Str.pod6-method_length">162.1.13 method length</h2>
 <p>Perl 6 does not have a <span class="code">length</span> function. See <a href="#_routine_chars.pod6">chars</a>, <a href="#_routine_elems.pod6">elems</a>, or <a href="#_routine_codes.pod6">codes</a>.</p>
 <a name="t162.1.14"></a><h2 id="_type_Str.pod6-routine_chars">162.1.14 routine chars</h2>
 <pre class="code">multi sub    chars(Cool $x)  returns Int:D
multi sub    chars(Str:D $x) returns Int:D
multi sub    chars(str $x)   returns int
multi method chars(Str:D:)   returns Int:D</pre>
 <p>Returns the number of characters in the string in graphemes. On the JVM, this currently erroneously returns the number of codepoints instead.</p>
 <a name="t162.1.15"></a><h2 id="_type_Str.pod6-method_encode">162.1.15 method encode</h2>
 <pre class="code">multi method encode(Str:D: $encoding = $?ENC, $nf = $?NF) returns Blob</pre>
 <p>Returns a <a href="#_type_Blob.pod6">Blob</a> which represents the original string in the given encoding and normal form. The actual return type is as specific as possible, so <span class="code">$str.encode('UTF-8')</span> returns a <span class="code">utf8</span> object, <span class="code">$str.encode('ISO-8859-1')</span> a <span class="code">buf8</span>.</p>
 <a name="t162.1.16"></a><h2 id="_type_Str.pod6-routine_index">162.1.16 routine index</h2>
 <pre class="code">multi sub    index(Cool $s, Str:D $needle, Cool $startpos = 0) returns Int
multi method index(Cool $needle, Cool $startpos = 0) returns Int</pre>
 <p>Searches for <span class="code">$needle</span> in the string starting from <span class="code">$startpos</span>. It returns the offset into the string where <span class="code">$needle</span> was found, and an undefined value if it was not found.</p>
 <p>Examples:</p>
 <pre class="code">say index "Camelia is a butterfly", "a";     # 1
say index "Camelia is a butterfly", "a", 2;  # 6
say index "Camelia is a butterfly", "er";    # 17
say index "Camelia is a butterfly", "Camel"; # 0
say index "Camelia is a butterfly", "Onion"; # Nil

say index("Camelia is a butterfly", "Onion").defined ?? 'OK' !! 'NOT'; # NOT</pre>
 <a name="t162.1.17"></a><h2 id="_type_Str.pod6-routine_rindex">162.1.17 routine rindex</h2>
 <pre class="code">multi sub    rindex(Str:D $haystack, Str:D $needle, Int $startpos = $haystack.chars) returns StrPos
multi method rindex(Str:D $haystack: Str:D $needle, Int $startpos = $haystack.chars) returns StrPos</pre>
 <p>Returns the last position of <span class="code">$needle</span> in <span class="code">$haystack</span> not after <span class="code">$startpos</span>. Returns an undefined value if <span class="code">$needle</span> wasn't found.</p>
 <p>Examples:</p>
 <pre class="code">say rindex "Camelia is a butterfly", "a";     # 11
say rindex "Camelia is a butterfly", "a", 10; # 6</pre>
 <a name="t162.1.18"></a><h2 id="_type_Str.pod6-routine_split">162.1.18 routine split</h2>
 <pre class="code">multi sub    split(  Str:D $delimiter, Str:D $input, $limit = Inf,
  :$skip-empty, :$v, :$k, :$kv, :$p) returns Positional
multi sub    split(Regex:D $delimiter, Str:D $input, $limit = Inf,
  :$skip-empty, :$v, :$k, :$kv, :$p) returns Positional
multi sub    split(List:D $delimiters, Str:D $input, $limit = Inf,
  :$skip-empty, :$v, :$k, :$kv, :$p) returns Positional
multi method split(Str:D:   Str:D $delimiter, $limit = Inf,
  :$skip-empty, :$v, :$k, :$kv, :$p) returns Positional
multi method split(Str:D: Regex:D $delimiter, $limit = Inf,
  :$skip-empty, :$v, :$k, :$kv, :$p) returns Positional
multi method split(Str:D: List:D $delimiters, $limit = Inf,
  :$skip-empty, :$v, :$k, :$kv, :$p) returns Positional</pre>
 <p>Usage:</p>
 <pre class="code">split( DELIMITER,  STRING [,LIMIT] [,:v] [,:k] [,:kv] [,:p] [,:skip-empty] )
split( /PATTERN/,  STRING [,LIMIT] [,:v] [,:k] [,:kv] [,:p] [,:skip-empty] )
split( DELIMITERS, STRING [,LIMIT] [,:v] [,:k] [,:kv] [,:p] [,:skip-empty] )
STRING.split( DELIMITER  [,LIMIT] [,:v] [,:k] [,:kv] [,:p] [,:skip-empty] )
STRING.split( /PATTERN/  [,LIMIT] [,:v] [,:k] [,:kv] [,:p] [,:skip-empty] )
STRING.split( DELIMITERS [,LIMIT] [,:v] [,:k] [,:kv] [,:p] [,:skip-empty] )</pre>
 <p>Splits a string up into pieces based on delimiters found in the string.</p>
 <p>If <span class="code">DELIMITER</span> is a string, it is searched for literally and not treated as a regex. If <span class="code">DELIMITER</span> is the empty string, it effectively returns all characters of the string separately (plus an empty string at the begin and at the end). If <span class="code">PATTERN</span> is a regular expression, then that will be used to split up the string. If <span class="code">DELIMITERS</span> is a list, then all of its elements will be considered a delimiter (either a string or a regular expression) to split the string on.</p>
 <p>The optional <span class="code">LIMIT</span> indicates in how many segments the string should be split, if possible. It defaults to <b>Inf</b> (or <b>*</b>, whichever way you look at it), which means "as many as possible".</p>
 <p>A number of optional named parameters can be specified, which alter the result being returned. The <span class="code">:v</span>, <span class="code">:k</span>, <span class="code">:kv</span> and <span class="code">:p</span> named parameters all perform a special action with regards to the delimiter found.</p>
 <ul><li><p>:skip-empty</p>
</li></ul> <p>If specified, do not return empty strings before or after a delimiter.</p>
 <ul><li><p>:v</p>
</li></ul> <p>Also return the delimiter. If the delimiter was a regular expression, then this will be the associated <span class="code">Match</span> object. Since this stringifies as the delimiter string found, you can always assume it is the delimiter string if you're not interested in further information about that particular match.</p>
 <ul><li><p>:k</p>
</li></ul> <p>Also return the <b>index</b> of the delimiter. Only makes sense if a list of delimiters was specified: in all other cases, this will be <b>0</b>.</p>
 <ul><li><p>:kv</p>
</li></ul> <p>Also return both the <b>index</b> of the delimiter, as well as the delimiter.</p>
 <ul><li><p>:p</p>
</li></ul> <p>Also return the <b>index</b> of the delimiter and the delimiter as a <span class="code">Pair</span>.</p>
 <p>Examples:</p>
 <pre class="code">    say split(";", "a;b;c").perl;            # ("a", "b", "c") 
     say split(";", "a;b;c", :v).perl;        # ("a", ";", "b", ";", "c") 
     say split(";", "a;b;c", 2).perl;         # ("a", "b;c").Seq 
     say split(";", "a;b;c", 2, :v).perl;     # ("a", ";", "b;c") 
     say split(";", "a;b;c,d").perl;          # ("a", "b", "c,d") 
     say split(/\;/, "a;b;c,d").perl;         # ("a", "b", "c,d") 
     say split(&amp;lt;; ,&gt;, "a;b;c,d").perl;        # ("a", "b", "c", "d") 
     say split(/&amp;lt;[;,]&gt;/, "a;b;c,d").perl;     # ("a", "b", "c", "d") 
     say split(&amp;lt;; ,&gt;, "a;b;c,d", :k).perl;    # ("a", 0, "b", 0, "c", 1, "d") 
     say split(&amp;lt;; ,&gt;, "a;b;c,d", :kv).perl;   # ("a", 0, ";", "b", 0, ";", "c", 1, ",", "d") 
 
     say "".split("x").perl;                  # ("",) 
     say "".split("x", :skip-empty).perl;     # ("",) 
 
     say "abcde".split("").perl;              # ("", "a", "b", "c", "d", "e", "") 
     say "abcde".split("",:skip-empty).perl;  # ("a", "b", "c", "d", "e") 
 
</pre>
 <a name="t162.1.19"></a><h2 id="_type_Str.pod6-routine_comb">162.1.19 routine comb</h2>
 <pre class="code">multi sub    comb(Str:D   $matcher, Str:D $input, $limit = Inf)
multi sub    comb(Regex:D $matcher, Str:D $input, $limit = Inf, Bool :$match)
multi sub    comb(Int:D $size, Str:D $input, $limit = Inf)

multi method comb(Str:D $input:)
multi method comb(Str:D $input: Str:D   $matcher, $limit = Inf)
multi method comb(Str:D $input: Regex:D $matcher, $limit = Inf, Bool :$match)
multi method comb(Str:D $input: Int:D $size, $limit = Inf)</pre>
 <p>Searches for <span class="code">$matcher</span> in <span class="code">$input</span> and returns a list of all matches (as <span class="code">Str</span> by default, or as <a href="#_type_Match.pod6">Match</a> if <span class="code">$match</span> is True), limited to at most <span class="code">$limit</span> matches.</p>
 <p>If no matcher is supplied, a list of characters in the string (e.g. <span class="code">$matcher = rx/./</span>) is returned.</p>
 <p>Examples:</p>
 <pre class="code">say comb(/\w/, "a;b;c").perl;        # ("a", "b", "c").Seq
say comb(/\N/, "a;b;c").perl;        # ("a", ";", "b", ";", "c").Seq
say comb(/\w/, "a;b;c", 2).perl;     # ("a", "b").Seq
say comb(/\w\;\w/, "a;b;c", 2).perl; # ("a;b",).Seq</pre>
 <p>If the matcher is an integer value, it is considered to be a matcher that is similar to / . ** matcher /, but which is about 30x faster.</p>
 <a name="t162.1.20"></a><h2 id="_type_Str.pod6-routine_lines">162.1.20 routine lines</h2>
 <pre class="code">multi sub    lines(Str:D $input, $limit = Inf) returns Positional
multi method lines(Str:D $input: $limit = Inf) returns Positional</pre>
 <p>Returns a list of lines (without trailing newline characters), i.e. the same as a call to <span class="code">$input.comb( / ^^ \N* /, $limit )</span> would.</p>
 <p>Examples:</p>
 <pre class="code">say lines("a\nb").perl;    # ("a", "b").Seq
say lines("a\nb").elems;   # 2
say "a\nb".lines.elems;    # 2
say "a\n".lines.elems;     # 1</pre>
 <a name="t162.1.21"></a><h2 id="_type_Str.pod6-routine_words">162.1.21 routine words</h2>
 <pre class="code">multi sub    words(Str:D $input, $limit = Inf) returns Positional
multi method words(Str:D $input: $limit = Inf) returns Positional</pre>
 <p>Returns a list of non-whitespace bits, i.e. the same as a call to <span class="code">$input.comb( / \S+ /, $limit )</span> would.</p>
 <p>Examples:</p>
 <pre class="code">say "a\nb\n".words.perl;       # ("a", "b").Seq
say "hello world".words.perl;  # ("hello", "world").Seq
say "foo:bar".words.perl;      # ("foo:bar",).Seq
say "foo:bar\tbaz".words.perl; # ("foo:bar", "baz").Seq</pre>
 <a name="t162.1.22"></a><h2 id="_type_Str.pod6-routine_flip">162.1.22 routine flip</h2>
 <pre class="code">multi sub    flip(Str:D ) returns Str:D
multi method flip(Str:D:) returns Str:D</pre>
 <p>Returns the string reversed character by character.</p>
 <p>Examples:</p>
 <pre class="code">"Perl".flip;  # lreP
"ABBA".flip;  # ABBA</pre>
 <a name="t162.1.23"></a><h2 id="_type_Str.pod6-sub_printf">162.1.23 sub printf</h2>
 <pre class="code">multi sub printf(Str:D $format, *@args)</pre>
 <p>This function is mostly identical to the C library printf function.</p>
 <p>The <span class="code">$format</span> is scanned for <span class="code">%</span> characters. Any <span class="code">%</span> introduces a format token. Format tokens have the following grammar:</p>
 <pre class="code">grammar Str::PrintfFormat {
 regex format_token { '%': &amp;lt;index&gt;? &amp;lt;precision&gt;? &amp;lt;modifier&gt;? &amp;lt;directive&gt; }
 token index { \d+ '$' }
 token precision { &amp;lt;flags&gt;? &amp;lt;vector&gt;? &amp;lt;precision_count&gt; }
 token flags { &amp;lt;[ \x20 + 0 \# \- ]&gt;+ }
 token precision_count { [ &amp;lt;[1..9]&gt;\d* | '*' ]? [ '.' [ \d* | '*' ] ]? }
 token vector { '*'? v }
 token modifier { &amp;lt; ll l h V q L &gt; }
 token directive { &amp;lt; % c s d u o x e f g X E G b p n i D U O F &gt; }
}</pre>
 <p>Directives guide the use (if any) of the arguments. When a directive (other than <span class="code">%</span>) is used, it indicates how the next argument passed is to be formatted into the string to be printed.</p>
 <p>The directives are:</p>
 <table>
<tr><td>%</td> <td>a literal percent sign</td></tr>
 <tr><td>c</td> <td>a character with the given codepoint</td></tr>
 <tr><td>s</td> <td>a string</td></tr>
 <tr><td>d</td> <td>a signed integer, in decimal</td></tr>
 <tr><td>u</td> <td>an unsigned integer, in decimal</td></tr>
 <tr><td>o</td> <td>an unsigned integer, in octal</td></tr>
 <tr><td>x</td> <td>an unsigned integer, in hexadecimal</td></tr>
 <tr><td>e</td> <td>a floating-point number, in scientific notation</td></tr>
 <tr><td>f</td> <td>a floating-point number, in fixed decimal notation</td></tr>
 <tr><td>g</td> <td>a floating-point number, in %e or %f notation</td></tr>
 <tr><td>X</td> <td>like x, but using uppercase letters</td></tr>
 <tr><td>E</td> <td>like e, but using an uppercase "E"</td></tr>
 <tr><td>G</td> <td>like g, but with an uppercase "E" (if applicable)</td></tr>
 <tr><td>b</td> <td>an unsigned integer, in binary</td></tr>
</table> <p>Compatibility:</p>
 <table>
<tr><td>i</td> <td>a synonym for %d</td></tr>
 <tr><td>D</td> <td>a synonym for %ld</td></tr>
 <tr><td>U</td> <td>a synonym for %lu</td></tr>
 <tr><td>O</td> <td>a synonym for %lo</td></tr>
 <tr><td>F</td> <td>a synonym for %f</td></tr>
</table> <p>Perl 5 (non-)compatibility:</p>
 <table>
<tr><td>n</td> <td>produces a runtime exception</td></tr>
 <tr><td>p</td> <td>produces a runtime exception</td></tr>
</table> <p>Modifiers change the meaning of format directives, but are largely no-ops (the semantics are still being determined).</p>
 <table>
<tr><td>h interpret integer as native "short" (typically int16)</td></tr>
 <tr><td>l interpret integer as native "long" (typically int32 or int64)</td></tr>
 <tr><td>ll interpret integer as native "long long" (typically int64)</td></tr>
 <tr><td>L interpret integer as native "long long" (typically uint64)</td></tr>
 <tr><td>q interpret integer as native "quads" (typically int64 or larger)</td></tr>
</table> <p>Examples:</p>
 <pre class="code">printf('%c', 97);                  # a
printf("%.2f", 1.969);             # 1.97
printf("%+.3f", 3.141592);         # +3.142
printf('%2$d %1$d', 12, 34);       # 34 12
printf("%x", 255);                 # ff</pre>
 <p>Special case: printf("&lt;b>%s&lt;/b>\n", "Perl 6") will not work use either of the following:</p>
 <pre class="code">printf Q:b "&amp;lt;b&gt;%s&amp;lt;/b&gt;\n",  "Perl 6";
printf     "&amp;lt;b&gt;\%s&amp;lt;/b&gt;\n", "Perl 6";
printf     "&amp;lt;b&gt;%s\&amp;lt;/b&gt;\n", "Perl 6";</pre>
 <a name="t162.1.24"></a><h2 id="_type_Str.pod6-sub_sprintf">162.1.24 sub sprintf</h2>
 <pre class="code">multi sub sprintf( Str:D $format, *@args) returns Str:D</pre>
 <p>This function is mostly identical to the C library sprintf function.</p>
 <p>The <span class="code">$format</span> is scanned for <span class="code">%</span> characters. Any <span class="code">%</span> introduces a format token. Format tokens have the following grammar:</p>
 <pre class="code">grammar Str::SprintfFormat {
 regex format_token { '%': &amp;lt;index&gt;? &amp;lt;precision&gt;? &amp;lt;modifier&gt;? &amp;lt;directive&gt; }
 token index { \d+ '$' }
 token precision { &amp;lt;flags&gt;? &amp;lt;vector&gt;? &amp;lt;precision_count&gt; }
 token flags { &amp;lt;[ \x20 + 0 \# \- ]&gt;+ }
 token precision_count { [ &amp;lt;[1..9]&gt;\d* | '*' ]? [ '.' [ \d* | '*' ] ]? }
 token vector { '*'? v }
 token modifier { &amp;lt; ll l h V q L &gt; }
 token directive { &amp;lt; % c s d u o x e f g X E G b p n i D U O F &gt; }
}</pre>
 <p>Directives guide the use (if any) of the arguments. When a directive (other than <span class="code">%</span>) is used, it indicates how the next argument passed is to be formatted into the string.</p>
 <p>The directives are:</p>
 <table>
<tr><td>%</td> <td>a literal percent sign</td></tr>
 <tr><td>c</td> <td>a character with the given codepoint</td></tr>
 <tr><td>s</td> <td>a string</td></tr>
 <tr><td>d</td> <td>a signed integer, in decimal</td></tr>
 <tr><td>u</td> <td>an unsigned integer, in decimal</td></tr>
 <tr><td>o</td> <td>an unsigned integer, in octal</td></tr>
 <tr><td>x</td> <td>an unsigned integer, in hexadecimal</td></tr>
 <tr><td>e</td> <td>a floating-point number, in scientific notation</td></tr>
 <tr><td>f</td> <td>a floating-point number, in fixed decimal notation</td></tr>
 <tr><td>g</td> <td>a floating-point number, in %e or %f notation</td></tr>
 <tr><td>X</td> <td>like x, but using uppercase letters</td></tr>
 <tr><td>E</td> <td>like e, but using an uppercase "E"</td></tr>
 <tr><td>G</td> <td>like g, but with an uppercase "E" (if applicable)</td></tr>
 <tr><td>b</td> <td>an unsigned integer, in binary</td></tr>
</table> <p>Compatibility:</p>
 <table>
<tr><td>i</td> <td>a synonym for %d</td></tr>
 <tr><td>D</td> <td>a synonym for %ld</td></tr>
 <tr><td>U</td> <td>a synonym for %lu</td></tr>
 <tr><td>O</td> <td>a synonym for %lo</td></tr>
 <tr><td>F</td> <td>a synonym for %f</td></tr>
</table> <p>Perl 5 (non-)compatibility:</p>
 <table>
<tr><td>n</td> <td>produces a runtime exception</td></tr>
 <tr><td>p</td> <td>produces a runtime exception</td></tr>
</table> <p>Modifiers change the meaning of format directives, but are largely no-ops (the semantics are still being determined).</p>
 <table>
<tr><td>h interpret integer as native "short" (typically int16)</td></tr>
 <tr><td>l interpret integer as native "long" (typically int32 or int64)</td></tr>
 <tr><td>ll interpret integer as native "long long" (typically int64)</td></tr>
 <tr><td>L interpret integer as native "long long" (typically uint64)</td></tr>
 <tr><td>q interpret integer as native "quads" (typically int64 or larger)</td></tr>
</table> <p>Examples:</p>
 <pre class="code">sprintf "%ld a big number, %lld a bigger number\n", 4294967295, 4294967296;</pre>
 <p>Special case: sprintf("&lt;b>%s&lt;/b>\n", "Perl 6") will not work use either of the following:</p>
 <pre class="code">sprintf Q:b "&amp;lt;b&gt;%s&amp;lt;/b&gt;\n",  "Perl 6";
sprintf     "&amp;lt;b&gt;\%s&amp;lt;/b&gt;\n", "Perl 6";
sprintf     "&amp;lt;b&gt;%s\&amp;lt;/b&gt;\n", "Perl 6";</pre>
 <a name="t162.1.25"></a><h2 id="_type_Str.pod6-method_starts-with">162.1.25 method starts-with</h2>
 <pre class="code">multi method starts-with(Str:D: Str(Cool) $needle) returns True:D</pre>
 <p>Returns <span class="code">True</span> if the invocant is identical to or starts with <span class="code">$needle</span>.</p>
 <pre class="code">say "Hello, World".starts-with("Hello");     # True
say "https://perl6.org/".starts-with('ftp'); # False</pre>
 <a name="t162.1.26"></a><h2 id="_type_Str.pod6-method_ends-with">162.1.26 method ends-with</h2>
 <pre class="code">multi method ends-with(Str:D: Str(Cool) $needle) returns True:D</pre>
 <p>Returns <span class="code">True</span> if the invocant is identical to or ends with <span class="code">$needle</span>.</p>
 <pre class="code">say "Hello, World".ends-with('Hello');      # False
say "Hello, World".ends-with('ld');         # True</pre>
 <a name="t162.1.27"></a><h2 id="_type_Str.pod6-method_subst">162.1.27 method subst</h2>
 <pre class="code">multi method subst(Str:D: $matcher, $replacement, *%opts)</pre>
 <p>Returns the invocant string where <span class="code">$matcher</span> is replaced by <span class="code">$replacement</span> (or the original string, if no match was found).</p>
 <p>There is an in-place syntactic variant of <span class="code">subst</span> spelled <span class="code">s/matcher/replacement/</span>.</p>
 <p><span class="code">$matcher</span> can be a <a href="#_type_Regex.pod6">Regex</a>, or a literal <span class="code">Str</span>. Non-Str matcher arguments of type <a href="#_type_Cool.pod6">Cool</a> are coerced to <span class="code">Str</span> for literal matching.</p>
 <pre class="code">my $some-string = "Some foo";
my $another-string = $some-string.subst(/foo/, "string"); # gives 'Some string'
$some-string.=subst(/foo/, "string"); # in-place substitution. $some-string is now 'Some string'</pre>
 <p>The replacement can be a closure:</p>
 <pre class="code">my $i = 41;
my $str = "The answer is secret.";
my $real-answer = $str.subst(/secret/, {++$i}); # The answer to everything</pre>
 <p>Here are other examples of usage:</p>
 <pre class="code">my $str = "Hey foo foo foo";
$str.subst(/foo/, "bar", :g); # global substitution - returns Hey bar bar bar

$str.subst(/foo/, "no subst", :x(0)); # targeted substitution. Number of times to substitute. Returns back unmodified.
$str.subst(/foo/, "bar", :x(1)); #replace just the first occurrence.

$str.subst(/foo/, "bar", :nth(3)); # replace nth match alone. Replaces the third foo. Returns Hey foo foo bar</pre>
 <p>The following adverbs are supported</p>
 <table>
<tr><th>short</th> <th>long</th> <th>meaning</th></tr>
<tr><td>:g</td> <td>:global</td> <td>tries to match as often as possible</td></tr>
 <tr><td>:nth(Int)</td> <td></td> <td>only substitute the nth's match</td></tr>
 <tr><td>:ss</td> <td>:samespace</td> <td>preserves whitespace on substitution</td></tr>
 <tr><td>:ii</td> <td>:samecase</td> <td>preserves case on substitution</td></tr>
 <tr><td>:mm</td> <td>:samemark</td> <td>preserves character marks (e.g. 'ü' replaces with 'o' will result in 'ö')</td></tr>
 <tr><td>:x(Int)</td> <td></td> <td>substitute exactly $x matches</td></tr>
</table> <p>Note that only in the <span class="code">s///</span> form <span class="code">:ii</span> implies <span class="code">:i</span> and <span class="code">:ss</span> implies <span class="code">:s</span>. In the method form, the <span class="code">:s</span> and <span class="code">:i</span> modifiers must be added to the regex, not the <span class="code">subst</span> method call.</p>
 <a name="t162.1.28"></a><h2 id="_type_Str.pod6-method_subst-mutate">162.1.28 method subst-mutate</h2>
 <p>Where <span class="code">subst</span> returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using <span class="code">subst-mutate</span>. If the match is successful, the method returns a <span class="code">Match</span> object representing the successful match, or <span class="code">Any</span> otherwise.</p>
 <pre class="code">my $some-string = "Some foo";
my $match = $some-string.subst-mutate(/foo/, "string");
say $some-string;  #-&gt; Some string
say $match;        #-&gt; ｢foo｣
$some-string.subst-mutate(/&amp;lt;[oe]&gt;/, '', :g); # remove all o'ss and e's, notice the :g named argument from .subst</pre>
 <a name="t162.1.29"></a><h2 id="_type_Str.pod6-routine_substr">162.1.29 routine substr</h2>
 <pre class="code">multi sub    substr(Str:D $s, Int:D $from, Int:D $chars = $s.chars - $from) returns Str:D
multi sub    substr(Str:D $s, Range $from-to) returns Str:D
multi method substr(Str:D $s: Int:D $from, Int:D $chars = $s.chars - $from) returns Str:D
multi method substr(Str:D $s: Range $from-to) returns Str:D</pre>
 <p>Returns a part of the string, starting from the character with index <span class="code">$from</span> (where the first character has index 0) and with length <span class="code">$chars</span>. If a range is specified, its first and last indices are used to determine the size of the substring.</p>
 <p>Examples:</p>
 <pre class="code">substr("Long string", 6, 3);     # tri
substr("Long string", 6);        # tring
substr("Long string", 6, *-1);   # trin
substr("Long string", *-3, *-1); # in</pre>
 <a name="t162.1.30"></a><h2 id="_type_Str.pod6-method_substr-eq">162.1.30 method substr-eq</h2>
 <pre class="code">multi method substr-eq(Str:D:  Str(Cool) $test-string, Int(Cool) $from) returns Bool
multi method substr-eq(Cool:D: Str(Cool) $test-string, Int(Cool) $from) returns Bool</pre>
 <p>Returns <span class="code">True</span> if the <span class="code">$test-string</span> exactly matches the <span class="code">String</span> object, starting from the given initial index <span class="code">$from</span>. For example, beginning with the string <span class="code">"foobar"</span>, the substring <span class="code">"bar"</span> will match from index 3:</p>
 <pre class="code">my $string = "foobar";
say $string.substr-eq("bar", 3);  #-&gt; True</pre>
 <p>However, the substring <span class="code">"barz"</span> starting from index 3 won't match even though the first three letters of the substring do match:</p>
 <pre class="code">my $string = "foobar";
say $string.substr-eq("barz", 3);  #-&gt; False</pre>
 <p>Naturally, to match the entire string, one merely matches from index 0:</p>
 <pre class="code">my $string = "foobar";
say $string.substr-eq("foobar", 0);  #-&gt; True</pre>
 <p>Since this method is inherited from the <span class="code">Cool</span> type, it also works on integers. Thus the integer <span class="code">42</span> will match the value <span class="code">342</span> starting from index 1:</p>
 <pre class="code">my $integer = 342;
say $integer.substr-eq(42, 1);  #-&gt; True</pre>
 <p>As expected, one can match the entire value by starting at index 0:</p>
 <pre class="code">my $integer = 342;
say $integer.substr-eq(342, 0);  #-&gt; True</pre>
 <p>Also using a different value or an incorrect starting index won't match:</p>
 <pre class="code">my $integer = 342;
say $integer.substr-eq(42, 3);  #-&gt; False
say $integer.substr-eq(7342, 0);  #-&gt; False</pre>
 <a name="t162.1.31"></a><h2 id="_type_Str.pod6-method_substr-rw">162.1.31 method substr-rw</h2>
 <pre class="code">method substr-rw($from, $length?)</pre>
 <p>A version of <span class="code">substr</span> that returns a <a href="#_type_Proxy.pod6">Proxy</a> functioning as a writable reference to a part of a string variable. Its first argument, <span class="code">$from</span> specifies the index in the string from which a substitution should occur, and its last argument, <span class="code">$length</span> specifies how many characters are to be replaced.</p>
 <p>For example, in its method form, if one wants to take the string <span class="code">"abc"</span> and replace the second character (at index 1) with the letter <span class="code">"z"</span>, then one do this:</p>
 <pre class="code">my $string = "abc";
$string.substr-rw(1, 1) = "z";
$string.say;                    #-&gt; azc</pre>
 <p><span class="code">substr-rw</span> also has a function form, so the above example can also be written like so:</p>
 <pre class="code">my $string = "abc";
substr-rw($string, 1, 1) = "z";
$string.say;                    #-&gt; azc</pre>
 <p>It is also possible to alias the writable reference returned by <span class="code">substr-rw</span> for repeated operations:</p>
 <pre class="code">my $string = "A character in the 'Flintstones' is: barney";
$string ~~ /(barney)/;
my $ref := substr-rw($string, $0.from, $0.to);
$string.say;
#-&gt; A character in the 'Flintstones' is: barney
$ref = "fred";
$string.say;
#-&gt; A character in the 'Flintstones' is: fred
$ref = "wilma";
$string.say;
#-&gt; A character in the 'Flintstones' is: wilma</pre>
 <p>Notice that the start position and length of string to replace has been specified via the <span class="code">.from</span> and <span class="code">.to</span> methods on the <span class="code">Match</span> object, <span class="code">$0</span>. It is thus not necessary to count characters in order to replace a substring, hence making the code more flexible.</p>
 <a name="t162.1.32"></a><h2 id="_type_Str.pod6-routine_samemark">162.1.32 routine samemark</h2>
 <pre class="code">multi sub samemark(Str:D $string, Str:D $pattern) returns Str:D
method    samemark(Str:D: Str:D $pattern) returns Str:D</pre>
 <p>Returns a copy of <span class="code">$string</span> with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in <span class="code">$pattern</span>. If <span class="code">$string</span> is longer than <span class="code">$pattern</span>, the remaining characters in <span class="code">$string</span> receive the same mark/accent as the last character in <span class="code">$pattern</span>. If <span class="code">$pattern</span> is empty no changes will be made.</p>
 <p>Examples:</p>
 <pre class="code">say 'åäö'.samemark('aäo');                        # aäo
say 'åäö'.samemark('a');                          # aao

say samemark('Pêrl', 'a');                        # Perl
say samemark('aöä', '');                          # aöä</pre>
 <a name="t162.1.33"></a><h2 id="_type_Str.pod6-method_succ">162.1.33 method succ</h2>
 <pre class="code">method succ(Str:D) returns Str:D</pre>
 <p>Returns the string incremented by one.</p>
 <p>String increment is "magical". It searches for the last alphanumeric sequence that is not preceded by a dot, and increments it.</p>
 <pre class="code">'12.34'.succ      # 13.34
'img001.png'.succ # img002.png</pre>
 <p>The actual increment step works by mapping the last alphanumeric character to a character range it belongs to, and choosing the next character in that range, carrying to the previous letter on overflow.</p>
 <pre class="code">'aa'.succ   # ab
'az'.succ   # ba
'109'.succ  # 110
'α'.succ    # β
'a9'.succ   # b0</pre>
 <p>String increment is Unicode-aware, and generally works for scripts where a character can be uniquely classified as belonging to one range of characters.</p>
 <a name="t162.1.34"></a><h2 id="_type_Str.pod6-method_pred">162.1.34 method pred</h2>
 <pre class="code">method pred(Str:D:) returns Str:D</pre>
 <p>Returns the string decremented by one.</p>
 <p>String decrementing is "magical" just like string increment (see <a href="#_routine_succ.pod6">succ</a>). It fails on underflow</p>
 <pre class="code">'b0'.pred           # a9
'a0'.pred           # Failure
'img002.png'.pred   # img001.png</pre>
 <a name="t162.1.35"></a><h2 id="_type_Str.pod6-routine_ord">162.1.35 routine ord</h2>
 <pre class="code">multi sub    ord(Str:D)  returns Int:D
multi method ord(Str:D:) returns Int:D</pre>
 <p>Returns the codepoint number of the base characters of the first grapheme in the string.</p>
 <p>Example:</p>
 <pre class="code">ord("A") # 65
"«".ord  # 171</pre>
 <a name="t162.1.36"></a><h2 id="_type_Str.pod6-method_ords">162.1.36 method ords</h2>
 <pre class="code">multi method ords(Str:D:) returns Positional</pre>
 <p>Returns a list of codepoint numbers, one for the base character of each grapheme in the string.</p>
 <p>Example:</p>
 <pre class="code">"aå«".ords # (97 229 171)</pre>
 <a name="t162.1.37"></a><h2 id="_type_Str.pod6-method_trans">162.1.37 method trans</h2>
 <pre class="code">proto method trans(|) { $/ := nqp::getlexcaller('$/'); {*} }
multi method trans(Str:D: Pair:D \what, *%n) returns Str
multi method trans(Str:D: *@changes, :complement(:$c), :squash(:$s), :delete(:$d)) returns Str</pre>
 <p>Replaces one or many characters with one or many characters. Ranges are supported, both for keys and values. Regexes work as keys. In case a list of keys and values is used, substrings can be replaced aswell. When called with <span class="code">:complement</span> anything but the matched value or range is replaced with a single value. With <span class="code">:delete</span> the matched characters are removed. Combining <span class="code">:complement</span> and <span class="code">:delete</span> will remove anything but the matched values. The adverb <span class="code">:squash</span> will reduce repeated matched characters to a single character.</p>
 <p>Example:</p>
 <pre class="code">my $str = 'say $x&amp;lt;b&gt; &amp;amp;&amp;amp; $y&amp;lt;a&gt;';
$str.=trans( '&amp;lt;' =&gt; '«' );
$str.=trans( '&amp;lt;' =&gt; '«', '&gt;' =&gt; '»' );

$str.=trans( [ '&amp;lt;'   , '&gt;'   , '&amp;amp;' ] =&gt;
             [ '&amp;amp;lt;', '&amp;amp;gt;', '&amp;amp;amp;' ]);

$str.=trans( ['a'..'y'] =&gt; ['A'..'z'] );

"abcdefghij".trans(/&amp;lt;[aeiou]&gt; \w/ =&gt; ''); # «cdgh»

"a123b123c".trans(['a'..'z'] =&gt; 'x', :complement); # «axxxbxxxc»
"a123b123c".trans('23' =&gt; '', :delete); # «a1b1c»
"aaa1123bb123c".trans('a'..'z' =&gt; 'A'..'Z', :squash); # «A1123B123C»
"aaa1123bb123c".trans('a'..'z' =&gt; 'x', :complement, :squash); # «aaaxbbxc»</pre>
 <a name="t162.1.38"></a><h2 id="_type_Str.pod6-method_indent">162.1.38 method indent</h2>
 <pre class="code">proto method indent($)
multi method indent(Int $steps where { $_ == 0 } )
multi method indent(Int $steps where { $_ &gt; 0  } )
multi method indent($steps where { .isa(Whatever) || .isa(Int) &amp;amp;&amp;amp; $_ &amp;lt; 0 )</pre>
 <p>Indents each line of the string by <span class="code">$steps</span>. If <span class="code">$steps</span> is negative, it outdents instead. If <span class="code">$steps</span> is <a href="*"> <span class="code">*</span> </a>, then the string is outdented to the margin:</p>
 <pre class="code">"  indented by 2 spaces\n    indented even more".indent(*) 
     eq "indented by 2 spaces\n  indented even more" 
</pre>
 <a name="t162.1.39"></a><h2 id="_type_Str.pod6-method_trim">162.1.39 method trim</h2>
 <pre class="code">method trim(Str:D:) returns Str</pre>
 <p>Remove leading and trailing whitespace. It can be use both as a method on strings and as a function. When used as a method it will return the trimmed string. In order to do in-place trimming, once needs to write <span class="code">.=trim</span></p>
 <pre class="code">my $line = '   hello world    ';
say '&amp;lt;' ~ $line.trim ~ '&gt;';        # &amp;lt;hello world&gt;
say '&amp;lt;' ~ trim($line) ~ '&gt;';       # &amp;lt;hello world&gt;
$line.trim;
say '&amp;lt;' ~ $line ~ '&gt;';             # &amp;lt;   hello world    &gt;
$line.=trim;
say '&amp;lt;' ~ $line ~ '&gt;';             # &amp;lt;hello world&gt;</pre>
 <p>See also <a href="#_routine_trim-trailing.pod6">trim-trailing</a> and <a href="#_routine_trim-leading.pod6">trim-leading</a></p>
 <a name="t162.1.40"></a><h2 id="_type_Str.pod6-method_trim-trailing">162.1.40 method trim-trailing</h2>
 <p>Remove the whitespace characters from the end of a string. See also <a href="#_routine_trim.pod6">trim</a>.</p>
 <a name="t162.1.41"></a><h2 id="_type_Str.pod6-method_trim-leading">162.1.41 method trim-leading</h2>
 <p>Remove the whitespace characters from the beginning of a string. See also <a href="#_routine_trim.pod6">trim</a>.</p>
 <a name="t162.1.42"></a><h2 id="_type_Str.pod6-method_NFC">162.1.42 method NFC</h2>
 <pre class="code">method NFC(Str:D:) returns NFC:D</pre>
 <p>Returns a codepoint string in <a href="#_type_NFC.pod6">NFC</a> format (Unicode Normalization Form C / Composed).</p>
 <a name="t162.1.43"></a><h2 id="_type_Str.pod6-method_NFD">162.1.43 method NFD</h2>
 <pre class="code">method NFD(Str:D:) returns NFD:D</pre>
 <p>Returns a codepoint string in <a href="#_type_NFD.pod6">NFC</a> format (Unicode Normalization Form D / Decomposed).</p>
 <a name="t162.1.44"></a><h2 id="_type_Str.pod6-method_NFKC">162.1.44 method NFKC</h2>
 <pre class="code">method NFKC(Str:D:) returns NFKC:D</pre>
 <p>Returns a codepoint string in <a href="#_type_NFKC.pod6">NFKC</a> format (Unicode Normalization Form KC / Compatibility Composed).</p>
 <a name="t162.1.45"></a><h2 id="_type_Str.pod6-method_NFKD">162.1.45 method NFKD</h2>
 <pre class="code">method NFKD(Str:D:) returns NFKD:D</pre>
 <p>Returns a codepoint string in <a href="#_type_NFKD.pod6">NFC</a> format (Unicode Normalization Form KD / Compatibility Decomposed).</p>
 <a name="t162.1.46"></a><h2 id="_type_Str.pod6-method_ACCEPTS">162.1.46 method ACCEPTS</h2>
 <pre class="code">multi method ACCEPTS(Str:D: $other)</pre>
 <p>Returns <span class="code">True</span> if the string is <a href="#_routine_eq.pod6">the same as</a> <span class="code">$other</span>.</p>
 <a name="t162.1.47"></a><h2 id="_type_Str.pod6-sub_val">162.1.47 sub val</h2>
     seems like the best place to document this
 <pre class="code">multi sub val(Str:D $MAYBEVAL, :$val-or-fail)</pre>
 <p>Given a <span class="code">Str</span> that may be parseable as a numeric value, it will attempt to construct the appropriate <a href="#_language_glossary.pod6-Allomorph">allomorph</a>, returning one of <a href="#_type_IntStr.pod6">IntStr</a>, <a href="#_type_NumStr.pod6">NumStr</a>, <a href="#_type_RatStr.pod6">RatStr</a> or <a href="#_type_ComplexStr.pod6">ComplexStr</a> or a plain <span class="code">Str</span> if a numeric value cannot be parsed. If the <span class="code">:val-or-fail</span> adverb is provided it will return an <a href="#_type_X::Str::Numeric.pod6">X::Str::Numeric</a> rather than the original string if it cannot parse the string as a number.</p>
 <pre class="code">say val("42").WHAT; # (IntStr)
say val("42e0").WHAT; # (NumStr)
say val("42.0").WHAT; # (RatStr)
say val("42+0i").WHAT; # (ComplexStr)</pre>
</div> <!-- /type/Stringy.pod6 --><div class="pod-body"><a id="_type_Stringy.pod6"></a><a name="t163"><h1 class="title">163 role Stringy</h1></a> <p class="subtitle">String or object that can act as a string</p> <pre class="code">role Stringy { ... }</pre>
 <p>Common role for string types (such as Str).</p>
</div> <!-- /type/Sub.pod6 --><div class="pod-body"><a id="_type_Sub.pod6"></a><a name="t164"><h1 class="title">164 class Sub</h1></a> <p class="subtitle">Subroutine</p> <pre class="code">class Sub is Routine { }</pre>
 <p>A type for subroutines. Subs are created with the <span class="code">sub</span> keyword</p>
 <pre class="code">my $s = sub ($a, $b) { $a + $b };
say $s.WHAT;        # Sub()
say $s(2, 5);       # 7</pre>
</div> <!-- /type/Submethod.pod6 --><div class="pod-body"><a id="_type_Submethod.pod6"></a><a name="t165"><h1 class="title">165 class Submethod</h1></a> <p class="subtitle">Member function that is not inherited by subclasses</p> <pre class="code">class Submethod is Routine { ... }</pre>
 <p>A Submethod is a method that is not inherited to child classes. They are typically used for per-class initialization and tear-down tasks which are called explicitly per class in an inheritance tree, usually for enforcing a particular order. For example object construction with the <span class="code">BUILD</span> submethod happens from the least-derived to most-derived, so that the most-derived (child) classes can depend on the parent already being initialized.</p>
 <p>Submethods are of type <span class="code">Submethod</span>, and are declared with the <span class="code">submethod</span> declarator:</p>
 <pre class="code">class Area {
    has $.size;
    submethod BUILD(:$x, :$y, :$z) {
        $!size = $x * $y * $z;
    }
}</pre>
 <a name="t165.1"></a><h1 id="_type_Submethod.pod6-Methods">165.1 Methods</h1>
 TODO
</div> <!-- /type/Supplier.pod6 --><div class="pod-body"><a id="_type_Supplier.pod6"></a><a name="t166"><h1 class="title">166 class Supplier</h1></a> <p class="subtitle">Live </p> <pre class="code">class Supplier { ... }</pre>
 <p>This is a factory for <i>live</i> <a href="#_type_Supply.pod6">Supply</a> objects, which provides the mechanism for emitting new values onto the supplies:</p>
 <pre class="code">my $supplier = Supplier.new;
my $supply_1 = $supplier.Supply;
$supply_1.tap(-&gt; $v { say "One $v" });
my $supply_2 = $supplier.Supply;
$supply_2.tap(-&gt; $v { say "Two $v" });
$supplier.emit(42);</pre>
 <p>Will output:</p>
 <pre class="code">One 42
Two 42</pre>
 <p><i>on demand</i> supplies are created by the factory methods of the <a href="#_type_Supply.pod6">Supply</a> class or by the <span class="code">supply</span> keyword.</p>
 <a name="t166.1"></a><h1 id="_type_Supplier.pod6-Methods">166.1 Methods</h1>
 <a name="t166.1.1"></a><h2 id="_type_Supplier.pod6-method_new">166.1.1 method new</h2>
 <pre class="code">method new()</pre>
 <p>The <span class="code">Supplier</span> constructor.</p>
 <a name="t166.1.2"></a><h2 id="_type_Supplier.pod6-method_Supply">166.1.2 method Supply</h2>
 <pre class="code">method Supply(Supplier:D:) returns Supply</pre>
 <p>This creates a new <span class="code">Supply</span> object to which any values which are emitted on this supplier are passed. This is the factory for all <span class="code">live</span> supplies.</p>
 <a name="t166.1.3"></a><h2 id="_type_Supplier.pod6-method_emit">166.1.3 method emit</h2>
 <pre class="code">method emit(Supplier:D: Mu \value)</pre>
 <p>Sends the given value to all of the taps on all of the supplies created by <span class="code">Supply</span> on this <span class="code">Supplier</span>.</p>
 <a name="t166.1.4"></a><h2 id="_type_Supplier.pod6-method_done">166.1.4 method done</h2>
 <pre class="code">method done(Supplier:D:)</pre>
 <p>Calls the <span class="code">done</span> callback on all the taps that have one.</p>
 <pre class="code">my $supplier = Supplier.new;
my $supply   = $supplier.Supply;
$supply.tap(-&gt; $v { say $v }, done =&gt; { say "no more answers" });
$supplier.emit(42);
$supplier.done;</pre>
 <p>Will output:</p>
 <pre class="code">42
no more answers</pre>
 <a name="t166.1.5"></a><h2 id="_type_Supplier.pod6-method_quit">166.1.5 method quit</h2>
 <pre class="code">multi method quit(Supplier:D: Exception $ex)
multi method quit(Supplier:D: Str() $message)</pre>
 <p>Calls the <span class="code">quit</span> callback on all the taps that have one, passing the exception to them. If called with a <a href="#_type_Str.pod6">Str</a> the exception will be an <a href="#_type_X::AdHoc.pod6">X::AdHoc</a> with the supplied message.</p>
 <p>This is meant for shutting down a supply with an error.</p>
</div> <!-- /type/Supply.pod6 --><div class="pod-body"><a id="_type_Supply.pod6"></a><a name="t167"><h1 class="title">167 class Supply</h1></a> <p class="subtitle">Asynchronous data stream with multiple subscribers</p> <pre class="code">class Supply { ... }</pre>
 <p>A supply is a thread-safe, asynchronous data stream like a <a href="#_type_Channel.pod6">Channel</a>, but it can have multiple subscribers (<i>taps</i>) that all get the same values flowing through the supply.</p>
 <p>It is a thread-safe implementation of the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer Pattern</a>, and central to supporting reactive programming in Perl 6.</p>
 <p>There are two types of Supplies: <span class="code">live</span> and <span class="code">on demand</span>. When tapping into a <span class="code">live</span> supply, the tap will only see values that are flowing through the supply <b>after</b> the tap has been created. Such supplies are normally infinite in nature, such as mouse movements. Closing such a tap does not stop mouse events from occurring, it just means that the values will go by unseen. All tappers see the same flow of values.</p>
 <p>A tap on an <span class="code">on demand</span> supply will initiate the production of values, and tapping the supply again may result in a new set of values. For example, <span class="code">Supply.interval</span> produces a fresh timer with the appropriate interval each time it is tapped. If the tap is closed, the timer simply stops emitting values to that tap.</p>
 <p>A <span class="code">live</span> <span class="code">Supply</span> is obtained from the <a href="#_type_Supplier.pod6">Supplier</a> factory method <span class="code">Supply</span>. New values are emitted by calling <span class="code">emit</span> on the <span class="code">Supplier</span> object.</p>
 <pre class="code">my $supplier = Supplier.new;
my $supply = $supplier.Supply;
$supply.tap(-&gt; $v { say "$v" });
$supplier.emit(42); # Will cause the tap to output "42"</pre>
 <p>The <a href="#166-method live">live method</a> returns <span class="code">True</span> on live supplies. Factory methods such as <a href="#166-method interval">interval</a>, <a href="#166-method from-list">from-list</a> will return <i>on demand</i> supplies.</p>
 <p>Further examples can be found in the <a href="#_language_concurrency.pod6-Supplies">concurrency page</a>.</p>
 <a name="t167.1"></a><h1 id="_type_Supply.pod6-Methods_that_return_Taps">167.1 Methods that return Taps</h1>
 <a name="t167.1.1"></a><h2 id="_type_Supply.pod6-method_tap">167.1.1 method tap</h2>
 <pre class="code">method tap(Supply:D: &amp;amp;emit = -&gt; $ { },
        :&amp;amp;done,
        :&amp;amp;quit={ die $_ },
        :&amp;amp;closing,
    ) returns Tap:D</pre>
 <p>Creates a new tap (a kind of subscription if you will), in addition to all existing taps. The first positional argument is a piece of code that will be called when a new value becomes available through the <span class="code">emit</span> call.</p>
 <p>The <span class="code">&amp;done</span> callback is called when the <span class="code">done</span> method on the supply is called, indicating the end of life of the channel. For a <span class="code">live</span> supply the <span class="code">done</span> method will be called on the parent <span class="code">Supplier</span>.</p>
 <p>The <span class="code">&amp;quit</span> callback is called when the <span class="code">quit</span> method on the supply is called, indicating an erroneous termination of the supply. For a <span class="code">live</span> supply the <span class="code">done</span> method will be called on the parent <span class="code">Supplier</span></p>
 <p>Method <span class="code">tap</span> returns an object of type <a href="#_type_Tap.pod6">Tap</a>, on which you can call the <span class="code">close</span> method to cancel the subscription.</p>
 <pre class="code">my $s = Supply.from-list(0 .. 5);
my $t = $s.tap(-&gt; $v { say $v }, done =&gt; { say "no more ticks" });</pre>
 <p>Produces:</p>
 <pre class="code">0
1
2
3
4
5
no more ticks</pre>
 <a name="t167.1.2"></a><h2 id="_type_Supply.pod6-method_act">167.1.2 method act</h2>
 <pre class="code">method act(Supply:D: &amp;amp;act) returns Tap:D</pre>
 <p>Creates a tap on the given supply with the given code. Differently from <span class="code">tap</span>, the given code is guaranteed to be only executed by one thread at a time.</p>
 <a name="t167.2"></a><h1 id="_type_Supply.pod6-Utility_methods">167.2 Utility methods</h1>
 <a name="t167.2.1"></a><h2 id="_type_Supply.pod6-method_Channel">167.2.1 method Channel</h2>
 <pre class="code">method Channel(Supply:D:) returns Channel:D</pre>
 <p>Returns a <a href="#_type_Channel.pod6">Channel</a> object that will receive all future values from the supply, and will be <span class="code">close</span>d when the Supply is done, and quit (shut down with error) when the supply is quit.</p>
 <a name="t167.2.2"></a><h2 id="_type_Supply.pod6-method_Promise">167.2.2 method Promise</h2>
 <pre class="code">method Promise(Supply:D:) returns Promise:D</pre>
 <p>Returns a <a href="#_type_Promise.pod6">Promise</a> that will be kept when the <span class="code">Supply</span> is <span class="code">done</span>. If the <span class="code">Supply</span> also emits any values, then the <span class="code">Promise</span> will be kept with the final value. Otherwise, it will be kept with <span class="code">Nil</span>. If the <span class="code">Supply</span> ends with a <span class="code">quit</span> instead of a <span class="code">done</span>, then the <span class="code">Promise</span> will be broken with that exception.</p>
 <pre class="code">my $supplier = Supplier.new;
my $s = $supplier.Supply;
my $p = $s.Promise;
$p.then(-&gt; $v { say "got $v.result()" });
$supplier.emit('cha');         # not output yet
$supplier.done();              # got cha</pre>
 <p>The <span class="code">Promise</span> method is most useful when dealing with supplies that will tend to produce just one value, when only the final value is of interest, or when only completion (successful or not) is relevant.</p>
 <a name="t167.2.3"></a><h2 id="_type_Supply.pod6-method_live">167.2.3 method live</h2>
 <pre class="code">method live(Supply:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if the supply is "live", that is, values are emitted to taps as soon as they arrive. Always returns <span class="code">True</span> in the default <span class="code">Supply</span> (but for example on the supply returned from <span class="code">Supply.from-list</span> it's <span class="code">False</span>).</p>
 <pre class="code">say Supplier.new.Supply.live;    # True</pre>
 <a name="t167.2.4"></a><h2 id="_type_Supply.pod6-method_schedule-on">167.2.4 method schedule-on</h2>
 <pre class="code">method schedule-on(Supply:D: $scheduler)</pre>
 <p>Runs the emit, done and quit callbacks on the specified scheduler.</p>
 <p>This is useful for GUI toolkits that require certain actions to be run from the GUI thread.</p>
 <a name="t167.3"></a><h1 id="_type_Supply.pod6-Methods_that_wait_until_the_supply_is_done">167.3 Methods that wait until the supply is done</h1>
 <a name="t167.3.1"></a><h2 id="_type_Supply.pod6-method_wait">167.3.1 method wait</h2>
 <pre class="code">method wait(Supply:D:)</pre>
 <p>Waits until the supply is done (in which case it returns <span class="code">True</span>) or <span class="code">quit</span> (in which case it will throw the exception that was passed to <span class="code">quit</span>).</p>
 <pre class="code">my $s = Supplier.new;
start {
  sleep 1;
  say "One second: running.";
  sleep 1;
  $s.emit(42);
  $s.done;
}
$s.Supply.wait;
say "Two seconds: done";</pre>
 <a name="t167.3.2"></a><h2 id="_type_Supply.pod6-method_list">167.3.2 method list</h2>
 <pre class="code">method list(Supply:D:) returns List:D</pre>
 <p>Waits until the supply is done, then returns a list of all values emitted since the <span class="code">list</span> call.</p>
 <a name="t167.3.3"></a><h2 id="_type_Supply.pod6-method_grab">167.3.3 method grab</h2>
 <pre class="code">method grab(Supply:D: &amp;amp;process ) returns Supply:D</pre>
 <p>Waits until the given supply is done. It will then call the given process closure passing all of the values seen, Then creates a supply to which all values returned from the process closure.</p>
 <a name="t167.3.4"></a><h2 id="_type_Supply.pod6-method_reverse">167.3.4 method reverse</h2>
 <pre class="code">method reverse(Supply:D:) returns Supply:D</pre>
 <p>Waits until the given supply is done, then creates a supply to which all values seen are emitted in reverse order.</p>
 <a name="t167.3.5"></a><h2 id="_type_Supply.pod6-method_sort">167.3.5 method sort</h2>
 <pre class="code">method sort(Supply:D: &amp;amp;by?) returns Supply:D</pre>
 <p>Waits until the given supply is done, then creates a supply to which all values seen are emitted in sorted order. Optionally accepts a comparator <a href="#_type_Block.pod6">Block</a>.</p>
 <a name="t167.4"></a><h1 id="_type_Supply.pod6-Methods_that_return_another_Supply">167.4 Methods that return another Supply</h1>
 <a name="t167.4.1"></a><h2 id="_type_Supply.pod6-method_from-list">167.4.1 method from-list</h2>
 <pre class="code">method from-list(Supply:U: *@values) returns Supply:D</pre>
 <p>Creates an on-demand supply from the values passed to this method.</p>
 <pre class="code">my $s = Supply.from-list(1, 2, 3);
$s.tap(&amp;amp;say);           # 1\n2\n3\n</pre>
 <a name="t167.4.2"></a><h2 id="_type_Supply.pod6-method_share">167.4.2 method share</h2>
 <pre class="code">method share(Supply:D:) returns Supply:D</pre>
 <p>Creates a live supply from an on-demand supply, thus making it possible to share the values of the on-demand supply on multiple taps, instead of each tap seeing its own copy of all values from the on-demand supply.</p>
 <pre class="code"># this says in turn: "first 1" "first 2" "second 2" "first 3" "second 3"
my $s = Supply.interval(1).share;
$s.tap: { "first $_".say };
sleep 1.1;
$s.tap: { "second $_".say };
sleep 2</pre>
 <a name="t167.4.3"></a><h2 id="_type_Supply.pod6-method_flat">167.4.3 method flat</h2>
 <pre class="code">method flat(Supply:D:) returns Supply:D</pre>
 <p>Creates a supply on which all of the values seen in the given supply are flattened before being emitted again.</p>
 <a name="t167.4.4"></a><h2 id="_type_Supply.pod6-method_do">167.4.4 method do</h2>
 <pre class="code">method do(Supply:D: &amp;amp;do) returns Supply:D</pre>
 <p>Creates a supply to which all values seen in the given supply, are emitted again. The given code, executed for its side-effects only, is guaranteed to be only executed by one thread at a time.</p>
 <a name="t167.4.5"></a><h2 id="_type_Supply.pod6-method_interval">167.4.5 method interval</h2>
 <pre class="code">method interval(Supply:U: $interval, $delay = 0) returns Supply:D</pre>
 <p>Creates a supply that emits a value every <span class="code">$interval</span> seconds, starting <span class="code">$delay</span> seconds from the call. The value is an integer, starting from 0 at the interval tock, and is incremented by one for each value emitted.</p>
 <a name="t167.4.6"></a><h2 id="_type_Supply.pod6-method_grep">167.4.6 method grep</h2>
 <pre class="code">method grep(Supply:D: Mu $test) returns Supply:D</pre>
 <p>Creates a new supply that only emits those values from the original supply that smart-match against <span class="code">$test</span>.</p>
 <pre class="code">my $supplier = Supplier.new;
my $all      = $supplier.Supply;
my $ints     = $all.grep(Int);
$ints.tap(&amp;amp;say);
$supplier.emit($_) for 1, 'a string', 3.14159;   # prints only 1</pre>
 <a name="t167.4.7"></a><h2 id="_type_Supply.pod6-method_map">167.4.7 method map</h2>
 <pre class="code">method map(Supply:D: &amp;amp;mapper) returns Supply:D</pre>
 <p>Returns a new supply that maps each value of the given supply through <span class="code">&amp;mapper</span> and emits it to the new supply.</p>
 <pre class="code">my $supplier = Supplier.new;
my $all      = $supplier.Supply;
my $double   = $all.map(-&gt; $value { $value * 2 });
$double.tap(&amp;amp;say);
$supplier.emit(4);           # 8</pre>
 <a name="t167.4.8"></a><h2 id="_type_Supply.pod6-method_batch">167.4.8 method batch</h2>
 <pre class="code">method batch(Supply:D: :$elems, :$seconds) returns Supply:D</pre>
 <p>Creates a new supply that batches the values of the given supply by either the number of elements in the batch (using :elems) or the maximum number of seconds (using the :seconds) or both. Any remaining values are emitted in a final batch when the supply is done.</p>
 <a name="t167.4.9"></a><h2 id="_type_Supply.pod6-method_elems">167.4.9 method elems</h2>
 <pre class="code">method elems(Supply:D: $seconds?) returns Supply:D</pre>
 <p>Creates a new supply in which changes to the number of values seen are emitted. It optionally also takes an interval (in seconds) if you only want to be updated every so many seconds.</p>
 <a name="t167.4.10"></a><h2 id="_type_Supply.pod6-method_head">167.4.10 method head</h2>
 <pre class="code">method head(Supply:D: Int(Cool) $number = 1) returns Supply:D</pre>
 <p>Creates a "head" supply with the same semantics as List.head.</p>
 <a name="t167.4.11"></a><h2 id="_type_Supply.pod6-method_tail">167.4.11 method tail</h2>
 <pre class="code">method tail(Supply:D: Int(Cool) $number = 1) returns Supply:D</pre>
 <p>Creates a "tail" supply with the same semantics as List.tail.</p>
 <a name="t167.4.12"></a><h2 id="_type_Supply.pod6-method_rotor">167.4.12 method rotor</h2>
 <pre class="code">method rotor(Supply:D: @cycle) returns Supply:D</pre>
 <p>Creates a "rotoring" supply with the same semantics as List.rotor.</p>
 <a name="t167.4.13"></a><h2 id="_type_Supply.pod6-method_delayed">167.4.13 method delayed</h2>
 <pre class="code">method delayed(Supply:D: $seconds) returns Supply:D</pre>
 <p>Creates a new supply in which all values flowing through the given supply are emitted, but with the given delay in seconds.</p>
 <a name="t167.4.14"></a><h2 id="_type_Supply.pod6-method_throttle">167.4.14 method throttle</h2>
 <pre class="code">method throttle(Supply:D:
  $limit,                 # values / time or simultaneous processing
  $seconds or $callable,  # time-unit / code to process simultaneously
  $delay = 0,             # initial delay before starting, in seconds
  :$control,              # supply to emit control messages on (optional)
  :$status,               # supply to tap status messages from (optional)
  :$bleed,                # supply to bleed messages to (optional)
  :$vent-at,              # bleed when so many buffered (optional)
  :$scheduler,            # scheduler to use, default $*SCHEDULER
  ) returns Supply:D</pre>
 <p>Produces a <span class="code">Supply</span> from a given Supply, but makes sure the number of messages passed through, is limited.</p>
 <p>It has two modes of operation: per time-unit or by maximum number of execution of a block of code: this is determined by the second positional parameter.</p>
 <p>The first positional parameter specifies the limit that should be applied.</p>
 <p>If the second positional parameter is a <span class="code">Callable</span>, then the limit indicates the maximum number of parallel processes executing the Callable, which is given the value that was received. The emitted values in this case will be the <span class="code">Promise</span>s that were obtained from <span class="code">start</span>ing the Callable.</p>
 <p>If the second positional parameter is a numeric value, it is interpreted as the time-unit (in seconds). If you specify <b>.1</b> as the value, then it makes sure you don't exceed the limit for every tenth of a second.</p>
 <p>If the limit is exceeded, then incoming messages are buffered until there is room to pass on / execute the Callable again.</p>
 <p>The third positional parameter is optional: it indicates the number of seconds the throttle will wait before passing on any values.</p>
 <p>The :control named parameter optionally specifies a Supply that you can use to control the throttle while it is in operation. Messages that can be sent, are strings in the form of "key:value". Please see below for the types of messages that you can send to control the throttle.</p>
 <p>The :status named parameter optionally specifies a Supply that will receive any status messages. If specified, it will at least send one status message after the original Supply is exhausted. See <a href="#166-status_message">status message</a> below.</p>
 <p>The :bleed named parameter optionally specifies a Supply that will receive any values that were either explicitly bled (with the <b>bleed</b> control message), or automatically bled (if there's a <b>vent-at</b> active).</p>
 <p>The :vent-at named parameter indicates the number of values that may be buffered before any additional value will be routed to the :bleed Supply. Defaults to 0 if not specified (causing no automatic bleeding to happen). Only makes sense if a :bleed Supply has also been specified.</p>
 <p>The :scheduler named parameter indicates the scheduler to be used. Defaults to $*SCHEDULER.</p>
 <a name="t167.4.14.1"></a><h3 id="_type_Supply.pod6-control_messages">167.4.14.1 control messages</h3>
 <p>These messages can be sent to the :control Supply. A control message consists of a string of the form "key: value", e.g. "limit: 4".</p>
 <ul><li><p>limit</p>
</li></ul> <p>Change the number of messages (as initially given in the first positional) to the value given.</p>
 <ul><li><p>bleed</p>
</li></ul> <p>Route the given number of buffered messages to the :bleed Supply.</p>
 <ul><li><p>vent-at</p>
</li></ul> <p>Change the maximum number of buffered values before automatic bleeding takes place. If the value is lower than before, will cause immediate rerouting of buffered values to match the new maximum.</p>
 <ul><li><p>status</p>
</li></ul> <p>Send a status message to the :status Supply with the given id.</p>
 <a name="t167.4.14.2"></a><h3 id="_type_Supply.pod6-status_message">167.4.14.2 status message</h3>
 <p>The status return message is a hash with the following keys:</p>
 <ul><li><p>allowed</p>
</li></ul> <p>The current number of messages / callables that is still allowed to be passed / executed.</p>
 <ul><li><p>bled</p>
</li></ul> <p>The number of messages routed to the :bleed Supply.</p>
 <ul><li><p>buffered</p>
</li></ul> <p>The number of messages currently buffered because of overflow.</p>
 <ul><li><p>emitted</p>
</li></ul> <p>The number of messages emitted (passed through).</p>
 <ul><li><p>id</p>
</li></ul> <p>The id of this status message (a monotonically increasing number). Handy if you want to log status messages.</p>
 <ul><li><p>limit</p>
</li></ul> <p>The current limit that is being applied.</p>
 <ul><li><p>vent-at</p>
</li></ul> <p>The maximum number of messages that may be buffered before they're automatically re-routed to the :bleed Supply.</p>
 <a name="t167.4.14.3"></a><h3 id="_type_Supply.pod6-Examples">167.4.14.3 Examples</h3>
 <p>Have a simple piece of code announce when it starts running asynchronously, wait a random amount of time, then announce when it is done. Do this 6 times, but don't let more than 3 of them run simultaneously.</p>
 <pre class="code">my $s = Supply.from-list(^6);  # set up supply
my $t = $s.throttle: 3,        # only allow 3 at a time
{                              # code block to run
    say "running $_";          # announce we've started
    sleep rand;                # wait some random time
    say "done $_"              # announce we're done
}                              # don't need ; because } at end of line
$t.wait;                       # wait for the supply to be done
=============
running 0
running 1
running 2
done 2
running 3
done 1
running 4
done 4
running 5
done 0
done 3
done 5</pre>
 <a name="t167.4.15"></a><h2 id="_type_Supply.pod6-method_stable">167.4.15 method stable</h2>
 <pre class="code">method stable(Supply:D: $seconds, :$scheduler) returns Supply:D</pre>
 <p>Creates a new supply that only passes on a value flowing through the given supply if it wasn't superseded by another value in the given time (in seconds). Optionally uses another scheduler than the default scheduler, using the :scheduler parameter.</p>
 <a name="t167.4.16"></a><h2 id="_type_Supply.pod6-method_reduce">167.4.16 method reduce</h2>
 <pre class="code">method reduce(Supply:D: &amp;amp;with ) returns Supply:D</pre>
 <p>Creates a "reducing" supply with the same semantics as List.reduce.</p>
 <a name="t167.4.17"></a><h2 id="_type_Supply.pod6-method_lines">167.4.17 method lines</h2>
 <pre class="code">method lines(Supply:D: :$chomp = True ) returns Supply:D</pre>
 <p>Creates a supply that will emit the characters coming in line by line from a supply that's usually created by some asynchronous I/O operation. The optional :chomp parameter indicates whether to remove line separators: the default is True.</p>
 <a name="t167.4.18"></a><h2 id="_type_Supply.pod6-method_words">167.4.18 method words</h2>
 <pre class="code">method words(Supply:D:) returns Supply:D</pre>
 <p>Creates a supply that will emit the characters coming in word for word from a supply that's usually created by some asynchronous I/O operation.</p>
 <a name="t167.4.19"></a><h2 id="_type_Supply.pod6-method_unique">167.4.19 method unique</h2>
 <pre class="code">method unique(Supply:D: :$as({$_}), :$with(&amp;amp;[===]), :$expires) returns Supply:D</pre>
 <p>Creates a supply that only provides unique values, as defined by the optional :as and :with parameters (same as with List.unique). The optional :expires parameter how long to wait (in seconds) before "resetting" and not considering a value to have been seen, even if it's the same as an old value.</p>
 <a name="t167.4.20"></a><h2 id="_type_Supply.pod6-method_squish">167.4.20 method squish</h2>
 <pre class="code">method squish(Supply:D: :$as({$_}), :$with(&amp;amp;[===]), :$expires) returns Supply:D</pre>
 <p>Creates a supply that only provides unique values, as defined by the optional :as and :with parameters (same as with List.squish). The optional :expires parameter how long to wait (in seconds) before "resetting" and not considering a value to have been seen, even if it's the same as an old value.</p>
 <a name="t167.4.21"></a><h2 id="_type_Supply.pod6-method_max">167.4.21 method max</h2>
 <pre class="code">method max(Supply:D: &amp;amp;by = &amp;amp;infix:&amp;lt;cmp&gt;) returns Supply:D</pre>
 <p>Creates a supply that only emits values from the given supply if they are larger than any value seen before. In other words, from a continuously ascending supply it will emit all the values. From a continuously descending supply it will only emit the first value. The optional parameter specifies the comparator, just as with Any.max.</p>
 <a name="t167.4.22"></a><h2 id="_type_Supply.pod6-method_min">167.4.22 method min</h2>
 <pre class="code">method min(Supply:D: &amp;amp;by = &amp;amp;infix:&amp;lt;cmp&gt;) returns Supply:D</pre>
 <p>Creates a supply that only emits values from the given supply if they are smaller than any value seen before. In other words, from a continuously descending supply it will emit all the values. From a continuously ascending supply it will only emit the first value. The optional parameter specifies the comparator, just as with Any.max.</p>
 <a name="t167.4.23"></a><h2 id="_type_Supply.pod6-method_minmax">167.4.23 method minmax</h2>
 <pre class="code">method minmax(Supply:D: &amp;amp;by = &amp;amp;infix:&amp;lt;cmp&gt;) returns Supply:D</pre>
 <p>Creates a supply that emits a Range every time a new minimum or maximum values is seen from the given supply. The optional parameter specifies the comparator, just as with Any.max.</p>
 <a name="t167.4.24"></a><h2 id="_type_Supply.pod6-method_start">167.4.24 method start</h2>
 <pre class="code">method start(Supply:D: &amp;amp;startee) returns Supply:D</pre>
 <p>Creates a supply of supplies. For each value in the original supply, the code object is scheduled on another thread, and returns a supply either of a single value (if the code succeeds), or one that quits without a value (if the code fails).</p>
 <p>This is useful for asynchronously starting work that you don't block on.</p>
 <p>Use <span class="code">migrate</span> to join the values into a single supply again.</p>
 <a name="t167.4.25"></a><h2 id="_type_Supply.pod6-method_migrate">167.4.25 method migrate</h2>
 <pre class="code">method migrate(Supply:D:) returns Supply:D</pre>
 <p>Creates a supply that acts like the last supply emitted to the given supply of supplies (usually created with <span class="code">start</span>.</p>
 <a name="t167.5"></a><h1 id="_type_Supply.pod6-Methods_that_combine_supplies">167.5 Methods that combine supplies</h1>
 <a name="t167.5.1"></a><h2 id="_type_Supply.pod6-method_merge">167.5.1 method merge</h2>
 <pre class="code">method merge(Supply @*supplies) returns Supply:D</pre>
 <p>Creates a supply to which any value seen from the given supplies, is emitted. The resulting supply is done Only when all given supplies are done. Can also be called as a class method.</p>
 <a name="t167.5.2"></a><h2 id="_type_Supply.pod6-method_zip">167.5.2 method zip</h2>
 <pre class="code">method zip(Supply @*supplies, :&amp;amp;with = &amp;amp;[,]) returns Supply:D</pre>
 <p>Creates a supply that emits combined values as soon as there is a new value seen on <b>all</b> of the supplies. By default, <a href="#_type_List.pod6">Lists</a> are created, but this can be changed by specifying your own combiner with the :with parameter. The resulting supply is done as soon as <b>any</b> of the given supplies are done. Can also be called as a class method.</p>
 <a name="t167.5.3"></a><h2 id="_type_Supply.pod6-method_zip-latest">167.5.3 method zip-latest</h2>
 <pre class="code">method zip-latest(Supply @*supplies, :&amp;amp;with = &amp;amp;[,], :$initial) returns Supply:D</pre>
 <p>Creates a supply that emits combined values as soon as there is a new value seen on <b>any</b> of the supplies. By default, <a href="#_type_List.pod6">Lists</a> are created, but this can be changed by specifying your own combiner with the :with parameter. The optional :initial parameter can be used to indicate the initial state of the combined values. By default, all supplies have to have at least one value emitted on them before the first combined values is emitted on the resulting supply. The resulting supply is done as soon as <b>any</b> of the given supplies are done. Can also be called as a class method.</p>
 <a name="t167.6"></a><h1 id="_type_Supply.pod6-I/O_features_exposed_as_supplies">167.6 I/O features exposed as supplies</h1>
 <a name="t167.6.1"></a><h2 id="_type_Supply.pod6-sub_signal">167.6.1 sub signal</h2>
 <pre class="code">sub signal(@*signals, :$scheduler);</pre>
 <p>Creates a supply for the Signal enums (such as SIGINT) specified, and an optional :scheduler parameter. Any signals received, will be emitted on the supply. For example:</p>
 <pre class="code">signal(SIGINT).tap( { say "Thank you for your attention"; exit 0 } );</pre>
 <p>would catch Control-C, thank you, and then exit. The list of supported signals can be found by checking Signal::.keys (as you would any enum).</p>
 <a name="t167.6.2"></a><h2 id="_type_Supply.pod6-method_IO::Notification.watch-path">167.6.2 method IO::Notification.watch-path</h2>
 <pre class="code">method IO::Notification.watch-path($path) returns Supply:D</pre>
 <p>Creates a supply to which the OS will emit values to indicate changes on the file system for the given path. Also has a shortcut with the <span class="code">watch</span> method on an IO object, like this:</p>
 <pre class="code">IO::Notification.watch-path(".").act( { say "$^file changed" } );
".".IO.watch.act(                     { say "$^file changed" } );   # same</pre>
</div> <!-- /type/Tap.pod6 --><div class="pod-body"><a id="_type_Tap.pod6"></a><a name="t168"><h1 class="title">168 class Tap</h1></a> <p class="subtitle">Subscription to a Supply</p> <pre class="code">class Tap { ... }</pre>
 <p>A Tap is a subscription to a <a href="#_type_Supply.pod6">Supply</a>.</p>
 <pre class="code">my $s = Supplier.new;
my $tap = $s.Supply.tap(
    -&gt; $v { say "the value is $v" },
    done    =&gt; { say "Supply is done" },
    closing =&gt; { say "Tap closed" },
    quit    =&gt; -&gt; $ex { say "Supply finished with error $ex" },
);

# later
$tap.close;</pre>
 <a name="t168.1"></a><h1 id="_type_Tap.pod6-Methods">168.1 Methods</h1>
 <a name="t168.1.1"></a><h2 id="_type_Tap.pod6-method_emit">168.1.1 method emit</h2>
 <pre class="code">method emit(Tap:D:) returns Callable:D</pre>
 <p>Returns the callback that is called for emitted events.</p>
 <a name="t168.1.2"></a><h2 id="_type_Tap.pod6-method_done">168.1.2 method done</h2>
 <pre class="code">method done(Tap:D:)</pre>
 <p>Returns the callback that is called on successfully shutting down a channel, if any.</p>
 <a name="t168.1.3"></a><h2 id="_type_Tap.pod6-method_quit">168.1.3 method quit</h2>
 <pre class="code">method quit(Tap:D:)</pre>
 <p>Returns the callback that is called on shutting down a channel with error, if any.</p>
 <a name="t168.1.4"></a><h2 id="_type_Tap.pod6-method_closing">168.1.4 method closing</h2>
 <pre class="code">method closing(Tap:D:)</pre>
 <p>Returns the callback that is called on closing the tap.</p>
 <a name="t168.1.5"></a><h2 id="_type_Tap.pod6-method_supply">168.1.5 method supply</h2>
 <pre class="code">method supply(Tap:D:)</pre>
 <p>Returns the supply to which the tap belongs.</p>
 <a name="t168.1.6"></a><h2 id="_type_Tap.pod6-method_close">168.1.6 method close</h2>
 <pre class="code">method close(Tap:D:)</pre>
 <p>Closes the tap.</p>
</div> <!-- /type/Thread.pod6 --><div class="pod-body"><a id="_type_Thread.pod6"></a><a name="t169"><h1 class="title">169 class Thread</h1></a> <p class="subtitle">Concurrent execution of code (low-level)</p> <pre class="code">class Thread { ... }</pre>
 <p>A <a href="https://en.wikipedia.org/wiki/Thread_%28computing%29">thread</a> is a sequence of instructions that can (potentially) run in parallel to others. Class <span class="code">Thread</span> provides a bit of abstraction over threads provided by the underlying virtual machines (which in turn might or might not be operating system threads).</p>
 <p>Since threads are fairly low-level, most applications should use other primitives, like <a href="#_type_Promise.pod6-method start">start</a>, which also runs in parallel and returns a <a href="#_type_Promise.pod6">Promise</a>.</p>
 <pre class="code">use v6; 
 my @threads = (^10).map: { 
     Thread.start( 
         name =&gt; "Sleepsorter $_", 
         sub { 
             my $rand = (^10).pick; 
             sleep $rand; 
             say $rand; 
         }, 
     ); 
 } 
 
 .finish for @threads; 
</pre>
 <p>The current thread is available in the dynamic variable <span class="code">$*THREAD</span>.</p>
 <a name="t169.1"></a><h1 id="_type_Thread.pod6-Methods">169.1 Methods</h1>
 <a name="t169.1.1"></a><h2 id="_type_Thread.pod6-method_new">169.1.1 method new</h2>
 <pre class="code">method new(:&amp;amp;code!, Bool :$app_lifetime = False, Str $name = '&amp;lt;anon&gt;') returns Thread:D</pre>
 <p>Creates and returns a new <span class="code">Thread</span>, without starting it yet. <span class="code">&amp;code</span> is the code that will be run in a separate thread.</p>
 <p><span class="code">$name</span> is a user-specified string that identifies the thread.</p>
 <p>If <span class="code">$app_lifetime</span> is set to <span class="code">True</span>, then the thread is killed when the main thread of the process terminates. If set to <span class="code">False</span>, the process will only terminate when the thread has finished.</p>
 <a name="t169.1.2"></a><h2 id="_type_Thread.pod6-method_start">169.1.2 method start</h2>
 <pre class="code">method start(Thread:U: &amp;amp;code, Bool :$app_lifetime = False, Str $name = '&amp;lt;anon&gt;') returns Thread:D</pre>
 <p>Creates, runs and returns a new <span class="code">Thread</span>. Note that it can (and often does) return before the thread's code has finished running.</p>
 <a name="t169.1.3"></a><h2 id="_type_Thread.pod6-method_run">169.1.3 method run</h2>
 <pre class="code">method run(Thread:D:)</pre>
 <p>Runs the thread, and returns the invocant. It is an error to run a thread that has already been started.</p>
 <a name="t169.1.4"></a><h2 id="_type_Thread.pod6-method_id">169.1.4 method id</h2>
 <pre class="code">method id(Thread:D:) returns Int:D</pre>
 <p>Returns a numeric, unique thread identifier.</p>
 <a name="t169.1.5"></a><h2 id="_type_Thread.pod6-method_finish">169.1.5 method finish</h2>
 <pre class="code">method finish(Thread:D)</pre>
 <p>Waits for the thread to finish. This is called <a href="#168-method_join">join</a> in other programming systems.</p>
 <a name="t169.1.6"></a><h2 id="_type_Thread.pod6-method_join">169.1.6 method join</h2>
 <pre class="code">method join(Thread:D)</pre>
 <p>Waits for the thread to finish.</p>
 <a name="t169.1.7"></a><h2 id="_type_Thread.pod6-method_yield">169.1.7 method yield</h2>
 <pre class="code">method yield(Thread:U)</pre>
 <p>Tells the scheduler to prefer another thread for now.</p>
 <pre class="code">Thread.yield;</pre>
 <a name="t169.1.8"></a><h2 id="_type_Thread.pod6-method_app_lifetime">169.1.8 method app_lifetime</h2>
 <pre class="code">method app_lifetime(Thread:D:) returns Bool:D</pre>
 <p>Returns <span class="code">False</span> unless the named parameter <span class="code">:app_lifetime</span> is specifically set to <span class="code">True</span> during object creation. If the method returns <span class="code">False</span> it means that the the process will only terminate when the thread has finished while <span class="code">True</span> means that the thread will be killed when the main thread of the process terminates.</p>
 <pre class="code">my $t1 = Thread.new(code =&gt; { for 1..5 -&gt; $v { say $v }});
my $t2 = Thread.new(code =&gt; { for 1..5 -&gt; $v { say $v }}, :app_lifetime);

say $t1.app_lifetime;                 # False
say $t2.app_lifetime;                 # True</pre>
 <a name="t169.1.9"></a><h2 id="_type_Thread.pod6-method_name">169.1.9 method name</h2>
 <pre class="code">method name(Thread:D:) returns Str:D</pre>
 <p>Returns the user defined string, which can optionally be set during object creation in order to identify the <span class="code">Thread</span>, or '&lt;anon>' if no such string was specified.</p>
 <pre class="code">my $t1 = Thread.new(code =&gt; { for 1..5 -&gt; $v { say $v }});
my $t2 = Thread.new(code =&gt; { for 1..5 -&gt; $v { say $v }}, name =&gt; 'my thread');

say $t1.name;                 # &amp;lt;anon&gt;
say $t2.name;                 # my thread</pre>
 <a name="t169.1.10"></a><h2 id="_type_Thread.pod6-method_Str">169.1.10 method Str</h2>
 <pre class="code">method Str(Thread:D:) returns Str:D</pre>
 <p>Returns a string which contains the invocants <a href="#168-method_id">thread id</a> and <a href="#168-method_name">name</a>.</p>
 <pre class="code">my $t = Thread.new(code =&gt; { for 1..5 -&gt; $v { say $v }}, name =&gt; 'calc thread');
say $t.Str;                           # Thread&amp;lt;3&gt;(calc thread)</pre>
</div> <!-- /type/ThreadPoolScheduler.pod6 --><div class="pod-body"><a id="_type_ThreadPoolScheduler.pod6"></a><a name="t170"><h1 class="title">170 class ThreadPoolScheduler</h1></a> <p class="subtitle">Scheduler that distributes work among a pool of threads</p> <pre class="code">class ThreadPoolScheduler does Scheduler { ... }</pre>
 <p>The <span class="code">ThreadPoolScheduler</span> has a range of number of threads that it maintains, and it distributes work among those threads. When the upper limit of threads isn't reached yet, and there is work pending, it spawns new threads to handle the work.</p>
 <a name="t170.1"></a><h1 id="_type_ThreadPoolScheduler.pod6-Methods">170.1 Methods</h1>
 <a name="t170.1.1"></a><h2 id="_type_ThreadPoolScheduler.pod6-new">170.1.1 new</h2>
 <pre class="code">method new(Int :$initial_threads = 0, Int :$max_threads=16)</pre>
 <p>Creates a new <span class="code">ThreadPoolScheduler</span> object with the given range of threads to maintain.</p>
</div> <!-- /type/Uni.pod6 --><div class="pod-body"><a id="_type_Uni.pod6"></a><a name="t171"><h1 class="title">171 class Uni</h1></a> <p class="subtitle">A string of Unicode codepoints</p> <pre class="code">class Uni does Positional[uint32] does Stringy</pre>
 <p>Unlike <a href="#_type_Str.pod6">Str</a>, which is made of Grapheme clusters, Uni is string strictly made of Unicode codepoints. That is, base characters and combining characters are separate elements of a <span class="code">Uni</span> instance.</p>
 <p><span class="code">Uni</span> presents itself with a list-like interface of integer Codepoints.</p>
 <p>Typical usage of <span class="code">Uni</span> is through one of its subclasses, <span class="code">NFC</span>, <span class="code">NFD</span>, <span class="code">NFKD</span> and <span class="code">NFKC</span>, which represent strings in one of the <a href="http://www.unicode.org/reports/tr15/">Unicode Normalization Forms</a> of the same name.</p>
 <a name="t171.1"></a><h1 id="_type_Uni.pod6-Methods">171.1 Methods</h1>
 <a name="t171.1.1"></a><h2 id="_type_Uni.pod6-method_new">171.1.1 method new</h2>
 <pre class="code">method new(*@codes) returns Uni:D</pre>
 <p>Creates a new <span class="code">Uni</span> instance from the given codepoint numbers.</p>
 <a name="t171.1.2"></a><h2 id="_type_Uni.pod6-method_NFC">171.1.2 method NFC</h2>
 <pre class="code">method NFC(Uni:D:) returns NFC:D</pre>
 <p>Returns a NFC (Normal Form Composed)-converted version of the invocant.</p>
 <a name="t171.1.3"></a><h2 id="_type_Uni.pod6-method_NFD">171.1.3 method NFD</h2>
 <pre class="code">method NFD(Uni:D:) returns NFD:D</pre>
 <p>Returns a NFD (Normal Form Decomposed)-converted version of the invocant.</p>
 <a name="t171.1.4"></a><h2 id="_type_Uni.pod6-method_NFKC">171.1.4 method NFKC</h2>
 <pre class="code">method NFKC(Uni:D:) returns NFKC:D</pre>
 <p>Returns a NFKC (Normal Form Compatibility Composed)-converted version of the invocant.</p>
 <a name="t171.1.5"></a><h2 id="_type_Uni.pod6-method_NFKD">171.1.5 method NFKD</h2>
 <pre class="code">method NFKD(Uni:D:) returns NFKD:D</pre>
 <p>Returns a NFD (Normal Form Compatibility Decomposed)-converted version of the invocant.</p>
 <a name="t171.1.6"></a><h2 id="_type_Uni.pod6-method_codes">171.1.6 method codes</h2>
 <pre class="code">method codes(Uni:D:) returns Int:D</pre>
 <p>Returns the number of codepoints in the invocant.</p>
 <a name="t171.1.7"></a><h2 id="_type_Uni.pod6-method_elems">171.1.7 method elems</h2>
 <pre class="code">method elems(Uni:D:) returns Int:D</pre>
 <p>Returns the number of codepoints in the invocant.</p>
</div> <!-- /type/Variable.pod6 --><div class="pod-body"><a id="_type_Variable.pod6"></a><a name="t172"><h1 class="title">172 class Variable</h1></a> <p class="subtitle">Object representation of a variable for use in traits</p> <pre class="code">class Variable { ... }</pre>
 <p>Variables have a wealth of compile-time information, but at run time, accesses to a variable usually act on the value stored inside the variable, not the variable itself.</p>
 <p>Class <span class="code">Variable</span> holds the compile-time information that traits can use to introspect and manipulate variables.</p>
 <a name="t172.1"></a><h1 id="_type_Variable.pod6-Routines">172.1 Routines</h1>
 <a name="t172.1.1"></a><h2 id="_type_Variable.pod6-method_name">172.1.1 method name</h2>
 <pre class="code">method name(Variable:D: str)</pre>
 <p>Returns the name of the variable, including the sigil.</p>
 <a name="t172.1.2"></a><h2 id="_type_Variable.pod6-trait_is_default">172.1.2 trait is default</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Variable:D, :$default!)</pre>
 <p>Sets the default value with which a variable is initialized, and to which it is reset when Nil is assigned to it. Trait arguments are evaluated at compile time. Closures won't do what you expect. They are stored as is and need to be called by hand.</p>
 <pre class="code">my Int $x is default(42);
say $x;     # 42
$x = 5;
say $x;     # 5
# explicit reset:
$x = Nil;
say $x;     # 42</pre>
 <a name="t172.1.3"></a><h2 id="_type_Variable.pod6-trait_is_dynamic">172.1.3 trait is dynamic</h2>
 <pre class="code">multi sub trait_mod:&amp;lt;is&gt;(Variable:D, :$dynamic)</pre>
 <p>Marks a variable as dynamic, that is, accessible from inner dynamic scopes without being in an inner lexical scope.</p>
 <pre class="code">    sub introspect() { 
         say  &lt;b&gt;$CALLER::x&lt;/b&gt; ; 
     } 
     my $x  &lt;b&gt;is dynamic&lt;/b&gt;  = 23; 
     introspect;         # 23 
     { 
         # not dynamic 
         my $x; 
         introspect()    # dies with an exception of  &lt;a href="#_type_X::Caller::NotDynamic.pod6"&gt;type X::Caller::NotDynamic&lt;/a&gt;  
     } 
</pre>
</div> <!-- /type/Version.pod6 --><div class="pod-body"><a id="_type_Version.pod6"></a><a name="t173"><h1 class="title">173 class Version</h1></a> <p class="subtitle">Module version descriptor</p> <pre class="code">class Version { }</pre>
 <p>Version objects identify version of software components (and potentially other entities). Perl 6 uses them internally for versioning modules.</p>
 <p>A version consists of several parts, which are visually represented by joining them with a dot. A version part is usually an integer, a string like <span class="code">alpha</span>, or a <a href="#_type_Whatever.pod6">Whatever</a>-star <span class="code">*</span>. The latter is used to indicate that any version part is acceptable in another version that is compared to the current one.</p>
 <pre class="code">say v1.0.1 ~~ v1.*;     # True</pre>
 <p>Version literals can only contain numeric and <a href="#_type_Whatever.pod6">Whatever</a> parts. They start with a lower-case <span class="code">v</span>, and are followed by at least one part. Multiple parts are separate with a dot <span class="code">.</span>. A trailing <span class="code">+</span> indicates that higher versions are OK in comparisons:</p>
 <pre class="code">say v1.2 ~~ v1.0;       # False
say v1.2 ~~ v1.0+;      # True</pre>
 <p>In comparisons, early parts take precedence over later parts.</p>
 <pre class="code">say v1.2 cmp v2.1;      # Increase</pre>
 <a name="t173.1"></a><h1 id="_type_Version.pod6-Methods">173.1 Methods</h1>
 <a name="t173.1.1"></a><h2 id="_type_Version.pod6-method_new">173.1.1 method new</h2>
 <pre class="code">method new(Str:d $s)</pre>
 <p>Creates a Version from a string <span class="code">$s</span>. The string is combed for the numeric, alphabetic, and wildcard components of the version object. Any characters other than alphanumerics and asterisks are assumed to be equivalent to a dot. A dot is also assumed between any adjacent numeric and alphabetic characters.</p>
 <a name="t173.1.2"></a><h2 id="_type_Version.pod6-method_parts">173.1.2 method parts</h2>
 <pre class="code">method parts(Version:D:) returns List:D</pre>
 <p>Returns the list of parts that make up this Version object</p>
 <pre class="code">my $v1 = v1.0.1;
my $v2 = v1.0.1+;
say $v1.parts;                                    # (1 0 1)
say $v2.parts;                                    # (1 0 1)</pre>
 <a name="t173.1.3"></a><h2 id="_type_Version.pod6-method_plus">173.1.3 method plus</h2>
 <pre class="code">method plus(Version:D:) returns Bool:D</pre>
 <p>Returns <span class="code">True</span> if comparisons against this version allow larger versions too.</p>
 <pre class="code">my $v1 = v1.0.1;
my $v2 = v1.0.1+;
say $v1.plus;                                     # False
say $v2.plus;                                     # True</pre>
 <a name="t173.1.4"></a><h2 id="_type_Version.pod6-method_Str">173.1.4 method Str</h2>
 <pre class="code">method Str(Version:D:) returns Str:D</pre>
 <p>Returns a string representation of the invocant.</p>
 <pre class="code">my $v1 = v1.0.1;
my $v2 = Version.new('1.0.1');
say $v1.Str;                                      # 1.0.1
say $v2.Str;                                      # 1.0.1</pre>
 <a name="t173.1.5"></a><h2 id="_type_Version.pod6-method_gist">173.1.5 method gist</h2>
 <pre class="code">method gist(Version:D:) returns Str:D</pre>
 <p>Returns a string representation of the invocant, just like <a href="#172-method_Str">Str</a>, prepended with a lower-case <span class="code">v</span>.</p>
 <pre class="code">my $v1 = v1.0.1;
my $v2 = Version.new('1.0.1');
say $v1.gist;                                      # v1.0.1
say $v2.gist;                                      # v1.0.1</pre>
</div> <!-- /type/Whatever.pod6 --><div class="pod-body"><a id="_type_Whatever.pod6"></a><a name="t174"><h1 class="title">174 class Whatever</h1></a> <p class="subtitle">Placeholder for an unspecified value/argument</p> <pre class="code">class Whatever { }</pre>
 <p><span class="code">Whatever</span> is a class whose objects don't really do much; it gets its semantic from other routines that accept <span class="code">Whatever</span>-objects as markers to do something special. The <span class="code">*</span> literal in term position creates a <span class="code">Whatever</span> object.</p>
 <p>Much of <span class="code">*</span>'s charm comes from <i>Whatever-currying</i>. When <span class="code">*</span> is used in term position in combination with most operators, the compiler will transform the expression into a closure of type <a href="#_type_WhateverCode.pod6">WhateverCode</a>.</p>
 <pre class="code">my $c = * + 2;          # same as   -&gt; $x { $x + 2 };
say $c(4);              # 6</pre>
 <p>Multiple <span class="code">*</span> in one expression generate closures with as many arguments:</p>
 <pre class="code">my $c = * + *;          # same as   -&gt; $x, $y { $x + $y }</pre>
 <p>Using <span class="code">*</span> in complex expressions will also generate closures:</p>
 <pre class="code">my $c = 4 * * + 5;      # same as   -&gt; $x { 4 * $x + 5 }</pre>
 <p>Calling a method on <span class="code">*</span> also creates a closure:</p>
 <pre class="code">&amp;lt;a b c&gt;.map: *.uc;      # same as    &amp;lt;a b c&gt;.map: -&gt; $char { $char.uc }</pre>
 <p>As mentioned before, not all operators and syntactic constructs curry <span class="code">*</span> (or <span class="code">Whatever</span>-stars) to <span class="code">WhateverCode</span>. In the following cases, <span class="code">*</span> will remain a <span class="code">Whatever</span> object.</p>
 <table>
<tr><th>Exception</th> <th>Example</th> <th>What it does</th></tr>
<tr><td>comma</td> <td>1, *, 2</td> <td>generates a List with a * element</td></tr>
 <tr><td>range operators</td> <td>1..*</td> <td>Range.new(:from(1), :to(*));</td></tr>
 <tr><td>series operator</td> <td>1 ... *</td> <td>infinite list</td></tr>
 <tr><td>smart-matching</td> <td>1 ~~ *</td> <td>returns True</td></tr>
 <tr><td>assignment</td> <td>$x = *</td> <td>assign * to $x</td></tr>
 <tr><td>binding</td> <td>$x := *</td> <td>binds * to $x</td></tr>
 <tr><td>list repetition</td> <td>1 xx *</td> <td>generates infinite list</td></tr>
</table> <p>The range operators are handled specially. They do not curry with <span class="code">Whatever</span>-stars, but they do curry with <span class="code">WhateverCode</span></p>
 <pre class="code">say (1..*).WHAT;        # Range
say (1..*-1).WHAT;      # WhateverCode</pre>
 <p>This allow all these constructs to work:</p>
 <pre class="code">.say for 1..*;          # infinite loop
my @a = 1..4;
say @a[0..*];           # 1 2 3 4
say @a[0..*-2];         # 1 2 3</pre>
 <p>Because <i>Whatever-currying</i> is a purely syntactic compiler transform, you will get no runtime currying of stored <span class="code">Whatever</span>-stars into <span class="code">WhateverCode</span>s.</p>
 <pre class="code">my $x = *;
$x + 2;                 # not a closure, dies because
                        # it can't coerce $x to Numeric</pre>
 <p>The use cases for stored <span class="code">Whatever</span>-stars are involve those curry-exception cases mentioned above. For example, if you want an infinite series by default.</p>
 <pre class="code">my $max    = potential-upper-limit() // *;
my $series = known-lower-limit() ... $max;</pre>
 <p>A stored <span class="code">*</span> will also result in the generation of a <span class="code">WhateverCode</span> in the specific case of smart match. Note that this is not actually the stored <span class="code">*</span> which is being curried, but rather the <span class="code">*</span> on the LHS.</p>
 <pre class="code">my $constraint = find-constraint() // *;
my $maybe-always-matcher = * ~~ $constraint;</pre>
 <p>If this hypothetical <span class="code">find-constraint</span> were to have found no constraint, <span class="code">$maybe-always-matcher</span> would return to <span class="code">True</span> for anything.</p>
 <pre class="code">$maybe-always-matcher(555);      # True
$maybe-always-matcher(Any);      # True</pre>
 <a name="t174.1"></a><h1 id="_type_Whatever.pod6-Methods">174.1 Methods</h1>
 <a name="t174.1.1"></a><h2 id="_type_Whatever.pod6-method_ACCEPTS">174.1.1 method ACCEPTS</h2>
 <pre class="code">multi method ACCEPTS(Whatever:D: Mu $other)</pre>
 <p>Returns <span class="code">True</span>.</p>
</div> <!-- /type/WhateverCode.pod6 --><div class="pod-body"><a id="_type_WhateverCode.pod6"></a><a name="t175"><h1 class="title">175 class WhateverCode</h1></a> <p class="subtitle">Code object constructed by Whatever-currying</p> <pre class="code">class WhateverCode is Code { }</pre>
 <p><span class="code">WhateverCode</span> objects are the result of <a href="#_type_Whatever.pod6">Whatever</a>-currying. See the <a href="#_type_Whatever.pod6">Whatever</a> documentation for details.</p>
 <p>When you wish to control how a method or function interprets any <i>Whatever stars</i>, you may use multi dispatch with <span class="code">Whatever</span> and <span class="code">WhateverCode</span> parameters to do so, as in the following example:</p>
 <pre class="code">class Cycle {
      has $.pos;
      has @.vals;
}

multi sub get_val(Cycle $c, Int $idx) {
      $c.vals[$idx % $c.vals.elems]
}

# Define what to do with a stand-alone * as the second argument
multi sub get_val(Cycle $c, Whatever $idx) {
    get_val($c, $c.pos);
}

# Define what to do with a * in an expression
multi sub get_val(Cycle $c, WhateverCode $idx) {
    get_val($c, $idx($c.pos));
}

my Cycle $c .= new(:pos(2), :vals(0..^10));

say get_val($c, 3);   # 3
say get_val($c, *);   # 2
say get_val($c, *-1); # 1</pre>
 <p>Since <span class="code">WhateverCode</span> objects are <span class="code">Callable</span> you may use introspection to create as fancy a behavior as you wish. Continuing the following example we may add handling for two <i>Whatever stars</i>:</p>
 <pre class="code"># Define what to do with two * in an expression
multi sub get_val(Cycle $c, WhateverCode $idx where { .arity == 2 }) {
    get_val($c, $idx($c.pos, $c.vals.elems));
}

say get_val($c, * + * div 2); # 2 + 10/2 = 7</pre>
 <p>Note, though, that subexpressions may impose their own <i>Whatever star</i> rules:</p>
 <pre class="code">my @a = (0, 1, 2);
say get_val($c, @a[*-1]) # 2, because the star belongs to the Array class</pre>
 <p>This can make the ownership of <i>Whatever stars</i> become confusing rather quickly, so be careful not to overdo it.</p>
</div> <!-- /type/X/AdHoc.pod6 --><div class="pod-body"><a id="_type_X_AdHoc.pod6"></a><a name="t176"><h1 class="title">176 class X::AdHoc</h1></a> <p class="subtitle">Error with a custom error message</p> <pre class="code">class X::AdHoc is Exception { ... }</pre>
 <p><span class="code">X::AdHoc</span> is the type into which objects are wrapped if they are thrown as exceptions, but don't inherit from <a href="#_type_Exception.pod6">Exception</a>.</p>
 <p>Its benefit over returning non-<span class="code">Exception</span> objects is that it gives access to all the methods from class <a href="#_type_Exception.pod6">Exception</a>, like <span class="code">backtrace</span> and <span class="code">rethrow</span>.</p>
 <p>You can obtain the original object with the <span class="code">payload</span> method.</p>
 <pre class="code">try {
    die [404, 'File not found']; # throw non-exception object
}
say "Got HTTP code ",
    $!.payload[0],          # 404
    " and backtrace ",
    $!.backtrace;</pre>
 <p>Note that young code will often be prototyped using <span class="code">X::AdHoc</span> and then later be revised to use more specific subtypes of <span class="code">Exception</span>. As such it is usually best not to explicitly rely on receiving an <span class="code">X::AdHoc</span> -- in many cases using the string returned by the <span class="code">.message</span> method, which all <span class="code">Exception</span>s must have, is preferable.</p>
 <a name="t176.1"></a><h1 id="_type_X_AdHoc.pod6-Methods">176.1 Methods</h1>
 <a name="t176.1.1"></a><h2 id="_type_X_AdHoc.pod6-method_payload">176.1.1 method payload</h2>
 <pre class="code">method payload(X::AdHoc:D)</pre>
 <p>Returns the original object which was passed to <span class="code">die</span>.</p>
</div> <!-- /type/X/Anon/Augment.pod6 --><div class="pod-body"><a id="_type_X_Anon_Augment.pod6"></a><a name="t177"><h1 class="title">177 class X::Anon::Augment</h1></a> <p class="subtitle">Compilation error due to augmenting an anonymous package</p> <pre class="code">class X::Anon::Augment does X::Comp { }</pre>
 <p>Compile time error thrown when trying to augment an anonymous package.</p>
 <p>For example</p>
 <pre class="code">use MONKEY-TYPING;
augment class { }</pre>
 <p>Dies with</p>
 <pre class="code">===SORRY!===
Cannot augment anonymous class</pre>
 <a name="t177.1"></a><h1 id="_type_X_Anon_Augment.pod6-Methods">177.1 Methods</h1>
 <a name="t177.1.1"></a><h2 id="_type_X_Anon_Augment.pod6-method_package-kind">177.1.1 method package-kind</h2>
 <pre class="code">method package-kind returns Str:D</pre>
 <p>Returns the kind of package (module, class, grammar, ...) that the code tried to augment.</p>
</div> <!-- /type/X/Anon/Multi.pod6 --><div class="pod-body"><a id="_type_X_Anon_Multi.pod6"></a><a name="t178"><h1 class="title">178 class X::Anon::Multi</h1></a> <p class="subtitle">Compilation error due to declaring an anonymous multi</p> <pre class="code">class X::Anon::Multi does X::Comp { }</pre>
 <p>Compile time error thrown when an anonymous multi is being declared.</p>
 <p>For example</p>
 <pre class="code">multi method () { }</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Cannot put multi on anonymous method</pre>
 <a name="t178.1"></a><h1 id="_type_X_Anon_Multi.pod6-Methods">178.1 Methods</h1>
 <a name="t178.1.1"></a><h2 id="_type_X_Anon_Multi.pod6-method_multiness">178.1.1 method multiness</h2>
 <pre class="code">method multiness() returns Str:D</pre>
 <p>Returns a string describing the multiness that the original code used, for example <span class="code">"multi"</span> or <span class="code">"proto"</span>.</p>
 <a name="t178.1.2"></a><h2 id="_type_X_Anon_Multi.pod6-method_routine-type">178.1.2 method routine-type</h2>
 <pre class="code">method routine-type() returns Str:D</pre>
 <p>Returns a string describing the type of routine that was declared, for example <span class="code">"sub"</span> or <span class="code">"method"</span>.</p>
</div> <!-- /type/X/Assignment/RO.pod6 --><div class="pod-body"><a id="_type_X_Assignment_RO.pod6"></a><a name="t179"><h1 class="title">179 class X::Assignment::RO</h1></a> <p class="subtitle">Exception thrown when trying to assign to something read-only</p> <pre class="code">class X::Assignment::RO is Exception { ... }</pre>
 <p>Code like</p>
 <pre class="code">sub f() { 42 };
f() = 'new value';  # throws an X::Assignment::RO</pre>
 <p>throws an exception of type <span class="code">X::Assignment::RO</span>.</p>
 <a name="t179.1"></a><h1 id="_type_X_Assignment_RO.pod6-Methods">179.1 Methods</h1>
 <a name="t179.1.1"></a><h2 id="_type_X_Assignment_RO.pod6-method_typename">179.1.1 method typename</h2>
 <pre class="code">method typename(X::Assignment::RO:D:) returns Str</pre>
 <p>Returns the type name of the value on the left-hand side</p>
</div> <!-- /type/X/Attribute/NoPackage.pod6 --><div class="pod-body"><a id="_type_X_Attribute_NoPackage.pod6"></a><a name="t180"><h1 class="title">180 class X::Attribute::NoPackage</h1></a> <p class="subtitle">Compilation error due to declaring an attribute outside of a package</p> <pre class="code">class X::Attribute::NoPackage does X::Comp { }</pre>
 <p>Compile time error thrown when an attribute is declared where it does not make sense (for example in the mainline).</p>
 <p>For example</p>
 <pre class="code">has $.x;</pre>
 <p>Dies with</p>
 <pre class="code">===SORRY!===
You cannot declare attribute '$.x' here; maybe you'd like a class or a role?</pre>
 <a name="t180.1"></a><h1 id="_type_X_Attribute_NoPackage.pod6-Methods">180.1 Methods</h1>
 <a name="t180.1.1"></a><h2 id="_type_X_Attribute_NoPackage.pod6-method_name">180.1.1 method name</h2>
 <pre class="code">method name() returns Str:D</pre>
 <p>Returns the name of the attribute</p>
</div> <!-- /type/X/Attribute/Package.pod6 --><div class="pod-body"><a id="_type_X_Attribute_Package.pod6"></a><a name="t181"><h1 class="title">181 class X::Attribute::Package</h1></a> <p class="subtitle">Compilation error due to declaring an attribute in an ineligible package</p> <pre class="code">class X::Attribute::Package does X::Comp { }</pre>
 <p>Compile time error, thrown when the compiler encounters an attribute declaration inside a package that does not support attributes.</p>
 <p>For example</p>
 <pre class="code">module A { has $.x }</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
A module cannot have attributes, but you tried to declare '$.x'</pre>
 <a name="t181.1"></a><h1 id="_type_X_Attribute_Package.pod6-Methods">181.1 Methods</h1>
 <a name="t181.1.1"></a><h2 id="_type_X_Attribute_Package.pod6-method_name">181.1.1 method name</h2>
 <pre class="code">method name() returns Str:D</pre>
 <p>Returns the name of the attribute that triggered this error.</p>
 <a name="t181.1.2"></a><h2 id="_type_X_Attribute_Package.pod6-method_package-kind">181.1.2 method package-kind</h2>
 <pre class="code">method package-kind() returns Str:D</pre>
 <p>Returns the kind of package (package, module) that doesn't support attributes.</p>
</div> <!-- /type/X/Attribute/Undeclared.pod6 --><div class="pod-body"><a id="_type_X_Attribute_Undeclared.pod6"></a><a name="t182"><h1 class="title">182 class X::Attribute::Undeclared</h1></a> <p class="subtitle">Compilation error due to an undeclared attribute</p> <pre class="code">class X::Attribute::Undeclared is X::Undeclared { }</pre>
 <p>Thrown when code refers to an attribute that has not been declared.</p>
 <p>For example the code</p>
 <pre class="code">class A { method m { $!notthere } }</pre>
 <p>Produces the error</p>
 <pre class="code">Attribute $!notthere not declared in class A</pre>
 <a name="t182.1"></a><h1 id="_type_X_Attribute_Undeclared.pod6-Methods">182.1 Methods</h1>
 <a name="t182.1.1"></a><h2 id="_type_X_Attribute_Undeclared.pod6-method_package-kind">182.1.1 method package-kind</h2>
 <p>Returns the kind of package the attribute was used in (for example <span class="code">class</span>, <span class="code">grammar</span>)</p>
 <a name="t182.1.2"></a><h2 id="_type_X_Attribute_Undeclared.pod6-method_package-name">182.1.2 method package-name</h2>
 <p>Returns the name of the package in which the offensive attribute reference was performed.</p>
</div> <!-- /type/X/Augment/NoSuchType.pod6 --><div class="pod-body"><a id="_type_X_Augment_NoSuchType.pod6"></a><a name="t183"><h1 class="title">183 class X::Augment::NoSuchType</h1></a> <p class="subtitle">Compilation error due to augmenting a non-existing type</p> <pre class="code">class X::Augment::NoSuchType does X::Comp { }</pre>
 <p>Thrown when trying to augment a type which doesn't exist.</p>
 <p>For example</p>
 <pre class="code">use MONKEY-TYPING;
augment class NoSuch { }</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
You tried to augment class NoSuch, but it does not exist</pre>
 <a name="t183.1"></a><h1 id="_type_X_Augment_NoSuchType.pod6-Methods">183.1 Methods</h1>
 <a name="t183.1.1"></a><h2 id="_type_X_Augment_NoSuchType.pod6-method_package-kind">183.1.1 method package-kind</h2>
 <pre class="code">method package-kind() returns Str:D</pre>
 <p>Returns the kind of package (class, grammar) that is being tried to augment</p>
 <a name="t183.1.2"></a><h2 id="_type_X_Augment_NoSuchType.pod6-method_package">183.1.2 method package</h2>
 <p>Returns the name that was tried to augment, but which doesn't exist.</p>
</div> <!-- /type/X/Bind.pod6 --><div class="pod-body"><a id="_type_X_Bind.pod6"></a><a name="t184"><h1 class="title">184 class X::Bind</h1></a> <p class="subtitle">Error due to binding to something that is not a variable or container</p> <pre class="code">class X::Bind is Exception { ... }</pre>
 <p>If you write code like this:</p>
 <pre class="code">floor(1.1) := 42;</pre>
 <p>it dies with an <span class="code">X::Bind</span> exception:</p>
 <pre class="code">Cannot use bind operator with this left-hand side</pre>
</div> <!-- /type/X/Bind/NativeType.pod6 --><div class="pod-body"><a id="_type_X_Bind_NativeType.pod6"></a><a name="t185"><h1 class="title">185 class X::Bind::NativeType</h1></a> <p class="subtitle">Compilation error due to binding to a natively typed variable</p> <pre class="code">class X::Bind::NativeType does X::Comp { }</pre>
 <p>Compile-time error thrown when trying to bind to a natively typed variable.</p>
 <p>Since native variables explicitly don't have the concept of a container at run time. Thus it does not make sense to support both binding and assignment, and Perl 6 supports only assignment (which makes more sense, because native types are value types). So use assignment for natively typed variables.</p>
 <p>For example the code</p>
 <pre class="code">my int $x := 3;</pre>
 <p>dies with</p>
 <pre class="code">Cannot bind to natively typed variable '$x'; use assignment instead</pre>
 <p>and can be fixed by writing it as</p>
 <pre class="code">my int $x = 3;</pre>
 <a name="t185.1"></a><h1 id="_type_X_Bind_NativeType.pod6-Methods">185.1 Methods</h1>
 <a name="t185.1.1"></a><h2 id="_type_X_Bind_NativeType.pod6-method_name">185.1.1 method name</h2>
 <pre class="code">method name() returns Str:D</pre>
 <p>Returns the name of the variable.</p>
</div> <!-- /type/X/Bind/Slice.pod6 --><div class="pod-body"><a id="_type_X_Bind_Slice.pod6"></a><a name="t186"><h1 class="title">186 class X::Bind::Slice</h1></a> <p class="subtitle">Error due to binding to a slice</p> <pre class="code">class X::Bind::Slice is Exception { ... }</pre>
 <p>When you try to bind to an array or hash slice:</p>
 <pre class="code">my @a; @a[0, 1] := [42];    # Cannot bind to Array slice
my %h; %h&amp;lt;a b&gt; := {};       # Cannot bind to Hash slice</pre>
 <p>you get an exception of type <span class="indexed"><a id="580" name="">::Bind::Slice</a></span></p>
 <a name="t186.1"></a><h1 id="_type_X_Bind_Slice.pod6-Methods">186.1 Methods</h1>
 <a name="t186.1.1"></a><h2 id="_type_X_Bind_Slice.pod6-method_type">186.1.1 method type</h2>
 <pre class="code">method type(X::Bind::Slice:D:)</pre>
 <p>returns the type object of the thing that you tried to slice-bind, for example <a href="#_type_Array.pod6">Array</a>, <a href="#_type_List.pod6">List</a> or <a href="#_type_Hash.pod6">Hash</a>.</p>
</div> <!-- /type/X/Caller/NotDynamic.pod6 --><div class="pod-body"><a id="_type_X_Caller_NotDynamic.pod6"></a><a name="t187"><h1 class="title">187 class X::Caller::NotDynamic</h1></a> <p class="subtitle">Error while trying to access a non dynamic variable through CALLER</p> <pre class="code">class X::Caller::NotDynamic is Exception { }</pre>
 <p>Thrown when trying to access a non dynamic variable through CALLER</p>
 <p>A typical error message is</p>
 <pre class="code">Cannot access '$x' through CALLER, because it is not declared as dynamic</pre>
 <a name="t187.1"></a><h1 id="_type_X_Caller_NotDynamic.pod6-Methods">187.1 Methods</h1>
 <a name="t187.1.1"></a><h2 id="_type_X_Caller_NotDynamic.pod6-method_symbol">187.1.1 method symbol</h2>
 <p>Returns the name of the symbol that was passed to CALLER.</p>
</div> <!-- /type/X/Channel/ReceiveOnClosed.pod6 --><div class="pod-body"><a id="_type_X_Channel_ReceiveOnClosed.pod6"></a><a name="t188"><h1 class="title">188 class X::Channel::ReceiveOnClosed</h1></a> <p class="subtitle">Error due to calling </p> <pre class="code">class X::Channel::ReceiveOnClosed { ... }</pre>
 <p>This exception is thrown when a calling <span class="code">receive</span> on a <a href="#_type_Channel.pod6">Channel</a> that has been closed:</p>
 <pre class="code">my $s = Channel.new;
$s.close;
$s.receive;     # Cannot receive a message on a closed channel</pre>
 <a name="t188.1"></a><h1 id="_type_X_Channel_ReceiveOnClosed.pod6-Methods">188.1 Methods</h1>
 <a name="t188.1.1"></a><h2 id="_type_X_Channel_ReceiveOnClosed.pod6-method_channel">188.1.1 method channel</h2>
 <pre class="code">method Channel(:D:) return Channel:D</pre>
 <p>Returns the Channel object on which the <span class="code">receive</span> method was called.</p>
</div> <!-- /type/X/Channel/SendOnClosed.pod6 --><div class="pod-body"><a id="_type_X_Channel_SendOnClosed.pod6"></a><a name="t189"><h1 class="title">189 class X::Channel::SendOnClosed</h1></a> <p class="subtitle">Error due to calling </p> <pre class="code">class X::Channel::SendOnClosed { ... }</pre>
 <p>This exception is thrown when a calling <span class="code">send</span> on a <a href="#_type_Channel.pod6">Channel</a> that has been closed:</p>
 <pre class="code">my $s = Channel.new;
$s.close;
$s.send(42);    # Cannot send a message on a closed channel</pre>
 <a name="t189.1"></a><h1 id="_type_X_Channel_SendOnClosed.pod6-Methods">189.1 Methods</h1>
 <a name="t189.1.1"></a><h2 id="_type_X_Channel_SendOnClosed.pod6-method_channel">189.1.1 method channel</h2>
 <pre class="code">method Channel(:D:) return Channel:D</pre>
 <p>Returns the Channel object on which the <span class="code">send</span> method was called.</p>
</div> <!-- /type/X/Comp.pod6 --><div class="pod-body"><a id="_type_X_Comp.pod6"></a><a name="t190"><h1 class="title">190 role X::Comp</h1></a> <p class="subtitle">Common role for compile-time errors</p> <pre class="code">role X::Comp is Exception { }</pre>
 <p>Common role for compile-time errors.</p>
 <p>Note that since the backtrace of a compile time error generally shows routines from the compiler, not from user-space programs, the <a href="#_type_Backtrace.pod6">Backtrace</a> returned from the <a href="#_routine_backtrace.pod6">backtrace</a> method is not very informative. Instead the exception carries its own <span class="code">filename</span>, <span class="code">line</span> and <span class="code">column</span> attributes and public accessors.</p>
 <p>If an error occurs while creating an object (like a class or routine) at compile time, generally the exception associated with it does not hold a reference to the object (for example a class would not be fully composed, and thus not usable). In those cases the name of the would-be-created object is included in the error message instead.</p>
 <a name="t190.1"></a><h1 id="_type_X_Comp.pod6-Methods">190.1 Methods</h1>
 <a name="t190.1.1"></a><h2 id="_type_X_Comp.pod6-method_filename">190.1.1 method filename</h2>
 <p>The filename in which the compilation error occurred</p>
 <a name="t190.1.2"></a><h2 id="_type_X_Comp.pod6-method_line">190.1.2 method line</h2>
 <p>The line number in which the compilation error occurred.</p>
 <a name="t190.1.3"></a><h2 id="_type_X_Comp.pod6-method_column">190.1.3 method column</h2>
 <p>The column number of location where the compilation error occurred. (Rakudo does not implement that yet).</p>
</div> <!-- /type/X/Composition/NotComposable.pod6 --><div class="pod-body"><a id="_type_X_Composition_NotComposable.pod6"></a><a name="t191"><h1 class="title">191 class X::Composition::NotComposable</h1></a> <p class="subtitle">Compilation error due to composing an ineligible type</p> <pre class="code">class X::Composition::NotComposable is Exception { }</pre>
 <p>Thrown when trying to compose a type into a target type, but the composer type cannot be used for composition (roles and enums are generally OK).</p>
 <p>For example</p>
 <pre class="code">class A { }
class B does A { }</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
␤A is not composable, so B cannot compose it</pre>
 <p>because <span class="code">does</span> is reserved for role composition, and <span class="code">A</span> is not a role, nor something that knows how to turn into a role.</p>
 <p>The fix is to either make <span class="code">A</span> a role, or use inheritance (<span class="code">class B is A { }</span>) instead.</p>
 <a name="t191.1"></a><h1 id="_type_X_Composition_NotComposable.pod6-Methods">191.1 Methods</h1>
 <a name="t191.1.1"></a><h2 id="_type_X_Composition_NotComposable.pod6-method_target-name">191.1.1 method target-name</h2>
 <pre class="code">method target-name() returns Str:D</pre>
 <p>Returns the name of the type that should be composed, but failed.</p>
 <a name="t191.1.2"></a><h2 id="_type_X_Composition_NotComposable.pod6-method_composer">191.1.2 method composer</h2>
 <pre class="code">method composer() returns Mu</pre>
 <p>Returns the type that should be composed into the target, but which isn't a role.</p>
</div> <!-- /type/X/Constructor/Positional.pod6 --><div class="pod-body"><a id="_type_X_Constructor_Positional.pod6"></a><a name="t192"><h1 class="title">192 class X::Constructor::Positional</h1></a> <p class="subtitle">Error due to passing positional arguments to a default constructor</p> <pre class="code">class X::Constructor::Positional is Exception { }</pre>
 <p>Thrown from <a href="#_type_Mu.new.pod6">Mu.new</a> when positional arguments are passed to it.</p>
 <p>For example</p>
 <pre class="code">class A { }
A.new(2, 3)</pre>
 <p>dies with</p>
 <pre class="code">Default constructor only takes named arguments</pre>
</div> <!-- /type/X/ControlFlow.pod6 --><div class="pod-body"><a id="_type_X_ControlFlow.pod6"></a><a name="t193"><h1 class="title">193 class X::ControlFlow</h1></a> <p class="subtitle">Error due to calling a loop control command in an ineligible scope</p> <pre class="code">class X::ControlFlow is Exception { }</pre>
 <p>Thrown when a control flow construct (such as <span class="code">next</span> or <span class="code">redo</span>) is called outside the dynamic scope of an enclosing construct that is supposed to catch them.</p>
 <p>For example</p>
 <pre class="code">last</pre>
 <p>dies with</p>
 <pre class="code">last without loop construct</pre>
 <a name="t193.1"></a><h1 id="_type_X_ControlFlow.pod6-Methods">193.1 Methods</h1>
 <a name="t193.1.1"></a><h2 id="_type_X_ControlFlow.pod6-method_illegal">193.1.1 method illegal</h2>
 <pre class="code">method illegal returns Str:D</pre>
 <p>Returns the name of the control flow command that was called.</p>
 <a name="t193.1.2"></a><h2 id="_type_X_ControlFlow.pod6-method_enclosing">193.1.2 method enclosing</h2>
 <pre class="code">method enclosing returns Str:D</pre>
 <p>Returns the name of the missing enclosing construct.</p>
</div> <!-- /type/X/ControlFlow/Return.pod6 --><div class="pod-body"><a id="_type_X_ControlFlow_Return.pod6"></a><a name="t194"><h1 class="title">194 class X::ControlFlow::Return</h1></a> <p class="subtitle">Error due to calling return outside a routine</p> <pre class="code">class X::ControlFlow::Return is X::ControlFlow { }</pre>
 <p>Thrown when a <span class="code">return</span> is called from outside a routine.</p>
 <pre class="code">return</pre>
 <p>dies with</p>
 <pre class="code">Attempt to return outside of any Routine</pre>
</div> <!-- /type/X/DateTime/TimezoneClash.pod6 --><div class="pod-body"><a id="_type_X_DateTime_TimezoneClash.pod6"></a><a name="t195"><h1 class="title">195 class X::DateTime::TimezoneClash</h1></a> <p class="subtitle">Error due to using both timezone offset and :timezone</p> <pre class="code">class X::DateTime::TimezoneClash does X::Temporal is Exception { }</pre>
 <p>This exception is thrown when code tries to create a <span class="code">DateTime</span> object specifying both a timezone offset and the named argument <span class="code">:timezone</span>.</p>
 <pre class="code">say DateTime.new('2015-12-24T12:23:00+0200');                   # works
say DateTime.new('2015-12-24T12:23:00', timezone =&gt; 7200);      # works
say DateTime.new('2015-12-24T12:23:00+0200', timezone =&gt; 7200); # exception</pre>
 <a name="t195.1"></a><h1 id="_type_X_DateTime_TimezoneClash.pod6-Methods">195.1 Methods</h1>
 <a name="t195.1.1"></a><h2 id="_type_X_DateTime_TimezoneClash.pod6-message">195.1.1 message</h2>
 <p>Returns 'DateTime.new(Str): :timezone argument not allowed with a timestamp offset'</p>
</div> <!-- /type/X/Declaration/Scope.pod6 --><div class="pod-body"><a id="_type_X_Declaration_Scope.pod6"></a><a name="t196"><h1 class="title">196 class X::Declaration::Scope</h1></a> <p class="subtitle">Compilation error due to a declaration with an ineligible scope</p> <pre class="code">class X::Declaration::Scope does X::Comp { }</pre>
 <p>Compile time error thrown when a declaration does not harmonize with the declared scope.</p>
 <p>For example</p>
 <pre class="code">has sub f() { }</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Cannot use 'has' with sub declaration</pre>
 <a name="t196.1"></a><h1 id="_type_X_Declaration_Scope.pod6-Methods">196.1 Methods</h1>
 <a name="t196.1.1"></a><h2 id="_type_X_Declaration_Scope.pod6-method_scope">196.1.1 method scope</h2>
 <pre class="code">method scope() returns Str:D</pre>
 <p>Returns a string representation of the scope, usually the same keyword that is used for the declaration (<span class="code">"my"</span>, <span class="code">"our"</span>, <span class="code">"has"</span>, ...);</p>
 <a name="t196.1.2"></a><h2 id="_type_X_Declaration_Scope.pod6-method_declaration">196.1.2 method declaration</h2>
 <pre class="code">method declaration() returns Str:D</pre>
 <p>Describes the symbol that has been declared in a wrong scope.</p>
</div> <!-- /type/X/Declaration/Scope/Multi.pod6 --><div class="pod-body"><a id="_type_X_Declaration_Scope_Multi.pod6"></a><a name="t197"><h1 class="title">197 class X::Declaration::Scope::Multi</h1></a> <p class="subtitle">Compilation error due to declaring a multi with an ineligible scope</p> <pre class="code">class X::Declaration::Scope::Multi is X::Declaration::Scope { }</pre>
 <p>Thrown when a multi is declared with an incompatible scope.</p>
 <p>For example <span class="code">our multi sub foo() { }</span> dies with</p>
 <pre class="code">===SORRY!===
Cannot use 'our' with individual multi candidates. Please declare an our-scoped proto instead</pre>
</div> <!-- /type/X/Does/TypeObject.pod6 --><div class="pod-body"><a id="_type_X_Does_TypeObject.pod6"></a><a name="t198"><h1 class="title">198 class X::Does::TypeObject</h1></a> <p class="subtitle">Error due to mixing into a type object</p> <pre class="code">class X::Does::TypeObject is Exception { ... }</pre>
 <p>When you try to add one or more roles to a type object with <span class="code">does</span> after it has been composed, an error of type <span class="code">X::Does::TypeObject</span> is thrown:</p>
 <pre class="code">Mu does Numeric;    # Cannot use 'does' operator with a type object.</pre>
 <p>The correct way to apply roles to a type is at declaration time:</p>
 <pre class="code">class GrassmannNumber does Numeric { ... }
role AlgebraDebugger does IO { ... }
grammar IntegralParser does AlgebraParser { ... }</pre>
 <p>Roles may only be runtime-mixed into defined object instances:</p>
 <pre class="code">GrassmanNumber.new does AlgebraDebugger;</pre>
 <p>(This restriction may be worked around by using <a href="#_language_variables.pod6-The_augment_Declarator">augment or supersede</a>, or with dark Metamodel magics, but this will likely result in a significant performance penalty.)</p>
 <a name="t198.1"></a><h1 id="_type_X_Does_TypeObject.pod6-Methods">198.1 Methods</h1>
 <a name="t198.1.1"></a><h2 id="_type_X_Does_TypeObject.pod6-method_type">198.1.1 method type</h2>
 <pre class="code">method type(X::Codes::TypeObject:D:) returns Mu:U</pre>
 <p>Returns the type object into which the code tried to mix in a role.</p>
</div> <!-- /type/X/Eval/NoSuchLang.pod6 --><div class="pod-body"><a id="_type_X_Eval_NoSuchLang.pod6"></a><a name="t199"><h1 class="title">199 class X::Eval::NoSuchLang</h1></a> <p class="subtitle">Error due to specifying an unknown language for EVAL</p> <pre class="code">class X::Eval::NoSuchLang is Exception { }</pre>
 <p>Error thrown when <span class="code">EVAL($str, :$lang)</span> specifies a language that the compiler does not know how to handle.</p>
 <p>For example</p>
 <pre class="code">EVAL 'boo', lang =&gt; bar;</pre>
 <p>dies with</p>
 <pre class="code">No compiler available for language 'bar'</pre>
 <a name="t199.1"></a><h1 id="_type_X_Eval_NoSuchLang.pod6-Methods">199.1 Methods</h1>
 <a name="t199.1.1"></a><h2 id="_type_X_Eval_NoSuchLang.pod6-method_lang">199.1.1 method lang</h2>
 <pre class="code">method lang()</pre>
 <p>Returns the language that <a href="#_routine_EVAL.pod6">/routine/EVAL</a> did not know how to handle.</p>
</div> <!-- /type/X/Export/NameClash.pod6 --><div class="pod-body"><a id="_type_X_Export_NameClash.pod6"></a><a name="t200"><h1 class="title">200 class X::Export::NameClash</h1></a> <p class="subtitle">Compilation error due to exporting the same symbol twice</p> <pre class="code">class X::Export::NameClash does X::Comp { }</pre>
 <p>Compile time error thrown when a symbol is exported twice.</p>
 <p>For example</p>
 <pre class="code">sub f() is export { };
{
    sub f() is export { }
}</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
A symbol '&amp;amp;f' has already been exported</pre>
 <a name="t200.1"></a><h1 id="_type_X_Export_NameClash.pod6-Methods">200.1 Methods</h1>
 <a name="t200.1.1"></a><h2 id="_type_X_Export_NameClash.pod6-method_symbol">200.1.1 method symbol</h2>
 <p>Returns the symbol that is exported twice.</p>
</div> <!-- /type/X/IO.pod6 --><div class="pod-body"><a id="_type_X_IO.pod6"></a><a name="t201"><h1 class="title">201 role X::IO</h1></a> <p class="subtitle">IO related error</p> <pre class="code">role X::IO does X::OS {}</pre>
 <p>Common role for IO related errors.</p>
 <p>This role does not provide any additional methods.</p>
</div> <!-- /type/X/IO/Chdir.pod6 --><div class="pod-body"><a id="_type_X_IO_Chdir.pod6"></a><a name="t202"><h1 class="title">202 class X::IO::Chdir</h1></a> <p class="subtitle">Error while trying to change the working directory</p> <pre class="code">class X::IO::Chdir does X::IO is Exception { }</pre>
 <p>Error class when a <a href="#_routine_chdir.pod6">chdir</a> call failed.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to change the working directory to '/home/other': permission denied</pre>
 <a name="t202.1"></a><h1 id="_type_X_IO_Chdir.pod6-Methods">202.1 Methods</h1>
 <a name="t202.1.1"></a><h2 id="_type_X_IO_Chdir.pod6-method_path">202.1.1 method path</h2>
 <p>Returns the path that was passed to the failed <span class="code">chdir</span> call.</p>
</div> <!-- /type/X/IO/Chmod.pod6 --><div class="pod-body"><a id="_type_X_IO_Chmod.pod6"></a><a name="t203"><h1 class="title">203 class X::IO::Chmod</h1></a> <p class="subtitle">Error while trying to change file permissions</p> <pre class="code">class X::IO::Chmod does X::IO is Exception</pre>
 <p>Error class for failed <span class="code">chmod</span> calls.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to set the mode of '/home/other' to '0o777': Permission denied</pre>
</div> <!-- /type/X/IO/Copy.pod6 --><div class="pod-body"><a id="_type_X_IO_Copy.pod6"></a><a name="t204"><h1 class="title">204 class X::IO::Copy</h1></a> <p class="subtitle">Error while trying to copy a file</p> <pre class="code">class X::IO::Copy does X::IO is Exception { }</pre>
 <p>Error class for failed file copy operations. A typical error message is</p>
 <pre class="code">Failed to copy 'source' to 'destination': permission denied</pre>
 <a name="t204.1"></a><h1 id="_type_X_IO_Copy.pod6-Methods">204.1 Methods</h1>
 <a name="t204.1.1"></a><h2 id="_type_X_IO_Copy.pod6-method_from">204.1.1 method from</h2>
 <p>Returns the source of the failed copy operation</p>
 <a name="t204.1.2"></a><h2 id="_type_X_IO_Copy.pod6-method_to">204.1.2 method to</h2>
 <p>Returns the destination of the failed copy operation</p>
</div> <!-- /type/X/IO/Cwd.pod6 --><div class="pod-body"><a id="_type_X_IO_Cwd.pod6"></a><a name="t205"><h1 class="title">205 class X::IO::Cwd</h1></a> <p class="subtitle">Error while trying to determine the current working directory</p> <pre class="code">class X::IO::Cwd does X::IO is Exception { }</pre>
 <p>Error class when the runtime fails to determine the current directory.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to get the working directory: permission denied</pre>
</div> <!-- /type/X/IO/Dir.pod6 --><div class="pod-body"><a id="_type_X_IO_Dir.pod6"></a><a name="t206"><h1 class="title">206 class X::IO::Dir</h1></a> <p class="subtitle">Error while trying to get a directory's contents</p> <pre class="code">class X::IO::Dir does X::IO is Exception { }</pre>
 <p>Error class that is thrown when a <a href="#_routine_dir.pod6">/routine/dir</a> call fails.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to get the directory contents of '/tmp/': No such file or directory</pre>
 <a name="t206.1"></a><h1 id="_type_X_IO_Dir.pod6-Methods">206.1 Methods</h1>
 <a name="t206.1.1"></a><h2 id="_type_X_IO_Dir.pod6-method_path">206.1.1 method path</h2>
 <p>Returns the path that <a href="#_routine_dir.pod6">/routine/dir</a> failed to read.</p>
</div> <!-- /type/X/IO/DoesNotExist.pod6 --><div class="pod-body"><a id="_type_X_IO_DoesNotExist.pod6"></a><a name="t207"><h1 class="title">207 class X::IO::DoesNotExist</h1></a> <p class="subtitle">Error while doing file tests on a non existing path</p> <pre class="code">class X::IO::DoesNotExist does X::IO is Exception { }</pre>
 <p>Thrown when doing e.g. file test operations on a non existing path.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to find 'euler-5.p6' while trying to do '.f'</pre>
 <a name="t207.1"></a><h1 id="_type_X_IO_DoesNotExist.pod6-Methods">207.1 Methods</h1>
 <a name="t207.1.1"></a><h2 id="_type_X_IO_DoesNotExist.pod6-method_path">207.1.1 method path</h2>
 <p>Returns the path that was passed to the failed call.</p>
 <a name="t207.1.2"></a><h2 id="_type_X_IO_DoesNotExist.pod6-method_trying">207.1.2 method trying</h2>
 <p>Returns a string describing the failed operation.</p>
</div> <!-- /type/X/IO/Link.pod6 --><div class="pod-body"><a id="_type_X_IO_Link.pod6"></a><a name="t208"><h1 class="title">208 class X::IO::Link</h1></a> <p class="subtitle">Error while trying to create a link</p> <pre class="code">class X::IO::Link does X::IO is Exception</pre>
 <p>Error class for failed <a href="#_routine_link.pod6">/routine/link</a> operation.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to create link called 'my-link' on target 'does-not exist': Failed to link file</pre>
 <a name="t208.1"></a><h1 id="_type_X_IO_Link.pod6-Methods">208.1 Methods</h1>
 <a name="t208.1.1"></a><h2 id="_type_X_IO_Link.pod6-method_target">208.1.1 method target</h2>
 <p>Returns the name of the link target, i.e. the existing file.</p>
 <a name="t208.1.2"></a><h2 id="_type_X_IO_Link.pod6-method_name">208.1.2 method name</h2>
 <p>Returns the name of the link that could not be created.</p>
</div> <!-- /type/X/IO/Mkdir.pod6 --><div class="pod-body"><a id="_type_X_IO_Mkdir.pod6"></a><a name="t209"><h1 class="title">209 class X::IO::Mkdir</h1></a> <p class="subtitle">Error while trying to create a directory</p> <pre class="code">class X::IO::Mkdir does X::IO is Exception</pre>
 <p>Error class for failed <a href="#_routine_mkdir.pod6">mkdir</a> operations.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to create directory 'destination' with mode '0o755': File exists</pre>
 <a name="t209.1"></a><h1 id="_type_X_IO_Mkdir.pod6-Methods">209.1 Methods</h1>
 <a name="t209.1.1"></a><h2 id="_type_X_IO_Mkdir.pod6-method_path">209.1.1 method path</h2>
 <p>Returns the path that the <a href="#_routine_mkdir.pod6">mkdir</a> operation failed to create.</p>
 <a name="t209.1.2"></a><h2 id="_type_X_IO_Mkdir.pod6-method_mode">209.1.2 method mode</h2>
 <p>Returns the permissions mask of the failed <a href="#_routine_mkdir.pod6">mkdir</a> operation as an <a href="#_type_Int.pod6">Int</a>.</p>
</div> <!-- /type/X/IO/Move.pod6 --><div class="pod-body"><a id="_type_X_IO_Move.pod6"></a><a name="t210"><h1 class="title">210 class X::IO::Move</h1></a> <p class="subtitle">Error while trying to move a file</p> <pre class="code">class X::IO::Move does X::IO is Exception { }</pre>
 <p>Error class for a failed file move operation. A typical error message is</p>
 <pre class="code">Failed to move '/tmp/alpha.p6' to 'test.p6': :createonly specified and destination exists</pre>
 <a name="t210.1"></a><h1 id="_type_X_IO_Move.pod6-Methods">210.1 Methods</h1>
 <a name="t210.1.1"></a><h2 id="_type_X_IO_Move.pod6-method_from">210.1.1 method from</h2>
 <p>Returns the source of the failed <a href="#_routine_move.pod6">move</a> operation</p>
 <a name="t210.1.2"></a><h2 id="_type_X_IO_Move.pod6-method_to">210.1.2 method to</h2>
 <p>Returns the destination of the failed <a href="#_routine_move.pod6">move</a> operation</p>
</div> <!-- /type/X/IO/Rename.pod6 --><div class="pod-body"><a id="_type_X_IO_Rename.pod6"></a><a name="t211"><h1 class="title">211 class X::IO::Rename</h1></a> <p class="subtitle">Error while trying to rename a file or directory</p> <pre class="code">class X::IO::Rename does X::IO is Exception { }</pre>
 <p>Error class for failed file or directory rename operations. A typical error message is</p>
 <pre class="code">Failed to rename 'source' to 'destination': is a directory</pre>
 <a name="t211.1"></a><h1 id="_type_X_IO_Rename.pod6-Methods">211.1 Methods</h1>
 <a name="t211.1.1"></a><h2 id="_type_X_IO_Rename.pod6-method_from">211.1.1 method from</h2>
 <p>Returns the source of the failed rename operation</p>
 <a name="t211.1.2"></a><h2 id="_type_X_IO_Rename.pod6-method_to">211.1.2 method to</h2>
 <p>Returns the destination of the failed rename operation</p>
</div> <!-- /type/X/IO/Rmdir.pod6 --><div class="pod-body"><a id="_type_X_IO_Rmdir.pod6"></a><a name="t212"><h1 class="title">212 class X::IO::Rmdir</h1></a> <p class="subtitle">Error while trying to remove a directory</p> <pre class="code">my class X::IO::Rmdir does X::IO is Exception</pre>
 <p>Error class for failed <a href="#_routine_rmdir.pod6">/routine/rmdir</a> operations.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to remove the directory 'lib': Directory not empty</pre>
 <a name="t212.1"></a><h1 id="_type_X_IO_Rmdir.pod6-Methods">212.1 Methods</h1>
 <a name="t212.1.1"></a><h2 id="_type_X_IO_Rmdir.pod6-method_path">212.1.1 method path</h2>
 <p>Returns the path <a href="#_routine_rmdir.pod6">/routine/rmdir</a> failed to remove</p>
</div> <!-- /type/X/IO/Symlink.pod6 --><div class="pod-body"><a id="_type_X_IO_Symlink.pod6"></a><a name="t213"><h1 class="title">213 class X::IO::Symlink</h1></a> <p class="subtitle">Error while trying to create a symbolic link</p> <pre class="code">class X::IO::Symlink does X::IO is Exception</pre>
 <p>Error class for failed <a href="#_routine_symlink.pod6">symlink</a> creation.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to create symlink called 'euler' on target '/home/myhome/euler-1.pl6': Failed to symlink file: file already exist</pre>
 <a name="t213.1"></a><h1 id="_type_X_IO_Symlink.pod6-Methods">213.1 Methods</h1>
 <a name="t213.1.1"></a><h2 id="_type_X_IO_Symlink.pod6-method_name">213.1.1 method name</h2>
 <p>Returns the path that <a href="#_routine_symlink.pod6">symlink</a> failed to create.</p>
 <a name="t213.1.2"></a><h2 id="_type_X_IO_Symlink.pod6-method_target">213.1.2 method target</h2>
 <p>Returns the path that <a href="#_routine_symlink.pod6">symlink</a> failed to create a link to.</p>
</div> <!-- /type/X/IO/Unlink.pod6 --><div class="pod-body"><a id="_type_X_IO_Unlink.pod6"></a><a name="t214"><h1 class="title">214 class X::IO::Unlink</h1></a> <p class="subtitle">Error while trying to remove a file</p> <pre class="code">class X::IO::Unlink does X::IO is Exception</pre>
 <p>Error class for failed <a href="#_routine_unlink.pod6">/routine/unlink</a> operation.</p>
 <p>A typical error message is</p>
 <pre class="code">Failed to remove the file 'secret': Permission defined</pre>
 <a name="t214.1"></a><h1 id="_type_X_IO_Unlink.pod6-Methods">214.1 Methods</h1>
 <a name="t214.1.1"></a><h2 id="_type_X_IO_Unlink.pod6-method_path">214.1.1 method path</h2>
 <p>Returns the path that <a href="#_routine_unlink.pod6">/routine/unlink</a> failed to delete.</p>
</div> <!-- /type/X/Inheritance/NotComposed.pod6 --><div class="pod-body"><a id="_type_X_Inheritance_NotComposed.pod6"></a><a name="t215"><h1 class="title">215 class X::Inheritance::NotComposed</h1></a> <p class="subtitle">Error due to inheriting from a type that's not composed yet</p> <pre class="code">class X::Inheritance::NotComposed is Exception { ... }</pre>
 <p>When you try to inherit from a class that hasn't been <a href="#_language_mop.pod6-Composition time and static reasoning">composed</a>, an exception of type X::Inheritance::NotComposed is thrown.</p>
 <p>Usually this happens because it's not yet fully parsed, or that is stubbed:</p>
 <pre class="code">class A { ... };    # literal ... for stubbing 
 class B is A { };   # dies with 
                     # 'B' cannot inherit from 'A' because 'A' 
                     # isn't compose yet (maybe it is stubbed) 
</pre>
 <p>The second common way to trigger this error is by trying to inherit from a class from within the class body.</p>
 <pre class="code">class Outer { 
     class Inner is Outer {  # dies with 
     }                       # 'Inner' cannot inherit from 'Outer' because 
 }                           # 'Outer' isn't compose yet (maybe it is 
                             # stubbed) 
</pre>
 <a name="t215.1"></a><h1 id="_type_X_Inheritance_NotComposed.pod6-Methods">215.1 Methods</h1>
 <a name="t215.1.1"></a><h2 id="_type_X_Inheritance_NotComposed.pod6-method_child-name">215.1.1 method child-name</h2>
 <pre class="code">method child-name(X::Inheritance::NotComposed:D:) returns Str:D</pre>
 <p>Returns the name of the type that tries to inherit.</p>
 <a name="t215.1.2"></a><h2 id="_type_X_Inheritance_NotComposed.pod6-method_parent-name">215.1.2 method parent-name</h2>
 <pre class="code">method parent-name(X::Inheritance::NotComposed:D:) returns Str:D</pre>
 <p>Returns the name of the parent type that the type tries to inherit from</p>
</div> <!-- /type/X/Inheritance/Unsupported.pod6 --><div class="pod-body"><a id="_type_X_Inheritance_Unsupported.pod6"></a><a name="t216"><h1 class="title">216 class X::Inheritance::Unsupported</h1></a> <p class="subtitle">Compilation error due to inheriting from an ineligible type</p> <pre class="code">class X::Inheritance::Unsupported does X::Comp { }</pre>
 <p>Compile time error thrown when trying to inherit from a type that does not support inheritance (like a package or an enum).</p>
 <p>For example</p>
 <pre class="code">enum A &amp;lt;Ax Ay&gt;;
class B is A { };</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
A does not support inheritance, so B cannot inherit from it</pre>
 <a name="t216.1"></a><h1 id="_type_X_Inheritance_Unsupported.pod6-Methods">216.1 Methods</h1>
 <a name="t216.1.1"></a><h2 id="_type_X_Inheritance_Unsupported.pod6-method_child-typename">216.1.1 method child-typename</h2>
 <p>The name of the type that tries to inherit.</p>
 <a name="t216.1.2"></a><h2 id="_type_X_Inheritance_Unsupported.pod6-method_parent">216.1.2 method parent</h2>
 <p>The type object that the child tried to inherit from.</p>
</div> <!-- /type/X/Method/InvalidQualifier.pod6 --><div class="pod-body"><a id="_type_X_Method_InvalidQualifier.pod6"></a><a name="t217"><h1 class="title">217 class X::Method::InvalidQualifier</h1></a> <p class="subtitle">Error due to calling a qualified method from an ineligible class</p> <pre class="code">class X::Method::InvalidQualifier is Exception { }</pre>
 <p>Thrown when a method is call in the form <span class="code">$invocant.TheClass::method</span> if &lt;$invocant> does not conform to <span class="code">TheClass</span>.</p>
 <p>For example</p>
 <pre class="code">1.Str::split(/a/)</pre>
 <p>dies with</p>
 <pre class="code">dispatch to method split on Str because it is not inherited or done by Int</pre>
 <a name="t217.1"></a><h1 id="_type_X_Method_InvalidQualifier.pod6-Methods">217.1 Methods</h1>
 <a name="t217.1.1"></a><h2 id="_type_X_Method_InvalidQualifier.pod6-method_method">217.1.1 method method</h2>
 <pre class="code">method method() returns Str:D</pre>
 <p>Returns the name of the (unqualified) method.</p>
 <a name="t217.1.2"></a><h2 id="_type_X_Method_InvalidQualifier.pod6-method_invocant">217.1.2 method invocant</h2>
 <p>Returns the invocant of the failed, qualified method call</p>
 <a name="t217.1.3"></a><h2 id="_type_X_Method_InvalidQualifier.pod6-method_qualifier-type">217.1.3 method qualifier-type</h2>
 <p>Returns the type by which the method call was qualified.</p>
</div> <!-- /type/X/Method/NotFound.pod6 --><div class="pod-body"><a id="_type_X_Method_NotFound.pod6"></a><a name="t218"><h1 class="title">218 X::Method::NotFound</h1></a> <p class="subtitle">Error due to calling a method that isn't there</p> <pre class="code">class X::Method::NotFound is Exception</pre>
 <p>Thrown when the user tries to call a method that isn't there.</p>
 <p>For example <span class="code">1.nosuch</span> dies with</p>
 <pre class="code">No such method 'nosuch' for invocant of type 'Int'</pre>
 <a name="t218.1"></a><h1 id="_type_X_Method_NotFound.pod6-Methods">218.1 Methods</h1>
 <a name="t218.1.1"></a><h2 id="_type_X_Method_NotFound.pod6-method_method">218.1.1 method method</h2>
 <pre class="code">method method() returns Str:D</pre>
 <p>Returns the method name that was invoked.</p>
 <a name="t218.1.2"></a><h2 id="_type_X_Method_NotFound.pod6-method_typename">218.1.2 method typename</h2>
 <pre class="code">method typename returns Str:D</pre>
 <p>Returns the name of the invocant type.</p>
 <a name="t218.1.3"></a><h2 id="_type_X_Method_NotFound.pod6-method_private">218.1.3 method private</h2>
 <pre class="code">method private returns Bool:D</pre>
 <p>Returns <span class="code">True</span> for private methods, and <span class="code">False</span> for public methods.</p>
</div> <!-- /type/X/Method/Private/Permission.pod6 --><div class="pod-body"><a id="_type_X_Method_Private_Permission.pod6"></a><a name="t219"><h1 class="title">219 class X::Method::Private::Permission</h1></a> <p class="subtitle">Compilation error due to calling a private method without permission</p> <pre class="code">class X::Method::Private::Permission does X::Comp { }</pre>
 <p>Compile time error thrown when the code contains a call to a private method that isn't defined in the current class, and when no appropriate trusts relation is defined that permits the private method call.</p>
 <p>For example the code</p>
 <pre class="code">1!Int::foo</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Cannot call private method 'foo' on package Int because it does not trust GLOBAL</pre>
 <a name="t219.1"></a><h1 id="_type_X_Method_Private_Permission.pod6-Methods">219.1 Methods</h1>
 <a name="t219.1.1"></a><h2 id="_type_X_Method_Private_Permission.pod6-method_method">219.1.1 method method</h2>
 <pre class="code">method method() returns Str:D</pre>
 <p>The name of the private method</p>
 <a name="t219.1.2"></a><h2 id="_type_X_Method_Private_Permission.pod6-method_source-package">219.1.2 method source-package</h2>
 <pre class="code">method source-package() returns Mu:D</pre>
 <p>Returns the type object that (supposedly) contains the private method.</p>
 <a name="t219.1.3"></a><h2 id="_type_X_Method_Private_Permission.pod6-method_calling-package">219.1.3 method calling-package</h2>
 <pre class="code">method calling-package() returns Mu:D</pre>
 <p>Returns the package in which the calling code is, and which the source package does not trust.</p>
</div> <!-- /type/X/Method/Private/Unqualified.pod6 --><div class="pod-body"><a id="_type_X_Method_Private_Unqualified.pod6"></a><a name="t220"><h1 class="title">220 class X::Method::Private::Unqualified</h1></a> <p class="subtitle">Compilation error due to an unqualified private method call</p> <pre class="code">class X::Method::Private::Unqualified does X::Comp { }</pre>
 <p>Compile time error thrown when a private method call on anything but <span class="code">self</span> is not fully qualified.</p>
 <p>For example</p>
 <pre class="code">1!priv</pre>
 <p>dies with</p>
 <pre class="code">Private method call to priv must be fully qualified with the package containing the method</pre>
 <a name="t220.1"></a><h1 id="_type_X_Method_Private_Unqualified.pod6-Methods">220.1 Methods</h1>
 <a name="t220.1.1"></a><h2 id="_type_X_Method_Private_Unqualified.pod6-method_method">220.1.1 method method</h2>
 <pre class="code">method method() returns Str:D</pre>
 <p>Returns the name of the private method that triggered the error.</p>
</div> <!-- /type/X/Mixin/NotComposable.pod6 --><div class="pod-body"><a id="_type_X_Mixin_NotComposable.pod6"></a><a name="t221"><h1 class="title">221 class X::Mixin::NotComposable</h1></a> <p class="subtitle">Error due to using an ineligible type as a mixin</p> <pre class="code">class X::Mixin::NotComposable is Exception { }</pre>
 <p>Thrown when a mixin with infix <span class="code">does</span> or <span class="code">but</span> is done with a composer that cannot be used for mixin.</p>
 <p>For example</p>
 <pre class="code">class A { }
1 but A</pre>
 <p>dies with</p>
 <pre class="code">Cannot mix in non-composable type A into object of type Int</pre>
 <p>The compile-time equivalent of this error is <a href="#_type_X::CompositionNotComposable.pod6">X::CompositionNotComposable</a></p>
 <a name="t221.1"></a><h1 id="_type_X_Mixin_NotComposable.pod6-Methods">221.1 Methods</h1>
 <a name="t221.1.1"></a><h2 id="_type_X_Mixin_NotComposable.pod6-method_target">221.1.1 method target</h2>
 <pre class="code">method target()</pre>
 <p>Returns the target of the failed mixin operation.</p>
 <a name="t221.1.2"></a><h2 id="_type_X_Mixin_NotComposable.pod6-method_rolish">221.1.2 method rolish</h2>
 <pre class="code">method rolish()</pre>
 <p>Returns the thing that could not act as a role for mixing it in</p>
</div> <!-- /type/X/NYI.pod6 --><div class="pod-body"><a id="_type_X_NYI.pod6"></a><a name="t222"><h1 class="title">222 class X::NYI</h1></a> <p class="subtitle">Error due to use of an unimplemented feature</p> <pre class="code">class X::NYI is Exception { }</pre>
 <p>Error class for unimplemented features. <i>NYI</i> stands for <i>Not Yet Implemented</i>.</p>
 <p>If a Perl 6 compiler is not yet feature complete, it may throw an <span class="code">X::NYI</span> exception when a program uses a feature that it can detect is not yet implemented.</p>
 <p>A full-featured Perl 6 compiler must not throw such exceptions, but still provide the <span class="code">X::NYI</span> class for compatibility reasons.</p>
 <p>A typical error message is</p>
 <pre class="code">HyperWhatever is not yet implemented. Sorry.</pre>
 <a name="t222.1"></a><h1 id="_type_X_NYI.pod6-Methods">222.1 Methods</h1>
 <a name="t222.1.1"></a><h2 id="_type_X_NYI.pod6-method_features">222.1.1 method features</h2>
 <p>Returns a <span class="code">Str</span> describing the missing feature.</p>
</div> <!-- /type/X/NoDispatcher.pod6 --><div class="pod-body"><a id="_type_X_NoDispatcher.pod6"></a><a name="t223"><h1 class="title">223 class X::NoDispatcher</h1></a> <p class="subtitle">Error due to calling a dispatch command in an ineligible scope</p> <pre class="code">class X::NoDispatcher is Exception { }</pre>
 <p>When a redispatcher like <span class="code">nextsame</span> is called without being in the dynamic scope of a call where a redispatch is possible, an X::NoDispatcher is thrown.</p>
 <p>For example</p>
 <pre class="code">nextsame</pre>
 <p>in the mainline dies with</p>
 <pre class="code">nextsame is not in the dynamic scope of a dispatcher</pre>
 <a name="t223.1"></a><h1 id="_type_X_NoDispatcher.pod6-Methods">223.1 Methods</h1>
 <a name="t223.1.1"></a><h2 id="_type_X_NoDispatcher.pod6-method_redispatcher">223.1.1 method redispatcher</h2>
 <pre class="code">method redispatcher() returns Str:D</pre>
 <p>Returns the name of the redispatcher function that did not succeed.</p>
</div> <!-- /type/X/Numeric/Real.pod6 --><div class="pod-body"><a id="_type_X_Numeric_Real.pod6"></a><a name="t224"><h1 class="title">224 class X::Numeric::Real</h1></a> <p class="subtitle">Error while trying to coerce a number to a Real type</p> <pre class="code">class X::Numeric::Real is Exception { }</pre>
 <p>Occurs when an attempt to coerce a <span class="code">Numeric</span> to a <span class="code">Real</span>, <span class="code">Num</span>, <span class="code">Int</span> or <span class="code">Rat</span> fails (due to a number with a nonzero imaginary part, for instance).</p>
 <p>For example</p>
 <pre class="code">say (1+2i).Int</pre>
 <p>fails with</p>
 <pre class="code">Can not convert 1+2i to Int: imaginary part not zero</pre>
 <a name="t224.1"></a><h1 id="_type_X_Numeric_Real.pod6-Methods">224.1 Methods</h1>
 <a name="t224.1.1"></a><h2 id="_type_X_Numeric_Real.pod6-method_source">224.1.1 method source</h2>
 <pre class="code">method source() returns Numeric:D</pre>
 <p>Returns the number that failed to coerce to <a href="#_type_Real.pod6">Real</a>.</p>
 <a name="t224.1.2"></a><h2 id="_type_X_Numeric_Real.pod6-method_target">224.1.2 method target</h2>
 <pre class="code">method target()</pre>
 <p>Returns the type to which the coercion was attempted.</p>
 <a name="t224.1.3"></a><h2 id="_type_X_Numeric_Real.pod6-method_reason">224.1.3 method reason</h2>
 <pre class="code">method reason() returns Str:D</pre>
 <p>Returns the reason that the conversion failed.</p>
</div> <!-- /type/X/OS.pod6 --><div class="pod-body"><a id="_type_X_OS.pod6"></a><a name="t225"><h1 class="title">225 role X::OS</h1></a> <p class="subtitle">Error reported by the operating system</p> <pre class="code">role X::OS { has $.os-error }</pre>
 <p>Common role for all exceptions that are triggered by some error reported by the operating system (failed IO, system calls, fork, memory allocation).</p>
 <a name="t225.1"></a><h1 id="_type_X_OS.pod6-Methods">225.1 Methods</h1>
 <a name="t225.1.1"></a><h2 id="_type_X_OS.pod6-method_os-error">225.1.1 method os-error</h2>
 <pre class="code">method os-error() returns Str:D</pre>
 <p>Returns the error as reported by the operating system.</p>
</div> <!-- /type/X/Obsolete.pod6 --><div class="pod-body"><a id="_type_X_Obsolete.pod6"></a><a name="t226"><h1 class="title">226 class X::Obsolete</h1></a> <p class="subtitle">Compilation error due to use of obsolete syntax</p> <pre class="code">class X::Obsolete does X::Comp { }</pre>
 <p>Syntax error thrown when obsolete (mostly Perl 5) syntax is detected.</p>
 <p>For example</p>
 <pre class="code">m/abc/i</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Unsupported use of /i; in Perl 6 please use :i</pre>
 <a name="t226.1"></a><h1 id="_type_X_Obsolete.pod6-Methods">226.1 Methods</h1>
 <a name="t226.1.1"></a><h2 id="_type_X_Obsolete.pod6-method_old">226.1.1 method old</h2>
 <pre class="code">method old() returns Str:D</pre>
 <p>Returns a textual description of the obsolete syntax construct</p>
 <a name="t226.1.2"></a><h2 id="_type_X_Obsolete.pod6-method_replacement">226.1.2 method replacement</h2>
 <pre class="code">method replacement() returns Str:D</pre>
 <p>Describes what to use instead of the obsolete syntax.</p>
 <a name="t226.1.3"></a><h2 id="_type_X_Obsolete.pod6-method_when">226.1.3 method when</h2>
 <pre class="code">method when() returns Str:D</pre>
 <p>Returns a string describing the state of the language (usually <span class="code">" in Perl 6"</span>).</p>
</div> <!-- /type/X/OutOfRange.pod6 --><div class="pod-body"><a id="_type_X_OutOfRange.pod6"></a><a name="t227"><h1 class="title">227 class X::OutOfRange</h1></a> <p class="subtitle">Error due to indexing outside of an allowed range</p> <pre class="code">class X::OutOfRange is Exception { }</pre>
 <p>General error when something (for example an array index) is out of an allowed range.</p>
 <p>For example</p>
 <pre class="code">say 42[2]</pre>
 <p>dies with</p>
 <pre class="code">Index out of range. Is: 2, should be in 0..0</pre>
 <p>since scalars generally act as a one-element list.</p>
 <a name="t227.1"></a><h1 id="_type_X_OutOfRange.pod6-Methods">227.1 Methods</h1>
 <a name="t227.1.1"></a><h2 id="_type_X_OutOfRange.pod6-method_what">227.1.1 method what</h2>
 <pre class="code">method what() returns Str:D</pre>
 <p>Verbal description of the thing that was out of range (e.g. <span class="code">"array index"</span>, <span class="code">"month"</span>).</p>
 <a name="t227.1.2"></a><h2 id="_type_X_OutOfRange.pod6-method_got">227.1.2 method got</h2>
 <pre class="code">method got()</pre>
 <p>Returns the object that was considered out of range (often an integer)</p>
 <a name="t227.1.3"></a><h2 id="_type_X_OutOfRange.pod6-method_range">227.1.3 method range</h2>
 <pre class="code">method range returns Range:D</pre>
 <p>Returns a <a href="#_type_Range.pod6">Range</a> object describing the permissible range for the object returned from <span class="code">.got</span>.</p>
 <a name="t227.1.4"></a><h2 id="_type_X_OutOfRange.pod6-method_comment">227.1.4 method comment</h2>
 <pre class="code">method comment returns Str</pre>
 <p>Returns an additional comment that is included in the error message.</p>
</div> <!-- /type/X/Package/Stubbed.pod6 --><div class="pod-body"><a id="_type_X_Package_Stubbed.pod6"></a><a name="t228"><h1 class="title">228 class X::Package::Stubbed</h1></a> <p class="subtitle">Compilation error due to a stubbed package that is never defined</p> <pre class="code">class X::Package::Stubbed does X::Comp { }</pre>
 <p>Thrown at <span class="code">CHECK</span> time when there are packages stubbed but not later defined.</p>
 <p>For example</p>
 <pre class="code">class A { ... }     # literal ...
class B { ... }     # literal ...</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
The following packages were stubbed but not defined:
    A
    B</pre>
 <a name="t228.1"></a><h1 id="_type_X_Package_Stubbed.pod6-Methods">228.1 Methods</h1>
 <a name="t228.1.1"></a><h2 id="_type_X_Package_Stubbed.pod6-method_packages">228.1.1 method packages</h2>
 <pre class="code">method packages() returns Positional:D</pre>
 <p>Returns a list of packages that were stubbed but not defined.</p>
</div> <!-- /type/X/Parameter/Default.pod6 --><div class="pod-body"><a id="_type_X_Parameter_Default.pod6"></a><a name="t229"><h1 class="title">229 class X::Parameter::Default</h1></a> <p class="subtitle">Compilation error due to an unallowed default value in a signature</p> <pre class="code">class X::Parameter::Default does X::Comp { }</pre>
 <p>Compile-time error thrown when a parameter in a signature has default value, but isn't allowed to have one. That is the case with slurpy parameters (because a slurpy always binds successfully, even to zero arguments) and with mandatory parameters.</p>
 <p>Example:</p>
 <pre class="code">sub f($x! = 3) { }</pre>
 <p>Produces</p>
 <pre class="code">===SORRY!===
Cannot put default on required parameter $x</pre>
 <p>And</p>
 <pre class="code">sub f(*@ = 3) { }</pre>
 <p>produces</p>
 <pre class="code">Cannot put default on anonymous slurpy parameter</pre>
 <a name="t229.1"></a><h1 id="_type_X_Parameter_Default.pod6-Methods">229.1 Methods</h1>
 <a name="t229.1.1"></a><h2 id="_type_X_Parameter_Default.pod6-method_how">229.1.1 method how</h2>
 <p>Returns a string describing how the parameter is qualified that makes it disallow default values, for example <span class="code">"slurpy"</span> or <span class="code">"mandatory"</span>.</p>
 <a name="t229.1.2"></a><h2 id="_type_X_Parameter_Default.pod6-method_parameter">229.1.2 method parameter</h2>
 <p>Returns the parameter name</p>
</div> <!-- /type/X/Parameter/MultipleTypeConstraints.pod6 --><div class="pod-body"><a id="_type_X_Parameter_MultipleTypeConstraints.pod6"></a><a name="t230"><h1 class="title">230 X::Parameter::MultipleTypeConstraints</h1></a> <p class="subtitle">Compilation error due to a parameter with multiple type constraints</p> <pre class="code">class X::Parameter::MultipleTypeConstraints does X::Comp { }</pre>
 <p>Compile time error thrown when a parameter has multiple type constraints. This is not allowed in Perl 6.0.</p>
 <p>Example:</p>
 <pre class="code">sub f(Cool Real $x) { }</pre>
 <p>produces</p>
 <pre class="code">Parameter $x may onle have one prefix type constraint</pre>
 <a name="t230.1"></a><h1 id="_type_X_Parameter_MultipleTypeConstraints.pod6-Methods">230.1 Methods</h1>
 <a name="t230.1.1"></a><h2 id="_type_X_Parameter_MultipleTypeConstraints.pod6-method_parameter">230.1.1 method parameter</h2>
 <p>Returns the name of the offensive parameter.</p>
</div> <!-- /type/X/Parameter/Placeholder.pod6 --><div class="pod-body"><a id="_type_X_Parameter_Placeholder.pod6"></a><a name="t231"><h1 class="title">231 class X::Parameter::Placeholder</h1></a> <p class="subtitle">Compilation error due to an unallowed placeholder in a signature</p> <pre class="code">class X::Parameter::Placeholder does X::Comp</pre>
 <p>Thrown when a placeholder parameter is used inside a signature where a normal parameter is expected. The reason is often that a named parameter <span class="code">:$param</span> was misspelled as <span class="code">$:param</span>.</p>
 <p>For example</p>
 <pre class="code">sub f($:param) { }</pre>
 <p>produces</p>
 <pre class="code">===SORRY!===
In signature parameter, placeholder variables like $:param are illegal
you probably meant a named parameter: ':$param'</pre>
 <a name="t231.1"></a><h1 id="_type_X_Parameter_Placeholder.pod6-Methods">231.1 Methods</h1>
 <a name="t231.1.1"></a><h2 id="_type_X_Parameter_Placeholder.pod6-method_parameter">231.1.1 method parameter</h2>
 <p>The text of the offensive parameter declaration (<span class="code">$:param</span> in the example above).</p>
 <a name="t231.1.2"></a><h2 id="_type_X_Parameter_Placeholder.pod6-method_right">231.1.2 method right</h2>
 <p>Suggestion on how to write the parameter declaration instead (<span class="code">:$param</span> in the example above).</p>
</div> <!-- /type/X/Parameter/Twigil.pod6 --><div class="pod-body"><a id="_type_X_Parameter_Twigil.pod6"></a><a name="t232"><h1 class="title">232 class X::Parameter::Twigil</h1></a> <p class="subtitle">Compilation error due to an unallowed twigil in a signature</p> <pre class="code">class X::Parameter::Twigil does X::Comp</pre>
 <p>Thrown when a parameter in a signature has a twigil that it may not have. Only <span class="code">!</span>, <span class="code">.</span> and <span class="code">*</span> as twigils are allowed.</p>
 <p>Example:</p>
 <pre class="code">sub f($=foo) { }</pre>
 <p>produces</p>
 <pre class="code">===SORRY!===
In signature parameter $=foo, it is illegal to use the = twigil</pre>
 <a name="t232.1"></a><h1 id="_type_X_Parameter_Twigil.pod6-Methods">232.1 Methods</h1>
 <a name="t232.1.1"></a><h2 id="_type_X_Parameter_Twigil.pod6-method_parameter">232.1.1 method parameter</h2>
 <p>The name of the offensive parameter (<span class="code">$=foo</span> in the example above)</p>
 <a name="t232.1.2"></a><h2 id="_type_X_Parameter_Twigil.pod6-method_twigil">232.1.2 method twigil</h2>
 <p>The illegally used twigil.</p>
</div> <!-- /type/X/Parameter/WrongOrder.pod6 --><div class="pod-body"><a id="_type_X_Parameter_WrongOrder.pod6"></a><a name="t233"><h1 class="title">233 X::Parameter::WrongOrder</h1></a> <p class="subtitle">Compilation error due to passing parameters in the wrong order</p> <pre class="code">class X::Parameter::WrongOrder does X::Comp</pre>
 <p>Compile time error that is thrown when parameters in a signature in the wrong order (for example if an optional parameter comes before a mandatory parameter).</p>
 <p>For example</p>
 <pre class="code">sub f($a?, $b) { }</pre>
 <p>produces</p>
 <pre class="code">Cannot put required parameter $b after optional parameters</pre>
 <a name="t233.1"></a><h1 id="_type_X_Parameter_WrongOrder.pod6-Methods">233.1 Methods</h1>
 <a name="t233.1.1"></a><h2 id="_type_X_Parameter_WrongOrder.pod6-method_misplaced">233.1.1 method misplaced</h2>
 <p>Returns the kind of misplaced parameter (for example <span class="code">"mandatory"</span>, <span class="code">"positional"</span>).</p>
 <a name="t233.1.2"></a><h2 id="_type_X_Parameter_WrongOrder.pod6-method_parameter">233.1.2 method parameter</h2>
 <p>Returns the name of the (first) misplaced parameter</p>
 <a name="t233.1.3"></a><h2 id="_type_X_Parameter_WrongOrder.pod6-method_after">233.1.3 method after</h2>
 <p>Returns a string describing other parameters after which the current parameter was illegally placed (for example <span class="code">"variadic"</span>, <span class="code">"positional"</span> or <span class="code">"optional"</span>).</p>
</div> <!-- /type/X/Phaser/Multiple.pod6 --><div class="pod-body"><a id="_type_X_Phaser_Multiple.pod6"></a><a name="t234"><h1 class="title">234 class X::Phaser::Multiple</h1></a> <p class="subtitle">Compilation error due to multiple phasers of the same type</p> <pre class="code">class X::Phaser::Multiple does X::Comp</pre>
 <p>Thrown when multiple phasers of the same type occur in a block, but only one is allowed (for example <span class="code">CATCH</span> or <span class="code">CONTROL</span>).</p>
 <p>Example</p>
 <pre class="code">CATCH { }; CATCH { }</pre>
 <p>Produces</p>
 <pre class="code">===SORRY!===
Only one CATCH block is allowed</pre>
 <a name="t234.1"></a><h1 id="_type_X_Phaser_Multiple.pod6-Methods">234.1 Methods</h1>
 <a name="t234.1.1"></a><h2 id="_type_X_Phaser_Multiple.pod6-method_block">234.1.1 method block</h2>
 <p>Returns the name of the phaser that occurred more than once.</p>
</div> <!-- /type/X/Phaser/PrePost.pod6 --><div class="pod-body"><a id="_type_X_Phaser_PrePost.pod6"></a><a name="t235"><h1 class="title">235 class X::Phaser::PrePost</h1></a> <p class="subtitle">Error due to a false return value of a PRE/POST phaser</p> <pre class="code">class X::Phaser::PrePost is Exception { }</pre>
 <p>Thrown when the condition inside a <span class="code">PRE</span> or <span class="code">POST</span> phaser evaluate to a false value.</p>
 <p>For example</p>
 <pre class="code">sub f($x) { PRE { $x ~~ Int } }
f "foo";</pre>
 <p>Dies with</p>
 <pre class="code">Precondition '{ $x ~~ Int }' failed</pre>
 <a name="t235.1"></a><h1 id="_type_X_Phaser_PrePost.pod6-Methods">235.1 Methods</h1>
 <a name="t235.1.1"></a><h2 id="_type_X_Phaser_PrePost.pod6-method_phaser">235.1.1 method phaser</h2>
 <pre class="code">method phaser() returns Str:D</pre>
 <p>Returns the name of the failed phaser, <span class="code">"PRE"</span> or <span class="code">"POST"</span>.</p>
 <a name="t235.1.2"></a><h2 id="_type_X_Phaser_PrePost.pod6-method_condition">235.1.2 method condition</h2>
 <pre class="code">method condition() returns Str:D</pre>
 <p>Returns the part of the source code that describes the phaser condition.</p>
</div> <!-- /type/X/Placeholder/Block.pod6 --><div class="pod-body"><a id="_type_X_Placeholder_Block.pod6"></a><a name="t236"><h1 class="title">236 class X::Placeholder::Block</h1></a> <p class="subtitle">Compilation error due to a placeholder in an ineligible block</p> <pre class="code">class X::Placeholder::Block does X::Comp</pre>
 <p>Thrown when a placeholder variable is used in a block that does not allow a signature (for example <span class="code">class A { $^foo }</span>.</p>
 <p>A typical error message is</p>
 <pre class="code">Placeholder variable $^foo may not be used here because the surrounding block takes no signature</pre>
 <a name="t236.1"></a><h1 id="_type_X_Placeholder_Block.pod6-Methods">236.1 Methods</h1>
 <a name="t236.1.1"></a><h2 id="_type_X_Placeholder_Block.pod6-method_placeholder">236.1.1 method placeholder</h2>
 <p>Returns the name of the (first) illegally used placeholder.</p>
</div> <!-- /type/X/Placeholder/Mainline.pod6 --><div class="pod-body"><a id="_type_X_Placeholder_Mainline.pod6"></a><a name="t237"><h1 class="title">237 X::Placeholder::Mainline</h1></a> <p class="subtitle">Compilation error due to a placeholder in the mainline</p> <pre class="code">class X::Placeholder::Mainline is X::Placeholder::Block</pre>
 <p>Thrown when a placeholder variable is used in the mainline, i.e. outside of any explicit block.</p>
 <p>Example:</p>
 <pre class="code">$^x</pre>
 <p>Produces the error message</p>
 <pre class="code">Cannot use placeholder parameter $^x in the mainline</pre>
 <p>Note that this error can also occur when you think something is a block, but it really is a <a href="#_routine_{ }.pod6">postcircumfix:&lt;{ }></a>, for example</p>
 <pre class="code">my %h;
say %h{ $^x };
#     ^^^^^^^  not a block, so $^x is part of the mainline</pre>
</div> <!-- /type/X/Pod.pod6 --><div class="pod-body"><a id="_type_X_Pod.pod6"></a><a name="t238"><h1 class="title">238 role X::Pod</h1></a> <p class="subtitle">Pod related error</p> <pre class="code">role X::Pod { }</pre>
 <p>Common role for Pod related errors.</p>
</div> <!-- /type/X/Proc/Async.pod6 --><div class="pod-body"><a id="_type_X_Proc_Async.pod6"></a><a name="t239"><h1 class="title">239 role X::Proc::Async</h1></a> <p class="subtitle">Exception thrown by </p> <pre class="code">role X::Proc::Async is Exception { ... }</pre>
 <p>All exceptions thrown by <a href="#_type_Proc::Async.pod6">Proc::Async</a> do this common role.</p>
 <a name="t239.1"></a><h1 id="_type_X_Proc_Async.pod6-Methods">239.1 Methods</h1>
 <a name="t239.1.1"></a><h2 id="_type_X_Proc_Async.pod6-method_proc">239.1.1 method proc</h2>
 <pre class="code">method fproc(X::Proc::Async:D) returns Proc::Async</pre>
 <p>Returns the object that threw the exception.</p>
</div> <!-- /type/X/Proc/Async/AlreadyStarted.pod6 --><div class="pod-body"><a id="_type_X_Proc_Async_AlreadyStarted.pod6"></a><a name="t240"><h1 class="title">240 class X::Proc::Async::AlreadyStarted</h1></a> <p class="subtitle">Error due to calling </p> <pre class="code">class X::Proc::Async::AlreadyStarted is Exception { ... }</pre>
 <p>When you call <span class="code">start</span> twice on the same <a href="#_type_Proc::Async.pod6">Proc::Async</a> object, the second invocation will die with an <span class="code">X::Proc::Async::AlreadyStarted</span> exception.</p>
 <pre class="code">my $proc = Proc::Async.new("echo");
$proc.start;
$proc.start;    # Process has already been started</pre>
</div> <!-- /type/X/Proc/Async/CharsOrBytes.pod6 --><div class="pod-body"><a id="_type_X_Proc_Async_CharsOrBytes.pod6"></a><a name="t241"><h1 class="title">241 class X::Proc::Async::CharsOrBytes</h1></a> <p class="subtitle">Error due to tapping the same </p> <pre class="code">class X::Proc::Async::CharsOrBytes is Exception { ... }</pre>
 <p>A <a href="#_type_Proc::Async.pod6">Proc::Async</a> object allows subscription to the output or error stream either for bytes (<a href="#_type_Blob.pod6">Blob</a>) or for text data (<a href="#_type_Str.pod6">Str</a>), but not for both. If you do try both, it throws an exception of type <span class="code">X::Proc::Async::CharsOrBytes</span>.</p>
 <pre class="code">my $proc = Proc::Async.new('echo');
$proc.stdout.tap(&amp;amp;print);
$proc.stdout(:bin).tap(&amp;amp;print); # dies with
                                # Can only tap one of chars or bytes supply for stdout</pre>
 <a name="t241.1"></a><h1 id="_type_X_Proc_Async_CharsOrBytes.pod6-Methods">241.1 Methods</h1>
 <a name="t241.1.1"></a><h2 id="_type_X_Proc_Async_CharsOrBytes.pod6-method_handle">241.1.1 method handle</h2>
 <pre class="code">method handle(X::Proc::Async::CharsOrBytes:D:) returns Str:D</pre>
 <p>Returns the name of the handle that was accessed both for text and for binary data, <span class="code">stdout</span> or <span class="code">stderr</span>.</p>
</div> <!-- /type/X/Proc/Async/MustBeStarted.pod6 --><div class="pod-body"><a id="_type_X_Proc_Async_MustBeStarted.pod6"></a><a name="t242"><h1 class="title">242 class X::Proc::Async::MustBeStarted</h1></a> <p class="subtitle">Error due to interacting with a </p> <pre class="code">class X::Proc::Async::MustBeStarted is Exception { ... }</pre>
 <p>Several methods from <a href="#_type_Proc::Async.pod6">Proc::Async</a> expect that the external program has been spawned (by calling <span class="code">.start</span> on it), including <span class="code">say</span>, <span class="code">write</span>, <span class="code">print</span> and <span class="code">close-stdin</span>. If one of those methods is called before <span class="code">.start</span> was called, they throw an exception of type <span class="code">X::Proc::Async::MustBeStarted</span>.</p>
 <pre class="code">Proc::Async.new('echo', :w).say(42);
# dies with    Process must be started first before calling 'say'</pre>
 <a name="t242.1"></a><h1 id="_type_X_Proc_Async_MustBeStarted.pod6-Methods">242.1 Methods</h1>
 <a name="t242.1.1"></a><h2 id="_type_X_Proc_Async_MustBeStarted.pod6-method_method">242.1.1 method method</h2>
 <pre class="code">method method(X::Proc::Async::MustBeStarted:D) returns Str:D</pre>
 <p>Returns the name of the method that was illegally called before starting the external program.</p>
</div> <!-- /type/X/Proc/Async/OpenForWriting.pod6 --><div class="pod-body"><a id="_type_X_Proc_Async_OpenForWriting.pod6"></a><a name="t243"><h1 class="title">243 class X::Proc::Async::OpenForWriting</h1></a> <p class="subtitle">Error due to writing to a read-only </p> <pre class="code">class X::Proc::Async::OpenForWriting is Exception { ... }</pre>
 <p>When a <a href="#_type_Proc::Async.pod6">Proc::Async</a> object is opened only for reading from the external program (no <span class="code">:w</span> passed to open), and a write operation such as <span class="code">write</span>, <span class="code">print</span> and <span class="code">say</span> is performed, an exception of type <span class="indexed"><a id="581" name="">X::Proc::Async::OpenForWriting</a></span> is thrown:</p>
 <pre class="code">my $proc = Proc::Async.new("echo");
$proc.start;
$proc.say(42)   # Process must be opened for writing with :w to call 'say'</pre>
 <a name="t243.1"></a><h1 id="_type_X_Proc_Async_OpenForWriting.pod6-Methods">243.1 Methods</h1>
 <a name="t243.1.1"></a><h2 id="_type_X_Proc_Async_OpenForWriting.pod6-method_method">243.1.1 method method</h2>
 <pre class="code">method method(X::Proc::Async::OpenForWriting:D:)</pre>
 <p>Returns the method name that was called and which caused the exception.</p>
</div> <!-- /type/X/Proc/Async/TapBeforeSpawn.pod6 --><div class="pod-body"><a id="_type_X_Proc_Async_TapBeforeSpawn.pod6"></a><a name="t244"><h1 class="title">244 class X::Proc::Async::TapBeforeSpawn</h1></a> <p class="subtitle">Error due to tapping a Proc::Async stream after spawning its process</p> <pre class="code">class X::Proc::Async::TapBeforeSpawn is Exception { ... }</pre>
 <p>If the <span class="code">stdout</span> or <span class="code">stderr</span> methods of <a href="#_type_Proc::Async.pod6">Proc::Async</a> are called after the program has been <span class="code">start</span>ed, an exception of type <a href="#_type_X::Proc::Async::TapBeforeSpawn.pod6">X::Proc::Async::TapBeforeSpawn</a> is thrown.</p>
 <pre class="code">my $proc = Proc::Async.new("echo");
$proc.start;
$proc.stdout.tap(&amp;amp;print)        # To avoid data races, you must tap stdout before running the process</pre>
 <a name="t244.1"></a><h1 id="_type_X_Proc_Async_TapBeforeSpawn.pod6-Methods">244.1 Methods</h1>
 <a name="t244.1.1"></a><h2 id="_type_X_Proc_Async_TapBeforeSpawn.pod6-method_handle">244.1.1 method handle</h2>
 <pre class="code">method handle(X::Proc::Async::TapBeforeSpawn:D:) return Str:D</pre>
 <p>Returns the name of the handle (<span class="code">stdout</span> or <span class="code">stderr</span>) that was accessed after the program started.</p>
</div> <!-- /type/X/Promise/CauseOnlyValidOnBroken.pod6 --><div class="pod-body"><a id="_type_X_Promise_CauseOnlyValidOnBroken.pod6"></a><a name="t245"><h1 class="title">245 class X::Promise::CauseOnlyValidOnBroken</h1></a> <p class="subtitle">Error due to asking why an unbroken promise has been broken.</p> <pre class="code">class X::Promise::CauseOnlyValidOnBroken is Exception { }</pre>
 <p>This exception is thrown when code expects a Promise to be broken, and asks why it has been broken, but the Promise has in fact, not yet been broken.</p>
 <a name="t245.1"></a><h1 id="_type_X_Promise_CauseOnlyValidOnBroken.pod6-Methods">245.1 Methods</h1>
 <a name="t245.1.1"></a><h2 id="_type_X_Promise_CauseOnlyValidOnBroken.pod6-method_promise">245.1.1 method promise</h2>
 <pre class="code">method promise()</pre>
 <p>Returns the Promise that was asked about.</p>
 <a name="t245.1.2"></a><h2 id="_type_X_Promise_CauseOnlyValidOnBroken.pod6-method_status">245.1.2 method status</h2>
 <pre class="code">method status()</pre>
 <p>Returns the status the Promise had at that time.</p>
</div> <!-- /type/X/Promise/Vowed.pod6 --><div class="pod-body"><a id="_type_X_Promise_Vowed.pod6"></a><a name="t246"><h1 class="title">246 class X::Promise::Vowed</h1></a> <p class="subtitle">Error due to directly trying to keep/break a vowed promise.</p> <pre class="code">class X::Promise::Vowed is Exception { }</pre>
 <p>This exception is thrown when code tries to keep/break an already vowed promise without going through the corresponding <span class="code">Vow</span> object.</p>
 <a name="t246.1"></a><h1 id="_type_X_Promise_Vowed.pod6-Methods">246.1 Methods</h1>
 <a name="t246.1.1"></a><h2 id="_type_X_Promise_Vowed.pod6-method_promise">246.1.1 method promise</h2>
 <pre class="code">method promise()</pre>
 <p>Returns the vowed Promise.</p>
</div> <!-- /type/X/Redeclaration.pod6 --><div class="pod-body"><a id="_type_X_Redeclaration.pod6"></a><a name="t247"><h1 class="title">247 class X::Redeclaration</h1></a> <p class="subtitle">Compilation error due to declaring an already declared symbol</p> <pre class="code">class X::Redeclaration does X::Comp { }</pre>
 <p>Thrown when a symbol (variable, routine, type, parameter, ...) is redeclared. Note that redeclarations are generally fine in an inner scope, but if the redeclaration appears in the same scope as the original declaration, it usually indicates an error and is treated as one.</p>
 <p>Examples</p>
 <pre class="code">my $x; my $x

===SORRY!===
Redeclaration of symbol $x

sub f() { }
sub f() { }
===SORRY!===
Redeclaration of routine f</pre>
 <p>But those are fine</p>
 <pre class="code">my $x;
sub f() {
    my $x;          # not a redeclaration,
                    # because it's in an inner scope
    sub f() { };    # same
}</pre>
 <a name="t247.1"></a><h1 id="_type_X_Redeclaration.pod6-Methods">247.1 Methods</h1>
 <a name="t247.1.1"></a><h2 id="_type_X_Redeclaration.pod6-method_symbol">247.1.1 method symbol</h2>
 <p>Returns the name of the symbol that was redeclared.</p>
 <a name="t247.1.2"></a><h2 id="_type_X_Redeclaration.pod6-method_what">247.1.2 method what</h2>
 <p>Returns the kind of symbol that was redeclared. Usually <span class="code">symbol</span>, but can also be <span class="code">routine</span>, <span class="code">type</span> etc.</p>
 <a name="t247.1.3"></a><h2 id="_type_X_Redeclaration.pod6-method_postfix">247.1.3 method postfix</h2>
 <p>Returns a string that is attached to the end of the error message. It usually explains the particular problem in more detail, or suggests way to fix the problem.</p>
</div> <!-- /type/X/Role/Initialization.pod6 --><div class="pod-body"><a id="_type_X_Role_Initialization.pod6"></a><a name="t248"><h1 class="title">248 class X::Role::Initialization</h1></a> <p class="subtitle">Error due to passing an initialization value to an ineligible role</p> <pre class="code">class X::Role::Initialization is Exception { }</pre>
 <p>Thrown when the <span class="code">SomeRole($init)</span> syntax is used, but SomeRole does not have exactly one public attribute.</p>
 <p>For example role R { }; "D2" but R(2)</p>
 <p>throws the error</p>
 <pre class="code">Can only supply an initialization value for a role if it has a single
public attribute, but this is not the case for 'R'</pre>
 <a name="t248.1"></a><h1 id="_type_X_Role_Initialization.pod6-Methods">248.1 Methods</h1>
 <a name="t248.1.1"></a><h2 id="_type_X_Role_Initialization.pod6-method_role">248.1.1 method role</h2>
 <pre class="code">method role()</pre>
 <p>Returns the role that caused the error.</p>
</div> <!-- /type/X/Seq/Consumed.pod6 --><div class="pod-body"><a id="_type_X_Seq_Consumed.pod6"></a><a name="t249"><h1 class="title">249 class X::Seq::Consumed</h1></a> <p class="subtitle">Error due to trying to reuse a consumed sequence</p> <pre class="code">class X::Seq::Consumed is Exception { }</pre>
 <p>This exception is thrown when a piece of code tries to reuse a <span class="code">Seq</span> which has already been iterated.</p>
</div> <!-- /type/X/Sequence/Deduction.pod6 --><div class="pod-body"><a id="_type_X_Sequence_Deduction.pod6"></a><a name="t250"><h1 class="title">250 class X::Sequence::Deduction</h1></a> <p class="subtitle">Error due to constructing a sequence from ineligible input</p> <pre class="code">class X::Sequence::Deduction is Exception { }</pre>
 <p>Exception type thrown when the <span class="code">...</span> sequence operator is being called without an explicit closure, and the sequence cannot be deduced.</p>
</div> <!-- /type/X/Signature/NameClash.pod6 --><div class="pod-body"><a id="_type_X_Signature_NameClash.pod6"></a><a name="t251"><h1 class="title">251 class X::Signature::NameClash</h1></a> <p class="subtitle">Compilation error due to two named parameters with the same name</p> <pre class="code">my class X::Signature::NameClash does X::Comp { }</pre>
 <p>Compile time error thrown when two named parameters have the same name, potentially through aliases.</p>
 <p>For example</p>
 <pre class="code">sub f(:$a, :a(:@b)) { }</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Name a used for more than one named parameter</pre>
 <a name="t251.1"></a><h1 id="_type_X_Signature_NameClash.pod6-Methods">251.1 Methods</h1>
 <a name="t251.1.1"></a><h2 id="_type_X_Signature_NameClash.pod6-method_name">251.1.1 method name</h2>
 <pre class="code">method name() returns Str:D</pre>
 <p>Returns the name that was used for more than one parameter.</p>
</div> <!-- /type/X/Signature/Placeholder.pod6 --><div class="pod-body"><a id="_type_X_Signature_Placeholder.pod6"></a><a name="t252"><h1 class="title">252 class X::Signature::Placeholder</h1></a> <p class="subtitle">Compilation error due to placeholders in a block with a signature</p> <pre class="code">class X::Signature::Placeholder does X::Comp</pre>
 <p>Compile time error thrown when a block has both an explicit signature and placeholder parameters.</p>
 <p>For example</p>
 <pre class="code">sub f() { $^x }</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Placeholder variable '$^x' cannot override existing signature</pre>
 <a name="t252.1"></a><h1 id="_type_X_Signature_Placeholder.pod6-Methods">252.1 Methods</h1>
 <a name="t252.1.1"></a><h2 id="_type_X_Signature_Placeholder.pod6-method_placeholder">252.1.1 method placeholder</h2>
 <pre class="code">method placeholder() returns Str:D</pre>
 <p>Returns the name of a placeholder that was used in a block that already had a signature.</p>
</div> <!-- /type/X/Str/Numeric.pod6 --><div class="pod-body"><a id="_type_X_Str_Numeric.pod6"></a><a name="t253"><h1 class="title">253 class X::Str::Numeric</h1></a> <p class="subtitle">Error while trying to coerce a string to a number</p> <pre class="code">class X::Str::Numeric is Exception { }</pre>
 <p>Error thrown (or wrapped in a <span class="code">Failure</span>) when a conversion from string to a number fails.</p>
 <p>For example</p>
 <pre class="code">say +"42 answers"</pre>
 <p>dies with</p>
 <pre class="code">Cannot convert string to number: trailing characters after number in '42⏏ answers' (indicated by ⏏)</pre>
 <a name="t253.1"></a><h1 id="_type_X_Str_Numeric.pod6-Methods">253.1 Methods</h1>
 <a name="t253.1.1"></a><h2 id="_type_X_Str_Numeric.pod6-method_source">253.1.1 method source</h2>
 <pre class="code">method source() returns Str:D</pre>
 <p>Returns the string that was attempted to convert to a number</p>
 <a name="t253.1.2"></a><h2 id="_type_X_Str_Numeric.pod6-method_pos">253.1.2 method pos</h2>
 <pre class="code">method pos() returns Int:D</pre>
 <p>Gives the position into the string where the parsing failed.</p>
 <a name="t253.1.3"></a><h2 id="_type_X_Str_Numeric.pod6-method_reason">253.1.3 method reason</h2>
 <pre class="code">method reason() returns Int:D</pre>
 <p>Verbal description of the reason why the conversion failed.</p>
</div> <!-- /type/X/StubCode.pod6 --><div class="pod-body"><a id="_type_X_StubCode.pod6"></a><a name="t254"><h1 class="title">254 class X::StubCode</h1></a> <p class="subtitle">Runtime error due to execution of stub code</p> <pre class="code">class X::StubCode is Exception { }</pre>
 <p>Thrown when a piece of stub code (created via <span class="code">!!!</span> or <span class="code">...</span>) is executed.</p>
 <a name="t254.1"></a><h1 id="_type_X_StubCode.pod6-Methods">254.1 Methods</h1>
 <a name="t254.1.1"></a><h2 id="_type_X_StubCode.pod6-method_message">254.1.1 method message</h2>
 <p>Returns the custom message provided to <span class="code">!!!</span>, or a reasonable default if none was provided.</p>
</div> <!-- /type/X/Syntax.pod6 --><div class="pod-body"><a id="_type_X_Syntax.pod6"></a><a name="t255"><h1 class="title">255 role X::Syntax</h1></a> <p class="subtitle">Syntax error thrown by the compiler</p> <pre class="code">role X::Syntax does X::Comp { }</pre>
 <p>Common role for syntax errors thrown by the compiler.</p>
</div> <!-- /type/X/Syntax/Augment/WithoutMonkeyTyping.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Augment_WithoutMonkeyTyping.pod6"></a><a name="t256"><h1 class="title">256 class X::Syntax::Augment::WithoutMonkeyTyping</h1></a> <p class="subtitle">Compilation error due to augmenting a type without `MONKEY-TYPING`</p> <pre class="code">class X::Syntax::Augment::WithoutMonkeyTyping does X::Syntax { }</pre>
 <p>Compile time error thrown when <span class="code">augment</span> is used without <span class="code">use MONKEY-TYPING</span>.</p>
 <p>Since <span class="code">augment</span> is considered a rather unsafe and impolite action, you have to pre-declare your intent with the <span class="code">use MONKEY-TYPING;</span> pragma.</p>
 <p>If you don't do that, for example</p>
 <pre class="code">augment class Int { };</pre>
 <p>you get the error</p>
 <pre class="code">===SORRY!===
augment not allowed without 'use MONKEY-TYPING'</pre>
</div> <!-- /type/X/Syntax/Comment/Embedded.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Comment_Embedded.pod6"></a><a name="t257"><h1 class="title">257 class X::Syntax::Comment::Embedded</h1></a> <p class="subtitle">Compilation error due to a malformed inline comment</p> <pre class="code">class X::Syntax::Comment::Embedded does X::Syntax { }</pre>
 <p>Syntax error thrown when <span class="code">#`</span> is encountered and it is not followed by an opening bracket.</p>
 <p>For example</p>
 <pre class="code">#`</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Opening bracket is required for #` comment</pre>
</div> <!-- /type/X/Syntax/Confused.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Confused.pod6"></a><a name="t258"><h1 class="title">258 class X::Syntax::Confused</h1></a> <p class="subtitle">Compilation error due to unrecognized syntax</p> <pre class="code">class X::Syntax::Confused does X::Syntax { }</pre>
 <p>The most general syntax error, if no more specific error message can be given.</p>
 <p>For example</p>
 <pre class="code">1∞</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Confused</pre>
</div> <!-- /type/X/Syntax/InfixInTermPosition.pod6 --><div class="pod-body"><a id="_type_X_Syntax_InfixInTermPosition.pod6"></a><a name="t259"><h1 class="title">259 class X::Syntax::InfixInTermPosition</h1></a> <p class="subtitle">Compilation error due to an infix in term position</p> <pre class="code">class X::Syntax::InfixInTermPosition does X::Syntax { }</pre>
 <p>Syntax error thrown when the parser expects a term, but finds an infix operator instead.</p>
 <p>For example</p>
 <pre class="code">1, =&gt; 2</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Preceding context expects a term, but found infix =&gt; instead</pre>
 <a name="t259.1"></a><h1 id="_type_X_Syntax_InfixInTermPosition.pod6-Methods">259.1 Methods</h1>
 <a name="t259.1.1"></a><h2 id="_type_X_Syntax_InfixInTermPosition.pod6-method_infix">259.1.1 method infix</h2>
 <pre class="code">method infix() returns Str:D</pre>
 <p>Returns the symbol of the infix that was found in term position.</p>
</div> <!-- /type/X/Syntax/Malformed.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Malformed.pod6"></a><a name="t260"><h1 class="title">260 class X::Syntax::Malformed</h1></a> <p class="subtitle">Compilation error due to a malformed construct (usually a declarator)</p> <pre class="code">class X::Syntax::Malformed does X::Syntax { ... }</pre>
 <p>The Perl 6 compiler throws errors of type <span class="code">X::Syntax::Malformed</span> when it knows what kind of declaration it is parsing, and encounters a syntax error, but can't give a more specific error message.</p>
 <pre class="code">my Int a;   # throws an X::Syntax::Malformed</pre>
 <p>produces</p>
 <pre class="code">===SORRY!===
Malformed my
at -e:1
------&gt; my Int ⏏a</pre>
 <a name="t260.1"></a><h1 id="_type_X_Syntax_Malformed.pod6-Methods">260.1 Methods</h1>
 <a name="t260.1.1"></a><h2 id="_type_X_Syntax_Malformed.pod6-method_what">260.1.1 method what</h2>
 <pre class="code">method what(X::Syntax::Malformed:D:) returns Str:D:</pre>
 <p>Returns a description of the thing that was being parsed.</p>
</div> <!-- /type/X/Syntax/Missing.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Missing.pod6"></a><a name="t261"><h1 class="title">261 class X::Syntax::Missing</h1></a> <p class="subtitle">Compilation error due to a missing piece of syntax</p> <pre class="code">class X::Syntax::Missing does X::Syntax { }</pre>
 <p>Syntax error thrown when the previous piece of syntax requires the existence of another piece of syntax, and that second piece is missing.</p>
 <p>For example</p>
 <pre class="code">for 1, 2, 3</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Missing block</pre>
 <p>because a <span class="code">for</span> that is not a statement modifier must be followed by a block.</p>
 <a name="t261.1"></a><h1 id="_type_X_Syntax_Missing.pod6-Methods">261.1 Methods</h1>
 <a name="t261.1.1"></a><h2 id="_type_X_Syntax_Missing.pod6-method_what">261.1.1 method what</h2>
 <pre class="code">method what() returns Str:D</pre>
 <p>Returns a string description of the missing syntax element.</p>
</div> <!-- /type/X/Syntax/NegatedPair.pod6 --><div class="pod-body"><a id="_type_X_Syntax_NegatedPair.pod6"></a><a name="t262"><h1 class="title">262 class X::Syntax::NegatedPair</h1></a> <p class="subtitle">Compilation error due to passing an argument to a negated colonpair</p> <pre class="code">class X::Syntax::NegatedPair does X::Syntax { }</pre>
 <p>Thrown if a colonpair illegally has a value, for example <span class="code">:!a(1)</span>. This is an error because the <span class="code">!</span> negation implies that the value is <span class="code">False</span>.</p>
 <p>A typical error message from this class is <i>Argument not allowed on negated pair with key 'a'</i>.</p>
 <a name="t262.1"></a><h1 id="_type_X_Syntax_NegatedPair.pod6-Methods">262.1 Methods</h1>
 <a name="t262.1.1"></a><h2 id="_type_X_Syntax_NegatedPair.pod6-method_key">262.1.1 method key</h2>
 <p>Returns the key of the pair that caused the error.</p>
</div> <!-- /type/X/Syntax/NoSelf.pod6 --><div class="pod-body"><a id="_type_X_Syntax_NoSelf.pod6"></a><a name="t263"><h1 class="title">263 class X::Syntax::NoSelf</h1></a> <p class="subtitle">Compilation error due to implicitly using a `self` that is not there</p> <pre class="code">class X::Syntax::NoSelf does X::Syntax { }</pre>
 <p>Compile time error thrown when <span class="code">$.foo</span> style calls are used where no invocant is available.</p>
 <p>For example the code</p>
 <pre class="code">$.meth</pre>
 <p>in the mainline throws the error</p>
 <pre class="code">===SORRY!===
Variable $.meth used where no 'self' is available</pre>
 <p>because <span class="code">$.meth</span> is short for <span class="code">$(self.meth)</span>, and there is no <span class="code">self</span> available in mainline.</p>
 <a name="t263.1"></a><h1 id="_type_X_Syntax_NoSelf.pod6-Methods">263.1 Methods</h1>
 <a name="t263.1.1"></a><h2 id="_type_X_Syntax_NoSelf.pod6-method_variable">263.1.1 method variable</h2>
 <p>Returns the variable/method call that caused the error.</p>
</div> <!-- /type/X/Syntax/Number/RadixOutOfRange.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Number_RadixOutOfRange.pod6"></a><a name="t264"><h1 class="title">264 class X::Syntax::Number::RadixOutOfRange</h1></a> <p class="subtitle">Compilation error due to an unallowed radix in a number literal</p> <pre class="code">class X::Syntax::Number::RadixOutOfRange does X::Syntax { }</pre>
 <p>Syntax error that is thrown when the radix of a radix number is not allowed, like <span class="code">:1&lt;1> </span> or <span class="code">:42&lt;ouch> </span>.</p>
 <a name="t264.1"></a><h1 id="_type_X_Syntax_Number_RadixOutOfRange.pod6-Methods">264.1 Methods</h1>
 <a name="t264.1.1"></a><h2 id="_type_X_Syntax_Number_RadixOutOfRange.pod6-method_radix">264.1.1 method radix</h2>
 <pre class="code">method radix() returns Int:D</pre>
 <p>The offensive radix.</p>
</div> <!-- /type/X/Syntax/P5.pod6 --><div class="pod-body"><a id="_type_X_Syntax_P5.pod6"></a><a name="t265"><h1 class="title">265 class X::Syntax::P5</h1></a> <p class="subtitle">Compilation error due to use of Perl 5-only syntax</p> <pre class="code">class X::Syntax::P5 does X::Syntax { }</pre>
 <p>Syntax error thrown when some piece of code is clearly Perl 5, not Perl 6.</p>
 <p>For example</p>
 <pre class="code">for my $a (1, 2) { }</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
This appears to be Perl 5 code</pre>
</div> <!-- /type/X/Syntax/Regex/Adverb.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Regex_Adverb.pod6"></a><a name="t266"><h1 class="title">266 class X::Syntax::Regex::Adverb</h1></a> <p class="subtitle">Compilation error due to an unrecognized regex adverb</p> <pre class="code">class X::Syntax::Regex::Adverb does X::Syntax { }</pre>
 <p>Syntax error thrown when an unrecognized or illegal regex adverb is encountered.</p>
 <p>For example <span class="code">rx:g/a/</span> dies with</p>
 <pre class="code">===SORRY!===
Adverb g not allowed on rx</pre>
 <p>because <span class="code">:g</span> belongs to a match operation, not a regex itself.</p>
 <a name="t266.1"></a><h1 id="_type_X_Syntax_Regex_Adverb.pod6-Methods">266.1 Methods</h1>
 <a name="t266.1.1"></a><h2 id="_type_X_Syntax_Regex_Adverb.pod6-method_adverb">266.1.1 method adverb</h2>
 <pre class="code">method adverb() returns Str:D</pre>
 <p>Returns the illegally used adverb</p>
 <a name="t266.1.2"></a><h2 id="_type_X_Syntax_Regex_Adverb.pod6-method_construct">266.1.2 method construct</h2>
 <pre class="code">method construct() returns Str:D</pre>
 <p>Returns the name of the construct that adverb was used on (<span class="code">m</span>, <span class="code">ms</span>, <span class="code">rx</span>, <span class="code">s</span>, <span class="code">ss</span>).</p>
</div> <!-- /type/X/Syntax/Regex/SolitaryQuantifier.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Regex_SolitaryQuantifier.pod6"></a><a name="t267"><h1 class="title">267 class X::Syntax::Regex::SolitaryQuantifier</h1></a> <p class="subtitle">Compilation error due to a regex quantifier without preceding atom</p> <pre class="code">class X::Syntax::Regex::SolitaryQuantifier does X::Syntax { }</pre>
 <p>Syntax error when a stand alone quantifier (without an preceding atom to quantify) is encountered in a regular expression.</p>
 <p>For example</p>
 <pre class="code">/ * /</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!=== Error while compiling
Quantifier quantifies nothing</pre>
</div> <!-- /type/X/Syntax/Reserved.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Reserved.pod6"></a><a name="t268"><h1 class="title">268 class X::Syntax::Reserved</h1></a> <p class="subtitle">Compilation error due to use of syntax reserved for future use</p> <pre class="code">class X::Syntax::Reserved does X::Syntax { }</pre>
 <p>Syntax error thrown when a syntax is used which is reserved for future expansion.</p>
 <p>For example</p>
 <pre class="code">my @a();</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
The () shape syntax in array declarations is reserved</pre>
 <a name="t268.1"></a><h1 id="_type_X_Syntax_Reserved.pod6-Methods">268.1 Methods</h1>
 <a name="t268.1.1"></a><h2 id="_type_X_Syntax_Reserved.pod6-method_reserved">268.1.1 method reserved</h2>
 <pre class="code">method reserved() returns Str:D</pre>
 <p>Returns a text description of the reserved syntax.</p>
 <a name="t268.1.2"></a><h2 id="_type_X_Syntax_Reserved.pod6-method_instead">268.1.2 method instead</h2>
 <pre class="code">method instead() returns Str</pre>
 <p>Describes what to use instead of the reserved syntax (if anything).</p>
</div> <!-- /type/X/Syntax/Self/WithoutObject.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Self_WithoutObject.pod6"></a><a name="t269"><h1 class="title">269 class X::Syntax::Self::WithoutObject</h1></a> <p class="subtitle">Compilation error due to invoking `self` in an ineligible scope</p> <pre class="code">class X::Syntax::Self::WithoutObject does X::Syntax { }</pre>
 <p>Syntax error thrown when <span class="code">self</span> is referenced in a place where no invocant is available.</p>
 <p>For example</p>
 <pre class="code">self</pre>
 <p>in the mainline dies with</p>
 <pre class="code">===SORRY!===
'self' used where no object is available</pre>
</div> <!-- /type/X/Syntax/Signature/InvocantMarker.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Signature_InvocantMarker.pod6"></a><a name="t270"><h1 class="title">270 class X::Syntax::Signature::InvocantMarker</h1></a> <p class="subtitle">Compilation error due to a misplaced invocant marker in a signature</p> <pre class="code">class X::Syntax::Signature::InvocantMarker does X::Syntax { }</pre>
 <p>Syntax error when the invocant in a signature is anywhere else than after the first parameter.</p>
 <p>For example</p>
 <pre class="code">:($a, $b: $c)</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Can only use : as invocant marker in a signature after the first parameter</pre>
 <p>See also: <a href="#_type_Signature.pod6">Signature</a>.</p>
</div> <!-- /type/X/Syntax/Term/MissingInitializer.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Term_MissingInitializer.pod6"></a><a name="t271"><h1 class="title">271 class X::Syntax::Term::MissingInitializer</h1></a> <p class="subtitle">Compilation error due to declaring a term without initialization</p> <pre class="code">class X::Syntax::Term::MissingInitializer does X::Syntax { }</pre>
 <p>Syntax error when a term (a backslash variable) is declared without initialization assignment.</p>
 <p>For example</p>
 <pre class="code">my \foo</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Term definition requires an initializer</pre>
 <p>Valid code would be</p>
 <pre class="code">my \foo = 42;</pre>
</div> <!-- /type/X/Syntax/UnlessElse.pod6 --><div class="pod-body"><a id="_type_X_Syntax_UnlessElse.pod6"></a><a name="t272"><h1 class="title">272 class X::Syntax::UnlessElse</h1></a> <p class="subtitle">Compilation error due to an `unless` clause followed by `else`</p> <pre class="code">class X::Syntax::UnlessElse does X::Syntax { }</pre>
 <p>Syntax error thrown when an <span class="code">unless</span> clause is followed by an <span class="code">else</span> clause.</p>
 <p>For example</p>
 <pre class="code">unless 1 { } else { }</pre>
 <p>dies with</p>
 <pre class="code">"unless" does not take "else", please rewrite using "if"</pre>
</div> <!-- /type/X/Syntax/Variable/Match.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Variable_Match.pod6"></a><a name="t273"><h1 class="title">273 class X::Syntax::Variable::Match</h1></a> <p class="subtitle">Compilation error due to declaring a match variable</p> <pre class="code">class X::Syntax::Variable::Match does X::Syntax { }</pre>
 <p>Syntax error thrown when a match variable like <span class="code">$&lt;thing> </span> was declared.</p>
 <p>For example</p>
 <pre class="code">my $&amp;lt;thing&gt;;</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Cannot declare a match variable</pre>
</div> <!-- /type/X/Syntax/Variable/Numeric.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Variable_Numeric.pod6"></a><a name="t274"><h1 class="title">274 class X::Syntax::Variable::Numeric</h1></a> <p class="subtitle">Compilation error due to declaring a numeric symbol</p> <pre class="code">class X::Syntax::Variable::Numeric does X::Syntax { }</pre>
 <p>Syntax error thrown when trying to declare numeric symbols.</p>
 <p>For example</p>
 <pre class="code">my @101;</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Cannot declare a numeric variable</pre>
 <a name="t274.1"></a><h1 id="_type_X_Syntax_Variable_Numeric.pod6-Methods">274.1 Methods</h1>
 <a name="t274.1.1"></a><h2 id="_type_X_Syntax_Variable_Numeric.pod6-method_what">274.1.1 method what</h2>
 <pre class="code">method what returns Str:D</pre>
 <p>Returns a verbal description of the kind of symbol that was declared (variable, parameter, attribute).</p>
</div> <!-- /type/X/Syntax/Variable/Twigil.pod6 --><div class="pod-body"><a id="_type_X_Syntax_Variable_Twigil.pod6"></a><a name="t275"><h1 class="title">275 class X::Syntax::Variable::Twigil</h1></a> <p class="subtitle">Compilation error due to an unallowed twigil in a declaration</p> <pre class="code">class X::Syntax::Variable::Twigil does X::Syntax { }</pre>
 <p>Syntax error thrown when a variable with a twigil is used in an incompatible declaration.</p>
 <p>For example</p>
 <pre class="code">my $!foo</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Cannot use ! twigil on my variable</pre>
 <a name="t275.1"></a><h1 id="_type_X_Syntax_Variable_Twigil.pod6-Methods">275.1 Methods</h1>
 <a name="t275.1.1"></a><h2 id="_type_X_Syntax_Variable_Twigil.pod6-method_twigil">275.1.1 method twigil</h2>
 <pre class="code">method twigil() returns Str:D</pre>
 <p>Returns the twigil that was illegally used</p>
 <a name="t275.1.2"></a><h2 id="_type_X_Syntax_Variable_Twigil.pod6-method_scope">275.1.2 method scope</h2>
 <pre class="code">method scope() returns Str:D</pre>
 <p>Returns the scope that did not harmonize with the twigil.</p>
</div> <!-- /type/X/Temporal.pod6 --><div class="pod-body"><a id="_type_X_Temporal.pod6"></a><a name="t276"><h1 class="title">276 role X::Temporal</h1></a> <p class="subtitle">Error related to DateTime or Date</p> <pre class="code">role X::Temporal is Exception { }</pre>
 <p>A common exception type for all errors related to <span class="code">DateTime</span> or <span class="code">Date</span>.</p>
</div> <!-- /type/X/Temporal/InvalidFormat.pod6 --><div class="pod-body"><a id="_type_X_Temporal_InvalidFormat.pod6"></a><a name="t277"><h1 class="title">277 class X::Temporal::InvalidFormat</h1></a> <p class="subtitle">Error due to using an invalid format when creating a DateTime or Date</p> <pre class="code">class X::Temporal::InvalidFormat does X::Temporal is Exception { }</pre>
 <p>This exception is thrown when code tries to create a <span class="code">DateTime</span> or <span class="code">Date</span> object using an invalid format.</p>
 <pre class="code">my $dt = Date.new("12/25/2015"); # 'invalid Date string '12/25/2015'; use yyyy-mm-dd instead'</pre>
 <a name="t277.1"></a><h1 id="_type_X_Temporal_InvalidFormat.pod6-Methods">277.1 Methods</h1>
 <a name="t277.1.1"></a><h2 id="_type_X_Temporal_InvalidFormat.pod6-method_invalid-str">277.1.1 method invalid-str</h2>
 <p>Returns the invalid format string (<span class="code">12/25/2015</span> in the example above)</p>
 <a name="t277.1.2"></a><h2 id="_type_X_Temporal_InvalidFormat.pod6-method_target">277.1.2 method target</h2>
 <p>Returns the target type (<span class="code">Date</span> in the example above)</p>
 <a name="t277.1.3"></a><h2 id="_type_X_Temporal_InvalidFormat.pod6-method_format">277.1.3 method format</h2>
 <p>Returns valid format strings for the target type in question, (<span class="code">yyyy-mm-dd</span> in the example above)</p>
</div> <!-- /type/X/TypeCheck.pod6 --><div class="pod-body"><a id="_type_X_TypeCheck.pod6"></a><a name="t278"><h1 class="title">278 class X::TypeCheck</h1></a> <p class="subtitle">Error due to a failed type check</p> <pre class="code">class X::TypeCheck is Exception { }</pre>
 <p>Error class thrown when a type check fails.</p>
 <a name="t278.1"></a><h1 id="_type_X_TypeCheck.pod6-Methods">278.1 Methods</h1>
 <a name="t278.1.1"></a><h2 id="_type_X_TypeCheck.pod6-method_operation">278.1.1 method operation</h2>
 <pre class="code">method operation() returns Str:D</pre>
 <p>Returns a string description of the operation that failed, for example <span class="code">"assignment"</span>, <span class="code">"binding"</span>, <span class="code">"return"</span>.</p>
 <a name="t278.1.2"></a><h2 id="_type_X_TypeCheck.pod6-method_got">278.1.2 method got</h2>
 <pre class="code">method got()</pre>
 <p>Returns the object that failed to type check</p>
 <a name="t278.1.3"></a><h2 id="_type_X_TypeCheck.pod6-method_expected">278.1.3 method expected</h2>
 <pre class="code">method expected()</pre>
 <p>Returns the type object against which the check failed.</p>
</div> <!-- /type/X/TypeCheck/Assignment.pod6 --><div class="pod-body"><a id="_type_X_TypeCheck_Assignment.pod6"></a><a name="t279"><h1 class="title">279 class X::TypeCheck::Assignment</h1></a> <p class="subtitle">Error due to a failed type check during assignment</p> <pre class="code">class X::TypeCheck::Assignment is X::TypeCheck { }</pre>
 <p>Error class thrown when the type check of an assignment fails.</p>
 <p>For example</p>
 <pre class="code">my Int $x = "foo"</pre>
 <p>dies with</p>
 <pre class="code">Type check failed in assignment to '$x'; expected 'Int' but got 'Str'</pre>
 <p>though compilers are allowed to detect obvious cases like this example and complain at compile time with a different error.</p>
</div> <!-- /type/X/TypeCheck/Binding.pod6 --><div class="pod-body"><a id="_type_X_TypeCheck_Binding.pod6"></a><a name="t280"><h1 class="title">280 class X::TypeCheck::Binding</h1></a> <p class="subtitle">Error due to a failed type check during binding</p> <pre class="code">class X::TypeCheck::Binding is X::TypeCheck { }</pre>
 <p>Thrown when the type check of a binding operation fails.</p>
 <p>For example</p>
 <pre class="code">my Int $x := "foo"'</pre>
 <p>dies with</p>
 <pre class="code">Type check failed in binding; expected 'Int' but got 'Str'</pre>
 <p>Note that the compiler is free to detect obvious errors at compile time, and complain with a different error at compile time.</p>
</div> <!-- /type/X/TypeCheck/Return.pod6 --><div class="pod-body"><a id="_type_X_TypeCheck_Return.pod6"></a><a name="t281"><h1 class="title">281 class X::TypeCheck::Return</h1></a> <p class="subtitle">Error due to a failed typecheck during `return`</p> <pre class="code">class X::TypeCheck::Return is X::TypeCheck { }</pre>
 <p>Thrown when a return type check fails.</p>
 <p>For example</p>
 <pre class="code">sub f() returns Int { "foo" }
f();</pre>
 <p>Dies with</p>
 <pre class="code">Type check failed for return value; expected 'Int' but got 'Str'</pre>
</div> <!-- /type/X/TypeCheck/Splice.pod6 --><div class="pod-body"><a id="_type_X_TypeCheck_Splice.pod6"></a><a name="t282"><h1 class="title">282 class X::TypeCheck::Splice</h1></a> <p class="subtitle">Compilation error due to a macro trying to splice a non-AST value</p> <pre class="code">class X::TypeCheck::Splice is X::TypeCheck does X::Comp { }</pre>
 <p>Compile time error thrown when a <a href="#_type_Macro.pod6">Macro</a> or an unquote/hole in a <span class="code">quasi</span> quote does not return an <a href="#_type_AST.pod6">AST</a>.</p>
 <p>For example</p>
 <pre class="code">macro a { 'foo' }
say a</pre>
 <p>dies with</p>
 <pre class="code">===SORRY!===
Type check failed in macro application; expected AST but got Str</pre>
 <p>To fix, instead write</p>
 <pre class="code">macro a {
    quasi { 'foo' }
}
say a;              # foo</pre>
 <a name="t282.1"></a><h1 id="_type_X_TypeCheck_Splice.pod6-Methods">282.1 Methods</h1>
 <a name="t282.1.1"></a><h2 id="_type_X_TypeCheck_Splice.pod6-method_action">282.1.1 method action</h2>
 <pre class="code">method action() returns Str:D</pre>
 <p>Returns a verbal description of the action that triggered the error, <span class="code">"macro application"</span> or <span class="code">"unquote evaluation"</span>.</p>
</div> <!-- /type/X/Undeclared.pod6 --><div class="pod-body"><a id="_type_X_Undeclared.pod6"></a><a name="t283"><h1 class="title">283 class X::Undeclared</h1></a> <p class="subtitle">Compilation error due to an undeclared symbol</p> <pre class="code">class X::Undeclared does X::Comp</pre>
 <p>Thrown when the compiler encounters a symbol that has not been declared, but needs to be.</p>
 <p>Example</p>
 <pre class="code">$x

===SORRY!===
Variable $x is not declared</pre>
 <a name="t283.1"></a><h1 id="_type_X_Undeclared.pod6-Methods">283.1 Methods</h1>
 <a name="t283.1.1"></a><h2 id="_type_X_Undeclared.pod6-method_symbol">283.1.1 method symbol</h2>
 <p>Returns the name of the undeclared symbol</p>
 <a name="t283.1.2"></a><h2 id="_type_X_Undeclared.pod6-method_what">283.1.2 method what</h2>
 <p>Returns the kind of symbol that was not declared (for example variable, type, routine).</p>
 <p>Since The symbol wasn't declared, the compiler sometimes has to guess (or rather disambiguate) what kind of symbol it encounter that wasn't declared. For example if you write</p>
 <pre class="code">say a</pre>
 <p>Then the disambiguation defaults to reporting a missing subroutine, even though declaring a <span class="code">constant a = 'a'</span> would also make the error go away.</p>
</div> <!-- /type/nativeInt.pod6 --><div class="pod-body"><a id="_type_nativeInt.pod6"></a><a name="t284"><h1 class="title">284 class int</h1></a> <p class="subtitle">Integer (native storage; machine precision)</p> <pre class="code">class int is Int is repr('P6int') { }</pre>
 <p>TODO</p>
</div>
<div id="left-side-menu-header"><a href="#toc"><span class="selection">TOC</span></a><a href="#index"><span class="selection">Index</span></a></div><div id="left-side-menu"><div id="toc"><ul class="toc">
<a href="#t1"><li class="toc-level toc-level-0"><span class="toc-number">1</span> 5to6-nutshell</li></a>
<a href="#t1.1"><li class="toc-level toc-level-1"><span class="toc-number">1.1</span> CPAN</li></a>
<a href="#t1.2"><li class="toc-level toc-level-1"><span class="toc-number">1.2</span> Syntax</li></a>
<a href="#t1.2.1"><li class="toc-level toc-level-2"><span class="toc-number">1.2.1</span> <span class="code">-></span> Method calls</li></a>
<a href="#t1.2.2"><li class="toc-level toc-level-2"><span class="toc-number">1.2.2</span> Whitespace</li></a>
<a href="#t1.2.3"><li class="toc-level toc-level-2"><span class="toc-number">1.2.3</span> Sigils</li></a>
<a href="#t1.2.3.1"><li class="toc-level toc-level-3"><span class="toc-number">1.2.3.1</span> <span class="code">$</span> Scalar</li></a>
<a href="#t1.2.3.2"><li class="toc-level toc-level-3"><span class="toc-number">1.2.3.2</span> <span class="code">@</span> Array</li></a>
<a href="#t1.2.3.3"><li class="toc-level toc-level-3"><span class="toc-number">1.2.3.3</span> <span class="code">%</span> Hash</li></a>
<a href="#t1.2.3.4"><li class="toc-level toc-level-3"><span class="toc-number">1.2.3.4</span> <span class="code">&amp;</span> Sub</li></a>
<a href="#t1.2.3.5"><li class="toc-level toc-level-3"><span class="toc-number">1.2.3.5</span> <span class="code">*</span> Glob</li></a>
<a href="#t1.2.4"><li class="toc-level toc-level-2"><span class="toc-number">1.2.4</span> [] Array indexing/slicing</li></a>
<a href="#t1.2.5"><li class="toc-level toc-level-2"><span class="toc-number">1.2.5</span> {} Hash indexing/slicing</li></a>
<a href="#t1.2.6"><li class="toc-level toc-level-2"><span class="toc-number">1.2.6</span> Reference creation</li></a>
<a href="#t1.2.7"><li class="toc-level toc-level-2"><span class="toc-number">1.2.7</span> Dereferencing</li></a>
<a href="#t1.3"><li class="toc-level toc-level-1"><span class="toc-number">1.3</span> Operators</li></a>
<a href="#t1.3.1"><li class="toc-level toc-level-2"><span class="toc-number">1.3.1</span> <span class="code">&lt;=> cmp</span> Three-way comparisons</li></a>
<a href="#t1.3.2"><li class="toc-level toc-level-2"><span class="toc-number">1.3.2</span> <span class="code">~~</span> Smart-match operator</li></a>
<a href="#t1.3.3"><li class="toc-level toc-level-2"><span class="toc-number">1.3.3</span> <span class="code">&amp; | ^</span> String Bitwise ops</li></a>
<a href="#t1.3.4"><li class="toc-level toc-level-2"><span class="toc-number">1.3.4</span> <span class="code">&amp; | ^</span> Numeric Bitwise ops</li></a>
<a href="#t1.3.5"><li class="toc-level toc-level-2"><span class="toc-number">1.3.5</span> <span class="code">&amp; | ^</span> Boolean ops</li></a>
<a href="#t1.3.6"><li class="toc-level toc-level-2"><span class="toc-number">1.3.6</span> <span class="code">&lt;&lt; >></span> Numeric shift left|right ops</li></a>
<a href="#t1.3.7"><li class="toc-level toc-level-2"><span class="toc-number">1.3.7</span> <span class="code">=></span> Fat comma</li></a>
<a href="#t1.3.8"><li class="toc-level toc-level-2"><span class="toc-number">1.3.8</span> <span class="code">? :</span> Ternary operator</li></a>
<a href="#t1.3.9"><li class="toc-level toc-level-2"><span class="toc-number">1.3.9</span> <span class="code">.</span> (Dot op) Concatenation</li></a>
<a href="#t1.3.10"><li class="toc-level toc-level-2"><span class="toc-number">1.3.10</span> <span class="code">x</span> List Repeat op or String Repeat op</li></a>
<a href="#t1.3.11"><li class="toc-level toc-level-2"><span class="toc-number">1.3.11</span> <span class="code">..</span> <span class="code">...</span> Two Dots or Three Dots, Range op or Flipflop op</li></a>
<a href="#t1.3.12"><li class="toc-level toc-level-2"><span class="toc-number">1.3.12</span> String interpolation</li></a>
<a href="#t1.4"><li class="toc-level toc-level-1"><span class="toc-number">1.4</span> Compound Statements</li></a>
<a href="#t1.4.1"><li class="toc-level toc-level-2"><span class="toc-number">1.4.1</span> Conditionals</li></a>
<a href="#t1.4.1.1"><li class="toc-level toc-level-3"><span class="toc-number">1.4.1.1</span> <span class="code">if</span> <span class="code">elsif</span> <span class="code">else</span> <span class="code">unless</span></li></a>
<a href="#t1.4.1.2"><li class="toc-level toc-level-3"><span class="toc-number">1.4.1.2</span> <span class="code">given</span>-<span class="code">when</span></li></a>
<a href="#t1.4.2"><li class="toc-level toc-level-2"><span class="toc-number">1.4.2</span> Loops</li></a>
<a href="#t1.4.2.1"><li class="toc-level toc-level-3"><span class="toc-number">1.4.2.1</span> <span class="code">while</span> <span class="code">until</span></li></a>
<a href="#t1.4.2.2"><li class="toc-level toc-level-3"><span class="toc-number">1.4.2.2</span> <span class="code">do</span> <span class="code">while</span>/<span class="code">until</span></li></a>
<a href="#t1.4.2.3"><li class="toc-level toc-level-3"><span class="toc-number">1.4.2.3</span> <span class="code">for</span> <span class="code">foreach</span></li></a>
<a href="#t1.4.2.3.1"><li class="toc-level toc-level-4"><span class="toc-number">1.4.2.3.1</span> <span class="code">each</span></li></a>
<a href="#t1.4.3"><li class="toc-level toc-level-2"><span class="toc-number">1.4.3</span> Flow Control statements</li></a>
<a href="#t1.4.3.1"><li class="toc-level toc-level-3"><span class="toc-number">1.4.3.1</span> <span class="code">continue</span></li></a>
<a href="#t1.5"><li class="toc-level toc-level-1"><span class="toc-number">1.5</span> Functions</li></a>
<a href="#t1.5.1"><li class="toc-level toc-level-2"><span class="toc-number">1.5.1</span> Built-ins with bare blocks</li></a>
<a href="#t1.5.2"><li class="toc-level toc-level-2"><span class="toc-number">1.5.2</span> <span class="code">delete</span></li></a>
<a href="#t1.5.3"><li class="toc-level toc-level-2"><span class="toc-number">1.5.3</span> <span class="code">exists</span></li></a>
<a href="#t1.6"><li class="toc-level toc-level-1"><span class="toc-number">1.6</span> Regular Expressions ( Regex / Regexp )</li></a>
<a href="#t1.6.1"><li class="toc-level toc-level-2"><span class="toc-number">1.6.1</span> Change <span class="code">=~</span> and <span class="code">!~</span> to <span class="code">~~</span> and <span class="code">!~~</span> .</li></a>
<a href="#t1.6.2"><li class="toc-level toc-level-2"><span class="toc-number">1.6.2</span> Captures start with 0, not 1</li></a>
<a href="#t1.6.3"><li class="toc-level toc-level-2"><span class="toc-number">1.6.3</span> Move modifiers</li></a>
<a href="#t1.6.4"><li class="toc-level toc-level-2"><span class="toc-number">1.6.4</span> Add :P5 or :Perl5 adverb</li></a>
<a href="#t1.6.5"><li class="toc-level toc-level-2"><span class="toc-number">1.6.5</span> Special matchers generally fall under the &lt;> syntax</li></a>
<a href="#t1.6.6"><li class="toc-level toc-level-2"><span class="toc-number">1.6.6</span> Longest token matching (LTM) displaces alternation</li></a>
<a href="#t1.7"><li class="toc-level toc-level-1"><span class="toc-number">1.7</span> Pragmas</li></a>
<a href="#t1.7.6.1"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.1</span> <span class="code">strict</span></li></a>
<a href="#t1.7.6.2"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.2</span> <span class="code">warnings</span></li></a>
<a href="#t1.7.6.3"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.3</span> <span class="code">autodie</span></li></a>
<a href="#t1.7.6.4"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.4</span> <span class="code">base</span></li></a>
<a href="#t1.7.6.5"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.5</span> <span class="code">parent</span></li></a>
<a href="#t1.7.6.6"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.6</span> <span class="code">bigint</span> <span class="code">bignum</span> <span class="code">bigrat</span></li></a>
<a href="#t1.7.6.7"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.7</span> <a name="1"></a> <span class="code">constant</span> </li></a>
<a href="#t1.7.6.8"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.8</span> <span class="code">encoding</span></li></a>
<a href="#t1.7.6.9"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.9</span> <span class="code">integer</span></li></a>
<a href="#t1.7.6.10"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.10</span> <span class="code">lib</span></li></a>
<a href="#t1.7.6.11"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.11</span> <span class="code">mro</span></li></a>
<a href="#t1.7.6.12"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.12</span> <span class="code">utf8</span></li></a>
<a href="#t1.7.6.13"><li class="toc-level toc-level-3"><span class="toc-number">1.7.6.13</span> <span class="code">vars</span></li></a>
<a href="#t1.8"><li class="toc-level toc-level-1"><span class="toc-number">1.8</span> Command-line flags</li></a>
<a href="#t1.8.6.1"><li class="toc-level toc-level-3"><span class="toc-number">1.8.6.1</span> <span class="code">-a</span></li></a>
<a href="#t1.8.6.2"><li class="toc-level toc-level-3"><span class="toc-number">1.8.6.2</span> <span class="code">-F</span></li></a>
<a href="#t1.8.6.3"><li class="toc-level toc-level-3"><span class="toc-number">1.8.6.3</span> <span class="code">-l</span></li></a>
<a href="#t1.8.6.4"><li class="toc-level toc-level-3"><span class="toc-number">1.8.6.4</span> <span class="code">-M</span> <span class="code">-m</span></li></a>
<a href="#t1.8.6.5"><li class="toc-level toc-level-3"><span class="toc-number">1.8.6.5</span> <span class="code">-E</span></li></a>
<a href="#t1.8.6.6"><li class="toc-level toc-level-3"><span class="toc-number">1.8.6.6</span> <span class="code">-d</span>, <span class="code">-dt</span>, <span class="code">-d:foo</span>, <span class="code">-D</span>, etc.</li></a>
<a href="#t1.8.6.7"><li class="toc-level toc-level-3"><span class="toc-number">1.8.6.7</span> -s</li></a>
<a href="#t1.9"><li class="toc-level toc-level-1"><span class="toc-number">1.9</span> File-related operations</li></a>
<a href="#t1.9.1"><li class="toc-level toc-level-2"><span class="toc-number">1.9.1</span> Reading the lines of a text file into an array</li></a>
<a href="#t1.9.2"><li class="toc-level toc-level-2"><span class="toc-number">1.9.2</span> Trapping the standard output of executables.</li></a>
<a href="#t1.10"><li class="toc-level toc-level-1"><span class="toc-number">1.10</span> Environment variables</li></a>
<a href="#t1.10.1"><li class="toc-level toc-level-2"><span class="toc-number">1.10.1</span> Perl module library path</li></a>
<a href="#t1.11"><li class="toc-level toc-level-1"><span class="toc-number">1.11</span> Misc.</li></a>
<a href="#t1.11.1"><li class="toc-level toc-level-2"><span class="toc-number">1.11.1</span> <span class="code">'0'</span> is True</li></a>
<a href="#t1.11.2"><li class="toc-level toc-level-2"><span class="toc-number">1.11.2</span> <span class="code">dump</span></li></a>
<a href="#t1.11.3"><li class="toc-level toc-level-2"><span class="toc-number">1.11.3</span> Importing specific functions from a module <a name="3"></a></li></a>
<a href="#t1.12"><li class="toc-level toc-level-1"><span class="toc-number">1.12</span> Core modules</li></a>
<a href="#t1.12.3.1"><li class="toc-level toc-level-3"><span class="toc-number">1.12.3.1</span> <span class="code">Data::Dumper</span></li></a>
<a href="#t1.12.3.2"><li class="toc-level toc-level-3"><span class="toc-number">1.12.3.2</span> <span class="code">Getopt::Long</span></li></a>
<a href="#t1.13"><li class="toc-level toc-level-1"><span class="toc-number">1.13</span> Automated Translation</li></a>
<a href="#t1.13.1"><li class="toc-level toc-level-2"><span class="toc-number">1.13.1</span> Blue Tiger</li></a>
<a href="#t1.13.2"><li class="toc-level toc-level-2"><span class="toc-number">1.13.2</span> Perlito</li></a>
<a href="#t1.13.3"><li class="toc-level toc-level-2"><span class="toc-number">1.13.3</span> MAD</li></a>
<a href="#t1.13.4"><li class="toc-level toc-level-2"><span class="toc-number">1.13.4</span> Perl-ToPerl6</li></a>
<a href="#t1.14"><li class="toc-level toc-level-1"><span class="toc-number">1.14</span> Other sources of translation knowledge</li></a>
<a href="#t2"><li class="toc-level toc-level-0"><span class="toc-number">2</span> 5to6-perlfunc</li></a>
<a href="#t2.1"><li class="toc-level toc-level-1"><span class="toc-number">2.1</span> DESCRIPTION</li></a>
<a href="#t2.2"><li class="toc-level toc-level-1"><span class="toc-number">2.2</span> NOTE</li></a>
<a href="#t2.3"><li class="toc-level toc-level-1"><span class="toc-number">2.3</span> Alphabetical Listing of Perl Functions</li></a>
<a href="#t2.3.1"><li class="toc-level toc-level-2"><span class="toc-number">2.3.1</span> Filetests</li></a>
<a href="#t2.3.2"><li class="toc-level toc-level-2"><span class="toc-number">2.3.2</span> abs</li></a>
<a href="#t2.3.3"><li class="toc-level toc-level-2"><span class="toc-number">2.3.3</span> accept</li></a>
<a href="#t2.3.4"><li class="toc-level toc-level-2"><span class="toc-number">2.3.4</span> alarm</li></a>
<a href="#t2.3.5"><li class="toc-level toc-level-2"><span class="toc-number">2.3.5</span> atan2</li></a>
<a href="#t2.3.6"><li class="toc-level toc-level-2"><span class="toc-number">2.3.6</span> bind</li></a>
<a href="#t2.3.7"><li class="toc-level toc-level-2"><span class="toc-number">2.3.7</span> binmode</li></a>
<a href="#t2.3.8"><li class="toc-level toc-level-2"><span class="toc-number">2.3.8</span> bless</li></a>
<a href="#t2.3.9"><li class="toc-level toc-level-2"><span class="toc-number">2.3.9</span> break</li></a>
<a href="#t2.3.10"><li class="toc-level toc-level-2"><span class="toc-number">2.3.10</span> caller</li></a>
<a href="#t2.3.11"><li class="toc-level toc-level-2"><span class="toc-number">2.3.11</span> chdir</li></a>
<a href="#t2.3.12"><li class="toc-level toc-level-2"><span class="toc-number">2.3.12</span> chmod</li></a>
<a href="#t2.3.13"><li class="toc-level toc-level-2"><span class="toc-number">2.3.13</span> chomp</li></a>
<a href="#t2.3.14"><li class="toc-level toc-level-2"><span class="toc-number">2.3.14</span> chop</li></a>
<a href="#t2.3.15"><li class="toc-level toc-level-2"><span class="toc-number">2.3.15</span> chown</li></a>
<a href="#t2.3.16"><li class="toc-level toc-level-2"><span class="toc-number">2.3.16</span> chr</li></a>
<a href="#t2.3.17"><li class="toc-level toc-level-2"><span class="toc-number">2.3.17</span> chroot</li></a>
<a href="#t2.3.18"><li class="toc-level toc-level-2"><span class="toc-number">2.3.18</span> close</li></a>
<a href="#t2.3.19"><li class="toc-level toc-level-2"><span class="toc-number">2.3.19</span> closedir</li></a>
<a href="#t2.3.20"><li class="toc-level toc-level-2"><span class="toc-number">2.3.20</span> connect</li></a>
<a href="#t2.3.21"><li class="toc-level toc-level-2"><span class="toc-number">2.3.21</span> continue</li></a>
<a href="#t2.3.22"><li class="toc-level toc-level-2"><span class="toc-number">2.3.22</span> cos</li></a>
<a href="#t2.3.23"><li class="toc-level toc-level-2"><span class="toc-number">2.3.23</span> crypt</li></a>
<a href="#t2.3.24"><li class="toc-level toc-level-2"><span class="toc-number">2.3.24</span> dbm functions</li></a>
<a href="#t2.3.25"><li class="toc-level toc-level-2"><span class="toc-number">2.3.25</span> defined</li></a>
<a href="#t2.3.26"><li class="toc-level toc-level-2"><span class="toc-number">2.3.26</span> delete</li></a>
<a href="#t2.3.27"><li class="toc-level toc-level-2"><span class="toc-number">2.3.27</span> die</li></a>
<a href="#t2.3.28"><li class="toc-level toc-level-2"><span class="toc-number">2.3.28</span> do</li></a>
<a href="#t2.3.29"><li class="toc-level toc-level-2"><span class="toc-number">2.3.29</span> dump</li></a>
<a href="#t2.3.30"><li class="toc-level toc-level-2"><span class="toc-number">2.3.30</span> each</li></a>
<a href="#t2.3.31"><li class="toc-level toc-level-2"><span class="toc-number">2.3.31</span> eof</li></a>
<a href="#t2.3.32"><li class="toc-level toc-level-2"><span class="toc-number">2.3.32</span> eval</li></a>
<a href="#t2.3.33"><li class="toc-level toc-level-2"><span class="toc-number">2.3.33</span> evalbytes</li></a>
<a href="#t2.3.34"><li class="toc-level toc-level-2"><span class="toc-number">2.3.34</span> exec</li></a>
<a href="#t2.3.35"><li class="toc-level toc-level-2"><span class="toc-number">2.3.35</span> exists</li></a>
<a href="#t2.3.36"><li class="toc-level toc-level-2"><span class="toc-number">2.3.36</span> exit</li></a>
<a href="#t2.3.37"><li class="toc-level toc-level-2"><span class="toc-number">2.3.37</span> exp</li></a>
<a href="#t2.3.38"><li class="toc-level toc-level-2"><span class="toc-number">2.3.38</span> fc</li></a>
<a href="#t2.3.39"><li class="toc-level toc-level-2"><span class="toc-number">2.3.39</span> fcntl</li></a>
<a href="#t2.3.40"><li class="toc-level toc-level-2"><span class="toc-number">2.3.40</span> __FILE__</li></a>
<a href="#t2.3.41"><li class="toc-level toc-level-2"><span class="toc-number">2.3.41</span> fileno</li></a>
<a href="#t2.3.42"><li class="toc-level toc-level-2"><span class="toc-number">2.3.42</span> flock</li></a>
<a href="#t2.3.43"><li class="toc-level toc-level-2"><span class="toc-number">2.3.43</span> fork</li></a>
<a href="#t2.3.44"><li class="toc-level toc-level-2"><span class="toc-number">2.3.44</span> formats</li></a>
<a href="#t2.3.45"><li class="toc-level toc-level-2"><span class="toc-number">2.3.45</span> getc</li></a>
<a href="#t2.3.46"><li class="toc-level toc-level-2"><span class="toc-number">2.3.46</span> getlogin</li></a>
<a href="#t2.3.47"><li class="toc-level toc-level-2"><span class="toc-number">2.3.47</span> getpeername</li></a>
<a href="#t2.3.48"><li class="toc-level toc-level-2"><span class="toc-number">2.3.48</span> getpgrp</li></a>
<a href="#t2.3.49"><li class="toc-level toc-level-2"><span class="toc-number">2.3.49</span> getpriority</li></a>
<a href="#t2.3.50"><li class="toc-level toc-level-2"><span class="toc-number">2.3.50</span> get and set functions</li></a>
<a href="#t2.3.51"><li class="toc-level toc-level-2"><span class="toc-number">2.3.51</span> getsock*</li></a>
<a href="#t2.3.52"><li class="toc-level toc-level-2"><span class="toc-number">2.3.52</span> glob</li></a>
<a href="#t2.3.53"><li class="toc-level toc-level-2"><span class="toc-number">2.3.53</span> gmtime</li></a>
<a href="#t2.3.54"><li class="toc-level toc-level-2"><span class="toc-number">2.3.54</span> goto</li></a>
<a href="#t2.3.55"><li class="toc-level toc-level-2"><span class="toc-number">2.3.55</span> grep</li></a>
<a href="#t2.3.56"><li class="toc-level toc-level-2"><span class="toc-number">2.3.56</span> hex</li></a>
<a href="#t2.3.57"><li class="toc-level toc-level-2"><span class="toc-number">2.3.57</span> import</li></a>
<a href="#t2.3.58"><li class="toc-level toc-level-2"><span class="toc-number">2.3.58</span> index</li></a>
<a href="#t2.3.59"><li class="toc-level toc-level-2"><span class="toc-number">2.3.59</span> int</li></a>
<a href="#t2.3.60"><li class="toc-level toc-level-2"><span class="toc-number">2.3.60</span> ioctl</li></a>
<a href="#t2.3.61"><li class="toc-level toc-level-2"><span class="toc-number">2.3.61</span> join</li></a>
<a href="#t2.3.62"><li class="toc-level toc-level-2"><span class="toc-number">2.3.62</span> keys</li></a>
<a href="#t2.3.63"><li class="toc-level toc-level-2"><span class="toc-number">2.3.63</span> kill</li></a>
<a href="#t2.3.64"><li class="toc-level toc-level-2"><span class="toc-number">2.3.64</span> last</li></a>
<a href="#t2.3.65"><li class="toc-level toc-level-2"><span class="toc-number">2.3.65</span> lc</li></a>
<a href="#t2.3.66"><li class="toc-level toc-level-2"><span class="toc-number">2.3.66</span> lcfirst</li></a>
<a href="#t2.3.67"><li class="toc-level toc-level-2"><span class="toc-number">2.3.67</span> length</li></a>
<a href="#t2.3.68"><li class="toc-level toc-level-2"><span class="toc-number">2.3.68</span> __LINE__</li></a>
<a href="#t2.3.69"><li class="toc-level toc-level-2"><span class="toc-number">2.3.69</span> link</li></a>
<a href="#t2.3.70"><li class="toc-level toc-level-2"><span class="toc-number">2.3.70</span> listen</li></a>
<a href="#t2.3.71"><li class="toc-level toc-level-2"><span class="toc-number">2.3.71</span> local</li></a>
<a href="#t2.3.72"><li class="toc-level toc-level-2"><span class="toc-number">2.3.72</span> localtime</li></a>
<a href="#t2.3.73"><li class="toc-level toc-level-2"><span class="toc-number">2.3.73</span> lock</li></a>
<a href="#t2.3.74"><li class="toc-level toc-level-2"><span class="toc-number">2.3.74</span> log</li></a>
<a href="#t2.3.75"><li class="toc-level toc-level-2"><span class="toc-number">2.3.75</span> lstat</li></a>
<a href="#t2.3.76"><li class="toc-level toc-level-2"><span class="toc-number">2.3.76</span> m//</li></a>
<a href="#t2.3.77"><li class="toc-level toc-level-2"><span class="toc-number">2.3.77</span> map</li></a>
<a href="#t2.3.78"><li class="toc-level toc-level-2"><span class="toc-number">2.3.78</span> mkdir</li></a>
<a href="#t2.3.79"><li class="toc-level toc-level-2"><span class="toc-number">2.3.79</span> msg*</li></a>
<a href="#t2.3.80"><li class="toc-level toc-level-2"><span class="toc-number">2.3.80</span> my</li></a>
<a href="#t2.3.81"><li class="toc-level toc-level-2"><span class="toc-number">2.3.81</span> next</li></a>
<a href="#t2.3.82"><li class="toc-level toc-level-2"><span class="toc-number">2.3.82</span> no</li></a>
<a href="#t2.3.83"><li class="toc-level toc-level-2"><span class="toc-number">2.3.83</span> oct</li></a>
<a href="#t2.3.84"><li class="toc-level toc-level-2"><span class="toc-number">2.3.84</span> open</li></a>
<a href="#t2.3.85"><li class="toc-level toc-level-2"><span class="toc-number">2.3.85</span> opendir</li></a>
<a href="#t2.3.86"><li class="toc-level toc-level-2"><span class="toc-number">2.3.86</span> ord</li></a>
<a href="#t2.3.87"><li class="toc-level toc-level-2"><span class="toc-number">2.3.87</span> our</li></a>
<a href="#t2.3.88"><li class="toc-level toc-level-2"><span class="toc-number">2.3.88</span> pack</li></a>
<a href="#t2.3.89"><li class="toc-level toc-level-2"><span class="toc-number">2.3.89</span> package</li></a>
<a href="#t2.3.90"><li class="toc-level toc-level-2"><span class="toc-number">2.3.90</span> __PACKAGE__</li></a>
<a href="#t2.3.91"><li class="toc-level toc-level-2"><span class="toc-number">2.3.91</span> pipe</li></a>
<a href="#t2.3.92"><li class="toc-level toc-level-2"><span class="toc-number">2.3.92</span> pop</li></a>
<a href="#t2.3.93"><li class="toc-level toc-level-2"><span class="toc-number">2.3.93</span> pos</li></a>
<a href="#t2.3.94"><li class="toc-level toc-level-2"><span class="toc-number">2.3.94</span> print</li></a>
<a href="#t2.3.95"><li class="toc-level toc-level-2"><span class="toc-number">2.3.95</span> printf</li></a>
<a href="#t2.3.96"><li class="toc-level toc-level-2"><span class="toc-number">2.3.96</span> prototype</li></a>
<a href="#t2.3.97"><li class="toc-level toc-level-2"><span class="toc-number">2.3.97</span> push</li></a>
<a href="#t2.3.98"><li class="toc-level toc-level-2"><span class="toc-number">2.3.98</span> quoting</li></a>
<a href="#t2.3.99"><li class="toc-level toc-level-2"><span class="toc-number">2.3.99</span> rand</li></a>
<a href="#t2.3.100"><li class="toc-level toc-level-2"><span class="toc-number">2.3.100</span> read</li></a>
<a href="#t2.3.101"><li class="toc-level toc-level-2"><span class="toc-number">2.3.101</span> readdir</li></a>
<a href="#t2.3.102"><li class="toc-level toc-level-2"><span class="toc-number">2.3.102</span> readline</li></a>
<a href="#t2.3.103"><li class="toc-level toc-level-2"><span class="toc-number">2.3.103</span> readlink</li></a>
<a href="#t2.3.104"><li class="toc-level toc-level-2"><span class="toc-number">2.3.104</span> readpipe</li></a>
<a href="#t2.3.105"><li class="toc-level toc-level-2"><span class="toc-number">2.3.105</span> recv</li></a>
<a href="#t2.3.106"><li class="toc-level toc-level-2"><span class="toc-number">2.3.106</span> redo</li></a>
<a href="#t2.3.107"><li class="toc-level toc-level-2"><span class="toc-number">2.3.107</span> ref</li></a>
<a href="#t2.3.108"><li class="toc-level toc-level-2"><span class="toc-number">2.3.108</span> rename</li></a>
<a href="#t2.3.109"><li class="toc-level toc-level-2"><span class="toc-number">2.3.109</span> requires</li></a>
<a href="#t2.3.110"><li class="toc-level toc-level-2"><span class="toc-number">2.3.110</span> reset</li></a>
<a href="#t2.3.111"><li class="toc-level toc-level-2"><span class="toc-number">2.3.111</span> return</li></a>
<a href="#t2.3.112"><li class="toc-level toc-level-2"><span class="toc-number">2.3.112</span> reverse</li></a>
<a href="#t2.3.113"><li class="toc-level toc-level-2"><span class="toc-number">2.3.113</span> rewinddir</li></a>
<a href="#t2.3.114"><li class="toc-level toc-level-2"><span class="toc-number">2.3.114</span> rindex</li></a>
<a href="#t2.3.115"><li class="toc-level toc-level-2"><span class="toc-number">2.3.115</span> rmdir</li></a>
<a href="#t2.3.116"><li class="toc-level toc-level-2"><span class="toc-number">2.3.116</span> s///</li></a>
<a href="#t2.3.117"><li class="toc-level toc-level-2"><span class="toc-number">2.3.117</span> say</li></a>
<a href="#t2.3.118"><li class="toc-level toc-level-2"><span class="toc-number">2.3.118</span> scalar</li></a>
<a href="#t2.3.119"><li class="toc-level toc-level-2"><span class="toc-number">2.3.119</span> seek</li></a>
<a href="#t2.3.120"><li class="toc-level toc-level-2"><span class="toc-number">2.3.120</span> seekdir</li></a>
<a href="#t2.3.121"><li class="toc-level toc-level-2"><span class="toc-number">2.3.121</span> select</li></a>
<a href="#t2.3.122"><li class="toc-level toc-level-2"><span class="toc-number">2.3.122</span> sem*</li></a>
<a href="#t2.3.123"><li class="toc-level toc-level-2"><span class="toc-number">2.3.123</span> send</li></a>
<a href="#t2.3.124"><li class="toc-level toc-level-2"><span class="toc-number">2.3.124</span> setpgrp</li></a>
<a href="#t2.3.125"><li class="toc-level toc-level-2"><span class="toc-number">2.3.125</span> setpriority</li></a>
<a href="#t2.3.126"><li class="toc-level toc-level-2"><span class="toc-number">2.3.126</span> setsockopt</li></a>
<a href="#t2.3.127"><li class="toc-level toc-level-2"><span class="toc-number">2.3.127</span> shift</li></a>
<a href="#t2.3.128"><li class="toc-level toc-level-2"><span class="toc-number">2.3.128</span> shm*</li></a>
<a href="#t2.3.129"><li class="toc-level toc-level-2"><span class="toc-number">2.3.129</span> shutdown</li></a>
<a href="#t2.3.130"><li class="toc-level toc-level-2"><span class="toc-number">2.3.130</span> sin</li></a>
<a href="#t2.3.131"><li class="toc-level toc-level-2"><span class="toc-number">2.3.131</span> sleep</li></a>
<a href="#t2.3.132"><li class="toc-level toc-level-2"><span class="toc-number">2.3.132</span> sockets</li></a>
<a href="#t2.3.133"><li class="toc-level toc-level-2"><span class="toc-number">2.3.133</span> sort</li></a>
<a href="#t2.3.134"><li class="toc-level toc-level-2"><span class="toc-number">2.3.134</span> splice</li></a>
<a href="#t2.3.135"><li class="toc-level toc-level-2"><span class="toc-number">2.3.135</span> split</li></a>
<a href="#t2.3.136"><li class="toc-level toc-level-2"><span class="toc-number">2.3.136</span> sprintf</li></a>
<a href="#t2.3.137"><li class="toc-level toc-level-2"><span class="toc-number">2.3.137</span> sqrt</li></a>
<a href="#t2.3.138"><li class="toc-level toc-level-2"><span class="toc-number">2.3.138</span> srand</li></a>
<a href="#t2.3.139"><li class="toc-level toc-level-2"><span class="toc-number">2.3.139</span> stat</li></a>
<a href="#t2.3.140"><li class="toc-level toc-level-2"><span class="toc-number">2.3.140</span> state</li></a>
<a href="#t2.3.141"><li class="toc-level toc-level-2"><span class="toc-number">2.3.141</span> study</li></a>
<a href="#t2.3.142"><li class="toc-level toc-level-2"><span class="toc-number">2.3.142</span> sub</li></a>
<a href="#t2.3.143"><li class="toc-level toc-level-2"><span class="toc-number">2.3.143</span> __SUB__</li></a>
<a href="#t2.3.144"><li class="toc-level toc-level-2"><span class="toc-number">2.3.144</span> substr</li></a>
<a href="#t2.3.145"><li class="toc-level toc-level-2"><span class="toc-number">2.3.145</span> symlink</li></a>
<a href="#t2.3.146"><li class="toc-level toc-level-2"><span class="toc-number">2.3.146</span> syscall</li></a>
<a href="#t2.3.147"><li class="toc-level toc-level-2"><span class="toc-number">2.3.147</span> sys*</li></a>
<a href="#t2.3.148"><li class="toc-level toc-level-2"><span class="toc-number">2.3.148</span> system</li></a>
<a href="#t2.3.149"><li class="toc-level toc-level-2"><span class="toc-number">2.3.149</span> syswrite</li></a>
<a href="#t2.3.150"><li class="toc-level toc-level-2"><span class="toc-number">2.3.150</span> tell</li></a>
<a href="#t2.3.151"><li class="toc-level toc-level-2"><span class="toc-number">2.3.151</span> telldir</li></a>
<a href="#t2.3.152"><li class="toc-level toc-level-2"><span class="toc-number">2.3.152</span> tie</li></a>
<a href="#t2.3.153"><li class="toc-level toc-level-2"><span class="toc-number">2.3.153</span> time</li></a>
<a href="#t2.3.154"><li class="toc-level toc-level-2"><span class="toc-number">2.3.154</span> times</li></a>
<a href="#t2.3.155"><li class="toc-level toc-level-2"><span class="toc-number">2.3.155</span> tr///</li></a>
<a href="#t2.3.156"><li class="toc-level toc-level-2"><span class="toc-number">2.3.156</span> truncate</li></a>
<a href="#t2.3.157"><li class="toc-level toc-level-2"><span class="toc-number">2.3.157</span> uc</li></a>
<a href="#t2.3.158"><li class="toc-level toc-level-2"><span class="toc-number">2.3.158</span> ucfirst</li></a>
<a href="#t2.3.159"><li class="toc-level toc-level-2"><span class="toc-number">2.3.159</span> umask</li></a>
<a href="#t2.3.160"><li class="toc-level toc-level-2"><span class="toc-number">2.3.160</span> undef</li></a>
<a href="#t2.3.161"><li class="toc-level toc-level-2"><span class="toc-number">2.3.161</span> unlink</li></a>
<a href="#t2.3.162"><li class="toc-level toc-level-2"><span class="toc-number">2.3.162</span> unpack</li></a>
<a href="#t2.3.163"><li class="toc-level toc-level-2"><span class="toc-number">2.3.163</span> unshift</li></a>
<a href="#t2.3.164"><li class="toc-level toc-level-2"><span class="toc-number">2.3.164</span> untie</li></a>
<a href="#t2.3.165"><li class="toc-level toc-level-2"><span class="toc-number">2.3.165</span> use</li></a>
<a href="#t2.3.166"><li class="toc-level toc-level-2"><span class="toc-number">2.3.166</span> utime</li></a>
<a href="#t2.3.167"><li class="toc-level toc-level-2"><span class="toc-number">2.3.167</span> values</li></a>
<a href="#t2.3.168"><li class="toc-level toc-level-2"><span class="toc-number">2.3.168</span> vec</li></a>
<a href="#t2.3.169"><li class="toc-level toc-level-2"><span class="toc-number">2.3.169</span> wait</li></a>
<a href="#t2.3.170"><li class="toc-level toc-level-2"><span class="toc-number">2.3.170</span> waitpid</li></a>
<a href="#t2.3.171"><li class="toc-level toc-level-2"><span class="toc-number">2.3.171</span> wantarray</li></a>
<a href="#t2.3.172"><li class="toc-level toc-level-2"><span class="toc-number">2.3.172</span> warn</li></a>
<a href="#t2.3.173"><li class="toc-level toc-level-2"><span class="toc-number">2.3.173</span> write</li></a>
<a href="#t2.3.174"><li class="toc-level toc-level-2"><span class="toc-number">2.3.174</span> y///</li></a>
<a href="#t3"><li class="toc-level toc-level-0"><span class="toc-number">3</span> 5to6-perlop</li></a>
<a href="#t3.1"><li class="toc-level toc-level-1"><span class="toc-number">3.1</span> DESCRIPTION</li></a>
<a href="#t3.2"><li class="toc-level toc-level-1"><span class="toc-number">3.2</span> NOTE</li></a>
<a href="#t3.2.1"><li class="toc-level toc-level-2"><span class="toc-number">3.2.1</span> Operator Precedence and Associativity</li></a>
<a href="#t3.2.2"><li class="toc-level toc-level-2"><span class="toc-number">3.2.2</span> Terms and List Operators</li></a>
<a href="#t3.2.3"><li class="toc-level toc-level-2"><span class="toc-number">3.2.3</span> The Arrow Operator</li></a>
<a href="#t3.2.4"><li class="toc-level toc-level-2"><span class="toc-number">3.2.4</span> Auto-increment and Auto-decrement</li></a>
<a href="#t3.2.5"><li class="toc-level toc-level-2"><span class="toc-number">3.2.5</span> Exponentiation</li></a>
<a href="#t3.2.6"><li class="toc-level toc-level-2"><span class="toc-number">3.2.6</span> Symbolic Unary Operators</li></a>
<a href="#t3.2.7"><li class="toc-level toc-level-2"><span class="toc-number">3.2.7</span> Binding Operators</li></a>
<a href="#t3.2.8"><li class="toc-level toc-level-2"><span class="toc-number">3.2.8</span> Multiplicative Operators</li></a>
<a href="#t3.2.9"><li class="toc-level toc-level-2"><span class="toc-number">3.2.9</span> Additive Operators</li></a>
<a href="#t3.2.10"><li class="toc-level toc-level-2"><span class="toc-number">3.2.10</span> Shift Operators</li></a>
<a href="#t3.2.11"><li class="toc-level toc-level-2"><span class="toc-number">3.2.11</span> Named Unary Operators</li></a>
<a href="#t3.2.12"><li class="toc-level toc-level-2"><span class="toc-number">3.2.12</span> Relational Operators</li></a>
<a href="#t3.2.13"><li class="toc-level toc-level-2"><span class="toc-number">3.2.13</span> Equality Operators</li></a>
<a href="#t3.2.14"><li class="toc-level toc-level-2"><span class="toc-number">3.2.14</span> Smartmatch Operator</li></a>
<a href="#t3.2.15"><li class="toc-level toc-level-2"><span class="toc-number">3.2.15</span> Bitwise And</li></a>
<a href="#t3.2.16"><li class="toc-level toc-level-2"><span class="toc-number">3.2.16</span> Bitwise Or and Exclusive Or</li></a>
<a href="#t3.2.17"><li class="toc-level toc-level-2"><span class="toc-number">3.2.17</span> C-style Logical And</li></a>
<a href="#t3.2.18"><li class="toc-level toc-level-2"><span class="toc-number">3.2.18</span> C-style Logical Or</li></a>
<a href="#t3.2.19"><li class="toc-level toc-level-2"><span class="toc-number">3.2.19</span> Logical Defined-Or</li></a>
<a href="#t3.2.20"><li class="toc-level toc-level-2"><span class="toc-number">3.2.20</span> Range Operators</li></a>
<a href="#t3.2.21"><li class="toc-level toc-level-2"><span class="toc-number">3.2.21</span> Conditional Operator</li></a>
<a href="#t3.2.22"><li class="toc-level toc-level-2"><span class="toc-number">3.2.22</span> Assignment Operators</li></a>
<a href="#t3.2.23"><li class="toc-level toc-level-2"><span class="toc-number">3.2.23</span> Comma Operator</li></a>
<a href="#t3.2.24"><li class="toc-level toc-level-2"><span class="toc-number">3.2.24</span> List Operators (Rightward)</li></a>
<a href="#t3.2.25"><li class="toc-level toc-level-2"><span class="toc-number">3.2.25</span> Logical Not</li></a>
<a href="#t3.2.26"><li class="toc-level toc-level-2"><span class="toc-number">3.2.26</span> Logical And</li></a>
<a href="#t3.2.27"><li class="toc-level toc-level-2"><span class="toc-number">3.2.27</span> Logical or and Exclusive Or</li></a>
<a href="#t3.2.28"><li class="toc-level toc-level-2"><span class="toc-number">3.2.28</span> Quote and Quote-like Operators</li></a>
<a href="#t3.2.29"><li class="toc-level toc-level-2"><span class="toc-number">3.2.29</span> I/O Operators</li></a>
<a href="#t3.2.30"><li class="toc-level toc-level-2"><span class="toc-number">3.2.30</span> No-ops</li></a>
<a href="#t3.2.31"><li class="toc-level toc-level-2"><span class="toc-number">3.2.31</span> Bitwise String Operators</li></a>
<a href="#t4"><li class="toc-level toc-level-0"><span class="toc-number">4</span> 5to6-perlsyn</li></a>
<a href="#t4.1"><li class="toc-level toc-level-1"><span class="toc-number">4.1</span> DESCRIPTION</li></a>
<a href="#t4.2"><li class="toc-level toc-level-1"><span class="toc-number">4.2</span> NOTE</li></a>
<a href="#t4.3"><li class="toc-level toc-level-1"><span class="toc-number">4.3</span> Free Form</li></a>
<a href="#t4.3.1"><li class="toc-level toc-level-2"><span class="toc-number">4.3.1</span> Declarations</li></a>
<a href="#t4.3.2"><li class="toc-level toc-level-2"><span class="toc-number">4.3.2</span> Comments</li></a>
<a href="#t4.3.3"><li class="toc-level toc-level-2"><span class="toc-number">4.3.3</span> Truth and Falsehood</li></a>
<a href="#t4.3.4"><li class="toc-level toc-level-2"><span class="toc-number">4.3.4</span> Statement Modifiers</li></a>
<a href="#t4.3.5"><li class="toc-level toc-level-2"><span class="toc-number">4.3.5</span> Compound Statements</li></a>
<a href="#t4.3.6"><li class="toc-level toc-level-2"><span class="toc-number">4.3.6</span> Loop Control</li></a>
<a href="#t4.3.7"><li class="toc-level toc-level-2"><span class="toc-number">4.3.7</span> For Loops</li></a>
<a href="#t4.3.8"><li class="toc-level toc-level-2"><span class="toc-number">4.3.8</span> Foreach Loops</li></a>
<a href="#t4.3.9"><li class="toc-level toc-level-2"><span class="toc-number">4.3.9</span> Switch Statements</li></a>
<a href="#t4.3.10"><li class="toc-level toc-level-2"><span class="toc-number">4.3.10</span> Goto</li></a>
<a href="#t4.3.11"><li class="toc-level toc-level-2"><span class="toc-number">4.3.11</span> The Ellipsis Statement</li></a>
<a href="#t4.3.12"><li class="toc-level toc-level-2"><span class="toc-number">4.3.12</span> PODs: Embedded Documentation</li></a>
<a href="#t5"><li class="toc-level toc-level-0"><span class="toc-number">5</span> 5to6-perlvar</li></a>
<a href="#t5.1"><li class="toc-level toc-level-1"><span class="toc-number">5.1</span> DESCRIPTION</li></a>
<a href="#t5.2"><li class="toc-level toc-level-1"><span class="toc-number">5.2</span> NOTE</li></a>
<a href="#t5.3"><li class="toc-level toc-level-1"><span class="toc-number">5.3</span> SPECIAL VARIABLES</li></a>
<a href="#t5.3.1"><li class="toc-level toc-level-2"><span class="toc-number">5.3.1</span> General Variables</li></a>
<a href="#t5.3.2"><li class="toc-level toc-level-2"><span class="toc-number">5.3.2</span> Variables related to regular expressions</li></a>
<a href="#t5.3.2.1"><li class="toc-level toc-level-3"><span class="toc-number">5.3.2.1</span> Performance issues</li></a>
<a href="#t5.3.3"><li class="toc-level toc-level-2"><span class="toc-number">5.3.3</span> Variables related to filehandles</li></a>
<a href="#t5.3.3.1"><li class="toc-level toc-level-3"><span class="toc-number">5.3.3.1</span> Variables related to formats</li></a>
<a href="#t5.3.4"><li class="toc-level toc-level-2"><span class="toc-number">5.3.4</span> Error Variables</li></a>
<a href="#t5.3.5"><li class="toc-level toc-level-2"><span class="toc-number">5.3.5</span> Variables related to the interpreter state</li></a>
<a href="#t5.3.6"><li class="toc-level toc-level-2"><span class="toc-number">5.3.6</span> Deprecated and removed variables</li></a>
<a href="#t6"><li class="toc-level toc-level-0"><span class="toc-number">6</span> About the Docs</li></a>
<a href="#t6.1"><li class="toc-level toc-level-1"><span class="toc-number">6.1</span> Structure</li></a>
<a href="#t6.2"><li class="toc-level toc-level-1"><span class="toc-number">6.2</span> Generating an HTML version</li></a>
<a href="#t6.3"><li class="toc-level toc-level-1"><span class="toc-number">6.3</span> Contributing</li></a>
<a href="#t6.3.1"><li class="toc-level toc-level-2"><span class="toc-number">6.3.1</span> Adding definitions</li></a>
<a href="#t7"><li class="toc-level toc-level-0"><span class="toc-number">7</span> Classes and Objects</li></a>
<a href="#t7.1"><li class="toc-level toc-level-1"><span class="toc-number">7.1</span> Starting with class</li></a>
<a href="#t7.2"><li class="toc-level toc-level-1"><span class="toc-number">7.2</span> State</li></a>
<a href="#t7.3"><li class="toc-level toc-level-1"><span class="toc-number">7.3</span> Static fields?</li></a>
<a href="#t7.4"><li class="toc-level toc-level-1"><span class="toc-number">7.4</span> Methods</li></a>
<a href="#t7.4.1"><li class="toc-level toc-level-2"><span class="toc-number">7.4.1</span> Private Methods</li></a>
<a href="#t7.5"><li class="toc-level toc-level-1"><span class="toc-number">7.5</span> Constructors</li></a>
<a href="#t7.6"><li class="toc-level toc-level-1"><span class="toc-number">7.6</span> Consuming our class</li></a>
<a href="#t7.7"><li class="toc-level toc-level-1"><span class="toc-number">7.7</span> Inheritance</li></a>
<a href="#t7.7.1"><li class="toc-level toc-level-2"><span class="toc-number">7.7.1</span> Overriding inherited methods</li></a>
<a href="#t7.7.2"><li class="toc-level toc-level-2"><span class="toc-number">7.7.2</span> Multiple inheritance</li></a>
<a href="#t7.7.3"><li class="toc-level toc-level-2"><span class="toc-number">7.7.3</span> The <a name="35"></a> <span class="code">also</span>  declarator</li></a>
<a href="#t7.8"><li class="toc-level toc-level-1"><span class="toc-number">7.8</span> Introspection</li></a>
<a href="#t8"><li class="toc-level toc-level-0"><span class="toc-number">8</span> Concurrency</li></a>
<a href="#t8.1"><li class="toc-level toc-level-1"><span class="toc-number">8.1</span> High-level APIs</li></a>
<a href="#t8.1.1"><li class="toc-level toc-level-2"><span class="toc-number">8.1.1</span> Promises</li></a>
<a href="#t8.1.2"><li class="toc-level toc-level-2"><span class="toc-number">8.1.2</span> Supplies</li></a>
<a href="#t8.1.3"><li class="toc-level toc-level-2"><span class="toc-number">8.1.3</span> Channels</li></a>
<a href="#t8.1.4"><li class="toc-level toc-level-2"><span class="toc-number">8.1.4</span> Proc::Async</li></a>
<a href="#t8.2"><li class="toc-level toc-level-1"><span class="toc-number">8.2</span> Low-level APIs</li></a>
<a href="#t8.2.1"><li class="toc-level toc-level-2"><span class="toc-number">8.2.1</span> Threads</li></a>
<a href="#t8.2.2"><li class="toc-level toc-level-2"><span class="toc-number">8.2.2</span> Schedulers</li></a>
<a href="#t8.2.2.1"><li class="toc-level toc-level-3"><span class="toc-number">8.2.2.1</span> ThreadPoolScheduler</li></a>
<a href="#t8.2.2.2"><li class="toc-level toc-level-3"><span class="toc-number">8.2.2.2</span> CurrentThreadScheduler</li></a>
<a href="#t8.2.3"><li class="toc-level toc-level-2"><span class="toc-number">8.2.3</span> Locks</li></a>
<a href="#t8.3"><li class="toc-level toc-level-1"><span class="toc-number">8.3</span> Safety Concerns</li></a>
<a href="#t9"><li class="toc-level toc-level-0"><span class="toc-number">9</span> Containers</li></a>
<a href="#t9.1"><li class="toc-level toc-level-1"><span class="toc-number">9.1</span> What is a variable?</li></a>
<a href="#t9.2"><li class="toc-level toc-level-1"><span class="toc-number">9.2</span> Scalar containers</li></a>
<a href="#t9.3"><li class="toc-level toc-level-1"><span class="toc-number">9.3</span> Binding</li></a>
<a href="#t9.4"><li class="toc-level toc-level-1"><span class="toc-number">9.4</span> Scalar containers and listy things</li></a>
<a href="#t9.5"><li class="toc-level toc-level-1"><span class="toc-number">9.5</span> Assigning and binding to array variables</li></a>
<a href="#t9.6"><li class="toc-level toc-level-1"><span class="toc-number">9.6</span> Binding to array elements</li></a>
<a href="#t9.7"><li class="toc-level toc-level-1"><span class="toc-number">9.7</span> Flattening, items and containers</li></a>
<a href="#t9.8"><li class="toc-level toc-level-1"><span class="toc-number">9.8</span> Custom containers</li></a>
<a href="#t10"><li class="toc-level toc-level-0"><span class="toc-number">10</span> Contributors</li></a>
<a href="#t10.1"><li class="toc-level toc-level-1"><span class="toc-number">10.1</span> A</li></a>
<a href="#t10.2"><li class="toc-level toc-level-1"><span class="toc-number">10.2</span> B</li></a>
<a href="#t10.3"><li class="toc-level toc-level-1"><span class="toc-number">10.3</span> C</li></a>
<a href="#t10.4"><li class="toc-level toc-level-1"><span class="toc-number">10.4</span> D</li></a>
<a href="#t10.5"><li class="toc-level toc-level-1"><span class="toc-number">10.5</span> E</li></a>
<a href="#t10.6"><li class="toc-level toc-level-1"><span class="toc-number">10.6</span> F</li></a>
<a href="#t10.7"><li class="toc-level toc-level-1"><span class="toc-number">10.7</span> G</li></a>
<a href="#t10.8"><li class="toc-level toc-level-1"><span class="toc-number">10.8</span> H</li></a>
<a href="#t10.9"><li class="toc-level toc-level-1"><span class="toc-number">10.9</span> I</li></a>
<a href="#t10.10"><li class="toc-level toc-level-1"><span class="toc-number">10.10</span> J</li></a>
<a href="#t10.11"><li class="toc-level toc-level-1"><span class="toc-number">10.11</span> K</li></a>
<a href="#t10.12"><li class="toc-level toc-level-1"><span class="toc-number">10.12</span> L</li></a>
<a href="#t10.13"><li class="toc-level toc-level-1"><span class="toc-number">10.13</span> M</li></a>
<a href="#t10.14"><li class="toc-level toc-level-1"><span class="toc-number">10.14</span> N</li></a>
<a href="#t10.15"><li class="toc-level toc-level-1"><span class="toc-number">10.15</span> O</li></a>
<a href="#t10.16"><li class="toc-level toc-level-1"><span class="toc-number">10.16</span> P</li></a>
<a href="#t10.17"><li class="toc-level toc-level-1"><span class="toc-number">10.17</span> Q</li></a>
<a href="#t10.18"><li class="toc-level toc-level-1"><span class="toc-number">10.18</span> R</li></a>
<a href="#t10.19"><li class="toc-level toc-level-1"><span class="toc-number">10.19</span> S</li></a>
<a href="#t10.20"><li class="toc-level toc-level-1"><span class="toc-number">10.20</span> T</li></a>
<a href="#t10.21"><li class="toc-level toc-level-1"><span class="toc-number">10.21</span> U</li></a>
<a href="#t10.22"><li class="toc-level toc-level-1"><span class="toc-number">10.22</span> V</li></a>
<a href="#t10.23"><li class="toc-level toc-level-1"><span class="toc-number">10.23</span> W</li></a>
<a href="#t10.24"><li class="toc-level toc-level-1"><span class="toc-number">10.24</span> X</li></a>
<a href="#t10.25"><li class="toc-level toc-level-1"><span class="toc-number">10.25</span> Y</li></a>
<a href="#t10.26"><li class="toc-level toc-level-1"><span class="toc-number">10.26</span> Z</li></a>
<a href="#t11"><li class="toc-level toc-level-0"><span class="toc-number">11</span> Control Flow</li></a>
<a href="#t11.1"><li class="toc-level toc-level-1"><span class="toc-number">11.1</span> <a name="38"></a>statements</li></a>
<a href="#t11.2"><li class="toc-level toc-level-1"><span class="toc-number">11.2</span> <a name="39"></a>blocks</li></a>
<a href="#t11.3"><li class="toc-level toc-level-1"><span class="toc-number">11.3</span> <a name="40"></a>do</li></a>
<a href="#t11.4"><li class="toc-level toc-level-1"><span class="toc-number">11.4</span> <a name="41"></a>if</li></a>
<a href="#t11.4.1"><li class="toc-level toc-level-2"><span class="toc-number">11.4.1</span> <a name="44"></a>else/elsif</li></a>
<a href="#t11.4.2"><li class="toc-level toc-level-2"><span class="toc-number">11.4.2</span> <a name="45"></a>unless</li></a>
<a href="#t11.4.3"><li class="toc-level toc-level-2"><span class="toc-number">11.4.3</span> <a name="46"></a>with, orwith, without</li></a>
<a href="#t11.5"><li class="toc-level toc-level-1"><span class="toc-number">11.5</span> <a name="47"></a>for</li></a>
<a href="#t11.6"><li class="toc-level toc-level-1"><span class="toc-number">11.6</span> <a name="48"></a>gather/take</li></a>
<a href="#t11.7"><li class="toc-level toc-level-1"><span class="toc-number">11.7</span> <a name="51"></a>given</li></a>
<a href="#t11.7.1"><li class="toc-level toc-level-2"><span class="toc-number">11.7.1</span> <a name="52"></a>default and when</li></a>
<a href="#t11.7.2"><li class="toc-level toc-level-2"><span class="toc-number">11.7.2</span> <a name="53"></a>proceed and succeed</li></a>
<a href="#t11.7.3"><li class="toc-level toc-level-2"><span class="toc-number">11.7.3</span> <a name="54"></a>given as a statement</li></a>
<a href="#t11.8"><li class="toc-level toc-level-1"><span class="toc-number">11.8</span> <a name="55"></a>loop</li></a>
<a href="#t11.9"><li class="toc-level toc-level-1"><span class="toc-number">11.9</span> <a name="56"></a>while, until</li></a>
<a href="#t11.10"><li class="toc-level toc-level-1"><span class="toc-number">11.10</span> <a name="57"></a>repeat/while, repeat/until</li></a>
<a href="#t11.11"><li class="toc-level toc-level-1"><span class="toc-number">11.11</span> <a name="58"></a>return</li></a>
<a href="#t11.12"><li class="toc-level toc-level-1"><span class="toc-number">11.12</span> <a name="59"></a>return-rw</li></a>
<a href="#t11.13"><li class="toc-level toc-level-1"><span class="toc-number">11.13</span> <a name="60"></a>fail</li></a>
<a href="#t11.14"><li class="toc-level toc-level-1"><span class="toc-number">11.14</span> <a name="61"></a>once</li></a>
<a href="#t11.15"><li class="toc-level toc-level-1"><span class="toc-number">11.15</span> <a name="62"></a>quietly</li></a>
<a href="#t11.16"><li class="toc-level toc-level-1"><span class="toc-number">11.16</span> LABELs</li></a>
<a href="#t11.17"><li class="toc-level toc-level-1"><span class="toc-number">11.17</span> <a name="63"></a>next</li></a>
<a href="#t11.18"><li class="toc-level toc-level-1"><span class="toc-number">11.18</span> <a name="64"></a>last</li></a>
<a href="#t11.19"><li class="toc-level toc-level-1"><span class="toc-number">11.19</span> <a name="65"></a>redo</li></a>
<a href="#t11.20"><li class="toc-level toc-level-1"><span class="toc-number">11.20</span> <a name="66"></a>samewith</li></a>
<a href="#t12"><li class="toc-level toc-level-0"><span class="toc-number">12</span> Exceptions</li></a>
<a href="#t12.1"><li class="toc-level toc-level-1"><span class="toc-number">12.1</span> Ad-hoc exceptions</li></a>
<a href="#t12.2"><li class="toc-level toc-level-1"><span class="toc-number">12.2</span> Typed exceptions</li></a>
<a href="#t12.3"><li class="toc-level toc-level-1"><span class="toc-number">12.3</span> Catching exceptions</li></a>
<a href="#t12.4"><li class="toc-level toc-level-1"><span class="toc-number">12.4</span> <a name="43"></a> <span class="code">try</span>  blocks</li></a>
<a href="#t12.5"><li class="toc-level toc-level-1"><span class="toc-number">12.5</span> Throwing exceptions</li></a>
<a href="#t12.6"><li class="toc-level toc-level-1"><span class="toc-number">12.6</span> Resuming of Exceptions</li></a>
<a href="#t12.7"><li class="toc-level toc-level-1"><span class="toc-number">12.7</span> Uncaught Exceptions</li></a>
<a href="#t13"><li class="toc-level toc-level-0"><span class="toc-number">13</span> FAQ</li></a>
<a href="#t13.1"><li class="toc-level toc-level-1"><span class="toc-number">13.1</span> General</li></a>
<a href="#t13.1.1"><li class="toc-level toc-level-2"><span class="toc-number">13.1.1</span> What's the difference between Rakudo and Perl 6?</li></a>
<a href="#t13.1.2"><li class="toc-level toc-level-2"><span class="toc-number">13.1.2</span> Is there going to be a Perl 6 version 6.0.0?</li></a>
<a href="#t13.1.3"><li class="toc-level toc-level-2"><span class="toc-number">13.1.3</span> As a Perl 6 beginner what should I install?</li></a>
<a href="#t13.1.4"><li class="toc-level toc-level-2"><span class="toc-number">13.1.4</span> As an intermediate to advanced user I want to track Rakudo development.</li></a>
<a href="#t13.1.5"><li class="toc-level toc-level-2"><span class="toc-number">13.1.5</span> Where can I find good documentation on Perl 6?</li></a>
<a href="#t13.1.6"><li class="toc-level toc-level-2"><span class="toc-number">13.1.6</span> What is the Perl 6 spec?</li></a>
<a href="#t13.1.7"><li class="toc-level toc-level-2"><span class="toc-number">13.1.7</span> Is there a glossary of Perl 6 related terms?</li></a>
<a href="#t13.1.8"><li class="toc-level toc-level-2"><span class="toc-number">13.1.8</span> I'm a Perl 5 programmer. Where is a list of differences between Perl 5 and 6?</li></a>
<a href="#t13.2"><li class="toc-level toc-level-1"><span class="toc-number">13.2</span> Modules</li></a>
<a href="#t13.2.1"><li class="toc-level toc-level-2"><span class="toc-number">13.2.1</span> Is there a CPAN for Perl 6?</li></a>
<a href="#t13.2.2"><li class="toc-level toc-level-2"><span class="toc-number">13.2.2</span> Can I use Perl 5 modules from Perl 6?</li></a>
<a href="#t13.2.3"><li class="toc-level toc-level-2"><span class="toc-number">13.2.3</span> Can I use C and C++ from Perl 6?</li></a>
<a href="#t13.2.4"><li class="toc-level toc-level-2"><span class="toc-number">13.2.4</span> Nativecall can't find libfoo.so and I only have libfoo.so.1.2!</li></a>
<a href="#t13.2.5"><li class="toc-level toc-level-2"><span class="toc-number">13.2.5</span> Where have all the traditional UNIX library functions gone?</li></a>
<a href="#t13.2.6"><li class="toc-level toc-level-2"><span class="toc-number">13.2.6</span> Does Rakudo have a core standard library?</li></a>
<a href="#t13.2.7"><li class="toc-level toc-level-2"><span class="toc-number">13.2.7</span> Is there something like B::Deparse/how can I get hold of the AST?</li></a>
<a href="#t13.3"><li class="toc-level toc-level-1"><span class="toc-number">13.3</span> Language Features</li></a>
<a href="#t13.3.1"><li class="toc-level toc-level-2"><span class="toc-number">13.3.1</span> How can I dump Perl 6 data structures (like Perl 5 Data::Dumper and similar)?</li></a>
<a href="#t13.3.2"><li class="toc-level toc-level-2"><span class="toc-number">13.3.2</span> How can I get command line history in the Perl 6 prompt (REPL)?</li></a>
<a href="#t13.3.3"><li class="toc-level toc-level-2"><span class="toc-number">13.3.3</span> Why is the Rakudo compiler sometimes more apologetic?</li></a>
<a href="#t13.3.4"><li class="toc-level toc-level-2"><span class="toc-number">13.3.4</span> What is <span class="code">(Any)</span>?</li></a>
<a href="#t13.3.5"><li class="toc-level toc-level-2"><span class="toc-number">13.3.5</span> What is <span class="code">so</span>?</li></a>
<a href="#t13.3.6"><li class="toc-level toc-level-2"><span class="toc-number">13.3.6</span> What are those <span class="code">:D</span> and <span class="code">:U</span> things in signatures?</li></a>
<a href="#t13.3.7"><li class="toc-level toc-level-2"><span class="toc-number">13.3.7</span> What is the <span class="code">--> </span> thing in the signature?</li></a>
<a href="#t13.3.8"><li class="toc-level toc-level-2"><span class="toc-number">13.3.8</span> How can I extract the values from a Junction?</li></a>
<a href="#t13.3.9"><li class="toc-level toc-level-2"><span class="toc-number">13.3.9</span> If Str is immutable, how does <span class="code">s///</span> work? if Int is immutable, how does <span class="code">$i++</span> work?</li></a>
<a href="#t13.3.10"><li class="toc-level toc-level-2"><span class="toc-number">13.3.10</span> What's up with array references and automatic dereferencing? Do I still need the <span class="code">@</span> sigil?</li></a>
<a href="#t13.3.11"><li class="toc-level toc-level-2"><span class="toc-number">13.3.11</span> Why sigils? Couldn't you do without them?</li></a>
<a href="#t13.3.12"><li class="toc-level toc-level-2"><span class="toc-number">13.3.12</span> "Type Str does not support associative indexing."</li></a>
<a href="#t13.3.13"><li class="toc-level toc-level-2"><span class="toc-number">13.3.13</span> Does Perl 6 have coroutines? What about <span class="code">yield</span>?</li></a>
<a href="#t13.3.14"><li class="toc-level toc-level-2"><span class="toc-number">13.3.14</span> Why can't I initialize private attributes from the new method, and how can I fix this?</li></a>
<a href="#t13.3.15"><li class="toc-level toc-level-2"><span class="toc-number">13.3.15</span> How and why do <span class="code">say</span>, <span class="code">put</span> and <span class="code">print</span> differ?</li></a>
<a href="#t13.3.16"><li class="toc-level toc-level-2"><span class="toc-number">13.3.16</span> What's the difference between <span class="code">token</span> and <span class="code">rule</span> ?</li></a>
<a href="#t13.3.17"><li class="toc-level toc-level-2"><span class="toc-number">13.3.17</span> What's the difference between <span class="code">die</span> and <span class="code">fail</span>?</li></a>
<a href="#t13.3.18"><li class="toc-level toc-level-2"><span class="toc-number">13.3.18</span> Why is <span class="code">wantarray</span> or <span class="code">want</span> gone? Can I return different things in different contexts?</li></a>
<a href="#t13.3.19"><li class="toc-level toc-level-2"><span class="toc-number">13.3.19</span> What's the difference between <span class="code">Pointer</span> and <span class="code">OpaquePointer</span>?</li></a>
<a href="#t13.4"><li class="toc-level toc-level-1"><span class="toc-number">13.4</span> Perl 6 Implementation</li></a>
<a href="#t13.4.1"><li class="toc-level toc-level-2"><span class="toc-number">13.4.1</span> What Perl 6 Implementations are available?</li></a>
<a href="#t13.4.2"><li class="toc-level toc-level-2"><span class="toc-number">13.4.2</span> What language is Rakudo written in?</li></a>
<a href="#t13.4.3"><li class="toc-level toc-level-2"><span class="toc-number">13.4.3</span> What language is NQP written in?</li></a>
<a href="#t13.5"><li class="toc-level toc-level-1"><span class="toc-number">13.5</span> Meta Questions and Advocacy</li></a>
<a href="#t13.5.1"><li class="toc-level toc-level-2"><span class="toc-number">13.5.1</span> When will Perl 6 be ready? Is it ready now?</li></a>
<a href="#t13.5.2"><li class="toc-level toc-level-2"><span class="toc-number">13.5.2</span> Why should I learn Perl 6? What's so great about it?</li></a>
<a href="#t13.5.3"><li class="toc-level toc-level-2"><span class="toc-number">13.5.3</span> Is Perl 6 fast enough for me?</li></a>
<a href="#t14"><li class="toc-level toc-level-0"><span class="toc-number">14</span> Functions</li></a>
<a href="#t14.1"><li class="toc-level toc-level-1"><span class="toc-number">14.1</span> Defining/Creating/Using Functions</li></a>
<a href="#t14.1.1"><li class="toc-level toc-level-2"><span class="toc-number">14.1.1</span> <a name="67"></a>Subroutines</li></a>
<a href="#t14.1.2"><li class="toc-level toc-level-2"><span class="toc-number">14.1.2</span> <a name="68"></a>Blocks and Lambdas</li></a>
<a href="#t14.1.3"><li class="toc-level toc-level-2"><span class="toc-number">14.1.3</span> Signatures</li></a>
<a href="#t14.1.3.1"><li class="toc-level toc-level-3"><span class="toc-number">14.1.3.1</span> Automatic Signatures</li></a>
<a href="#t14.1.4"><li class="toc-level toc-level-2"><span class="toc-number">14.1.4</span> Arguments <a name="71"></a></li></a>
<a href="#t14.1.5"><li class="toc-level toc-level-2"><span class="toc-number">14.1.5</span> <a name="72"></a>Multi-dispatch</li></a>
<a href="#t14.1.5.1"><li class="toc-level toc-level-3"><span class="toc-number">14.1.5.1</span> <a name="73"></a>proto</li></a>
<a href="#t14.2"><li class="toc-level toc-level-1"><span class="toc-number">14.2</span> Conventions and Idioms</li></a>
<a href="#t14.2.1"><li class="toc-level toc-level-2"><span class="toc-number">14.2.1</span> Slurpy Conventions</li></a>
<a href="#t14.3"><li class="toc-level toc-level-1"><span class="toc-number">14.3</span> Functions are First-Class Objects</li></a>
<a href="#t14.3.1"><li class="toc-level toc-level-2"><span class="toc-number">14.3.1</span> <!--  -->Infix Form</li></a>
<a href="#t14.3.2"><li class="toc-level toc-level-2"><span class="toc-number">14.3.2</span> Closures</li></a>
<a href="#t14.3.3"><li class="toc-level toc-level-2"><span class="toc-number">14.3.3</span> Routines</li></a>
<a href="#t14.4"><li class="toc-level toc-level-1"><span class="toc-number">14.4</span> Defining Operators</li></a>
<a href="#t14.4.1"><li class="toc-level toc-level-2"><span class="toc-number">14.4.1</span> Precedence</li></a>
<a href="#t14.4.2"><li class="toc-level toc-level-2"><span class="toc-number">14.4.2</span> Associativity</li></a>
<a href="#t14.5"><li class="toc-level toc-level-1"><span class="toc-number">14.5</span> Traits</li></a>
<a href="#t14.6"><li class="toc-level toc-level-1"><span class="toc-number">14.6</span> Re-dispatching</li></a>
<a href="#t14.7"><li class="toc-level toc-level-1"><span class="toc-number">14.7</span> Coercion Types</li></a>
<a href="#t14.8"><li class="toc-level toc-level-1"><span class="toc-number">14.8</span> <span class="code">sub MAIN</span></li></a>
<a href="#t15"><li class="toc-level toc-level-0"><span class="toc-number">15</span> Glossary</li></a>
<a href="#t15.1"><li class="toc-level toc-level-1"><span class="toc-number">15.1</span> Abstract Class <a name="74"></a></li></a>
<a href="#t15.2"><li class="toc-level toc-level-1"><span class="toc-number">15.2</span> Advent Calendar <a name="75"></a></li></a>
<a href="#t15.3"><li class="toc-level toc-level-1"><span class="toc-number">15.3</span> Adverb <a name="76"></a></li></a>
<a href="#t15.4"><li class="toc-level toc-level-1"><span class="toc-number">15.4</span> Adverbial Pair <a name="77"></a></li></a>
<a href="#t15.5"><li class="toc-level toc-level-1"><span class="toc-number">15.5</span> Allomorph <a name="78"></a></li></a>
<a href="#t15.6"><li class="toc-level toc-level-1"><span class="toc-number">15.6</span> Anonymous <a name="79"></a></li></a>
<a href="#t15.7"><li class="toc-level toc-level-1"><span class="toc-number">15.7</span> API <a name="80"></a></li></a>
<a href="#t15.8"><li class="toc-level toc-level-1"><span class="toc-number">15.8</span> Apocalypse <a name="81"></a></li></a>
<a href="#t15.9"><li class="toc-level toc-level-1"><span class="toc-number">15.9</span> Arity <a name="82"></a></li></a>
<a href="#t15.10"><li class="toc-level toc-level-1"><span class="toc-number">15.10</span> AST <a name="83"></a></li></a>
<a href="#t15.11"><li class="toc-level toc-level-1"><span class="toc-number">15.11</span> Autothreading <a name="84"></a></li></a>
<a href="#t15.12"><li class="toc-level toc-level-1"><span class="toc-number">15.12</span> block <a name="85"></a></li></a>
<a href="#t15.13"><li class="toc-level toc-level-1"><span class="toc-number">15.13</span> Boolean <a name="86"></a></li></a>
<a href="#t15.14"><li class="toc-level toc-level-1"><span class="toc-number">15.14</span> bytecode <a name="87"></a></li></a>
<a href="#t15.15"><li class="toc-level toc-level-1"><span class="toc-number">15.15</span> Camelia <a name="88"></a></li></a>
<a href="#t15.16"><li class="toc-level toc-level-1"><span class="toc-number">15.16</span> Class <a name="89"></a></li></a>
<a href="#t15.17"><li class="toc-level toc-level-1"><span class="toc-number">15.17</span> Colon Pair and Colon List <a name="90"></a> <a name="91"></a></li></a>
<a href="#t15.18"><li class="toc-level toc-level-1"><span class="toc-number">15.18</span> Damian Conway</li></a>
<a href="#t15.19"><li class="toc-level toc-level-1"><span class="toc-number">15.19</span> Exegesis <a name="92"></a></li></a>
<a href="#t15.20"><li class="toc-level toc-level-1"><span class="toc-number">15.20</span> False <a name="93"></a></li></a>
<a href="#t15.21"><li class="toc-level toc-level-1"><span class="toc-number">15.21</span> fiddly <a name="94"></a></li></a>
<a href="#t15.22"><li class="toc-level toc-level-1"><span class="toc-number">15.22</span> handles <a name="95"></a></li></a>
<a href="#t15.23"><li class="toc-level toc-level-1"><span class="toc-number">15.23</span> iffy <a name="96"></a></li></a>
<a href="#t15.24"><li class="toc-level toc-level-1"><span class="toc-number">15.24</span> Instance <a name="97"></a></li></a>
<a href="#t15.25"><li class="toc-level toc-level-1"><span class="toc-number">15.25</span> Interface <a name="98"></a></li></a>
<a href="#t15.26"><li class="toc-level toc-level-1"><span class="toc-number">15.26</span> IRC <a name="101"></a></li></a>
<a href="#t15.26.1"><li class="toc-level toc-level-2"><span class="toc-number">15.26.1</span> camelia <a name="104"></a></li></a>
<a href="#t15.26.2"><li class="toc-level toc-level-2"><span class="toc-number">15.26.2</span> dalek <a name="105"></a></li></a>
<a href="#t15.26.3"><li class="toc-level toc-level-2"><span class="toc-number">15.26.3</span> yoleaux <a name="106"></a></li></a>
<a href="#t15.26.3.1"><li class="toc-level toc-level-3"><span class="toc-number">15.26.3.1</span> .tell</li></a>
<a href="#t15.26.3.2"><li class="toc-level toc-level-3"><span class="toc-number">15.26.3.2</span> .u</li></a>
<a href="#t15.27"><li class="toc-level toc-level-1"><span class="toc-number">15.27</span> IRC Lingo</li></a>
<a href="#t15.27.1"><li class="toc-level toc-level-2"><span class="toc-number">15.27.1</span> ALAP <a name="108"></a></li></a>
<a href="#t15.27.2"><li class="toc-level toc-level-2"><span class="toc-number">15.27.2</span> autopun <a name="109"></a></li></a>
<a href="#t15.27.3"><li class="toc-level toc-level-2"><span class="toc-number">15.27.3</span> backlog <a name="110"></a></li></a>
<a href="#t15.27.4"><li class="toc-level toc-level-2"><span class="toc-number">15.27.4</span> Bot <a name="111"></a></li></a>
<a href="#t15.27.5"><li class="toc-level toc-level-2"><span class="toc-number">15.27.5</span> DWIM <a name="113"></a></li></a>
<a href="#t15.27.6"><li class="toc-level toc-level-2"><span class="toc-number">15.27.6</span> flap <a name="114"></a></li></a>
<a href="#t15.27.7"><li class="toc-level toc-level-2"><span class="toc-number">15.27.7</span> fossil <a name="115"></a></li></a>
<a href="#t15.27.8"><li class="toc-level toc-level-2"><span class="toc-number">15.27.8</span> FSVO <a name="116"></a></li></a>
<a href="#t15.27.9"><li class="toc-level toc-level-2"><span class="toc-number">15.27.9</span> FTFY <a name="117"></a></li></a>
<a href="#t15.27.10"><li class="toc-level toc-level-2"><span class="toc-number">15.27.10</span> IWBN <a name="119"></a></li></a>
<a href="#t15.27.11"><li class="toc-level toc-level-2"><span class="toc-number">15.27.11</span> LHF <a name="120"></a></li></a>
<a href="#t15.27.12"><li class="toc-level toc-level-2"><span class="toc-number">15.27.12</span> LTA <a name="121"></a></li></a>
<a href="#t15.27.13"><li class="toc-level toc-level-2"><span class="toc-number">15.27.13</span> NST <a name="124"></a></li></a>
<a href="#t15.27.14"><li class="toc-level toc-level-2"><span class="toc-number">15.27.14</span> Opt <a name="126"></a></li></a>
<a href="#t15.27.15"><li class="toc-level toc-level-2"><span class="toc-number">15.27.15</span> PB <a name="127"></a></li></a>
<a href="#t15.27.16"><li class="toc-level toc-level-2"><span class="toc-number">15.27.16</span> PBP <a name="128"></a></li></a>
<a href="#t15.27.17"><li class="toc-level toc-level-2"><span class="toc-number">15.27.17</span> PR <a name="130"></a></li></a>
<a href="#t15.27.18"><li class="toc-level toc-level-2"><span class="toc-number">15.27.18</span> P5 <a name="131"></a></li></a>
<a href="#t15.27.19"><li class="toc-level toc-level-2"><span class="toc-number">15.27.19</span> P6 <a name="132"></a></li></a>
<a href="#t15.27.20"><li class="toc-level toc-level-2"><span class="toc-number">15.27.20</span> RSN <a name="133"></a></li></a>
<a href="#t15.27.21"><li class="toc-level toc-level-2"><span class="toc-number">15.27.21</span> RT <a name="135"></a></li></a>
<a href="#t15.27.22"><li class="toc-level toc-level-2"><span class="toc-number">15.27.22</span> Thunk <a name="136"></a></li></a>
<a href="#t15.27.23"><li class="toc-level toc-level-2"><span class="toc-number">15.27.23</span> TIMTOWTDI <a name="138"></a></li></a>
<a href="#t15.27.24"><li class="toc-level toc-level-2"><span class="toc-number">15.27.24</span> TMI <a name="139"></a></li></a>
<a href="#t15.27.25"><li class="toc-level toc-level-2"><span class="toc-number">15.27.25</span> TMTOWTDI <a name="140"></a></li></a>
<a href="#t15.27.26"><li class="toc-level toc-level-2"><span class="toc-number">15.27.26</span> UGT <a name="141"></a></li></a>
<a href="#t15.27.27"><li class="toc-level toc-level-2"><span class="toc-number">15.27.27</span> WFM <a name="143"></a></li></a>
<a href="#t15.27.28"><li class="toc-level toc-level-2"><span class="toc-number">15.27.28</span> WIP <a name="144"></a></li></a>
<a href="#t15.27.29"><li class="toc-level toc-level-2"><span class="toc-number">15.27.29</span> WP <a name="145"></a></li></a>
<a href="#t15.27.30"><li class="toc-level toc-level-2"><span class="toc-number">15.27.30</span> WW <a name="146"></a></li></a>
<a href="#t15.28"><li class="toc-level toc-level-1"><span class="toc-number">15.28</span> Larry Wall</li></a>
<a href="#t15.29"><li class="toc-level toc-level-1"><span class="toc-number">15.29</span> Lexing <a name="147"></a></li></a>
<a href="#t15.30"><li class="toc-level toc-level-1"><span class="toc-number">15.30</span> Literal <a name="148"></a></li></a>
<a href="#t15.31"><li class="toc-level toc-level-1"><span class="toc-number">15.31</span> lvalue <a name="149"></a></li></a>
<a href="#t15.32"><li class="toc-level toc-level-1"><span class="toc-number">15.32</span> machine code <a name="150"></a></li></a>
<a href="#t15.33"><li class="toc-level toc-level-1"><span class="toc-number">15.33</span> Mainline <a name="151"></a></li></a>
<a href="#t15.34"><li class="toc-level toc-level-1"><span class="toc-number">15.34</span> MoarVM <a name="152"></a></li></a>
<a href="#t15.35"><li class="toc-level toc-level-1"><span class="toc-number">15.35</span> Multi-Dispatch <a name="153"></a></li></a>
<a href="#t15.36"><li class="toc-level toc-level-1"><span class="toc-number">15.36</span> multi-method <a name="154"></a></li></a>
<a href="#t15.37"><li class="toc-level toc-level-1"><span class="toc-number">15.37</span> Niecza <a name="155"></a></li></a>
<a href="#t15.38"><li class="toc-level toc-level-1"><span class="toc-number">15.38</span> Not Quite Perl <a name="156"></a></li></a>
<a href="#t15.39"><li class="toc-level toc-level-1"><span class="toc-number">15.39</span> NQP <a name="157"></a></li></a>
<a href="#t15.40"><li class="toc-level toc-level-1"><span class="toc-number">15.40</span> NYI <a name="158"></a></li></a>
<a href="#t15.41"><li class="toc-level toc-level-1"><span class="toc-number">15.41</span> OOP <a name="159"></a></li></a>
<a href="#t15.42"><li class="toc-level toc-level-1"><span class="toc-number">15.42</span> opcode <a name="160"></a></li></a>
<a href="#t15.43"><li class="toc-level toc-level-1"><span class="toc-number">15.43</span> Operator <a name="161"></a></li></a>
<a href="#t15.44"><li class="toc-level toc-level-1"><span class="toc-number">15.44</span> OS <a name="162"></a></li></a>
<a href="#t15.45"><li class="toc-level toc-level-1"><span class="toc-number">15.45</span> Parse Tree <a name="163"></a></li></a>
<a href="#t15.46"><li class="toc-level toc-level-1"><span class="toc-number">15.46</span> Parameter <a name="164"></a></li></a>
<a href="#t15.47"><li class="toc-level toc-level-1"><span class="toc-number">15.47</span> Parrot <a name="168"></a></li></a>
<a href="#t15.48"><li class="toc-level toc-level-1"><span class="toc-number">15.48</span> PAST <a name="169"></a></li></a>
<a href="#t15.49"><li class="toc-level toc-level-1"><span class="toc-number">15.49</span> perl <a name="171"></a></li></a>
<a href="#t15.50"><li class="toc-level toc-level-1"><span class="toc-number">15.50</span> Perl <a name="172"></a></li></a>
<a href="#t15.51"><li class="toc-level toc-level-1"><span class="toc-number">15.51</span> Perl Community <a name="173"></a></li></a>
<a href="#t15.52"><li class="toc-level toc-level-1"><span class="toc-number">15.52</span> PERL <a name="174"></a></li></a>
<a href="#t15.53"><li class="toc-level toc-level-1"><span class="toc-number">15.53</span> POD <a name="175"></a></li></a>
<a href="#t15.54"><li class="toc-level toc-level-1"><span class="toc-number">15.54</span> Property</li></a>
<a href="#t15.55"><li class="toc-level toc-level-1"><span class="toc-number">15.55</span> Pull Request <a name="176"></a></li></a>
<a href="#t15.56"><li class="toc-level toc-level-1"><span class="toc-number">15.56</span> pugs <a name="177"></a></li></a>
<a href="#t15.57"><li class="toc-level toc-level-1"><span class="toc-number">15.57</span> QAST <a name="178"></a></li></a>
<a href="#t15.58"><li class="toc-level toc-level-1"><span class="toc-number">15.58</span> Rakudo <a name="179"></a></li></a>
<a href="#t15.59"><li class="toc-level toc-level-1"><span class="toc-number">15.59</span> Regular Expression</li></a>
<a href="#t15.60"><li class="toc-level toc-level-1"><span class="toc-number">15.60</span> regex <a name="180"></a></li></a>
<a href="#t15.61"><li class="toc-level toc-level-1"><span class="toc-number">15.61</span> Repository <a name="181"></a></li></a>
<a href="#t15.62"><li class="toc-level toc-level-1"><span class="toc-number">15.62</span> roast <a name="182"></a></li></a>
<a href="#t15.63"><li class="toc-level toc-level-1"><span class="toc-number">15.63</span> rule <a name="183"></a></li></a>
<a href="#t15.64"><li class="toc-level toc-level-1"><span class="toc-number">15.64</span> rvalue <a name="184"></a></li></a>
<a href="#t15.65"><li class="toc-level toc-level-1"><span class="toc-number">15.65</span> Sigil <a name="185"></a></li></a>
<a href="#t15.66"><li class="toc-level toc-level-1"><span class="toc-number">15.66</span> Sigilless Variable <a name="186"></a></li></a>
<a href="#t15.67"><li class="toc-level toc-level-1"><span class="toc-number">15.67</span> Spesh <a name="187"></a></li></a>
<a href="#t15.68"><li class="toc-level toc-level-1"><span class="toc-number">15.68</span> STD <a name="188"></a></li></a>
<a href="#t15.69"><li class="toc-level toc-level-1"><span class="toc-number">15.69</span> Stub <a name="189"></a></li></a>
<a href="#t15.70"><li class="toc-level toc-level-1"><span class="toc-number">15.70</span> Symbol <a name="190"></a></li></a>
<a href="#t15.71"><li class="toc-level toc-level-1"><span class="toc-number">15.71</span> Synopsis <a name="191"></a></li></a>
<a href="#t15.72"><li class="toc-level toc-level-1"><span class="toc-number">15.72</span> Syntax Analysis <a name="192"></a></li></a>
<a href="#t15.73"><li class="toc-level toc-level-1"><span class="toc-number">15.73</span> test suite <a name="193"></a></li></a>
<a href="#t15.74"><li class="toc-level toc-level-1"><span class="toc-number">15.74</span> Texas operator <a name="194"></a></li></a>
<a href="#t15.75"><li class="toc-level toc-level-1"><span class="toc-number">15.75</span> TheDamian</li></a>
<a href="#t15.76"><li class="toc-level toc-level-1"><span class="toc-number">15.76</span> TimToady</li></a>
<a href="#t15.77"><li class="toc-level toc-level-1"><span class="toc-number">15.77</span> True <a name="195"></a></li></a>
<a href="#t15.78"><li class="toc-level toc-level-1"><span class="toc-number">15.78</span> value <a name="196"></a></li></a>
<a href="#t15.79"><li class="toc-level toc-level-1"><span class="toc-number">15.79</span> Variable <a name="197"></a></li></a>
<a href="#t15.80"><li class="toc-level toc-level-1"><span class="toc-number">15.80</span> Variable Interpolation <a name="198"></a></li></a>
<a href="#t15.81"><li class="toc-level toc-level-1"><span class="toc-number">15.81</span> Virtual Machine <a name="199"></a></li></a>
<a href="#t15.82"><li class="toc-level toc-level-1"><span class="toc-number">15.82</span> whitespace <a name="200"></a></li></a>
<a href="#t15.83"><li class="toc-level toc-level-1"><span class="toc-number">15.83</span> 6model <a name="201"></a></li></a>
<a href="#t16"><li class="toc-level toc-level-0"><span class="toc-number">16</span> Grammars</li></a>
<a href="#t16.1"><li class="toc-level toc-level-1"><span class="toc-number">16.1</span> <a name="112"></a>Named Regexes</li></a>
<a href="#t16.2"><li class="toc-level toc-level-1"><span class="toc-number">16.2</span> <a name="118"></a>Creating Grammars</li></a>
<a href="#t16.2.1"><li class="toc-level toc-level-2"><span class="toc-number">16.2.1</span> Protoregexes</li></a>
<a href="#t16.2.2"><li class="toc-level toc-level-2"><span class="toc-number">16.2.2</span> Special Tokens</li></a>
<a href="#t16.2.2.1"><li class="toc-level toc-level-3"><span class="toc-number">16.2.2.1</span> <span class="code">TOP</span></li></a>
<a href="#t16.2.2.2"><li class="toc-level toc-level-3"><span class="toc-number">16.2.2.2</span> <span class="code">ws</span></li></a>
<a href="#t16.2.2.3"><li class="toc-level toc-level-3"><span class="toc-number">16.2.2.3</span> Always Succeed Assertion</li></a>
<a href="#t16.2.3"><li class="toc-level toc-level-2"><span class="toc-number">16.2.3</span> Methods in Grammar</li></a>
<a href="#t16.3"><li class="toc-level toc-level-1"><span class="toc-number">16.3</span> Action Objects <a name="142"></a></li></a>
<a href="#t17"><li class="toc-level toc-level-0"><span class="toc-number">17</span> Input/Output</li></a>
<a href="#t17.1"><li class="toc-level toc-level-1"><span class="toc-number">17.1</span> Reading from files</li></a>
<a href="#t17.1.1"><li class="toc-level toc-level-2"><span class="toc-number">17.1.1</span> Line by line</li></a>
<a href="#t17.2"><li class="toc-level toc-level-1"><span class="toc-number">17.2</span> Writing to files</li></a>
<a href="#t17.3"><li class="toc-level toc-level-1"><span class="toc-number">17.3</span> Checking files and directories</li></a>
<a href="#t17.4"><li class="toc-level toc-level-1"><span class="toc-number">17.4</span> Getting a directory listing</li></a>
<a href="#t17.5"><li class="toc-level toc-level-1"><span class="toc-number">17.5</span> Creating and removing directories</li></a>
<a href="#t18"><li class="toc-level toc-level-0"><span class="toc-number">18</span> Inter-Process Communication</li></a>
<a href="#t18.1"><li class="toc-level toc-level-1"><span class="toc-number">18.1</span> <a name="166"></a>running</li></a>
<a href="#t18.2"><li class="toc-level toc-level-1"><span class="toc-number">18.2</span> <a name="167"></a>proc</li></a>
<a href="#t18.3"><li class="toc-level toc-level-1"><span class="toc-number">18.3</span> <a name="170"></a>async</li></a>
<a href="#t19"><li class="toc-level toc-level-0"><span class="toc-number">19</span> Lists, Sequences, and Arrays</li></a>
<a href="#t19.1"><li class="toc-level toc-level-1"><span class="toc-number">19.1</span> Literal Lists</li></a>
<a href="#t19.2"><li class="toc-level toc-level-1"><span class="toc-number">19.2</span> The @ sigil</li></a>
<a href="#t19.3"><li class="toc-level toc-level-1"><span class="toc-number">19.3</span> Reset a List Container</li></a>
<a href="#t19.4"><li class="toc-level toc-level-1"><span class="toc-number">19.4</span> Iteration</li></a>
<a href="#t19.5"><li class="toc-level toc-level-1"><span class="toc-number">19.5</span> Testing for Elements</li></a>
<a href="#t19.5.1"><li class="toc-level toc-level-2"><span class="toc-number">19.5.1</span> Sequences</li></a>
<a href="#t19.5.2"><li class="toc-level toc-level-2"><span class="toc-number">19.5.2</span> Slips</li></a>
<a href="#t19.6"><li class="toc-level toc-level-1"><span class="toc-number">19.6</span> Lazy Lists</li></a>
<a href="#t19.7"><li class="toc-level toc-level-1"><span class="toc-number">19.7</span> Immutability</li></a>
<a href="#t19.8"><li class="toc-level toc-level-1"><span class="toc-number">19.8</span> List Contexts</li></a>
<a href="#t19.8.1"><li class="toc-level toc-level-2"><span class="toc-number">19.8.1</span> List Assignment Context</li></a>
<a href="#t19.8.2"><li class="toc-level toc-level-2"><span class="toc-number">19.8.2</span> Flattening "Context"</li></a>
<a href="#t19.8.3"><li class="toc-level toc-level-2"><span class="toc-number">19.8.3</span> Argument List (Capture) Context</li></a>
<a href="#t19.8.4"><li class="toc-level toc-level-2"><span class="toc-number">19.8.4</span> Slice Indexing Context</li></a>
<a href="#t19.8.5"><li class="toc-level toc-level-2"><span class="toc-number">19.8.5</span> Range as Slice</li></a>
<a href="#t19.8.6"><li class="toc-level toc-level-2"><span class="toc-number">19.8.6</span> Array Constructor Context</li></a>
<a href="#t19.9"><li class="toc-level toc-level-1"><span class="toc-number">19.9</span> Arrays</li></a>
<a href="#t19.9.1"><li class="toc-level toc-level-2"><span class="toc-number">19.9.1</span> Typing</li></a>
<a href="#t19.9.2"><li class="toc-level toc-level-2"><span class="toc-number">19.9.2</span> Fixed Size Arrays</li></a>
<a href="#t19.9.3"><li class="toc-level toc-level-2"><span class="toc-number">19.9.3</span> Itemization</li></a>
<a href="#t19.9.4"><li class="toc-level toc-level-2"><span class="toc-number">19.9.4</span> Literal Arrays</li></a>
<a href="#t19.9.5"><li class="toc-level toc-level-2"><span class="toc-number">19.9.5</span> Mutability</li></a>
<a href="#t19.9.5.1"><li class="toc-level toc-level-3"><span class="toc-number">19.9.5.1</span> Assigning</li></a>
<a href="#t19.9.5.2"><li class="toc-level toc-level-3"><span class="toc-number">19.9.5.2</span> Binding</li></a>
<a href="#t20"><li class="toc-level toc-level-0"><span class="toc-number">20</span> Module Development Utilities</li></a>
<a href="#t20.1"><li class="toc-level toc-level-1"><span class="toc-number">20.1</span> Module builder and Authoring tools</li></a>
<a href="#t20.2"><li class="toc-level toc-level-1"><span class="toc-number">20.2</span> Tests</li></a>
<a href="#t20.3"><li class="toc-level toc-level-1"><span class="toc-number">20.3</span> NativeCall</li></a>
<a href="#t20.4"><li class="toc-level toc-level-1"><span class="toc-number">20.4</span> Sample modules</li></a>
<a href="#t21"><li class="toc-level toc-level-0"><span class="toc-number">21</span> Modules</li></a>
<a href="#t21.1"><li class="toc-level toc-level-1"><span class="toc-number">21.1</span> Creating and Using Modules</li></a>
<a href="#t21.1.1"><li class="toc-level toc-level-2"><span class="toc-number">21.1.1</span> Basic Structure</li></a>
<a href="#t21.1.2"><li class="toc-level toc-level-2"><span class="toc-number">21.1.2</span> Loading and Basic Importing</li></a>
<a href="#t21.1.2.1"><li class="toc-level toc-level-3"><span class="toc-number">21.1.2.1</span> <a name="204"></a>need</li></a>
<a href="#t21.1.2.2"><li class="toc-level toc-level-3"><span class="toc-number">21.1.2.2</span> <a name="207"></a>use</li></a>
<a href="#t21.1.2.3"><li class="toc-level toc-level-3"><span class="toc-number">21.1.2.3</span> <a name="210"></a>require</li></a>
<a href="#t21.1.3"><li class="toc-level toc-level-2"><span class="toc-number">21.1.3</span> Exporting and Selective Importing</li></a>
<a href="#t21.1.3.1"><li class="toc-level toc-level-3"><span class="toc-number">21.1.3.1</span> is export</li></a>
<a href="#t21.1.3.2"><li class="toc-level toc-level-3"><span class="toc-number">21.1.3.2</span> UNIT::EXPORT::*</li></a>
<a href="#t21.1.3.3"><li class="toc-level toc-level-3"><span class="toc-number">21.1.3.3</span> EXPORT</li></a>
<a href="#t21.1.4"><li class="toc-level toc-level-2"><span class="toc-number">21.1.4</span> Introspection</li></a>
<a href="#t21.1.5"><li class="toc-level toc-level-2"><span class="toc-number">21.1.5</span> Finding Modules</li></a>
<a href="#t21.2"><li class="toc-level toc-level-1"><span class="toc-number">21.2</span> Distributing Modules</li></a>
<a href="#t21.3"><li class="toc-level toc-level-1"><span class="toc-number">21.3</span> Modules and Tools related to module authoring</li></a>
<a href="#t21.4"><li class="toc-level toc-level-1"><span class="toc-number">21.4</span> The Future of Ecosystem</li></a>
<a href="#t21.4.1"><li class="toc-level toc-level-2"><span class="toc-number">21.4.1</span> Contact Information</li></a>
<a href="#t22"><li class="toc-level toc-level-0"><span class="toc-number">22</span> Meta-Object Protocol</li></a>
<a href="#t22.1"><li class="toc-level toc-level-1"><span class="toc-number">22.1</span> Metamethods</li></a>
<a href="#t22.1.1"><li class="toc-level toc-level-2"><span class="toc-number">22.1.1</span> <a name="203"></a>WHAT</li></a>
<a href="#t22.1.2"><li class="toc-level toc-level-2"><span class="toc-number">22.1.2</span> <a name="205"></a>WHICH</li></a>
<a href="#t22.1.3"><li class="toc-level toc-level-2"><span class="toc-number">22.1.3</span> <a name="206"></a>WHO</li></a>
<a href="#t22.1.4"><li class="toc-level toc-level-2"><span class="toc-number">22.1.4</span> <a name="208"></a>WHERE</li></a>
<a href="#t22.1.5"><li class="toc-level toc-level-2"><span class="toc-number">22.1.5</span> <a name="209"></a>HOW</li></a>
<a href="#t22.1.6"><li class="toc-level toc-level-2"><span class="toc-number">22.1.6</span> <a name="211"></a>WHY</li></a>
<a href="#t22.1.7"><li class="toc-level toc-level-2"><span class="toc-number">22.1.7</span> <a name="212"></a>DEFINITE</li></a>
<a href="#t22.1.8"><li class="toc-level toc-level-2"><span class="toc-number">22.1.8</span> <a name="213"></a>VAR</li></a>
<a href="#t22.2"><li class="toc-level toc-level-1"><span class="toc-number">22.2</span> Structure of the meta object system</li></a>
<a href="#t22.2.1"><li class="toc-level toc-level-2"><span class="toc-number">22.2.1</span> Bootstrapping concerns</li></a>
<a href="#t22.2.2"><li class="toc-level toc-level-2"><span class="toc-number">22.2.2</span> Composition time and static reasoning</li></a>
<a href="#t22.2.3"><li class="toc-level toc-level-2"><span class="toc-number">22.2.3</span> Power and Responsibility</li></a>
<a href="#t22.2.4"><li class="toc-level toc-level-2"><span class="toc-number">22.2.4</span> Power, Convenience and Pitfalls</li></a>
<a href="#t23"><li class="toc-level toc-level-0"><span class="toc-number">23</span> Native Calling Interface</li></a>
<a href="#t23.1"><li class="toc-level toc-level-1"><span class="toc-number">23.1</span> Getting Started</li></a>
<a href="#t23.2"><li class="toc-level toc-level-1"><span class="toc-number">23.2</span> Changing names</li></a>
<a href="#t23.3"><li class="toc-level toc-level-1"><span class="toc-number">23.3</span> Passing and Returning Values</li></a>
<a href="#t23.4"><li class="toc-level toc-level-1"><span class="toc-number">23.4</span> Basic use of Pointers</li></a>
<a href="#t23.5"><li class="toc-level toc-level-1"><span class="toc-number">23.5</span> Function Pointers</li></a>
<a href="#t23.6"><li class="toc-level toc-level-1"><span class="toc-number">23.6</span> Arrays</li></a>
<a href="#t23.7"><li class="toc-level toc-level-1"><span class="toc-number">23.7</span> Structs</li></a>
<a href="#t23.7.1"><li class="toc-level toc-level-2"><span class="toc-number">23.7.1</span> CUnions</li></a>
<a href="#t23.7.2"><li class="toc-level toc-level-2"><span class="toc-number">23.7.2</span> Embedding CStructs and CUnions</li></a>
<a href="#t23.8"><li class="toc-level toc-level-1"><span class="toc-number">23.8</span> Typed Pointers</li></a>
<a href="#t23.9"><li class="toc-level toc-level-1"><span class="toc-number">23.9</span> Buffers and Blobs</li></a>
<a href="#t23.10"><li class="toc-level toc-level-1"><span class="toc-number">23.10</span> Function arguments</li></a>
<a href="#t23.11"><li class="toc-level toc-level-1"><span class="toc-number">23.11</span> Library Paths and Names</li></a>
<a href="#t23.11.1"><li class="toc-level toc-level-2"><span class="toc-number">23.11.1</span> ABI/API Version</li></a>
<a href="#t23.11.2"><li class="toc-level toc-level-2"><span class="toc-number">23.11.2</span> Routine</li></a>
<a href="#t23.11.3"><li class="toc-level toc-level-2"><span class="toc-number">23.11.3</span> Calling into the standard library</li></a>
<a href="#t23.12"><li class="toc-level toc-level-1"><span class="toc-number">23.12</span> Exported variables</li></a>
<a href="#t23.13"><li class="toc-level toc-level-1"><span class="toc-number">23.13</span> C++ Support</li></a>
<a href="#t23.14"><li class="toc-level toc-level-1"><span class="toc-number">23.14</span> Helper Functions</li></a>
<a href="#t23.14.1"><li class="toc-level toc-level-2"><span class="toc-number">23.14.1</span> sub <a name="216"></a>nativecast</li></a>
<a href="#t23.14.2"><li class="toc-level toc-level-2"><span class="toc-number">23.14.2</span> sub <a name="217"></a>cglobal</li></a>
<a href="#t23.14.3"><li class="toc-level toc-level-2"><span class="toc-number">23.14.3</span> sub <a name="218"></a>nativesizeof</li></a>
<a href="#t23.15"><li class="toc-level toc-level-1"><span class="toc-number">23.15</span> Examples</li></a>
<a href="#t23.15.1"><li class="toc-level toc-level-2"><span class="toc-number">23.15.1</span> MySQL</li></a>
<a href="#t23.15.2"><li class="toc-level toc-level-2"><span class="toc-number">23.15.2</span> Microsoft Windows</li></a>
<a href="#t24"><li class="toc-level toc-level-0"><span class="toc-number">24</span> Object Orientation</li></a>
<a href="#t24.1"><li class="toc-level toc-level-1"><span class="toc-number">24.1</span> Using Objects</li></a>
<a href="#t24.1.1"><li class="toc-level toc-level-2"><span class="toc-number">24.1.1</span> Type Objects</li></a>
<a href="#t24.2"><li class="toc-level toc-level-1"><span class="toc-number">24.2</span> <a name="219"></a>Classes</li></a>
<a href="#t24.2.1"><li class="toc-level toc-level-2"><span class="toc-number">24.2.1</span> Attributes <a name="220"></a> <a name="221"></a> <a name="222"></a> <a name="223"></a></li></a>
<a href="#t24.2.2"><li class="toc-level toc-level-2"><span class="toc-number">24.2.2</span> Methods</li></a>
<a href="#t24.2.3"><li class="toc-level toc-level-2"><span class="toc-number">24.2.3</span> self</li></a>
<a href="#t24.2.4"><li class="toc-level toc-level-2"><span class="toc-number">24.2.4</span> Private Methods</li></a>
<a href="#t24.2.5"><li class="toc-level toc-level-2"><span class="toc-number">24.2.5</span> Submethods</li></a>
<a href="#t24.2.6"><li class="toc-level toc-level-2"><span class="toc-number">24.2.6</span> Inheritance</li></a>
<a href="#t24.2.7"><li class="toc-level toc-level-2"><span class="toc-number">24.2.7</span> Object Construction</li></a>
<a href="#t24.2.8"><li class="toc-level toc-level-2"><span class="toc-number">24.2.8</span> Object Cloning</li></a>
<a href="#t24.3"><li class="toc-level toc-level-1"><span class="toc-number">24.3</span> <a name="231"></a>Roles</li></a>
<a href="#t24.3.1"><li class="toc-level toc-level-2"><span class="toc-number">24.3.1</span> <!--  -->Role Application</li></a>
<a href="#t24.3.2"><li class="toc-level toc-level-2"><span class="toc-number">24.3.2</span> Stubs</li></a>
<a href="#t24.3.3"><li class="toc-level toc-level-2"><span class="toc-number">24.3.3</span> Inheritance</li></a>
<a href="#t24.3.4"><li class="toc-level toc-level-2"><span class="toc-number">24.3.4</span> Pecking order</li></a>
<a href="#t24.3.5"><li class="toc-level toc-level-2"><span class="toc-number">24.3.5</span> Automatic Role Punning</li></a>
<a href="#t24.3.6"><li class="toc-level toc-level-2"><span class="toc-number">24.3.6</span> Parameterized Roles</li></a>
<a href="#t24.3.7"><li class="toc-level toc-level-2"><span class="toc-number">24.3.7</span> <a name="235"></a>Mixins of Roles</li></a>
<a href="#t24.4"><li class="toc-level toc-level-1"><span class="toc-number">24.4</span> Meta-Object Programming and Introspection</li></a>
<a href="#t25"><li class="toc-level toc-level-0"><span class="toc-number">25</span> Operators</li></a>
<a href="#t25.1"><li class="toc-level toc-level-1"><span class="toc-number">25.1</span> Operator Precedence</li></a>
<a href="#t25.2"><li class="toc-level toc-level-1"><span class="toc-number">25.2</span> Operator classification</li></a>
<a href="#t25.3"><li class="toc-level toc-level-1"><span class="toc-number">25.3</span> Meta Operators</li></a>
<a href="#t25.4"><li class="toc-level toc-level-1"><span class="toc-number">25.4</span> Substitution Operators</li></a>
<a href="#t25.5"><li class="toc-level toc-level-1"><span class="toc-number">25.5</span> Assignment Operators</li></a>
<a href="#t25.6"><li class="toc-level toc-level-1"><span class="toc-number">25.6</span> Negated Relational Operators</li></a>
<a href="#t25.7"><li class="toc-level toc-level-1"><span class="toc-number">25.7</span> Reversed Operators</li></a>
<a href="#t25.8"><li class="toc-level toc-level-1"><span class="toc-number">25.8</span> <a name="226"></a>Hyper Operators</li></a>
<a href="#t25.9"><li class="toc-level toc-level-1"><span class="toc-number">25.9</span> Reduction Operators</li></a>
<a href="#t25.10"><li class="toc-level toc-level-1"><span class="toc-number">25.10</span> Cross Operators</li></a>
<a href="#t25.11"><li class="toc-level toc-level-1"><span class="toc-number">25.11</span> Zip Operators</li></a>
<a href="#t25.12"><li class="toc-level toc-level-1"><span class="toc-number">25.12</span> Sequential Operators</li></a>
<a href="#t25.13"><li class="toc-level toc-level-1"><span class="toc-number">25.13</span> Nesting of Meta Operators</li></a>
<a href="#t25.14"><li class="toc-level toc-level-1"><span class="toc-number">25.14</span> <!--  -->Term Precedence</li></a>
<a href="#t25.14.1"><li class="toc-level toc-level-2"><span class="toc-number">25.14.1</span> term <span class="code">&lt; ></span></li></a>
<a href="#t25.14.2"><li class="toc-level toc-level-2"><span class="toc-number">25.14.2</span> term <span class="code">( )</span></li></a>
<a href="#t25.14.3"><li class="toc-level toc-level-2"><span class="toc-number">25.14.3</span> term <span class="code">{ }</span></li></a>
<a href="#t25.14.4"><li class="toc-level toc-level-2"><span class="toc-number">25.14.4</span> circumfix <span class="code">[ ]</span></li></a>
<a href="#t25.15"><li class="toc-level toc-level-1"><span class="toc-number">25.15</span> Method Postfix Precedence</li></a>
<a href="#t25.15.1"><li class="toc-level toc-level-2"><span class="toc-number">25.15.1</span> postcircumfix <span class="code">[ ]</span></li></a>
<a href="#t25.15.2"><li class="toc-level toc-level-2"><span class="toc-number">25.15.2</span> postcircumfix <span class="code">{ }</span></li></a>
<a href="#t25.15.3"><li class="toc-level toc-level-2"><span class="toc-number">25.15.3</span> postcircumfix <span class="code">&lt; ></span></li></a>
<a href="#t25.15.4"><li class="toc-level toc-level-2"><span class="toc-number">25.15.4</span> postcircumfix <span class="code">« »</span></li></a>
<a href="#t25.15.5"><li class="toc-level toc-level-2"><span class="toc-number">25.15.5</span> postcircumfix <span class="code">( )</span></li></a>
<a href="#t25.15.6"><li class="toc-level toc-level-2"><span class="toc-number">25.15.6</span> postfix <span class="code">.</span></li></a>
<a href="#t25.15.7"><li class="toc-level toc-level-2"><span class="toc-number">25.15.7</span> postfix <span class="code">.&amp;</span></li></a>
<a href="#t25.15.8"><li class="toc-level toc-level-2"><span class="toc-number">25.15.8</span> postfix <span class="code">.=</span></li></a>
<a href="#t25.15.9"><li class="toc-level toc-level-2"><span class="toc-number">25.15.9</span> postfix <span class="code">.^</span></li></a>
<a href="#t25.15.10"><li class="toc-level toc-level-2"><span class="toc-number">25.15.10</span> postfix <span class="code">.?</span></li></a>
<a href="#t25.15.11"><li class="toc-level toc-level-2"><span class="toc-number">25.15.11</span> postfix <span class="code">.+</span></li></a>
<a href="#t25.15.12"><li class="toc-level toc-level-2"><span class="toc-number">25.15.12</span> postfix <span class="code">.*</span></li></a>
<a href="#t25.15.13"><li class="toc-level toc-level-2"><span class="toc-number">25.15.13</span> postfix <span class="code">».</span> / postfix <span class="code">>>.</span></li></a>
<a href="#t25.15.14"><li class="toc-level toc-level-2"><span class="toc-number">25.15.14</span> postfix <span class="code">.postfix</span> / <span class="code">.postcircumfix</span> <a name="250"></a><a name="251"></a><a name="253"></a></li></a>
<a href="#t25.15.15"><li class="toc-level toc-level-2"><span class="toc-number">25.15.15</span> postfix <span class="code">.:&lt;prefix></span></li></a>
<a href="#t25.15.16"><li class="toc-level toc-level-2"><span class="toc-number">25.15.16</span> postfix <span class="code">.::</span></li></a>
<a href="#t25.16"><li class="toc-level toc-level-1"><span class="toc-number">25.16</span> Autoincrement Precedence</li></a>
<a href="#t25.16.1"><li class="toc-level toc-level-2"><span class="toc-number">25.16.1</span> prefix <span class="code">++</span></li></a>
<a href="#t25.16.2"><li class="toc-level toc-level-2"><span class="toc-number">25.16.2</span> prefix <span class="code">--</span></li></a>
<a href="#t25.16.3"><li class="toc-level toc-level-2"><span class="toc-number">25.16.3</span> postfix <span class="code">++</span></li></a>
<a href="#t25.16.4"><li class="toc-level toc-level-2"><span class="toc-number">25.16.4</span> postfix <span class="code">--</span></li></a>
<a href="#t25.17"><li class="toc-level toc-level-1"><span class="toc-number">25.17</span> Exponentiation Precedence</li></a>
<a href="#t25.17.1"><li class="toc-level toc-level-2"><span class="toc-number">25.17.1</span> infix <span class="code">**</span></li></a>
<a href="#t25.18"><li class="toc-level toc-level-1"><span class="toc-number">25.18</span> Symbolic Unary Precedence</li></a>
<a href="#t25.18.1"><li class="toc-level toc-level-2"><span class="toc-number">25.18.1</span> prefix <span class="code">?</span></li></a>
<a href="#t25.18.2"><li class="toc-level toc-level-2"><span class="toc-number">25.18.2</span> prefix <span class="code">!</span></li></a>
<a href="#t25.18.3"><li class="toc-level toc-level-2"><span class="toc-number">25.18.3</span> prefix <span class="code">+</span></li></a>
<a href="#t25.18.4"><li class="toc-level toc-level-2"><span class="toc-number">25.18.4</span> prefix <span class="code">-</span></li></a>
<a href="#t25.18.5"><li class="toc-level toc-level-2"><span class="toc-number">25.18.5</span> prefix <span class="code">~</span></li></a>
<a href="#t25.18.6"><li class="toc-level toc-level-2"><span class="toc-number">25.18.6</span> prefix <span class="code">|</span></li></a>
<a href="#t25.18.7"><li class="toc-level toc-level-2"><span class="toc-number">25.18.7</span> prefix <span class="code">+^</span></li></a>
<a href="#t25.18.8"><li class="toc-level toc-level-2"><span class="toc-number">25.18.8</span> prefix <span class="code">?^</span></li></a>
<a href="#t25.18.9"><li class="toc-level toc-level-2"><span class="toc-number">25.18.9</span> prefix <span class="code">^</span></li></a>
<a href="#t25.19"><li class="toc-level toc-level-1"><span class="toc-number">25.19</span> Multiplicative Precedence</li></a>
<a href="#t25.19.1"><li class="toc-level toc-level-2"><span class="toc-number">25.19.1</span> infix <span class="code">*</span></li></a>
<a href="#t25.19.2"><li class="toc-level toc-level-2"><span class="toc-number">25.19.2</span> infix <span class="code">/</span></li></a>
<a href="#t25.19.3"><li class="toc-level toc-level-2"><span class="toc-number">25.19.3</span> infix <span class="code">div</span></li></a>
<a href="#t25.19.4"><li class="toc-level toc-level-2"><span class="toc-number">25.19.4</span> infix <span class="code">%</span></li></a>
<a href="#t25.19.5"><li class="toc-level toc-level-2"><span class="toc-number">25.19.5</span> infix <span class="code">%%</span></li></a>
<a href="#t25.19.6"><li class="toc-level toc-level-2"><span class="toc-number">25.19.6</span> infix <span class="code">mod</span></li></a>
<a href="#t25.19.7"><li class="toc-level toc-level-2"><span class="toc-number">25.19.7</span> infix <span class="code">+&amp;</span></li></a>
<a href="#t25.19.8"><li class="toc-level toc-level-2"><span class="toc-number">25.19.8</span> infix <span class="code">+&lt;</span></li></a>
<a href="#t25.19.9"><li class="toc-level toc-level-2"><span class="toc-number">25.19.9</span> infix <span class="code">+></span></li></a>
<a href="#t25.19.10"><li class="toc-level toc-level-2"><span class="toc-number">25.19.10</span> infix <span class="code">gcd</span></li></a>
<a href="#t25.19.11"><li class="toc-level toc-level-2"><span class="toc-number">25.19.11</span> infix <span class="code">lcm</span></li></a>
<a href="#t25.20"><li class="toc-level toc-level-1"><span class="toc-number">25.20</span> Additive Precedence</li></a>
<a href="#t25.20.1"><li class="toc-level toc-level-2"><span class="toc-number">25.20.1</span> infix <span class="code">+</span></li></a>
<a href="#t25.20.2"><li class="toc-level toc-level-2"><span class="toc-number">25.20.2</span> infix <span class="code">-</span></li></a>
<a href="#t25.20.3"><li class="toc-level toc-level-2"><span class="toc-number">25.20.3</span> infix <span class="code">+|</span></li></a>
<a href="#t25.20.4"><li class="toc-level toc-level-2"><span class="toc-number">25.20.4</span> infix <span class="code">+^</span></li></a>
<a href="#t25.20.5"><li class="toc-level toc-level-2"><span class="toc-number">25.20.5</span> infix <span class="code">?|</span></li></a>
<a href="#t25.21"><li class="toc-level toc-level-1"><span class="toc-number">25.21</span> Replication Precedence</li></a>
<a href="#t25.21.1"><li class="toc-level toc-level-2"><span class="toc-number">25.21.1</span> infix <span class="code">x</span></li></a>
<a href="#t25.21.2"><li class="toc-level toc-level-2"><span class="toc-number">25.21.2</span> infix <span class="code">xx</span></li></a>
<a href="#t25.22"><li class="toc-level toc-level-1"><span class="toc-number">25.22</span> Concatenation</li></a>
<a href="#t25.22.1"><li class="toc-level toc-level-2"><span class="toc-number">25.22.1</span> infix <span class="code">~</span></li></a>
<a href="#t25.23"><li class="toc-level toc-level-1"><span class="toc-number">25.23</span> Junctive AND (all) Precedence</li></a>
<a href="#t25.23.1"><li class="toc-level toc-level-2"><span class="toc-number">25.23.1</span> infix <span class="code">&amp;</span></li></a>
<a href="#t25.24"><li class="toc-level toc-level-1"><span class="toc-number">25.24</span> Junctive OR (any) Precedence</li></a>
<a href="#t25.24.1"><li class="toc-level toc-level-2"><span class="toc-number">25.24.1</span> infix <span class="code">|</span></li></a>
<a href="#t25.24.2"><li class="toc-level toc-level-2"><span class="toc-number">25.24.2</span> infix <span class="code">^</span></li></a>
<a href="#t25.25"><li class="toc-level toc-level-1"><span class="toc-number">25.25</span> Named Unary Precedence</li></a>
<a href="#t25.25.1"><li class="toc-level toc-level-2"><span class="toc-number">25.25.1</span> prefix <span class="code">temp</span></li></a>
<a href="#t25.25.2"><li class="toc-level toc-level-2"><span class="toc-number">25.25.2</span> prefix <span class="code">let</span></li></a>
<a href="#t25.26"><li class="toc-level toc-level-1"><span class="toc-number">25.26</span> Nonchaining Binary Precedence</li></a>
<a href="#t25.26.1"><li class="toc-level toc-level-2"><span class="toc-number">25.26.1</span> infix <span class="code">does</span></li></a>
<a href="#t25.26.2"><li class="toc-level toc-level-2"><span class="toc-number">25.26.2</span> infix <span class="code">but</span></li></a>
<a href="#t25.26.3"><li class="toc-level toc-level-2"><span class="toc-number">25.26.3</span> infix <span class="code">cmp</span></li></a>
<a href="#t25.26.4"><li class="toc-level toc-level-2"><span class="toc-number">25.26.4</span> infix <span class="code">leg</span></li></a>
<a href="#t25.26.5"><li class="toc-level toc-level-2"><span class="toc-number">25.26.5</span> infix <span class="code">&lt;=></span></li></a>
<a href="#t25.26.6"><li class="toc-level toc-level-2"><span class="toc-number">25.26.6</span> infix <span class="code">..</span></li></a>
<a href="#t25.26.7"><li class="toc-level toc-level-2"><span class="toc-number">25.26.7</span> infix <span class="code">..^</span></li></a>
<a href="#t25.26.8"><li class="toc-level toc-level-2"><span class="toc-number">25.26.8</span> infix <span class="code">^..</span></li></a>
<a href="#t25.26.9"><li class="toc-level toc-level-2"><span class="toc-number">25.26.9</span> infix <span class="code">^..^</span></li></a>
<a href="#t25.27"><li class="toc-level toc-level-1"><span class="toc-number">25.27</span> Chaining Binary Precedence</li></a>
<a href="#t25.27.1"><li class="toc-level toc-level-2"><span class="toc-number">25.27.1</span> infix <span class="code">==</span></li></a>
<a href="#t25.27.2"><li class="toc-level toc-level-2"><span class="toc-number">25.27.2</span> infix <span class="code">!=</span></li></a>
<a href="#t25.27.3"><li class="toc-level toc-level-2"><span class="toc-number">25.27.3</span> infix <span class="code">&lt;</span></li></a>
<a href="#t25.27.4"><li class="toc-level toc-level-2"><span class="toc-number">25.27.4</span> infix <span class="code">&lt;=</span></li></a>
<a href="#t25.27.5"><li class="toc-level toc-level-2"><span class="toc-number">25.27.5</span> infix <span class="code">></span></li></a>
<a href="#t25.27.6"><li class="toc-level toc-level-2"><span class="toc-number">25.27.6</span> infix <span class="code">>=</span></li></a>
<a href="#t25.27.7"><li class="toc-level toc-level-2"><span class="toc-number">25.27.7</span> infix <span class="code">eq</span></li></a>
<a href="#t25.27.8"><li class="toc-level toc-level-2"><span class="toc-number">25.27.8</span> infix <span class="code">ne</span></li></a>
<a href="#t25.27.9"><li class="toc-level toc-level-2"><span class="toc-number">25.27.9</span> infix <span class="code">gt</span></li></a>
<a href="#t25.27.10"><li class="toc-level toc-level-2"><span class="toc-number">25.27.10</span> infix <span class="code">ge</span></li></a>
<a href="#t25.27.11"><li class="toc-level toc-level-2"><span class="toc-number">25.27.11</span> infix <span class="code">lt</span></li></a>
<a href="#t25.27.12"><li class="toc-level toc-level-2"><span class="toc-number">25.27.12</span> infix <span class="code">le</span></li></a>
<a href="#t25.27.13"><li class="toc-level toc-level-2"><span class="toc-number">25.27.13</span> infix <span class="code">before</span></li></a>
<a href="#t25.27.14"><li class="toc-level toc-level-2"><span class="toc-number">25.27.14</span> infix <span class="code">after</span></li></a>
<a href="#t25.27.15"><li class="toc-level toc-level-2"><span class="toc-number">25.27.15</span> infix <span class="code">eqv</span></li></a>
<a href="#t25.27.16"><li class="toc-level toc-level-2"><span class="toc-number">25.27.16</span> infix <span class="code">===</span></li></a>
<a href="#t25.27.17"><li class="toc-level toc-level-2"><span class="toc-number">25.27.17</span> infix <span class="code">=:=</span></li></a>
<a href="#t25.27.18"><li class="toc-level toc-level-2"><span class="toc-number">25.27.18</span> infix <span class="code">~~</span></li></a>
<a href="#t25.27.19"><li class="toc-level toc-level-2"><span class="toc-number">25.27.19</span> infix <span class="code">=~=</span></li></a>
<a href="#t25.28"><li class="toc-level toc-level-1"><span class="toc-number">25.28</span> Tight AND Precedence</li></a>
<a href="#t25.28.1"><li class="toc-level toc-level-2"><span class="toc-number">25.28.1</span> infix <span class="code">&amp;&amp;</span></li></a>
<a href="#t25.29"><li class="toc-level toc-level-1"><span class="toc-number">25.29</span> Tight OR Precedence</li></a>
<a href="#t25.29.1"><li class="toc-level toc-level-2"><span class="toc-number">25.29.1</span> infix <span class="code">||</span></li></a>
<a href="#t25.29.2"><li class="toc-level toc-level-2"><span class="toc-number">25.29.2</span> infix <span class="code">^^</span></li></a>
<a href="#t25.29.3"><li class="toc-level toc-level-2"><span class="toc-number">25.29.3</span> infix <span class="code">//</span></li></a>
<a href="#t25.29.4"><li class="toc-level toc-level-2"><span class="toc-number">25.29.4</span> infix <span class="code">min</span></li></a>
<a href="#t25.29.5"><li class="toc-level toc-level-2"><span class="toc-number">25.29.5</span> infix <span class="code">max</span></li></a>
<a href="#t25.30"><li class="toc-level toc-level-1"><span class="toc-number">25.30</span> Conditional Operator Precedence</li></a>
<a href="#t25.30.1"><li class="toc-level toc-level-2"><span class="toc-number">25.30.1</span> infix <span class="code">?? !!</span></li></a>
<a href="#t25.30.2"><li class="toc-level toc-level-2"><span class="toc-number">25.30.2</span> infix <span class="code">ff</span></li></a>
<a href="#t25.30.3"><li class="toc-level toc-level-2"><span class="toc-number">25.30.3</span> infix <span class="code">^ff</span></li></a>
<a href="#t25.30.4"><li class="toc-level toc-level-2"><span class="toc-number">25.30.4</span> infix <span class="code">ff^</span></li></a>
<a href="#t25.30.5"><li class="toc-level toc-level-2"><span class="toc-number">25.30.5</span> infix <span class="code">^ff^</span></li></a>
<a href="#t25.30.6"><li class="toc-level toc-level-2"><span class="toc-number">25.30.6</span> infix <span class="code">fff</span></li></a>
<a href="#t25.30.7"><li class="toc-level toc-level-2"><span class="toc-number">25.30.7</span> infix <span class="code">^fff</span></li></a>
<a href="#t25.30.8"><li class="toc-level toc-level-2"><span class="toc-number">25.30.8</span> infix <span class="code">fff^</span></li></a>
<a href="#t25.30.9"><li class="toc-level toc-level-2"><span class="toc-number">25.30.9</span> infix <span class="code">^fff^</span></li></a>
<a href="#t25.31"><li class="toc-level toc-level-1"><span class="toc-number">25.31</span> Item Assignment Precedence</li></a>
<a href="#t25.31.1"><li class="toc-level toc-level-2"><span class="toc-number">25.31.1</span> infix <span class="code">=</span></li></a>
<a href="#t25.31.2"><li class="toc-level toc-level-2"><span class="toc-number">25.31.2</span> infix <span class="code">=></span></li></a>
<a href="#t25.32"><li class="toc-level toc-level-1"><span class="toc-number">25.32</span> Loose Unary Precedence</li></a>
<a href="#t25.32.1"><li class="toc-level toc-level-2"><span class="toc-number">25.32.1</span> prefix <span class="code">not</span></li></a>
<a href="#t25.32.2"><li class="toc-level toc-level-2"><span class="toc-number">25.32.2</span> prefix <span class="code">so</span></li></a>
<a href="#t25.33"><li class="toc-level toc-level-1"><span class="toc-number">25.33</span> Comma Operator Precedence</li></a>
<a href="#t25.33.1"><li class="toc-level toc-level-2"><span class="toc-number">25.33.1</span> infix <span class="code">,</span></li></a>
<a href="#t25.33.2"><li class="toc-level toc-level-2"><span class="toc-number">25.33.2</span> infix <span class="code">:</span></li></a>
<a href="#t25.34"><li class="toc-level toc-level-1"><span class="toc-number">25.34</span> List Infix Precedence</li></a>
<a href="#t25.34.1"><li class="toc-level toc-level-2"><span class="toc-number">25.34.1</span> infix <span class="code">Z</span></li></a>
<a href="#t25.34.2"><li class="toc-level toc-level-2"><span class="toc-number">25.34.2</span> infix <span class="code">X</span></li></a>
<a href="#t25.34.3"><li class="toc-level toc-level-2"><span class="toc-number">25.34.3</span> infix <span class="code">...</span> <a name="357"></a><a name="358"></a><a name="359"></a></li></a>
<a href="#t25.35"><li class="toc-level toc-level-1"><span class="toc-number">25.35</span> List Prefix Precedence</li></a>
<a href="#t25.35.1"><li class="toc-level toc-level-2"><span class="toc-number">25.35.1</span> infix <span class="code">=</span></li></a>
<a href="#t25.35.2"><li class="toc-level toc-level-2"><span class="toc-number">25.35.2</span> infix <span class="code">:=</span></li></a>
<a href="#t25.35.3"><li class="toc-level toc-level-2"><span class="toc-number">25.35.3</span> infix <span class="code">::=</span></li></a>
<a href="#t25.35.4"><li class="toc-level toc-level-2"><span class="toc-number">25.35.4</span> listop <span class="code">...</span></li></a>
<a href="#t25.35.5"><li class="toc-level toc-level-2"><span class="toc-number">25.35.5</span> listop <span class="code">!!!</span></li></a>
<a href="#t25.35.6"><li class="toc-level toc-level-2"><span class="toc-number">25.35.6</span> listop <span class="code">???</span></li></a>
<a href="#t25.35.7"><li class="toc-level toc-level-2"><span class="toc-number">25.35.7</span> Reduction operators</li></a>
<a href="#t25.36"><li class="toc-level toc-level-1"><span class="toc-number">25.36</span> Loose AND precedence</li></a>
<a href="#t25.36.1"><li class="toc-level toc-level-2"><span class="toc-number">25.36.1</span> infix <span class="code">and</span></li></a>
<a href="#t25.36.2"><li class="toc-level toc-level-2"><span class="toc-number">25.36.2</span> infix <span class="code">andthen</span></li></a>
<a href="#t25.37"><li class="toc-level toc-level-1"><span class="toc-number">25.37</span> Loose OR Precedence</li></a>
<a href="#t25.37.1"><li class="toc-level toc-level-2"><span class="toc-number">25.37.1</span> infix <span class="code">or</span></li></a>
<a href="#t25.37.2"><li class="toc-level toc-level-2"><span class="toc-number">25.37.2</span> infix <span class="code">orelse</span></li></a>
<a href="#t25.38"><li class="toc-level toc-level-1"><span class="toc-number">25.38</span> Sequencer Precedence</li></a>
<a href="#t25.38.1"><li class="toc-level toc-level-2"><span class="toc-number">25.38.1</span> infix <span class="code">==></span></li></a>
<a href="#t25.38.2"><li class="toc-level toc-level-2"><span class="toc-number">25.38.2</span> infix <span class="code">&lt;==</span></li></a>
<a href="#t26"><li class="toc-level toc-level-0"><span class="toc-number">26</span> Packages</li></a>
<a href="#t26.1"><li class="toc-level toc-level-1"><span class="toc-number">26.1</span> Names</li></a>
<a href="#t26.1.1"><li class="toc-level toc-level-2"><span class="toc-number">26.1.1</span> Package-qualified names</li></a>
<a href="#t26.2"><li class="toc-level toc-level-1"><span class="toc-number">26.2</span> Pseudo-packages</li></a>
<a href="#t26.3"><li class="toc-level toc-level-1"><span class="toc-number">26.3</span> Looking up names</li></a>
<a href="#t26.3.1"><li class="toc-level toc-level-2"><span class="toc-number">26.3.1</span> Interpolating into names</li></a>
<a href="#t26.3.2"><li class="toc-level toc-level-2"><span class="toc-number">26.3.2</span> Direct lookup</li></a>
<a href="#t26.3.3"><li class="toc-level toc-level-2"><span class="toc-number">26.3.3</span> Package lookup</li></a>
<a href="#t26.4"><li class="toc-level toc-level-1"><span class="toc-number">26.4</span> Globals</li></a>
<a href="#t26.5"><li class="toc-level toc-level-1"><span class="toc-number">26.5</span> Version</li></a>
<a href="#t27"><li class="toc-level toc-level-0"><span class="toc-number">27</span> Performance</li></a>
<a href="#t27.1"><li class="toc-level toc-level-1"><span class="toc-number">27.1</span> First, clarify the problem</li></a>
<a href="#t27.1.1"><li class="toc-level toc-level-2"><span class="toc-number">27.1.1</span> Time with <span class="code">now - INIT now</span></li></a>
<a href="#t27.1.2"><li class="toc-level toc-level-2"><span class="toc-number">27.1.2</span> Profile with <span class="code">prof-m: your code goes here</span></li></a>
<a href="#t27.1.3"><li class="toc-level toc-level-2"><span class="toc-number">27.1.3</span> Profile locally</li></a>
<a href="#t27.1.4"><li class="toc-level toc-level-2"><span class="toc-number">27.1.4</span> Profile compiling</li></a>
<a href="#t27.1.5"><li class="toc-level toc-level-2"><span class="toc-number">27.1.5</span> Create or view benchmarks</li></a>
<a href="#t27.1.6"><li class="toc-level toc-level-2"><span class="toc-number">27.1.6</span> Share problems</li></a>
<a href="#t27.2"><li class="toc-level toc-level-1"><span class="toc-number">27.2</span> Solve problems</li></a>
<a href="#t27.2.1"><li class="toc-level toc-level-2"><span class="toc-number">27.2.1</span> Line by line</li></a>
<a href="#t27.2.2"><li class="toc-level toc-level-2"><span class="toc-number">27.2.2</span> Routine by routine</li></a>
<a href="#t27.2.3"><li class="toc-level toc-level-2"><span class="toc-number">27.2.3</span> Speed up type-checks and call resolution</li></a>
<a href="#t27.2.4"><li class="toc-level toc-level-2"><span class="toc-number">27.2.4</span> Choose better algorithms</li></a>
<a href="#t27.2.4.1"><li class="toc-level toc-level-3"><span class="toc-number">27.2.4.1</span> Change sequential/blocking code to parallel/non-blocking</li></a>
<a href="#t27.2.5"><li class="toc-level toc-level-2"><span class="toc-number">27.2.5</span> Use existing high performance code</li></a>
<a href="#t27.2.6"><li class="toc-level toc-level-2"><span class="toc-number">27.2.6</span> Make the Rakudo compiler generate faster code</li></a>
<a href="#t27.2.7"><li class="toc-level toc-level-2"><span class="toc-number">27.2.7</span> Still need more ideas?</li></a>
<a href="#t27.3"><li class="toc-level toc-level-1"><span class="toc-number">27.3</span> Not getting the results you need/want?</li></a>
<a href="#t28"><li class="toc-level toc-level-0"><span class="toc-number">28</span> Phasers</li></a>
<a href="#t28.1"><li class="toc-level toc-level-1"><span class="toc-number">28.1</span> Phasers</li></a>
<a href="#t28.1.1"><li class="toc-level toc-level-2"><span class="toc-number">28.1.1</span> Execution Order</li></a>
<a href="#t28.2"><li class="toc-level toc-level-1"><span class="toc-number">28.2</span> Program Execution Phasers</li></a>
<a href="#t28.2.1"><li class="toc-level toc-level-2"><span class="toc-number">28.2.1</span> <a name="271"></a>BEGIN</li></a>
<a href="#t28.2.2"><li class="toc-level toc-level-2"><span class="toc-number">28.2.2</span> <a name="272"></a>CHECK</li></a>
<a href="#t28.2.3"><li class="toc-level toc-level-2"><span class="toc-number">28.2.3</span> <a name="273"></a>LINK</li></a>
<a href="#t28.2.4"><li class="toc-level toc-level-2"><span class="toc-number">28.2.4</span> <a name="275"></a>INIT</li></a>
<a href="#t28.2.5"><li class="toc-level toc-level-2"><span class="toc-number">28.2.5</span> <a name="277"></a>END</li></a>
<a href="#t28.3"><li class="toc-level toc-level-1"><span class="toc-number">28.3</span> Block Phasers</li></a>
<a href="#t28.3.1"><li class="toc-level toc-level-2"><span class="toc-number">28.3.1</span> <a name="278"></a>ENTER</li></a>
<a href="#t28.3.2"><li class="toc-level toc-level-2"><span class="toc-number">28.3.2</span> <a name="280"></a>LEAVE</li></a>
<a href="#t28.3.3"><li class="toc-level toc-level-2"><span class="toc-number">28.3.3</span> <a name="283"></a>KEEP</li></a>
<a href="#t28.3.4"><li class="toc-level toc-level-2"><span class="toc-number">28.3.4</span> <a name="284"></a>UNDO</li></a>
<a href="#t28.3.5"><li class="toc-level toc-level-2"><span class="toc-number">28.3.5</span> <a name="286"></a>PRE</li></a>
<a href="#t28.3.6"><li class="toc-level toc-level-2"><span class="toc-number">28.3.6</span> <a name="288"></a>POST</li></a>
<a href="#t28.4"><li class="toc-level toc-level-1"><span class="toc-number">28.4</span> Loop Phasers</li></a>
<a href="#t28.4.1"><li class="toc-level toc-level-2"><span class="toc-number">28.4.1</span> <a name="292"></a>FIRST</li></a>
<a href="#t28.4.2"><li class="toc-level toc-level-2"><span class="toc-number">28.4.2</span> <a name="293"></a>NEXT</li></a>
<a href="#t28.4.3"><li class="toc-level toc-level-2"><span class="toc-number">28.4.3</span> <a name="295"></a>LAST</li></a>
<a href="#t28.5"><li class="toc-level toc-level-1"><span class="toc-number">28.5</span> Exception Handling Phasers</li></a>
<a href="#t28.5.1"><li class="toc-level toc-level-2"><span class="toc-number">28.5.1</span> <a name="297"></a>CATCH</li></a>
<a href="#t28.5.2"><li class="toc-level toc-level-2"><span class="toc-number">28.5.2</span> <a name="299"></a>CONTROL</li></a>
<a href="#t28.6"><li class="toc-level toc-level-1"><span class="toc-number">28.6</span> Object Phasers</li></a>
<a href="#t28.6.1"><li class="toc-level toc-level-2"><span class="toc-number">28.6.1</span> <a name="301"></a>COMPOSE</li></a>
<a href="#t28.7"><li class="toc-level toc-level-1"><span class="toc-number">28.7</span> Asynchronous Phasers</li></a>
<a href="#t28.7.1"><li class="toc-level toc-level-2"><span class="toc-number">28.7.1</span> <a name="303"></a>LAST</li></a>
<a href="#t28.7.2"><li class="toc-level toc-level-2"><span class="toc-number">28.7.2</span> <a name="305"></a>QUIT</li></a>
<a href="#t29"><li class="toc-level toc-level-0"><span class="toc-number">29</span> Quoting Constructs</li></a>
<a href="#t29.1"><li class="toc-level toc-level-1"><span class="toc-number">29.1</span> The Q Lang</li></a>
<a href="#t29.1.1"><li class="toc-level toc-level-2"><span class="toc-number">29.1.1</span> <a name="308"></a>Literal strings: Q</li></a>
<a href="#t29.1.2"><li class="toc-level toc-level-2"><span class="toc-number">29.1.2</span> <a name="310"></a>Escaping: q</li></a>
<a href="#t29.1.3"><li class="toc-level toc-level-2"><span class="toc-number">29.1.3</span> <a name="312"></a>Interpolation: qq</li></a>
<a href="#t29.1.4"><li class="toc-level toc-level-2"><span class="toc-number">29.1.4</span> Word quoting: qw <a name="315"></a><a name="316"></a></li></a>
<a href="#t29.1.5"><li class="toc-level toc-level-2"><span class="toc-number">29.1.5</span> <a name="317"></a>Word quoting with quote protection: qww</li></a>
<a href="#t29.1.6"><li class="toc-level toc-level-2"><span class="toc-number">29.1.6</span> <a name="318"></a>Word quoting with interpolation: qqw</li></a>
<a href="#t29.1.7"><li class="toc-level toc-level-2"><span class="toc-number">29.1.7</span> <a name="319"></a>Word quoting with interpolation and quote protection: qqww</li></a>
<a href="#t29.1.8"><li class="toc-level toc-level-2"><span class="toc-number">29.1.8</span> <a name="321"></a>Shell quoting: qx</li></a>
<a href="#t29.1.9"><li class="toc-level toc-level-2"><span class="toc-number">29.1.9</span> <a name="325"></a>Shell quoting with interpolation: qqx</li></a>
<a href="#t29.1.10"><li class="toc-level toc-level-2"><span class="toc-number">29.1.10</span> <a name="327"></a>Heredocs: :to</li></a>
<a href="#t29.2"><li class="toc-level toc-level-1"><span class="toc-number">29.2</span> Regexes</li></a>
<a href="#t30"><li class="toc-level toc-level-0"><span class="toc-number">30</span> Perl 6 from Ruby - Nutshell</li></a>
<a href="#t30.1"><li class="toc-level toc-level-1"><span class="toc-number">30.1</span> Basic Syntax</li></a>
<a href="#t30.1.1"><li class="toc-level toc-level-2"><span class="toc-number">30.1.1</span> Statement Ending Semi-Colons</li></a>
<a href="#t30.1.2"><li class="toc-level toc-level-2"><span class="toc-number">30.1.2</span> Whitespace</li></a>
<a href="#t30.1.3"><li class="toc-level toc-level-2"><span class="toc-number">30.1.3</span> <span class="code">.</span> Method calls, <span class="code">.send</span></li></a>
<a href="#t30.1.4"><li class="toc-level toc-level-2"><span class="toc-number">30.1.4</span> Variables, Sigils, Scope, and Common Types</li></a>
<a href="#t30.1.4.1"><li class="toc-level toc-level-3"><span class="toc-number">30.1.4.1</span> Variable Scope</li></a>
<a href="#t30.1.4.2"><li class="toc-level toc-level-3"><span class="toc-number">30.1.4.2</span> <span class="code">$</span> Scalar</li></a>
<a href="#t30.1.4.3"><li class="toc-level toc-level-3"><span class="toc-number">30.1.4.3</span> <span class="code">@</span> Array</li></a>
<a href="#t30.1.4.4"><li class="toc-level toc-level-3"><span class="toc-number">30.1.4.4</span> <span class="code">%</span> Hash</li></a>
<a href="#t30.1.4.5"><li class="toc-level toc-level-3"><span class="toc-number">30.1.4.5</span> <span class="code">&amp;</span> Sub</li></a>
<a href="#t30.1.4.6"><li class="toc-level toc-level-3"><span class="toc-number">30.1.4.6</span> <span class="code">*</span> Slurpy params / argument expansion</li></a>
<a href="#t30.1.5"><li class="toc-level toc-level-2"><span class="toc-number">30.1.5</span> Twigils</li></a>
<a href="#t30.1.6"><li class="toc-level toc-level-2"><span class="toc-number">30.1.6</span> <span class="code">:</span> Symbols</li></a>
<a href="#t30.2"><li class="toc-level toc-level-1"><span class="toc-number">30.2</span> Operators</li></a>
<a href="#t30.2.1"><li class="toc-level toc-level-2"><span class="toc-number">30.2.1</span> <span class="code">== != &lt; > &lt;= >=</span> Comparisons</li></a>
<a href="#t30.2.2"><li class="toc-level toc-level-2"><span class="toc-number">30.2.2</span> <span class="code">&lt;=></span> Three-way comparisons</li></a>
<a href="#t30.2.3"><li class="toc-level toc-level-2"><span class="toc-number">30.2.3</span> <span class="code">~~</span> Smart-match operator</li></a>
<a href="#t30.2.4"><li class="toc-level toc-level-2"><span class="toc-number">30.2.4</span> <span class="code">&amp; | ^</span> Numeric Bitwise ops</li></a>
<a href="#t30.2.5"><li class="toc-level toc-level-2"><span class="toc-number">30.2.5</span> <span class="code">&amp; | ^</span> Boolean ops</li></a>
<a href="#t30.2.6"><li class="toc-level toc-level-2"><span class="toc-number">30.2.6</span> <span class="code">&amp;.</span> Conditional chaining operator</li></a>
<a href="#t30.2.7"><li class="toc-level toc-level-2"><span class="toc-number">30.2.7</span> <span class="code">&lt;&lt; >></span> Numeric shift left, right ops, shovel operator</li></a>
<a href="#t30.2.8"><li class="toc-level toc-level-2"><span class="toc-number">30.2.8</span> <span class="code">=></span> and <span class="code">:</span> Key-Value Separators</li></a>
<a href="#t30.2.9"><li class="toc-level toc-level-2"><span class="toc-number">30.2.9</span> <span class="code">? :</span> Ternary operator</li></a>
<a href="#t30.2.10"><li class="toc-level toc-level-2"><span class="toc-number">30.2.10</span> <span class="code">+</span> String Concatenation</li></a>
<a href="#t30.2.11"><li class="toc-level toc-level-2"><span class="toc-number">30.2.11</span> String interpolation</li></a>
<a href="#t30.3"><li class="toc-level toc-level-1"><span class="toc-number">30.3</span> Compound Statements</li></a>
<a href="#t30.3.1"><li class="toc-level toc-level-2"><span class="toc-number">30.3.1</span> Conditionals</li></a>
<a href="#t30.3.1.1"><li class="toc-level toc-level-3"><span class="toc-number">30.3.1.1</span> <span class="code">if</span> <span class="code">elsif</span> <span class="code">else</span> <span class="code">unless</span></li></a>
<a href="#t30.3.1.2"><li class="toc-level toc-level-3"><span class="toc-number">30.3.1.2</span> <span class="code">case</span>-<span class="code">when</span></li></a>
<a href="#t30.3.2"><li class="toc-level toc-level-2"><span class="toc-number">30.3.2</span> Loops</li></a>
<a href="#t30.3.2.1"><li class="toc-level toc-level-3"><span class="toc-number">30.3.2.1</span> <span class="code">while</span> <span class="code">until</span></li></a>
<a href="#t30.3.2.2"><li class="toc-level toc-level-3"><span class="toc-number">30.3.2.2</span> <span class="code">for</span> <span class="code">.each</span></li></a>
<a href="#t30.3.3"><li class="toc-level toc-level-2"><span class="toc-number">30.3.3</span> Flow Interruption statements</li></a>
<a href="#t30.4"><li class="toc-level toc-level-1"><span class="toc-number">30.4</span> Regular Expressions ( Regex / Regexp )</li></a>
<a href="#t30.4.1"><li class="toc-level toc-level-2"><span class="toc-number">30.4.1</span> <span class="code">.match</span> method and <span class="code">=~</span> operator</li></a>
<a href="#t30.4.2"><li class="toc-level toc-level-2"><span class="toc-number">30.4.2</span> <span class="code">.sub</span> and <span class="code">.sub!</span></li></a>
<a href="#t30.4.3"><li class="toc-level toc-level-2"><span class="toc-number">30.4.3</span> Regex options</li></a>
<a href="#t30.4.4"><li class="toc-level toc-level-2"><span class="toc-number">30.4.4</span> Whitespace is ignored, most things must be quoted</li></a>
<a href="#t30.4.5"><li class="toc-level toc-level-2"><span class="toc-number">30.4.5</span> Special matchers generally fall under the &lt;> syntax</li></a>
<a href="#t30.4.6"><li class="toc-level toc-level-2"><span class="toc-number">30.4.6</span> Longest token matching (LTM) displaces alternation</li></a>
<a href="#t30.5"><li class="toc-level toc-level-1"><span class="toc-number">30.5</span> File-related operations</li></a>
<a href="#t30.5.1"><li class="toc-level toc-level-2"><span class="toc-number">30.5.1</span> Reading the lines of a text file into an array</li></a>
<a href="#t30.5.2"><li class="toc-level toc-level-2"><span class="toc-number">30.5.2</span> Iterating over the lines of a text file</li></a>
<a href="#t30.6"><li class="toc-level toc-level-1"><span class="toc-number">30.6</span> Object Orientation</li></a>
<a href="#t30.6.1"><li class="toc-level toc-level-2"><span class="toc-number">30.6.1</span> Basic classes, methods, attributes</li></a>
<a href="#t30.6.2"><li class="toc-level toc-level-2"><span class="toc-number">30.6.2</span> Private Methods</li></a>
<a href="#t30.6.3"><li class="toc-level toc-level-2"><span class="toc-number">30.6.3</span> Going Meta</li></a>
<a href="#t30.7"><li class="toc-level toc-level-1"><span class="toc-number">30.7</span> Environment variables</li></a>
<a href="#t30.7.1"><li class="toc-level toc-level-2"><span class="toc-number">30.7.1</span> Perl module library path</li></a>
<a href="#t30.8"><li class="toc-level toc-level-1"><span class="toc-number">30.8</span> Misc.</li></a>
<a href="#t30.8.1"><li class="toc-level toc-level-2"><span class="toc-number">30.8.1</span> Importing specific functions from a module</li></a>
<a href="#t30.8.2"><li class="toc-level toc-level-2"><span class="toc-number">30.8.2</span> <span class="code">OptionParser</span>, parsing command-line flags</li></a>
<a href="#t30.9"><li class="toc-level toc-level-1"><span class="toc-number">30.9</span> RubyGems, External Libraries</li></a>
<a href="#t31"><li class="toc-level toc-level-0"><span class="toc-number">31</span> Regexes</li></a>
<a href="#t31.1"><li class="toc-level toc-level-1"><span class="toc-number">31.1</span> <a name="354"></a>Lexical conventions</li></a>
<a href="#t31.2"><li class="toc-level toc-level-1"><span class="toc-number">31.2</span> Literals</li></a>
<a href="#t31.3"><li class="toc-level toc-level-1"><span class="toc-number">31.3</span> Wildcards and character classes</li></a>
<a href="#t31.3.1"><li class="toc-level toc-level-2"><span class="toc-number">31.3.1</span> <a name="360"></a>Dot to match any character</li></a>
<a href="#t31.3.2"><li class="toc-level toc-level-2"><span class="toc-number">31.3.2</span> Backslashed, predefined character classes</li></a>
<a href="#t31.3.3"><li class="toc-level toc-level-2"><span class="toc-number">31.3.3</span> <a name="371"></a>Unicode properties</li></a>
<a href="#t31.3.4"><li class="toc-level toc-level-2"><span class="toc-number">31.3.4</span> <a name="373"></a>Enumerated character classes and ranges</li></a>
<a href="#t31.4"><li class="toc-level toc-level-1"><span class="toc-number">31.4</span> Quantifiers</li></a>
<a href="#t31.4.1"><li class="toc-level toc-level-2"><span class="toc-number">31.4.1</span> <a name="376"></a>One or more: +</li></a>
<a href="#t31.4.2"><li class="toc-level toc-level-2"><span class="toc-number">31.4.2</span> <a name="377"></a>Zero or more: *</li></a>
<a href="#t31.4.3"><li class="toc-level toc-level-2"><span class="toc-number">31.4.3</span> <a name="378"></a>Zero or one match: ?</li></a>
<a href="#t31.4.4"><li class="toc-level toc-level-2"><span class="toc-number">31.4.4</span> <a name="379"></a>General quantifier: ** min..max</li></a>
<a href="#t31.4.5"><li class="toc-level toc-level-2"><span class="toc-number">31.4.5</span> <a name="380"></a>Modified quantifier: %</li></a>
<a href="#t31.4.6"><li class="toc-level toc-level-2"><span class="toc-number">31.4.6</span> <a name="381"></a>Greedy versus frugal quantifiers: ?</li></a>
<a href="#t31.4.7"><li class="toc-level toc-level-2"><span class="toc-number">31.4.7</span> <a name="382"></a>Preventing backtracking: :</li></a>
<a href="#t31.5"><li class="toc-level toc-level-1"><span class="toc-number">31.5</span> <a name="383"></a>Alternation</li></a>
<a href="#t31.6"><li class="toc-level toc-level-1"><span class="toc-number">31.6</span> <a name="386"></a>Longest Alternation</li></a>
<a href="#t31.7"><li class="toc-level toc-level-1"><span class="toc-number">31.7</span> Anchors</li></a>
<a href="#t31.7.1"><li class="toc-level toc-level-2"><span class="toc-number">31.7.1</span> <a name="387"></a> <span class="code">^</span> , Start of String and  <span class="code">$</span> , End of String</li></a>
<a href="#t31.7.2"><li class="toc-level toc-level-2"><span class="toc-number">31.7.2</span> <a name="388"></a> <span class="code">^^</span> , Start of Line and  <span class="code">$$</span> , End of Line</li></a>
<a href="#t31.7.3"><li class="toc-level toc-level-2"><span class="toc-number">31.7.3</span> <a name="389"></a> <span class="code">&lt;&lt; </span>  and  <span class="code">>> </span> , left and right word boundary</li></a>
<a href="#t31.8"><li class="toc-level toc-level-1"><span class="toc-number">31.8</span> <a name="390"></a>Grouping and Capturing</li></a>
<a href="#t31.8.1"><li class="toc-level toc-level-2"><span class="toc-number">31.8.1</span> Capturing</li></a>
<a href="#t31.8.2"><li class="toc-level toc-level-2"><span class="toc-number">31.8.2</span> Non-capturing grouping</li></a>
<a href="#t31.8.3"><li class="toc-level toc-level-2"><span class="toc-number">31.8.3</span> Capture numbers</li></a>
<a href="#t31.8.4"><li class="toc-level toc-level-2"><span class="toc-number">31.8.4</span> Named captures</li></a>
<a href="#t31.9"><li class="toc-level toc-level-1"><span class="toc-number">31.9</span> Substitution</li></a>
<a href="#t31.9.1"><li class="toc-level toc-level-2"><span class="toc-number">31.9.1</span> <a name="391"></a>Lexical conventions</li></a>
<a href="#t31.9.2"><li class="toc-level toc-level-2"><span class="toc-number">31.9.2</span> Replacing literals</li></a>
<a href="#t31.9.3"><li class="toc-level toc-level-2"><span class="toc-number">31.9.3</span> Wildcards and character classes</li></a>
<a href="#t31.9.4"><li class="toc-level toc-level-2"><span class="toc-number">31.9.4</span> Capturing Groups</li></a>
<a href="#t31.9.4.1"><li class="toc-level toc-level-3"><span class="toc-number">31.9.4.1</span> Common adverbs</li></a>
<a href="#t31.10"><li class="toc-level toc-level-1"><span class="toc-number">31.10</span> <a name="392"></a>Subrules</li></a>
<a href="#t31.11"><li class="toc-level toc-level-1"><span class="toc-number">31.11</span> Adverbs</li></a>
<a href="#t31.11.1"><li class="toc-level toc-level-2"><span class="toc-number">31.11.1</span> <a name="395"></a>Regex Adverbs</li></a>
<a href="#t31.11.1.1"><li class="toc-level toc-level-3"><span class="toc-number">31.11.1.1</span> <a name="397"></a>Ratchet</li></a>
<a href="#t31.11.1.2"><li class="toc-level toc-level-3"><span class="toc-number">31.11.1.2</span> <a name="400"></a>Sigspace</li></a>
<a href="#t31.11.2"><li class="toc-level toc-level-2"><span class="toc-number">31.11.2</span> Matching adverbs</li></a>
<a href="#t31.11.2.1"><li class="toc-level toc-level-3"><span class="toc-number">31.11.2.1</span> <a name="406"></a>Continue</li></a>
<a href="#t31.11.2.2"><li class="toc-level toc-level-3"><span class="toc-number">31.11.2.2</span> Exhaustive</li></a>
<a href="#t31.11.2.3"><li class="toc-level toc-level-3"><span class="toc-number">31.11.2.3</span> <a name="409"></a>Global</li></a>
<a href="#t31.11.2.4"><li class="toc-level toc-level-3"><span class="toc-number">31.11.2.4</span> <a name="412"></a>Pos</li></a>
<a href="#t31.11.2.5"><li class="toc-level toc-level-3"><span class="toc-number">31.11.2.5</span> Overlap</li></a>
<a href="#t31.12"><li class="toc-level toc-level-1"><span class="toc-number">31.12</span> Look-around assertions</li></a>
<a href="#t31.12.1"><li class="toc-level toc-level-2"><span class="toc-number">31.12.1</span> Lookahead assertions</li></a>
<a href="#t31.12.2"><li class="toc-level toc-level-2"><span class="toc-number">31.12.2</span> Lookbehind assertions</li></a>
<a href="#t31.13"><li class="toc-level toc-level-1"><span class="toc-number">31.13</span> Best practices and gotchas</li></a>
<a href="#t31.13.1"><li class="toc-level toc-level-2"><span class="toc-number">31.13.1</span> Code layout</li></a>
<a href="#t31.13.2"><li class="toc-level toc-level-2"><span class="toc-number">31.13.2</span> Keep it small</li></a>
<a href="#t31.13.3"><li class="toc-level toc-level-2"><span class="toc-number">31.13.3</span> What to match</li></a>
<a href="#t31.13.4"><li class="toc-level toc-level-2"><span class="toc-number">31.13.4</span> Matching Whitespace</li></a>
<a href="#t32"><li class="toc-level toc-level-0"><span class="toc-number">32</span> Sets, Bags, and Mixes</li></a>
<a href="#t32.1"><li class="toc-level toc-level-1"><span class="toc-number">32.1</span> Set/Bag Operators</li></a>
<a href="#t32.1.1"><li class="toc-level toc-level-2"><span class="toc-number">32.1.1</span> Operators that return <span class="code">Bool</span></li></a>
<a href="#t32.1.1.1"><li class="toc-level toc-level-3"><span class="toc-number">32.1.1.1</span> infix (elem)</li></a>
<a href="#t32.1.1.1.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.1.1</span> infix ∈</li></a>
<a href="#t32.1.1.1.2"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.1.2</span> infix ∉</li></a>
<a href="#t32.1.1.2"><li class="toc-level toc-level-3"><span class="toc-number">32.1.1.2</span> infix (cont)</li></a>
<a href="#t32.1.1.2.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.2.1</span> infix ∋</li></a>
<a href="#t32.1.1.2.2"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.2.2</span> infix ∌</li></a>
<a href="#t32.1.1.3"><li class="toc-level toc-level-3"><span class="toc-number">32.1.1.3</span> infix (&lt;=)</li></a>
<a href="#t32.1.1.3.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.3.1</span> infix ⊆</li></a>
<a href="#t32.1.1.3.2"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.3.2</span> infix ⊈</li></a>
<a href="#t32.1.1.4"><li class="toc-level toc-level-3"><span class="toc-number">32.1.1.4</span> infix (&lt;)</li></a>
<a href="#t32.1.1.4.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.4.1</span> infix ⊂</li></a>
<a href="#t32.1.1.4.2"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.4.2</span> infix ⊄</li></a>
<a href="#t32.1.1.5"><li class="toc-level toc-level-3"><span class="toc-number">32.1.1.5</span> infix (>=)</li></a>
<a href="#t32.1.1.5.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.5.1</span> infix ⊇</li></a>
<a href="#t32.1.1.5.2"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.5.2</span> infix ⊉</li></a>
<a href="#t32.1.1.6"><li class="toc-level toc-level-3"><span class="toc-number">32.1.1.6</span> infix (>)</li></a>
<a href="#t32.1.1.6.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.6.1</span> infix ⊃</li></a>
<a href="#t32.1.1.6.2"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.6.2</span> infix ⊅</li></a>
<a href="#t32.1.1.7"><li class="toc-level toc-level-3"><span class="toc-number">32.1.1.7</span> infix (&lt;+)</li></a>
<a href="#t32.1.1.7.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.7.1</span> infix ≼</li></a>
<a href="#t32.1.1.8"><li class="toc-level toc-level-3"><span class="toc-number">32.1.1.8</span> infix (>+)</li></a>
<a href="#t32.1.1.8.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.1.8.1</span> infix ≽</li></a>
<a href="#t32.1.2"><li class="toc-level toc-level-2"><span class="toc-number">32.1.2</span> Operators that return <span class="code">Set</span> or <span class="code">Bag</span></li></a>
<a href="#t32.1.2.1"><li class="toc-level toc-level-3"><span class="toc-number">32.1.2.1</span> infix (|)</li></a>
<a href="#t32.1.2.1.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.2.1.1</span> infix ∪</li></a>
<a href="#t32.1.2.2"><li class="toc-level toc-level-3"><span class="toc-number">32.1.2.2</span> infix (&amp;)</li></a>
<a href="#t32.1.2.2.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.2.2.1</span> infix ∩</li></a>
<a href="#t32.1.2.3"><li class="toc-level toc-level-3"><span class="toc-number">32.1.2.3</span> infix (-)</li></a>
<a href="#t32.1.2.3.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.2.3.1</span> infix ∖</li></a>
<a href="#t32.1.2.4"><li class="toc-level toc-level-3"><span class="toc-number">32.1.2.4</span> infix (^)</li></a>
<a href="#t32.1.2.4.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.2.4.1</span> infix ⊖</li></a>
<a href="#t32.1.2.5"><li class="toc-level toc-level-3"><span class="toc-number">32.1.2.5</span> infix (.)</li></a>
<a href="#t32.1.2.5.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.2.5.1</span> infix ⊍</li></a>
<a href="#t32.1.2.6"><li class="toc-level toc-level-3"><span class="toc-number">32.1.2.6</span> infix (+)</li></a>
<a href="#t32.1.2.6.1"><li class="toc-level toc-level-4"><span class="toc-number">32.1.2.6.1</span> infix ⊎</li></a>
<a href="#t32.1.2.7"><li class="toc-level toc-level-3"><span class="toc-number">32.1.2.7</span> term ∅</li></a>
<a href="#t33"><li class="toc-level toc-level-0"><span class="toc-number">33</span> Subscripts</li></a>
<a href="#t33.1"><li class="toc-level toc-level-1"><span class="toc-number">33.1</span> Basics</li></a>
<a href="#t33.2"><li class="toc-level toc-level-1"><span class="toc-number">33.2</span> Nonexistent elements</li></a>
<a href="#t33.3"><li class="toc-level toc-level-1"><span class="toc-number">33.3</span> From the end</li></a>
<a href="#t33.4"><li class="toc-level toc-level-1"><span class="toc-number">33.4</span> Slices</li></a>
<a href="#t33.4.1"><li class="toc-level toc-level-2"><span class="toc-number">33.4.1</span> Truncating slices</li></a>
<a href="#t33.4.2"><li class="toc-level toc-level-2"><span class="toc-number">33.4.2</span> Zen slices</li></a>
<a href="#t33.5"><li class="toc-level toc-level-1"><span class="toc-number">33.5</span> Multiple dimensions</li></a>
<a href="#t33.6"><li class="toc-level toc-level-1"><span class="toc-number">33.6</span> Modifying elements</li></a>
<a href="#t33.7"><li class="toc-level toc-level-1"><span class="toc-number">33.7</span> Autovivification</li></a>
<a href="#t33.8"><li class="toc-level toc-level-1"><span class="toc-number">33.8</span> Binding</li></a>
<a href="#t33.9"><li class="toc-level toc-level-1"><span class="toc-number">33.9</span> Adverbs</li></a>
<a href="#t33.9.1"><li class="toc-level toc-level-2"><span class="toc-number">33.9.1</span> <a name="434"></a>:exists</li></a>
<a href="#t33.9.2"><li class="toc-level toc-level-2"><span class="toc-number">33.9.2</span> <a name="435"></a>:delete</li></a>
<a href="#t33.9.3"><li class="toc-level toc-level-2"><span class="toc-number">33.9.3</span> <a name="436"></a>:p</li></a>
<a href="#t33.9.4"><li class="toc-level toc-level-2"><span class="toc-number">33.9.4</span> <a name="437"></a>:kv</li></a>
<a href="#t33.9.5"><li class="toc-level toc-level-2"><span class="toc-number">33.9.5</span> <a name="438"></a>:k</li></a>
<a href="#t33.9.6"><li class="toc-level toc-level-2"><span class="toc-number">33.9.6</span> <a name="439"></a>:v</li></a>
<a href="#t33.10"><li class="toc-level toc-level-1"><span class="toc-number">33.10</span> Custom types</li></a>
<a href="#t33.10.1"><li class="toc-level toc-level-2"><span class="toc-number">33.10.1</span> Custom type example</li></a>
<a href="#t33.10.2"><li class="toc-level toc-level-2"><span class="toc-number">33.10.2</span> Methods to implement for positional subscripting</li></a>
<a href="#t33.10.2.1"><li class="toc-level toc-level-3"><span class="toc-number">33.10.2.1</span> method elems</li></a>
<a href="#t33.10.2.2"><li class="toc-level toc-level-3"><span class="toc-number">33.10.2.2</span> method AT-POS</li></a>
<a href="#t33.10.2.3"><li class="toc-level toc-level-3"><span class="toc-number">33.10.2.3</span> method EXISTS-POS</li></a>
<a href="#t33.10.2.4"><li class="toc-level toc-level-3"><span class="toc-number">33.10.2.4</span> method DELETE-POS</li></a>
<a href="#t33.10.2.5"><li class="toc-level toc-level-3"><span class="toc-number">33.10.2.5</span> method ASSIGN-POS</li></a>
<a href="#t33.10.2.6"><li class="toc-level toc-level-3"><span class="toc-number">33.10.2.6</span> method BIND-POS</li></a>
<a href="#t33.10.3"><li class="toc-level toc-level-2"><span class="toc-number">33.10.3</span> Methods to implement for associative subscripting</li></a>
<a href="#t33.10.3.1"><li class="toc-level toc-level-3"><span class="toc-number">33.10.3.1</span> method AT-KEY</li></a>
<a href="#t33.10.3.2"><li class="toc-level toc-level-3"><span class="toc-number">33.10.3.2</span> method EXISTS-KEY</li></a>
<a href="#t33.10.3.3"><li class="toc-level toc-level-3"><span class="toc-number">33.10.3.3</span> method DELETE-KEY</li></a>
<a href="#t33.10.3.4"><li class="toc-level toc-level-3"><span class="toc-number">33.10.3.4</span> method ASSIGN-KEY</li></a>
<a href="#t33.10.3.5"><li class="toc-level toc-level-3"><span class="toc-number">33.10.3.5</span> method BIND-KEY</li></a>
<a href="#t34"><li class="toc-level toc-level-0"><span class="toc-number">34</span> Syntax</li></a>
<a href="#t34.1"><li class="toc-level toc-level-1"><span class="toc-number">34.1</span> Lexical Conventions</li></a>
<a href="#t34.1.1"><li class="toc-level toc-level-2"><span class="toc-number">34.1.1</span> Free Form</li></a>
<a href="#t34.1.2"><li class="toc-level toc-level-2"><span class="toc-number">34.1.2</span> Unspace</li></a>
<a href="#t34.1.3"><li class="toc-level toc-level-2"><span class="toc-number">34.1.3</span> Separating Statements</li></a>
<a href="#t34.1.4"><li class="toc-level toc-level-2"><span class="toc-number">34.1.4</span> Comments</li></a>
<a href="#t34.1.4.1"><li class="toc-level toc-level-3"><span class="toc-number">34.1.4.1</span> Single-line comments</li></a>
<a href="#t34.1.4.2"><li class="toc-level toc-level-3"><span class="toc-number">34.1.4.2</span> Multi-line / embedded comments</li></a>
<a href="#t34.1.4.3"><li class="toc-level toc-level-3"><span class="toc-number">34.1.4.3</span> Pod comments</li></a>
<a href="#t34.1.5"><li class="toc-level toc-level-2"><span class="toc-number">34.1.5</span> Identifiers</li></a>
<a href="#t34.2"><li class="toc-level toc-level-1"><span class="toc-number">34.2</span> Statements and Expressions</li></a>
<a href="#t34.3"><li class="toc-level toc-level-1"><span class="toc-number">34.3</span> Terms</li></a>
<a href="#t34.3.1"><li class="toc-level toc-level-2"><span class="toc-number">34.3.1</span> Variables</li></a>
<a href="#t34.3.2"><li class="toc-level toc-level-2"><span class="toc-number">34.3.2</span> Barewords (Constants, Type Names)</li></a>
<a href="#t34.3.3"><li class="toc-level toc-level-2"><span class="toc-number">34.3.3</span> Packages and Qualified Names</li></a>
<a href="#t34.3.4"><li class="toc-level toc-level-2"><span class="toc-number">34.3.4</span> Literals</li></a>
<a href="#t34.3.4.1"><li class="toc-level toc-level-3"><span class="toc-number">34.3.4.1</span> String literals</li></a>
<a href="#t34.3.4.2"><li class="toc-level toc-level-3"><span class="toc-number">34.3.4.2</span> Number literals</li></a>
<a href="#t34.3.4.2.1"><li class="toc-level toc-level-4"><span class="toc-number">34.3.4.2.1</span> Int literals</li></a>
<a href="#t34.3.4.2.2"><li class="toc-level toc-level-4"><span class="toc-number">34.3.4.2.2</span> Rat literals</li></a>
<a href="#t34.3.4.2.3"><li class="toc-level toc-level-4"><span class="toc-number">34.3.4.2.3</span> Num literals</li></a>
<a href="#t34.3.4.2.4"><li class="toc-level toc-level-4"><span class="toc-number">34.3.4.2.4</span> Complex literals</li></a>
<a href="#t34.3.4.3"><li class="toc-level toc-level-3"><span class="toc-number">34.3.4.3</span> Pair literals</li></a>
<a href="#t34.3.4.3.1"><li class="toc-level toc-level-4"><span class="toc-number">34.3.4.3.1</span> Arrow pairs</li></a>
<a href="#t34.3.4.3.2"><li class="toc-level toc-level-4"><span class="toc-number">34.3.4.3.2</span> Adverbial pairs (colon pairs)</li></a>
<a href="#t34.3.4.4"><li class="toc-level toc-level-3"><span class="toc-number">34.3.4.4</span> Array literals</li></a>
<a href="#t34.3.4.5"><li class="toc-level toc-level-3"><span class="toc-number">34.3.4.5</span> Hash literals</li></a>
<a href="#t34.3.4.6"><li class="toc-level toc-level-3"><span class="toc-number">34.3.4.6</span> Regex literals</li></a>
<a href="#t34.3.4.7"><li class="toc-level toc-level-3"><span class="toc-number">34.3.4.7</span> Signature literals</li></a>
<a href="#t34.3.5"><li class="toc-level toc-level-2"><span class="toc-number">34.3.5</span> Declarations</li></a>
<a href="#t34.3.5.1"><li class="toc-level toc-level-3"><span class="toc-number">34.3.5.1</span> Variable declaration</li></a>
<a href="#t34.3.5.2"><li class="toc-level toc-level-3"><span class="toc-number">34.3.5.2</span> Subroutine declaration</li></a>
<a href="#t34.3.5.3"><li class="toc-level toc-level-3"><span class="toc-number">34.3.5.3</span> Module, Class, Role, and Grammar declaration</li></a>
<a href="#t34.3.5.4"><li class="toc-level toc-level-3"><span class="toc-number">34.3.5.4</span> Multi-dispatch declaration</li></a>
<a href="#t34.4"><li class="toc-level toc-level-1"><span class="toc-number">34.4</span> Subroutine calls</li></a>
<a href="#t34.5"><li class="toc-level toc-level-1"><span class="toc-number">34.5</span> Operators</li></a>
<a href="#t34.5.1"><li class="toc-level toc-level-2"><span class="toc-number">34.5.1</span> Meta Operators</li></a>
<a href="#t35"><li class="toc-level toc-level-0"><span class="toc-number">35</span> Pod 6 Tables</li></a>
<a href="#t35.1"><li class="toc-level toc-level-1"><span class="toc-number">35.1</span> Restrictions</li></a>
<a href="#t35.2"><li class="toc-level toc-level-1"><span class="toc-number">35.2</span> Best Practices</li></a>
<a href="#t35.3"><li class="toc-level toc-level-1"><span class="toc-number">35.3</span> Good Tables</li></a>
<a href="#t35.4"><li class="toc-level toc-level-1"><span class="toc-number">35.4</span> Bad Tables</li></a>
<a href="#t35.5"><li class="toc-level toc-level-1"><span class="toc-number">35.5</span> Ugly Tables</li></a>
<a href="#t36"><li class="toc-level toc-level-0"><span class="toc-number">36</span> Terms</li></a>
<a href="#t36.1"><li class="toc-level toc-level-1"><span class="toc-number">36.1</span> Literals</li></a>
<a href="#t36.1.1"><li class="toc-level toc-level-2"><span class="toc-number">36.1.1</span> Int</li></a>
<a href="#t36.1.2"><li class="toc-level toc-level-2"><span class="toc-number">36.1.2</span> Rat</li></a>
<a href="#t36.1.3"><li class="toc-level toc-level-2"><span class="toc-number">36.1.3</span> Num</li></a>
<a href="#t36.1.4"><li class="toc-level toc-level-2"><span class="toc-number">36.1.4</span> Str</li></a>
<a href="#t36.1.5"><li class="toc-level toc-level-2"><span class="toc-number">36.1.5</span> Regex</li></a>
<a href="#t36.1.6"><li class="toc-level toc-level-2"><span class="toc-number">36.1.6</span> Pair</li></a>
<a href="#t36.1.7"><li class="toc-level toc-level-2"><span class="toc-number">36.1.7</span> List</li></a>
<a href="#t36.1.8"><li class="toc-level toc-level-2"><span class="toc-number">36.1.8</span> term *</li></a>
<a href="#t36.2"><li class="toc-level toc-level-1"><span class="toc-number">36.2</span> Identifier terms</li></a>
<a href="#t36.2.1"><li class="toc-level toc-level-2"><span class="toc-number">36.2.1</span> term self</li></a>
<a href="#t36.2.2"><li class="toc-level toc-level-2"><span class="toc-number">36.2.2</span> term now</li></a>
<a href="#t36.2.3"><li class="toc-level toc-level-2"><span class="toc-number">36.2.3</span> term time</li></a>
<a href="#t36.2.4"><li class="toc-level toc-level-2"><span class="toc-number">36.2.4</span> term rand</li></a>
<a href="#t36.2.5"><li class="toc-level toc-level-2"><span class="toc-number">36.2.5</span> term π</li></a>
<a href="#t36.2.6"><li class="toc-level toc-level-2"><span class="toc-number">36.2.6</span> term pi</li></a>
<a href="#t36.2.7"><li class="toc-level toc-level-2"><span class="toc-number">36.2.7</span> term τ</li></a>
<a href="#t36.2.8"><li class="toc-level toc-level-2"><span class="toc-number">36.2.8</span> term tau</li></a>
<a href="#t36.2.9"><li class="toc-level toc-level-2"><span class="toc-number">36.2.9</span> term e</li></a>
<a href="#t36.2.10"><li class="toc-level toc-level-2"><span class="toc-number">36.2.10</span> term i</li></a>
<a href="#t36.3"><li class="toc-level toc-level-1"><span class="toc-number">36.3</span> Variables</li></a>
<a href="#t36.4"><li class="toc-level toc-level-1"><span class="toc-number">36.4</span> Constants</li></a>
<a href="#t37"><li class="toc-level toc-level-0"><span class="toc-number">37</span> Testing</li></a>
<a href="#t37.1"><li class="toc-level toc-level-1"><span class="toc-number">37.1</span> Writing tests</li></a>
<a href="#t37.2"><li class="toc-level toc-level-1"><span class="toc-number">37.2</span> Running tests</li></a>
<a href="#t37.3"><li class="toc-level toc-level-1"><span class="toc-number">37.3</span> Test plans</li></a>
<a href="#t37.4"><li class="toc-level toc-level-1"><span class="toc-number">37.4</span> Testing return values</li></a>
<a href="#t37.4.1"><li class="toc-level toc-level-2"><span class="toc-number">37.4.1</span> By truthiness</li></a>
<a href="#t37.4.2"><li class="toc-level toc-level-2"><span class="toc-number">37.4.2</span> By string comparison</li></a>
<a href="#t37.4.3"><li class="toc-level toc-level-2"><span class="toc-number">37.4.3</span> By approximate numeric comparison</li></a>
<a href="#t37.4.3.1"><li class="toc-level toc-level-3"><span class="toc-number">37.4.3.1</span> Absolute Tolerance</li></a>
<a href="#t37.4.3.2"><li class="toc-level toc-level-3"><span class="toc-number">37.4.3.2</span> Relative Tolerance</li></a>
<a href="#t37.4.3.3"><li class="toc-level toc-level-3"><span class="toc-number">37.4.3.3</span> Both Absolute and Relative Tolerance Specified</li></a>
<a href="#t37.4.4"><li class="toc-level toc-level-2"><span class="toc-number">37.4.4</span> By structural comparison</li></a>
<a href="#t37.4.5"><li class="toc-level toc-level-2"><span class="toc-number">37.4.5</span> By arbitrary comparison</li></a>
<a href="#t37.4.6"><li class="toc-level toc-level-2"><span class="toc-number">37.4.6</span> By object type</li></a>
<a href="#t37.4.7"><li class="toc-level toc-level-2"><span class="toc-number">37.4.7</span> By method name</li></a>
<a href="#t37.4.8"><li class="toc-level toc-level-2"><span class="toc-number">37.4.8</span> By role</li></a>
<a href="#t37.4.9"><li class="toc-level toc-level-2"><span class="toc-number">37.4.9</span> By regex</li></a>
<a href="#t37.5"><li class="toc-level toc-level-1"><span class="toc-number">37.5</span> Testing modules</li></a>
<a href="#t37.6"><li class="toc-level toc-level-1"><span class="toc-number">37.6</span> Testing exceptions</li></a>
<a href="#t37.7"><li class="toc-level toc-level-1"><span class="toc-number">37.7</span> Grouping tests</li></a>
<a href="#t37.8"><li class="toc-level toc-level-1"><span class="toc-number">37.8</span> Skipping tests</li></a>
<a href="#t37.9"><li class="toc-level toc-level-1"><span class="toc-number">37.9</span> Manual control</li></a>
<a href="#t38"><li class="toc-level toc-level-0"><span class="toc-number">38</span> Traps to avoid</li></a>
<a href="#t38.1"><li class="toc-level toc-level-1"><span class="toc-number">38.1</span> Objects</li></a>
<a href="#t38.1.1"><li class="toc-level toc-level-2"><span class="toc-number">38.1.1</span> Assigning to attributes</li></a>
<a href="#t38.1.2"><li class="toc-level toc-level-2"><span class="toc-number">38.1.2</span> BUILD prevents automatic attribute initialization from constructor arguments</li></a>
<a href="#t38.2"><li class="toc-level toc-level-1"><span class="toc-number">38.2</span> Regexes</li></a>
<a href="#t38.2.1"><li class="toc-level toc-level-2"><span class="toc-number">38.2.1</span> Whitespace in Regexes does not match literally</li></a>
<a href="#t38.3"><li class="toc-level toc-level-1"><span class="toc-number">38.3</span> Captures</li></a>
<a href="#t38.3.1"><li class="toc-level toc-level-2"><span class="toc-number">38.3.1</span> Containers versus values in a Capture</li></a>
<a href="#t38.4"><li class="toc-level toc-level-1"><span class="toc-number">38.4</span> Arrays</li></a>
<a href="#t38.4.1"><li class="toc-level toc-level-2"><span class="toc-number">38.4.1</span> Referencing the last element of an array</li></a>
<a href="#t38.4.2"><li class="toc-level toc-level-2"><span class="toc-number">38.4.2</span> Typed Array parameters</li></a>
<a href="#t38.5"><li class="toc-level toc-level-1"><span class="toc-number">38.5</span> Strings</li></a>
<a href="#t38.5.1"><li class="toc-level toc-level-2"><span class="toc-number">38.5.1</span> Capitalizing a string</li></a>
<a href="#t38.5.2"><li class="toc-level toc-level-2"><span class="toc-number">38.5.2</span> Quotes and interpolation</li></a>
<a href="#t38.5.3"><li class="toc-level toc-level-2"><span class="toc-number">38.5.3</span> Strings are not iterable</li></a>
<a href="#t38.6"><li class="toc-level toc-level-1"><span class="toc-number">38.6</span> Operators</li></a>
<a href="#t38.6.1"><li class="toc-level toc-level-2"><span class="toc-number">38.6.1</span> Junctions</li></a>
<a href="#t38.6.2"><li class="toc-level toc-level-2"><span class="toc-number">38.6.2</span> String Ranges/Sequences</li></a>
<a href="#t38.7"><li class="toc-level toc-level-1"><span class="toc-number">38.7</span> Common Precedence Mistakes</li></a>
<a href="#t38.7.1"><li class="toc-level toc-level-2"><span class="toc-number">38.7.1</span> Adverbs and Precedence</li></a>
<a href="#t38.7.2"><li class="toc-level toc-level-2"><span class="toc-number">38.7.2</span> Ranges and Precedence</li></a>
<a href="#t38.7.3"><li class="toc-level toc-level-2"><span class="toc-number">38.7.3</span> Loose boolean operators</li></a>
<a href="#t38.8"><li class="toc-level toc-level-1"><span class="toc-number">38.8</span> Subroutine and method calls</li></a>
<a href="#t38.8.1"><li class="toc-level toc-level-2"><span class="toc-number">38.8.1</span> Named Parameters</li></a>
<a href="#t39"><li class="toc-level toc-level-0"><span class="toc-number">39</span> Typesystem</li></a>
<a href="#t39.1"><li class="toc-level toc-level-1"><span class="toc-number">39.1</span> Definition of a Perl 6 Type</li></a>
<a href="#t39.1.1"><li class="toc-level toc-level-2"><span class="toc-number">39.1.1</span> Type objects</li></a>
<a href="#t39.2"><li class="toc-level toc-level-1"><span class="toc-number">39.2</span> Type Declarators</li></a>
<a href="#t39.2.1"><li class="toc-level toc-level-2"><span class="toc-number">39.2.1</span> <span class="code">class</span></li></a>
<a href="#t39.2.1.1"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.1</span> Methods</li></a>
<a href="#t39.2.1.1.1"><li class="toc-level toc-level-4"><span class="toc-number">39.2.1.1.1</span> Reserved Method Names</li></a>
<a href="#t39.2.1.1.2"><li class="toc-level toc-level-4"><span class="toc-number">39.2.1.1.2</span> Setting Attributes with Namesake Variables and Methods</li></a>
<a href="#t39.2.1.1.3"><li class="toc-level toc-level-4"><span class="toc-number">39.2.1.1.3</span> trait <span class="code">is nodal</span></li></a>
<a href="#t39.2.1.2"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.2</span> trait <a name="471"></a> <span class="code">handles</span> </li></a>
<a href="#t39.2.1.3"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.3</span> trait <span class="code">is</span></li></a>
<a href="#t39.2.1.4"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.4</span> trait <a name="473"></a> <span class="code">is rw</span> </li></a>
<a href="#t39.2.1.5"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.5</span> trait <span class="code">is required</span></li></a>
<a href="#t39.2.1.6"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.6</span> trait <span class="code">does</span></li></a>
<a href="#t39.2.1.7"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.7</span> trait <span class="code">hides</span></li></a>
<a href="#t39.2.1.8"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.8</span> trait <span class="code">trusts</span></li></a>
<a href="#t39.2.1.9"><li class="toc-level toc-level-3"><span class="toc-number">39.2.1.9</span> Versioning and Authership</li></a>
<a href="#t39.2.2"><li class="toc-level toc-level-2"><span class="toc-number">39.2.2</span> <span class="code">role</span></li></a>
<a href="#t39.2.3"><li class="toc-level toc-level-2"><span class="toc-number">39.2.3</span> <span class="code">enum</span></li></a>
<a href="#t39.2.3.1"><li class="toc-level toc-level-3"><span class="toc-number">39.2.3.1</span> Methods</li></a>
<a href="#t39.2.3.1.1"><li class="toc-level toc-level-4"><span class="toc-number">39.2.3.1.1</span> method enums</li></a>
<a href="#t39.2.3.1.2"><li class="toc-level toc-level-4"><span class="toc-number">39.2.3.1.2</span> method key</li></a>
<a href="#t39.2.3.1.3"><li class="toc-level toc-level-4"><span class="toc-number">39.2.3.1.3</span> method value</li></a>
<a href="#t39.2.3.1.4"><li class="toc-level toc-level-4"><span class="toc-number">39.2.3.1.4</span> method pair</li></a>
<a href="#t39.2.3.1.5"><li class="toc-level toc-level-4"><span class="toc-number">39.2.3.1.5</span> method kv</li></a>
<a href="#t39.2.4"><li class="toc-level toc-level-2"><span class="toc-number">39.2.4</span> <span class="code">module</span></li></a>
<a href="#t39.2.4.1"><li class="toc-level toc-level-3"><span class="toc-number">39.2.4.1</span> Versioning and Authorship</li></a>
<a href="#t39.2.5"><li class="toc-level toc-level-2"><span class="toc-number">39.2.5</span> <span class="code">package</span></li></a>
<a href="#t39.2.5.1"><li class="toc-level toc-level-3"><span class="toc-number">39.2.5.1</span> Versioning and Authorship</li></a>
<a href="#t39.2.6"><li class="toc-level toc-level-2"><span class="toc-number">39.2.6</span> <span class="code">grammar</span></li></a>
<a href="#t39.2.6.1"><li class="toc-level toc-level-3"><span class="toc-number">39.2.6.1</span> Versioning and Authorship</li></a>
<a href="#t39.2.7"><li class="toc-level toc-level-2"><span class="toc-number">39.2.7</span> <span class="code">subset</span></li></a>
<a href="#t40"><li class="toc-level toc-level-0"><span class="toc-number">40</span> Entering Unicode Characters</li></a>
<a href="#t40.1"><li class="toc-level toc-level-1"><span class="toc-number">40.1</span> XCompose</li></a>
<a href="#t40.2"><li class="toc-level toc-level-1"><span class="toc-number">40.2</span> Editors and shells</li></a>
<a href="#t40.2.1"><li class="toc-level toc-level-2"><span class="toc-number">40.2.1</span> Vim</li></a>
<a href="#t40.2.2"><li class="toc-level toc-level-2"><span class="toc-number">40.2.2</span> Emacs</li></a>
<a href="#t40.2.3"><li class="toc-level toc-level-2"><span class="toc-number">40.2.3</span> Unix shell</li></a>
<a href="#t40.3"><li class="toc-level toc-level-1"><span class="toc-number">40.3</span> Unicode characters useful in Perl 6</li></a>
<a href="#t40.3.1"><li class="toc-level toc-level-2"><span class="toc-number">40.3.1</span> <a href="https://en.wikipedia.org/wiki/Guillemet">Guillemets</a></li></a>
<a href="#t40.3.2"><li class="toc-level toc-level-2"><span class="toc-number">40.3.2</span> Set/bag operators</li></a>
<a href="#t40.3.3"><li class="toc-level toc-level-2"><span class="toc-number">40.3.3</span> Mathematical symbols</li></a>
<a href="#t40.3.4"><li class="toc-level toc-level-2"><span class="toc-number">40.3.4</span> Greek characters</li></a>
<a href="#t40.3.5"><li class="toc-level toc-level-2"><span class="toc-number">40.3.5</span> Superscripts and subscripts</li></a>
<a href="#t41"><li class="toc-level toc-level-0"><span class="toc-number">41</span> Unicode versus Texas symbols</li></a>
<a href="#t41.1"><li class="toc-level toc-level-1"><span class="toc-number">41.1</span> Alphabetic Characters</li></a>
<a href="#t41.2"><li class="toc-level toc-level-1"><span class="toc-number">41.2</span> Numeric characters</li></a>
<a href="#t41.3"><li class="toc-level toc-level-1"><span class="toc-number">41.3</span> Numeric values</li></a>
<a href="#t41.4"><li class="toc-level toc-level-1"><span class="toc-number">41.4</span> Whitespace characters</li></a>
<a href="#t41.5"><li class="toc-level toc-level-1"><span class="toc-number">41.5</span> Other acceptable single codepoints</li></a>
<a href="#t41.6"><li class="toc-level toc-level-1"><span class="toc-number">41.6</span> Multiple codepoints</li></a>
<a href="#t42"><li class="toc-level toc-level-0"><span class="toc-number">42</span> Variables</li></a>
<a href="#t42.1"><li class="toc-level toc-level-1"><span class="toc-number">42.1</span> Sigils &lt;X|$ (sigil),@ (sigil),% (sigil),&amp; (sigil)></li></a>
<a href="#t42.1.1"><li class="toc-level toc-level-2"><span class="toc-number">42.1.1</span> Item and List Assignment</li></a>
<a href="#t42.1.2"><li class="toc-level toc-level-2"><span class="toc-number">42.1.2</span> Sigilless variables</li></a>
<a href="#t42.2"><li class="toc-level toc-level-1"><span class="toc-number">42.2</span> Twigils <a name="477"></a></li></a>
<a href="#t42.2.1"><li class="toc-level toc-level-2"><span class="toc-number">42.2.1</span> The <span class="code">*</span> Twigil <a name="478"></a></li></a>
<a href="#t42.2.2"><li class="toc-level toc-level-2"><span class="toc-number">42.2.2</span> The <span class="code">!</span> Twigil <a name="479"></a></li></a>
<a href="#t42.2.3"><li class="toc-level toc-level-2"><span class="toc-number">42.2.3</span> The <span class="code">?</span> Twigil <a name="480"></a></li></a>
<a href="#t42.2.4"><li class="toc-level toc-level-2"><span class="toc-number">42.2.4</span> The <span class="code">.</span> Twigil <a name="481"></a></li></a>
<a href="#t42.2.5"><li class="toc-level toc-level-2"><span class="toc-number">42.2.5</span> The <span class="code">&lt;</span> Twigil</li></a>
<a href="#t42.2.6"><li class="toc-level toc-level-2"><span class="toc-number">42.2.6</span> The <span class="code">^</span> Twigil <a name="482"></a></li></a>
<a href="#t42.2.7"><li class="toc-level toc-level-2"><span class="toc-number">42.2.7</span> The <span class="code">:</span> Twigil <a name="483"></a></li></a>
<a href="#t42.2.8"><li class="toc-level toc-level-2"><span class="toc-number">42.2.8</span> The <span class="code">=</span> Twigil <a name="484"></a></li></a>
<a href="#t42.2.9"><li class="toc-level toc-level-2"><span class="toc-number">42.2.9</span> The <span class="code">~</span> Twigil <a name="485"></a></li></a>
<a href="#t42.3"><li class="toc-level toc-level-1"><span class="toc-number">42.3</span> Variable Declarators and Scope</li></a>
<a href="#t42.3.1"><li class="toc-level toc-level-2"><span class="toc-number">42.3.1</span> The <span class="code">my</span> Declarator</li></a>
<a href="#t42.3.2"><li class="toc-level toc-level-2"><span class="toc-number">42.3.2</span> The <span class="code">our</span> Declarator</li></a>
<a href="#t42.3.3"><li class="toc-level toc-level-2"><span class="toc-number">42.3.3</span> The <span class="code">has</span> Declarator</li></a>
<a href="#t42.3.4"><li class="toc-level toc-level-2"><span class="toc-number">42.3.4</span> The <span class="code">anon</span> Declarator</li></a>
<a href="#t42.3.5"><li class="toc-level toc-level-2"><span class="toc-number">42.3.5</span> The <span class="code">state</span> Declarator</li></a>
<a href="#t42.3.5.1"><li class="toc-level toc-level-3"><span class="toc-number">42.3.5.1</span> The <span class="code">$</span> Variable</li></a>
<a href="#t42.3.5.2"><li class="toc-level toc-level-3"><span class="toc-number">42.3.5.2</span> The <span class="code">@</span> Variable</li></a>
<a href="#t42.3.5.3"><li class="toc-level toc-level-3"><span class="toc-number">42.3.5.3</span> The <span class="code">%</span> Variable</li></a>
<a href="#t42.3.6"><li class="toc-level toc-level-2"><span class="toc-number">42.3.6</span> The <span class="code">augment</span> Declarator</li></a>
<a href="#t42.3.7"><li class="toc-level toc-level-2"><span class="toc-number">42.3.7</span> The <span class="code">temp</span> Prefix</li></a>
<a href="#t42.3.8"><li class="toc-level toc-level-2"><span class="toc-number">42.3.8</span> The <span class="code">let</span> Prefix</li></a>
<a href="#t42.4"><li class="toc-level toc-level-1"><span class="toc-number">42.4</span> Type Constraints and Initialization</li></a>
<a href="#t42.4.1"><li class="toc-level toc-level-2"><span class="toc-number">42.4.1</span> Default Defined Variables Pragma</li></a>
<a href="#t42.5"><li class="toc-level toc-level-1"><span class="toc-number">42.5</span> Special Variables</li></a>
<a href="#t42.5.1"><li class="toc-level toc-level-2"><span class="toc-number">42.5.1</span> Pre-defined lexical variables</li></a>
<a href="#t42.5.1.1"><li class="toc-level toc-level-3"><span class="toc-number">42.5.1.1</span> The <span class="code">$_</span> Variable</li></a>
<a href="#t42.5.1.2"><li class="toc-level toc-level-3"><span class="toc-number">42.5.1.2</span> The <span class="code">$/</span> Variable</li></a>
<a href="#t42.5.1.2.1"><li class="toc-level toc-level-4"><span class="toc-number">42.5.1.2.1</span> <a name="492"></a>Positional Attributes</li></a>
<a href="#t42.5.1.2.2"><li class="toc-level toc-level-4"><span class="toc-number">42.5.1.2.2</span> <a name="493"></a>Named Attributes</li></a>
<a href="#t42.5.1.3"><li class="toc-level toc-level-3"><span class="toc-number">42.5.1.3</span> The <span class="code">$!</span> Variable</li></a>
<a href="#t42.5.2"><li class="toc-level toc-level-2"><span class="toc-number">42.5.2</span> Compile-time variables</li></a>
<a href="#t42.5.3"><li class="toc-level toc-level-2"><span class="toc-number">42.5.3</span> Dynamic variables</li></a>
<a href="#t43"><li class="toc-level toc-level-0"><span class="toc-number">43</span> Perl 6</li></a>
<a href="#t43.1"><li class="toc-level toc-level-1"><span class="toc-number">43.1</span> SYNOPSIS</li></a>
<a href="#t43.2"><li class="toc-level toc-level-1"><span class="toc-number">43.2</span> DESCRIPTION</li></a>
<a href="#t43.3"><li class="toc-level toc-level-1"><span class="toc-number">43.3</span> ENVIRONMENT VARIABLES</li></a>
<a href="#t43.3.1"><li class="toc-level toc-level-2"><span class="toc-number">43.3.1</span> Module Loading</li></a>
<a href="#t43.3.2"><li class="toc-level toc-level-2"><span class="toc-number">43.3.2</span> Error Message Verbosity and Strictness</li></a>
<a href="#t43.3.3"><li class="toc-level toc-level-2"><span class="toc-number">43.3.3</span> Affecting Precompilation</li></a>
<a href="#t43.3.4"><li class="toc-level toc-level-2"><span class="toc-number">43.3.4</span> Other</li></a>
<a href="#t44"><li class="toc-level toc-level-0"><span class="toc-number">44</span> Debugging</li></a>
<a href="#t45"><li class="toc-level toc-level-0"><span class="toc-number">45</span> class AST</li></a>
<a href="#t46"><li class="toc-level toc-level-0"><span class="toc-number">46</span> class Any</li></a>
<a href="#t46.1"><li class="toc-level toc-level-1"><span class="toc-number">46.1</span> Methods</li></a>
<a href="#t46.1.1"><li class="toc-level toc-level-2"><span class="toc-number">46.1.1</span> method ACCEPTS</li></a>
<a href="#t46.1.2"><li class="toc-level toc-level-2"><span class="toc-number">46.1.2</span> method any</li></a>
<a href="#t46.1.3"><li class="toc-level toc-level-2"><span class="toc-number">46.1.3</span> method all</li></a>
<a href="#t46.1.4"><li class="toc-level toc-level-2"><span class="toc-number">46.1.4</span> method one</li></a>
<a href="#t46.1.5"><li class="toc-level toc-level-2"><span class="toc-number">46.1.5</span> method none</li></a>
<a href="#t46.1.6"><li class="toc-level toc-level-2"><span class="toc-number">46.1.6</span> method list</li></a>
<a href="#t46.1.7"><li class="toc-level toc-level-2"><span class="toc-number">46.1.7</span> method push</li></a>
<a href="#t46.1.8"><li class="toc-level toc-level-2"><span class="toc-number">46.1.8</span> routine reverse</li></a>
<a href="#t46.1.9"><li class="toc-level toc-level-2"><span class="toc-number">46.1.9</span> method sort</li></a>
<a href="#t46.1.10"><li class="toc-level toc-level-2"><span class="toc-number">46.1.10</span> method map</li></a>
<a href="#t46.1.11"><li class="toc-level toc-level-2"><span class="toc-number">46.1.11</span> method deepmap</li></a>
<a href="#t46.1.12"><li class="toc-level toc-level-2"><span class="toc-number">46.1.12</span> method duckmap</li></a>
<a href="#t46.1.13"><li class="toc-level toc-level-2"><span class="toc-number">46.1.13</span> method flat</li></a>
<a href="#t46.1.14"><li class="toc-level toc-level-2"><span class="toc-number">46.1.14</span> method eager</li></a>
<a href="#t46.1.15"><li class="toc-level toc-level-2"><span class="toc-number">46.1.15</span> method elems</li></a>
<a href="#t46.1.16"><li class="toc-level toc-level-2"><span class="toc-number">46.1.16</span> method end</li></a>
<a href="#t46.1.17"><li class="toc-level toc-level-2"><span class="toc-number">46.1.17</span> method pairup</li></a>
<a href="#t46.1.18"><li class="toc-level toc-level-2"><span class="toc-number">46.1.18</span> sub exit</li></a>
<a href="#t47"><li class="toc-level toc-level-0"><span class="toc-number">47</span> class Array</li></a>
<a href="#t47.1"><li class="toc-level toc-level-1"><span class="toc-number">47.1</span> Methods</li></a>
<a href="#t47.1.1"><li class="toc-level toc-level-2"><span class="toc-number">47.1.1</span> routine pop</li></a>
<a href="#t47.1.2"><li class="toc-level toc-level-2"><span class="toc-number">47.1.2</span> routine push</li></a>
<a href="#t47.1.3"><li class="toc-level toc-level-2"><span class="toc-number">47.1.3</span> method append</li></a>
<a href="#t47.1.4"><li class="toc-level toc-level-2"><span class="toc-number">47.1.4</span> routine shift</li></a>
<a href="#t47.1.5"><li class="toc-level toc-level-2"><span class="toc-number">47.1.5</span> routine unshift</li></a>
<a href="#t47.1.6"><li class="toc-level toc-level-2"><span class="toc-number">47.1.6</span> method prepend</li></a>
<a href="#t47.1.7"><li class="toc-level toc-level-2"><span class="toc-number">47.1.7</span> routine splice</li></a>
<a href="#t47.1.8"><li class="toc-level toc-level-2"><span class="toc-number">47.1.8</span> method shape</li></a>
<a href="#t47.1.9"><li class="toc-level toc-level-2"><span class="toc-number">47.1.9</span> method default</li></a>
<a href="#t47.1.10"><li class="toc-level toc-level-2"><span class="toc-number">47.1.10</span> method of</li></a>
<a href="#t48"><li class="toc-level toc-level-0"><span class="toc-number">48</span> role Associative</li></a>
<a href="#t49"><li class="toc-level toc-level-0"><span class="toc-number">49</span> class Attribute</li></a>
<a href="#t49.1"><li class="toc-level toc-level-1"><span class="toc-number">49.1</span> Methods</li></a>
<a href="#t49.1.1"><li class="toc-level toc-level-2"><span class="toc-number">49.1.1</span> method name</li></a>
<a href="#t49.1.2"><li class="toc-level toc-level-2"><span class="toc-number">49.1.2</span> method package</li></a>
<a href="#t49.1.3"><li class="toc-level toc-level-2"><span class="toc-number">49.1.3</span> method has_accessor</li></a>
<a href="#t49.1.4"><li class="toc-level toc-level-2"><span class="toc-number">49.1.4</span> method readonly</li></a>
<a href="#t49.1.5"><li class="toc-level toc-level-2"><span class="toc-number">49.1.5</span> method type</li></a>
<a href="#t49.1.6"><li class="toc-level toc-level-2"><span class="toc-number">49.1.6</span> method get_value</li></a>
<a href="#t49.1.7"><li class="toc-level toc-level-2"><span class="toc-number">49.1.7</span> method set_value</li></a>
<a href="#t49.1.8"><li class="toc-level toc-level-2"><span class="toc-number">49.1.8</span> trait is required</li></a>
<a href="#t49.1.9"><li class="toc-level toc-level-2"><span class="toc-number">49.1.9</span> trait is rw</li></a>
<a href="#t50"><li class="toc-level toc-level-0"><span class="toc-number">50</span> class Backtrace</li></a>
<a href="#t50.1"><li class="toc-level toc-level-1"><span class="toc-number">50.1</span> Methods</li></a>
<a href="#t50.1.1"><li class="toc-level toc-level-2"><span class="toc-number">50.1.1</span> method new</li></a>
<a href="#t50.1.2"><li class="toc-level toc-level-2"><span class="toc-number">50.1.2</span> method Str</li></a>
<a href="#t50.1.3"><li class="toc-level toc-level-2"><span class="toc-number">50.1.3</span> method full</li></a>
<a href="#t51"><li class="toc-level toc-level-0"><span class="toc-number">51</span> class Backtrace::Frame</li></a>
<a href="#t51.1"><li class="toc-level toc-level-1"><span class="toc-number">51.1</span> Methods</li></a>
<a href="#t51.1.1"><li class="toc-level toc-level-2"><span class="toc-number">51.1.1</span> method file</li></a>
<a href="#t51.1.2"><li class="toc-level toc-level-2"><span class="toc-number">51.1.2</span> method line</li></a>
<a href="#t51.1.3"><li class="toc-level toc-level-2"><span class="toc-number">51.1.3</span> method code</li></a>
<a href="#t51.1.4"><li class="toc-level toc-level-2"><span class="toc-number">51.1.4</span> method subname</li></a>
<a href="#t51.1.5"><li class="toc-level toc-level-2"><span class="toc-number">51.1.5</span> method is-hidden</li></a>
<a href="#t51.1.6"><li class="toc-level toc-level-2"><span class="toc-number">51.1.6</span> method is-routine</li></a>
<a href="#t51.1.7"><li class="toc-level toc-level-2"><span class="toc-number">51.1.7</span> method is-setting</li></a>
<a href="#t52"><li class="toc-level toc-level-0"><span class="toc-number">52</span> class Bag</li></a>
<a href="#t52.1"><li class="toc-level toc-level-1"><span class="toc-number">52.1</span> Creating <span class="code">Bag</span> objects</li></a>
<a href="#t52.2"><li class="toc-level toc-level-1"><span class="toc-number">52.2</span> Operators</li></a>
<a href="#t52.3"><li class="toc-level toc-level-1"><span class="toc-number">52.3</span> Subroutines</li></a>
<a href="#t52.3.1"><li class="toc-level toc-level-2"><span class="toc-number">52.3.1</span> sub bag</li></a>
<a href="#t52.4"><li class="toc-level toc-level-1"><span class="toc-number">52.4</span> See Also</li></a>
<a href="#t53"><li class="toc-level toc-level-0"><span class="toc-number">53</span> class BagHash</li></a>
<a href="#t53.1"><li class="toc-level toc-level-1"><span class="toc-number">53.1</span> Creating <span class="code">BagHash</span> objects</li></a>
<a href="#t53.2"><li class="toc-level toc-level-1"><span class="toc-number">53.2</span> Operators</li></a>
<a href="#t53.3"><li class="toc-level toc-level-1"><span class="toc-number">53.3</span> See Also</li></a>
<a href="#t54"><li class="toc-level toc-level-0"><span class="toc-number">54</span> role Baggy</li></a>
<a href="#t54.1"><li class="toc-level toc-level-1"><span class="toc-number">54.1</span> Methods</li></a>
<a href="#t54.1.1"><li class="toc-level toc-level-2"><span class="toc-number">54.1.1</span> method grab</li></a>
<a href="#t54.1.2"><li class="toc-level toc-level-2"><span class="toc-number">54.1.2</span> method grabpairs</li></a>
<a href="#t54.1.3"><li class="toc-level toc-level-2"><span class="toc-number">54.1.3</span> method pick</li></a>
<a href="#t54.1.4"><li class="toc-level toc-level-2"><span class="toc-number">54.1.4</span> method pickpairs</li></a>
<a href="#t54.1.5"><li class="toc-level toc-level-2"><span class="toc-number">54.1.5</span> method roll</li></a>
<a href="#t54.1.6"><li class="toc-level toc-level-2"><span class="toc-number">54.1.6</span> method pairs</li></a>
<a href="#t54.1.7"><li class="toc-level toc-level-2"><span class="toc-number">54.1.7</span> method antipairs</li></a>
<a href="#t54.1.8"><li class="toc-level toc-level-2"><span class="toc-number">54.1.8</span> method invert</li></a>
<a href="#t54.1.9"><li class="toc-level toc-level-2"><span class="toc-number">54.1.9</span> method classify-list</li></a>
<a href="#t54.1.10"><li class="toc-level toc-level-2"><span class="toc-number">54.1.10</span> method categorize-list</li></a>
<a href="#t54.1.11"><li class="toc-level toc-level-2"><span class="toc-number">54.1.11</span> method keys</li></a>
<a href="#t54.1.12"><li class="toc-level toc-level-2"><span class="toc-number">54.1.12</span> method values</li></a>
<a href="#t54.1.13"><li class="toc-level toc-level-2"><span class="toc-number">54.1.13</span> method kv</li></a>
<a href="#t54.1.14"><li class="toc-level toc-level-2"><span class="toc-number">54.1.14</span> method kxxv</li></a>
<a href="#t54.1.15"><li class="toc-level toc-level-2"><span class="toc-number">54.1.15</span> method elems</li></a>
<a href="#t54.1.16"><li class="toc-level toc-level-2"><span class="toc-number">54.1.16</span> method total</li></a>
<a href="#t54.1.17"><li class="toc-level toc-level-2"><span class="toc-number">54.1.17</span> method default</li></a>
<a href="#t54.1.18"><li class="toc-level toc-level-2"><span class="toc-number">54.1.18</span> method hash</li></a>
<a href="#t54.1.19"><li class="toc-level toc-level-2"><span class="toc-number">54.1.19</span> method Bool</li></a>
<a href="#t54.1.20"><li class="toc-level toc-level-2"><span class="toc-number">54.1.20</span> method Set</li></a>
<a href="#t54.1.21"><li class="toc-level toc-level-2"><span class="toc-number">54.1.21</span> method SetHash</li></a>
<a href="#t54.1.22"><li class="toc-level toc-level-2"><span class="toc-number">54.1.22</span> method ACCEPTS</li></a>
<a href="#t54.2"><li class="toc-level toc-level-1"><span class="toc-number">54.2</span> See Also</li></a>
<a href="#t55"><li class="toc-level toc-level-0"><span class="toc-number">55</span> role Blob</li></a>
<a href="#t55.1"><li class="toc-level toc-level-1"><span class="toc-number">55.1</span> Methods</li></a>
<a href="#t55.1.1"><li class="toc-level toc-level-2"><span class="toc-number">55.1.1</span> method new</li></a>
<a href="#t55.1.2"><li class="toc-level toc-level-2"><span class="toc-number">55.1.2</span> method Bool</li></a>
<a href="#t55.1.3"><li class="toc-level toc-level-2"><span class="toc-number">55.1.3</span> method elems</li></a>
<a href="#t55.1.4"><li class="toc-level toc-level-2"><span class="toc-number">55.1.4</span> method decode</li></a>
<a href="#t55.1.5"><li class="toc-level toc-level-2"><span class="toc-number">55.1.5</span> method subbuf</li></a>
<a href="#t55.1.6"><li class="toc-level toc-level-2"><span class="toc-number">55.1.6</span> method unpack</li></a>
<a href="#t55.1.7"><li class="toc-level toc-level-2"><span class="toc-number">55.1.7</span> sub pack</li></a>
<a href="#t56"><li class="toc-level toc-level-0"><span class="toc-number">56</span> class Block</li></a>
<a href="#t57"><li class="toc-level toc-level-0"><span class="toc-number">57</span> enum Bool</li></a>
<a href="#t57.1"><li class="toc-level toc-level-1"><span class="toc-number">57.1</span> Methods</li></a>
<a href="#t57.1.1"><li class="toc-level toc-level-2"><span class="toc-number">57.1.1</span> routine succ</li></a>
<a href="#t57.1.2"><li class="toc-level toc-level-2"><span class="toc-number">57.1.2</span> routine pred</li></a>
<a href="#t57.1.3"><li class="toc-level toc-level-2"><span class="toc-number">57.1.3</span> routine enums</li></a>
<a href="#t57.2"><li class="toc-level toc-level-1"><span class="toc-number">57.2</span> Operators</li></a>
<a href="#t57.2.1"><li class="toc-level toc-level-2"><span class="toc-number">57.2.1</span> prefix ?</li></a>
<a href="#t57.2.2"><li class="toc-level toc-level-2"><span class="toc-number">57.2.2</span> prefix so</li></a>
<a href="#t58"><li class="toc-level toc-level-0"><span class="toc-number">58</span> role Buf</li></a>
<a href="#t59"><li class="toc-level toc-level-0"><span class="toc-number">59</span> role Callable</li></a>
<a href="#t59.1"><li class="toc-level toc-level-1"><span class="toc-number">59.1</span> Methods</li></a>
<a href="#t59.1.1"><li class="toc-level toc-level-2"><span class="toc-number">59.1.1</span> method assuming</li></a>
<a href="#t59.2"><li class="toc-level toc-level-1"><span class="toc-number">59.2</span> Operators</li></a>
<a href="#t59.2.1"><li class="toc-level toc-level-2"><span class="toc-number">59.2.1</span> <span class="code">infix:&lt;∘></span> <a name="535"></a><a name="536"></a></li></a>
<a href="#t60"><li class="toc-level toc-level-0"><span class="toc-number">60</span> class Cancellation</li></a>
<a href="#t60.1"><li class="toc-level toc-level-1"><span class="toc-number">60.1</span> Methods</li></a>
<a href="#t60.1.1"><li class="toc-level toc-level-2"><span class="toc-number">60.1.1</span> method cancel</li></a>
<a href="#t61"><li class="toc-level toc-level-0"><span class="toc-number">61</span> class Capture</li></a>
<a href="#t61.1"><li class="toc-level toc-level-1"><span class="toc-number">61.1</span> Methods</li></a>
<a href="#t61.1.1"><li class="toc-level toc-level-2"><span class="toc-number">61.1.1</span> method list</li></a>
<a href="#t61.1.2"><li class="toc-level toc-level-2"><span class="toc-number">61.1.2</span> method hash</li></a>
<a href="#t61.1.3"><li class="toc-level toc-level-2"><span class="toc-number">61.1.3</span> method elems</li></a>
<a href="#t61.1.4"><li class="toc-level toc-level-2"><span class="toc-number">61.1.4</span> method keys</li></a>
<a href="#t61.1.5"><li class="toc-level toc-level-2"><span class="toc-number">61.1.5</span> method values</li></a>
<a href="#t61.1.6"><li class="toc-level toc-level-2"><span class="toc-number">61.1.6</span> method kv</li></a>
<a href="#t61.1.7"><li class="toc-level toc-level-2"><span class="toc-number">61.1.7</span> method pairs</li></a>
<a href="#t61.1.8"><li class="toc-level toc-level-2"><span class="toc-number">61.1.8</span> method antipairs</li></a>
<a href="#t61.1.9"><li class="toc-level toc-level-2"><span class="toc-number">61.1.9</span> method Bool</li></a>
<a href="#t61.1.10"><li class="toc-level toc-level-2"><span class="toc-number">61.1.10</span> method Capture</li></a>
<a href="#t61.1.11"><li class="toc-level toc-level-2"><span class="toc-number">61.1.11</span> method Numeric</li></a>
<a href="#t62"><li class="toc-level toc-level-0"><span class="toc-number">62</span> class Channel</li></a>
<a href="#t62.1"><li class="toc-level toc-level-1"><span class="toc-number">62.1</span> Methods</li></a>
<a href="#t62.1.1"><li class="toc-level toc-level-2"><span class="toc-number">62.1.1</span> method send</li></a>
<a href="#t62.1.2"><li class="toc-level toc-level-2"><span class="toc-number">62.1.2</span> method receive</li></a>
<a href="#t62.1.3"><li class="toc-level toc-level-2"><span class="toc-number">62.1.3</span> method poll</li></a>
<a href="#t62.1.4"><li class="toc-level toc-level-2"><span class="toc-number">62.1.4</span> method close</li></a>
<a href="#t62.1.5"><li class="toc-level toc-level-2"><span class="toc-number">62.1.5</span> method list</li></a>
<a href="#t62.1.6"><li class="toc-level toc-level-2"><span class="toc-number">62.1.6</span> method closed</li></a>
<a href="#t62.1.7"><li class="toc-level toc-level-2"><span class="toc-number">62.1.7</span> method fail</li></a>
<a href="#t62.1.8"><li class="toc-level toc-level-2"><span class="toc-number">62.1.8</span> method Supply</li></a>
<a href="#t62.1.9"><li class="toc-level toc-level-2"><span class="toc-number">62.1.9</span> sub await</li></a>
<a href="#t63"><li class="toc-level toc-level-0"><span class="toc-number">63</span> class Code</li></a>
<a href="#t63.1"><li class="toc-level toc-level-1"><span class="toc-number">63.1</span> Methods</li></a>
<a href="#t63.1.1"><li class="toc-level toc-level-2"><span class="toc-number">63.1.1</span> method ACCEPTS</li></a>
<a href="#t63.1.2"><li class="toc-level toc-level-2"><span class="toc-number">63.1.2</span> method arity</li></a>
<a href="#t63.1.3"><li class="toc-level toc-level-2"><span class="toc-number">63.1.3</span> method count</li></a>
<a href="#t63.1.4"><li class="toc-level toc-level-2"><span class="toc-number">63.1.4</span> method signature</li></a>
<a href="#t63.1.5"><li class="toc-level toc-level-2"><span class="toc-number">63.1.5</span> method Str</li></a>
<a href="#t63.1.6"><li class="toc-level toc-level-2"><span class="toc-number">63.1.6</span> method file</li></a>
<a href="#t63.1.7"><li class="toc-level toc-level-2"><span class="toc-number">63.1.7</span> method line</li></a>
<a href="#t64"><li class="toc-level toc-level-0"><span class="toc-number">64</span> class Complex</li></a>
<a href="#t64.1"><li class="toc-level toc-level-1"><span class="toc-number">64.1</span> Operators</li></a>
<a href="#t64.1.1"><li class="toc-level toc-level-2"><span class="toc-number">64.1.1</span> postfix i</li></a>
<a href="#t64.2"><li class="toc-level toc-level-1"><span class="toc-number">64.2</span> Methods</li></a>
<a href="#t64.2.1"><li class="toc-level toc-level-2"><span class="toc-number">64.2.1</span> method new</li></a>
<a href="#t64.2.2"><li class="toc-level toc-level-2"><span class="toc-number">64.2.2</span> method re</li></a>
<a href="#t64.2.3"><li class="toc-level toc-level-2"><span class="toc-number">64.2.3</span> method im</li></a>
<a href="#t64.2.4"><li class="toc-level toc-level-2"><span class="toc-number">64.2.4</span> method reals</li></a>
<a href="#t64.2.5"><li class="toc-level toc-level-2"><span class="toc-number">64.2.5</span> method isNaN</li></a>
<a href="#t64.2.6"><li class="toc-level toc-level-2"><span class="toc-number">64.2.6</span> method polar</li></a>
<a href="#t64.2.7"><li class="toc-level toc-level-2"><span class="toc-number">64.2.7</span> method floor</li></a>
<a href="#t64.2.8"><li class="toc-level toc-level-2"><span class="toc-number">64.2.8</span> method ceiling</li></a>
<a href="#t64.2.9"><li class="toc-level toc-level-2"><span class="toc-number">64.2.9</span> method round</li></a>
<a href="#t64.2.10"><li class="toc-level toc-level-2"><span class="toc-number">64.2.10</span> method truncate</li></a>
<a href="#t64.2.11"><li class="toc-level toc-level-2"><span class="toc-number">64.2.11</span> method abs</li></a>
<a href="#t64.2.12"><li class="toc-level toc-level-2"><span class="toc-number">64.2.12</span> method conj</li></a>
<a href="#t64.2.13"><li class="toc-level toc-level-2"><span class="toc-number">64.2.13</span> method gist</li></a>
<a href="#t64.2.14"><li class="toc-level toc-level-2"><span class="toc-number">64.2.14</span> method perl</li></a>
<a href="#t65"><li class="toc-level toc-level-0"><span class="toc-number">65</span> class ComplexStr</li></a>
<a href="#t65.1"><li class="toc-level toc-level-1"><span class="toc-number">65.1</span> Methods</li></a>
<a href="#t65.1.1"><li class="toc-level toc-level-2"><span class="toc-number">65.1.1</span> method new</li></a>
<a href="#t65.1.2"><li class="toc-level toc-level-2"><span class="toc-number">65.1.2</span> method Numeric</li></a>
<a href="#t65.1.3"><li class="toc-level toc-level-2"><span class="toc-number">65.1.3</span> method Complex</li></a>
<a href="#t65.1.4"><li class="toc-level toc-level-2"><span class="toc-number">65.1.4</span> method Str</li></a>
<a href="#t65.2"><li class="toc-level toc-level-1"><span class="toc-number">65.2</span> Operators</li></a>
<a href="#t65.2.1"><li class="toc-level toc-level-2"><span class="toc-number">65.2.1</span> infix cmp</li></a>
<a href="#t66"><li class="toc-level toc-level-0"><span class="toc-number">66</span> class Cool</li></a>
<a href="#t66.1"><li class="toc-level toc-level-1"><span class="toc-number">66.1</span> Methods</li></a>
<a href="#t66.1.1"><li class="toc-level toc-level-2"><span class="toc-number">66.1.1</span> routine abs</li></a>
<a href="#t66.1.2"><li class="toc-level toc-level-2"><span class="toc-number">66.1.2</span> method conj</li></a>
<a href="#t66.1.3"><li class="toc-level toc-level-2"><span class="toc-number">66.1.3</span> routine sqrt</li></a>
<a href="#t66.1.4"><li class="toc-level toc-level-2"><span class="toc-number">66.1.4</span> method sign</li></a>
<a href="#t66.1.5"><li class="toc-level toc-level-2"><span class="toc-number">66.1.5</span> method rand</li></a>
<a href="#t66.1.6"><li class="toc-level toc-level-2"><span class="toc-number">66.1.6</span> routine sin</li></a>
<a href="#t66.1.7"><li class="toc-level toc-level-2"><span class="toc-number">66.1.7</span> routine asin</li></a>
<a href="#t66.1.8"><li class="toc-level toc-level-2"><span class="toc-number">66.1.8</span> routine cos</li></a>
<a href="#t66.1.9"><li class="toc-level toc-level-2"><span class="toc-number">66.1.9</span> routine acos</li></a>
<a href="#t66.1.10"><li class="toc-level toc-level-2"><span class="toc-number">66.1.10</span> routine tan</li></a>
<a href="#t66.1.11"><li class="toc-level toc-level-2"><span class="toc-number">66.1.11</span> routine atan</li></a>
<a href="#t66.1.12"><li class="toc-level toc-level-2"><span class="toc-number">66.1.12</span> routine atan2</li></a>
<a href="#t66.1.13"><li class="toc-level toc-level-2"><span class="toc-number">66.1.13</span> method sec</li></a>
<a href="#t66.1.14"><li class="toc-level toc-level-2"><span class="toc-number">66.1.14</span> routine asec</li></a>
<a href="#t66.1.15"><li class="toc-level toc-level-2"><span class="toc-number">66.1.15</span> routine cosec</li></a>
<a href="#t66.1.16"><li class="toc-level toc-level-2"><span class="toc-number">66.1.16</span> routine acosec</li></a>
<a href="#t66.1.17"><li class="toc-level toc-level-2"><span class="toc-number">66.1.17</span> routine cotan</li></a>
<a href="#t66.1.18"><li class="toc-level toc-level-2"><span class="toc-number">66.1.18</span> routine acotan</li></a>
<a href="#t66.1.19"><li class="toc-level toc-level-2"><span class="toc-number">66.1.19</span> routine sinh</li></a>
<a href="#t66.1.20"><li class="toc-level toc-level-2"><span class="toc-number">66.1.20</span> routine asinh</li></a>
<a href="#t66.1.21"><li class="toc-level toc-level-2"><span class="toc-number">66.1.21</span> routine cosh</li></a>
<a href="#t66.1.22"><li class="toc-level toc-level-2"><span class="toc-number">66.1.22</span> routine acosh</li></a>
<a href="#t66.1.23"><li class="toc-level toc-level-2"><span class="toc-number">66.1.23</span> routine tanh</li></a>
<a href="#t66.1.24"><li class="toc-level toc-level-2"><span class="toc-number">66.1.24</span> routine atanh</li></a>
<a href="#t66.1.25"><li class="toc-level toc-level-2"><span class="toc-number">66.1.25</span> routine sech</li></a>
<a href="#t66.1.26"><li class="toc-level toc-level-2"><span class="toc-number">66.1.26</span> routine asech</li></a>
<a href="#t66.1.27"><li class="toc-level toc-level-2"><span class="toc-number">66.1.27</span> routine cosech</li></a>
<a href="#t66.1.28"><li class="toc-level toc-level-2"><span class="toc-number">66.1.28</span> routine acosech</li></a>
<a href="#t66.1.29"><li class="toc-level toc-level-2"><span class="toc-number">66.1.29</span> routine cotanh</li></a>
<a href="#t66.1.30"><li class="toc-level toc-level-2"><span class="toc-number">66.1.30</span> routine acotanh</li></a>
<a href="#t66.1.31"><li class="toc-level toc-level-2"><span class="toc-number">66.1.31</span> routine cis</li></a>
<a href="#t66.1.32"><li class="toc-level toc-level-2"><span class="toc-number">66.1.32</span> routine log</li></a>
<a href="#t66.1.33"><li class="toc-level toc-level-2"><span class="toc-number">66.1.33</span> routine log10</li></a>
<a href="#t66.1.34"><li class="toc-level toc-level-2"><span class="toc-number">66.1.34</span> method exp</li></a>
<a href="#t66.1.35"><li class="toc-level toc-level-2"><span class="toc-number">66.1.35</span> method unpolar</li></a>
<a href="#t66.1.36"><li class="toc-level toc-level-2"><span class="toc-number">66.1.36</span> routine round</li></a>
<a href="#t66.1.37"><li class="toc-level toc-level-2"><span class="toc-number">66.1.37</span> routine floor</li></a>
<a href="#t66.1.38"><li class="toc-level toc-level-2"><span class="toc-number">66.1.38</span> routine ceiling</li></a>
<a href="#t66.1.39"><li class="toc-level toc-level-2"><span class="toc-number">66.1.39</span> routine truncate</li></a>
<a href="#t66.1.40"><li class="toc-level toc-level-2"><span class="toc-number">66.1.40</span> routine ord</li></a>
<a href="#t66.1.41"><li class="toc-level toc-level-2"><span class="toc-number">66.1.41</span> routine chr</li></a>
<a href="#t66.1.42"><li class="toc-level toc-level-2"><span class="toc-number">66.1.42</span> routine chars</li></a>
<a href="#t66.1.43"><li class="toc-level toc-level-2"><span class="toc-number">66.1.43</span> routine codes</li></a>
<a href="#t66.1.44"><li class="toc-level toc-level-2"><span class="toc-number">66.1.44</span> routine flip</li></a>
<a href="#t66.1.45"><li class="toc-level toc-level-2"><span class="toc-number">66.1.45</span> routine trim</li></a>
<a href="#t66.1.46"><li class="toc-level toc-level-2"><span class="toc-number">66.1.46</span> routine trim-leading</li></a>
<a href="#t66.1.47"><li class="toc-level toc-level-2"><span class="toc-number">66.1.47</span> routine trim-trailing</li></a>
<a href="#t66.1.48"><li class="toc-level toc-level-2"><span class="toc-number">66.1.48</span> routine lc</li></a>
<a href="#t66.1.49"><li class="toc-level toc-level-2"><span class="toc-number">66.1.49</span> routine uc</li></a>
<a href="#t66.1.50"><li class="toc-level toc-level-2"><span class="toc-number">66.1.50</span> routine tc</li></a>
<a href="#t66.1.51"><li class="toc-level toc-level-2"><span class="toc-number">66.1.51</span> routine tclc</li></a>
<a href="#t66.1.52"><li class="toc-level toc-level-2"><span class="toc-number">66.1.52</span> routine wordcase</li></a>
<a href="#t66.1.53"><li class="toc-level toc-level-2"><span class="toc-number">66.1.53</span> routine samecase</li></a>
<a href="#t66.1.54"><li class="toc-level toc-level-2"><span class="toc-number">66.1.54</span> routine uniname</li></a>
<a href="#t66.1.55"><li class="toc-level toc-level-2"><span class="toc-number">66.1.55</span> routine uninames</li></a>
<a href="#t66.1.56"><li class="toc-level toc-level-2"><span class="toc-number">66.1.56</span> routine chop</li></a>
<a href="#t66.1.57"><li class="toc-level toc-level-2"><span class="toc-number">66.1.57</span> routine chomp</li></a>
<a href="#t66.1.58"><li class="toc-level toc-level-2"><span class="toc-number">66.1.58</span> routine substr</li></a>
<a href="#t66.1.59"><li class="toc-level toc-level-2"><span class="toc-number">66.1.59</span> routine ords</li></a>
<a href="#t66.1.60"><li class="toc-level toc-level-2"><span class="toc-number">66.1.60</span> routine chrs</li></a>
<a href="#t66.1.61"><li class="toc-level toc-level-2"><span class="toc-number">66.1.61</span> routine split</li></a>
<a href="#t66.1.62"><li class="toc-level toc-level-2"><span class="toc-number">66.1.62</span> routine lines</li></a>
<a href="#t66.1.63"><li class="toc-level toc-level-2"><span class="toc-number">66.1.63</span> method words</li></a>
<a href="#t66.1.64"><li class="toc-level toc-level-2"><span class="toc-number">66.1.64</span> routine comb</li></a>
<a href="#t66.1.65"><li class="toc-level toc-level-2"><span class="toc-number">66.1.65</span> method contains</li></a>
<a href="#t66.1.66"><li class="toc-level toc-level-2"><span class="toc-number">66.1.66</span> routine index</li></a>
<a href="#t66.1.67"><li class="toc-level toc-level-2"><span class="toc-number">66.1.67</span> routine rindex</li></a>
<a href="#t66.1.68"><li class="toc-level toc-level-2"><span class="toc-number">66.1.68</span> method fmt</li></a>
<a href="#t66.1.69"><li class="toc-level toc-level-2"><span class="toc-number">66.1.69</span> routine roots</li></a>
<a href="#t66.1.70"><li class="toc-level toc-level-2"><span class="toc-number">66.1.70</span> method IO</li></a>
<a href="#t66.1.71"><li class="toc-level toc-level-2"><span class="toc-number">66.1.71</span> routine EVAL</li></a>
<a href="#t66.1.72"><li class="toc-level toc-level-2"><span class="toc-number">66.1.72</span> routine EVALFILE</li></a>
<a href="#t67"><li class="toc-level toc-level-0"><span class="toc-number">67</span> class CurrentThreadScheduler</li></a>
<a href="#t68"><li class="toc-level toc-level-0"><span class="toc-number">68</span> class Cursor</li></a>
<a href="#t69"><li class="toc-level toc-level-0"><span class="toc-number">69</span> class Date</li></a>
<a href="#t69.1"><li class="toc-level toc-level-1"><span class="toc-number">69.1</span> Methods</li></a>
<a href="#t69.1.1"><li class="toc-level toc-level-2"><span class="toc-number">69.1.1</span> method new</li></a>
<a href="#t69.1.2"><li class="toc-level toc-level-2"><span class="toc-number">69.1.2</span> method new-from-daycount</li></a>
<a href="#t69.1.3"><li class="toc-level toc-level-2"><span class="toc-number">69.1.3</span> method clone</li></a>
<a href="#t69.1.4"><li class="toc-level toc-level-2"><span class="toc-number">69.1.4</span> method today</li></a>
<a href="#t69.1.5"><li class="toc-level toc-level-2"><span class="toc-number">69.1.5</span> method later</li></a>
<a href="#t69.1.6"><li class="toc-level toc-level-2"><span class="toc-number">69.1.6</span> method earlier</li></a>
<a href="#t69.1.7"><li class="toc-level toc-level-2"><span class="toc-number">69.1.7</span> method truncated-to</li></a>
<a href="#t69.1.8"><li class="toc-level toc-level-2"><span class="toc-number">69.1.8</span> method succ</li></a>
<a href="#t69.1.9"><li class="toc-level toc-level-2"><span class="toc-number">69.1.9</span> method pred</li></a>
<a href="#t69.1.10"><li class="toc-level toc-level-2"><span class="toc-number">69.1.10</span> method Str</li></a>
<a href="#t69.1.11"><li class="toc-level toc-level-2"><span class="toc-number">69.1.11</span> method gist</li></a>
<a href="#t69.2"><li class="toc-level toc-level-1"><span class="toc-number">69.2</span> Functions</li></a>
<a href="#t69.2.1"><li class="toc-level toc-level-2"><span class="toc-number">69.2.1</span> sub sleep</li></a>
<a href="#t69.2.2"><li class="toc-level toc-level-2"><span class="toc-number">69.2.2</span> sub sleep-timer</li></a>
<a href="#t69.2.3"><li class="toc-level toc-level-2"><span class="toc-number">69.2.3</span> sub sleep-until</li></a>
<a href="#t70"><li class="toc-level toc-level-0"><span class="toc-number">70</span> class DateTime</li></a>
<a href="#t70.1"><li class="toc-level toc-level-1"><span class="toc-number">70.1</span> Methods</li></a>
<a href="#t70.1.1"><li class="toc-level toc-level-2"><span class="toc-number">70.1.1</span> method new</li></a>
<a href="#t70.1.2"><li class="toc-level toc-level-2"><span class="toc-number">70.1.2</span> method now</li></a>
<a href="#t70.1.3"><li class="toc-level toc-level-2"><span class="toc-number">70.1.3</span> method clone</li></a>
<a href="#t70.1.4"><li class="toc-level toc-level-2"><span class="toc-number">70.1.4</span> method hour</li></a>
<a href="#t70.1.5"><li class="toc-level toc-level-2"><span class="toc-number">70.1.5</span> method minute</li></a>
<a href="#t70.1.6"><li class="toc-level toc-level-2"><span class="toc-number">70.1.6</span> method second</li></a>
<a href="#t70.1.7"><li class="toc-level toc-level-2"><span class="toc-number">70.1.7</span> method whole-second</li></a>
<a href="#t70.1.8"><li class="toc-level toc-level-2"><span class="toc-number">70.1.8</span> method timezone</li></a>
<a href="#t70.1.9"><li class="toc-level toc-level-2"><span class="toc-number">70.1.9</span> method offset</li></a>
<a href="#t70.1.10"><li class="toc-level toc-level-2"><span class="toc-number">70.1.10</span> method offset-in-minutes</li></a>
<a href="#t70.1.11"><li class="toc-level toc-level-2"><span class="toc-number">70.1.11</span> method offset-in-hours</li></a>
<a href="#t70.1.12"><li class="toc-level toc-level-2"><span class="toc-number">70.1.12</span> method Str</li></a>
<a href="#t70.1.13"><li class="toc-level toc-level-2"><span class="toc-number">70.1.13</span> method Instant</li></a>
<a href="#t70.1.14"><li class="toc-level toc-level-2"><span class="toc-number">70.1.14</span> method posix</li></a>
<a href="#t70.1.15"><li class="toc-level toc-level-2"><span class="toc-number">70.1.15</span> method later</li></a>
<a href="#t70.1.16"><li class="toc-level toc-level-2"><span class="toc-number">70.1.16</span> method earlier</li></a>
<a href="#t70.1.17"><li class="toc-level toc-level-2"><span class="toc-number">70.1.17</span> method truncated-to</li></a>
<a href="#t70.1.18"><li class="toc-level toc-level-2"><span class="toc-number">70.1.18</span> method Date</li></a>
<a href="#t70.1.19"><li class="toc-level toc-level-2"><span class="toc-number">70.1.19</span> method utc</li></a>
<a href="#t70.1.20"><li class="toc-level toc-level-2"><span class="toc-number">70.1.20</span> method in-timezone</li></a>
<a href="#t70.1.21"><li class="toc-level toc-level-2"><span class="toc-number">70.1.21</span> method local</li></a>
<a href="#t71"><li class="toc-level toc-level-0"><span class="toc-number">71</span> role Dateish</li></a>
<a href="#t71.1"><li class="toc-level toc-level-1"><span class="toc-number">71.1</span> Methods</li></a>
<a href="#t71.1.1"><li class="toc-level toc-level-2"><span class="toc-number">71.1.1</span> method year</li></a>
<a href="#t71.1.2"><li class="toc-level toc-level-2"><span class="toc-number">71.1.2</span> method month</li></a>
<a href="#t71.1.3"><li class="toc-level toc-level-2"><span class="toc-number">71.1.3</span> method day</li></a>
<a href="#t71.1.4"><li class="toc-level toc-level-2"><span class="toc-number">71.1.4</span> method formatter</li></a>
<a href="#t71.1.5"><li class="toc-level toc-level-2"><span class="toc-number">71.1.5</span> method is-leap-year</li></a>
<a href="#t71.1.6"><li class="toc-level toc-level-2"><span class="toc-number">71.1.6</span> method day-of-month</li></a>
<a href="#t71.1.7"><li class="toc-level toc-level-2"><span class="toc-number">71.1.7</span> method day-of-week</li></a>
<a href="#t71.1.8"><li class="toc-level toc-level-2"><span class="toc-number">71.1.8</span> method day-of-year</li></a>
<a href="#t71.1.9"><li class="toc-level toc-level-2"><span class="toc-number">71.1.9</span> method days-in-month</li></a>
<a href="#t71.1.10"><li class="toc-level toc-level-2"><span class="toc-number">71.1.10</span> method week</li></a>
<a href="#t71.1.11"><li class="toc-level toc-level-2"><span class="toc-number">71.1.11</span> method week-number</li></a>
<a href="#t71.1.12"><li class="toc-level toc-level-2"><span class="toc-number">71.1.12</span> method week-year</li></a>
<a href="#t71.1.13"><li class="toc-level toc-level-2"><span class="toc-number">71.1.13</span> method weekday-of-month</li></a>
<a href="#t71.1.14"><li class="toc-level toc-level-2"><span class="toc-number">71.1.14</span> method yyyy-mm-dd</li></a>
<a href="#t71.1.15"><li class="toc-level toc-level-2"><span class="toc-number">71.1.15</span> method daycount</li></a>
<a href="#t72"><li class="toc-level toc-level-0"><span class="toc-number">72</span> class Duration</li></a>
<a href="#t73"><li class="toc-level toc-level-0"><span class="toc-number">73</span> class Exception</li></a>
<a href="#t73.1"><li class="toc-level toc-level-1"><span class="toc-number">73.1</span> Methods</li></a>
<a href="#t73.1.1"><li class="toc-level toc-level-2"><span class="toc-number">73.1.1</span> method message</li></a>
<a href="#t73.1.2"><li class="toc-level toc-level-2"><span class="toc-number">73.1.2</span> method backtrace</li></a>
<a href="#t73.1.3"><li class="toc-level toc-level-2"><span class="toc-number">73.1.3</span> method throw</li></a>
<a href="#t73.1.4"><li class="toc-level toc-level-2"><span class="toc-number">73.1.4</span> method resume</li></a>
<a href="#t73.1.5"><li class="toc-level toc-level-2"><span class="toc-number">73.1.5</span> method rethrow</li></a>
<a href="#t73.1.6"><li class="toc-level toc-level-2"><span class="toc-number">73.1.6</span> method fail</li></a>
<a href="#t73.1.7"><li class="toc-level toc-level-2"><span class="toc-number">73.1.7</span> method gist</li></a>
<a href="#t73.1.8"><li class="toc-level toc-level-2"><span class="toc-number">73.1.8</span> sub die</li></a>
<a href="#t73.1.9"><li class="toc-level toc-level-2"><span class="toc-number">73.1.9</span> sub warn</li></a>
<a href="#t74"><li class="toc-level toc-level-0"><span class="toc-number">74</span> class Failure</li></a>
<a href="#t74.1"><li class="toc-level toc-level-1"><span class="toc-number">74.1</span> Methods</li></a>
<a href="#t74.1.1"><li class="toc-level toc-level-2"><span class="toc-number">74.1.1</span> method handled</li></a>
<a href="#t74.1.2"><li class="toc-level toc-level-2"><span class="toc-number">74.1.2</span> method exception</li></a>
<a href="#t74.1.3"><li class="toc-level toc-level-2"><span class="toc-number">74.1.3</span> method Bool</li></a>
<a href="#t74.1.4"><li class="toc-level toc-level-2"><span class="toc-number">74.1.4</span> method defined</li></a>
<a href="#t75"><li class="toc-level toc-level-0"><span class="toc-number">75</span> class FatRat</li></a>
<a href="#t76"><li class="toc-level toc-level-0"><span class="toc-number">76</span> class Grammar</li></a>
<a href="#t76.1"><li class="toc-level toc-level-1"><span class="toc-number">76.1</span> Methods</li></a>
<a href="#t76.1.1"><li class="toc-level toc-level-2"><span class="toc-number">76.1.1</span> method parse</li></a>
<a href="#t76.1.2"><li class="toc-level toc-level-2"><span class="toc-number">76.1.2</span> method subparse</li></a>
<a href="#t76.1.3"><li class="toc-level toc-level-2"><span class="toc-number">76.1.3</span> method parsefile</li></a>
<a href="#t77"><li class="toc-level toc-level-0"><span class="toc-number">77</span> class Hash</li></a>
<a href="#t77.1"><li class="toc-level toc-level-1"><span class="toc-number">77.1</span> Hash assignment</li></a>
<a href="#t77.1.1"><li class="toc-level toc-level-2"><span class="toc-number">77.1.1</span> Non-string keys</li></a>
<a href="#t77.2"><li class="toc-level toc-level-1"><span class="toc-number">77.2</span> Looping over hash keys and values</li></a>
<a href="#t77.2.1"><li class="toc-level toc-level-2"><span class="toc-number">77.2.1</span> Object hashes and type constraints <a name="537"></a><a name="538"></a></li></a>
<a href="#t77.2.2"><li class="toc-level toc-level-2"><span class="toc-number">77.2.2</span> In place editing of values</li></a>
<a href="#t77.3"><li class="toc-level toc-level-1"><span class="toc-number">77.3</span> Methods</li></a>
<a href="#t77.3.1"><li class="toc-level toc-level-2"><span class="toc-number">77.3.1</span> method push</li></a>
<a href="#t77.3.2"><li class="toc-level toc-level-2"><span class="toc-number">77.3.2</span> method default</li></a>
<a href="#t77.3.3"><li class="toc-level toc-level-2"><span class="toc-number">77.3.3</span> method keyof</li></a>
<a href="#t77.3.4"><li class="toc-level toc-level-2"><span class="toc-number">77.3.4</span> method of</li></a>
<a href="#t77.4"><li class="toc-level toc-level-1"><span class="toc-number">77.4</span> Subscript Adverbs</li></a>
<a href="#t77.4.1"><li class="toc-level toc-level-2"><span class="toc-number">77.4.1</span> <span class="code">:exists</span></li></a>
<a href="#t77.4.2"><li class="toc-level toc-level-2"><span class="toc-number">77.4.2</span> <span class="code">:delete</span></li></a>
<a href="#t77.4.3"><li class="toc-level toc-level-2"><span class="toc-number">77.4.3</span> <span class="code">:p</span></li></a>
<a href="#t77.4.4"><li class="toc-level toc-level-2"><span class="toc-number">77.4.4</span> <span class="code">:v</span> and <span class="code">:k</span></li></a>
<a href="#t78"><li class="toc-level toc-level-0"><span class="toc-number">78</span> role IO</li></a>
<a href="#t78.1"><li class="toc-level toc-level-1"><span class="toc-number">78.1</span> Routines</li></a>
<a href="#t78.1.1"><li class="toc-level toc-level-2"><span class="toc-number">78.1.1</span> sub print</li></a>
<a href="#t78.1.2"><li class="toc-level toc-level-2"><span class="toc-number">78.1.2</span> sub put</li></a>
<a href="#t78.1.3"><li class="toc-level toc-level-2"><span class="toc-number">78.1.3</span> sub say</li></a>
<a href="#t78.1.4"><li class="toc-level toc-level-2"><span class="toc-number">78.1.4</span> sub note</li></a>
<a href="#t78.1.5"><li class="toc-level toc-level-2"><span class="toc-number">78.1.5</span> sub dd</li></a>
<a href="#t78.1.6"><li class="toc-level toc-level-2"><span class="toc-number">78.1.6</span> sub prompt</li></a>
<a href="#t78.1.7"><li class="toc-level toc-level-2"><span class="toc-number">78.1.7</span> sub open</li></a>
<a href="#t78.1.7.1"><li class="toc-level toc-level-3"><span class="toc-number">78.1.7.1</span> File mode options</li></a>
<a href="#t78.1.7.2"><li class="toc-level toc-level-3"><span class="toc-number">78.1.7.2</span> Encoding options</li></a>
<a href="#t78.1.7.3"><li class="toc-level toc-level-3"><span class="toc-number">78.1.7.3</span> Newline options</li></a>
<a href="#t78.1.8"><li class="toc-level toc-level-2"><span class="toc-number">78.1.8</span> method close</li></a>
<a href="#t78.1.9"><li class="toc-level toc-level-2"><span class="toc-number">78.1.9</span> sub slurp</li></a>
<a href="#t78.1.10"><li class="toc-level toc-level-2"><span class="toc-number">78.1.10</span> sub spurt</li></a>
<a href="#t78.1.10.1"><li class="toc-level toc-level-3"><span class="toc-number">78.1.10.1</span> Options</li></a>
<a href="#t78.1.10.2"><li class="toc-level toc-level-3"><span class="toc-number">78.1.10.2</span> Examples</li></a>
<a href="#t78.1.11"><li class="toc-level toc-level-2"><span class="toc-number">78.1.11</span> sub run</li></a>
<a href="#t78.1.12"><li class="toc-level toc-level-2"><span class="toc-number">78.1.12</span> sub shell</li></a>
<a href="#t78.2"><li class="toc-level toc-level-1"><span class="toc-number">78.2</span> Related classes</li></a>
<a href="#t79"><li class="toc-level toc-level-0"><span class="toc-number">79</span> class IO::Handle</li></a>
<a href="#t79.1"><li class="toc-level toc-level-1"><span class="toc-number">79.1</span> Methods</li></a>
<a href="#t79.1.1"><li class="toc-level toc-level-2"><span class="toc-number">79.1.1</span> method get</li></a>
<a href="#t79.1.2"><li class="toc-level toc-level-2"><span class="toc-number">79.1.2</span> method getc</li></a>
<a href="#t79.1.3"><li class="toc-level toc-level-2"><span class="toc-number">79.1.3</span> method eof</li></a>
<a href="#t79.1.4"><li class="toc-level toc-level-2"><span class="toc-number">79.1.4</span> method lines</li></a>
<a href="#t79.1.5"><li class="toc-level toc-level-2"><span class="toc-number">79.1.5</span> method words</li></a>
<a href="#t79.1.6"><li class="toc-level toc-level-2"><span class="toc-number">79.1.6</span> method split</li></a>
<a href="#t79.1.7"><li class="toc-level toc-level-2"><span class="toc-number">79.1.7</span> method comb</li></a>
<a href="#t79.1.8"><li class="toc-level toc-level-2"><span class="toc-number">79.1.8</span> method print</li></a>
<a href="#t79.1.9"><li class="toc-level toc-level-2"><span class="toc-number">79.1.9</span> method print-nl</li></a>
<a href="#t79.1.10"><li class="toc-level toc-level-2"><span class="toc-number">79.1.10</span> method say</li></a>
<a href="#t79.1.11"><li class="toc-level toc-level-2"><span class="toc-number">79.1.11</span> method read</li></a>
<a href="#t79.1.12"><li class="toc-level toc-level-2"><span class="toc-number">79.1.12</span> method readchars</li></a>
<a href="#t79.1.13"><li class="toc-level toc-level-2"><span class="toc-number">79.1.13</span> method write</li></a>
<a href="#t79.1.14"><li class="toc-level toc-level-2"><span class="toc-number">79.1.14</span> method seek</li></a>
<a href="#t79.1.15"><li class="toc-level toc-level-2"><span class="toc-number">79.1.15</span> method tell</li></a>
<a href="#t79.1.16"><li class="toc-level toc-level-2"><span class="toc-number">79.1.16</span> method slurp-rest</li></a>
<a href="#t79.1.17"><li class="toc-level toc-level-2"><span class="toc-number">79.1.17</span> method Supply</li></a>
<a href="#t79.1.18"><li class="toc-level toc-level-2"><span class="toc-number">79.1.18</span> method path</li></a>
<a href="#t79.1.19"><li class="toc-level toc-level-2"><span class="toc-number">79.1.19</span> method close</li></a>
<a href="#t79.1.20"><li class="toc-level toc-level-2"><span class="toc-number">79.1.20</span> method flush</li></a>
<a href="#t79.1.21"><li class="toc-level toc-level-2"><span class="toc-number">79.1.21</span> method native-descriptor</li></a>
<a href="#t79.1.22"><li class="toc-level toc-level-2"><span class="toc-number">79.1.22</span> method opened</li></a>
<a href="#t79.1.23"><li class="toc-level toc-level-2"><span class="toc-number">79.1.23</span> method t</li></a>
<a href="#t79.2"><li class="toc-level toc-level-1"><span class="toc-number">79.2</span> Related roles and classes</li></a>
<a href="#t80"><li class="toc-level toc-level-0"><span class="toc-number">80</span> class IO::Notification</li></a>
<a href="#t80.1"><li class="toc-level toc-level-1"><span class="toc-number">80.1</span> Methods</li></a>
<a href="#t80.1.1"><li class="toc-level toc-level-2"><span class="toc-number">80.1.1</span> method watch-path</li></a>
<a href="#t81"><li class="toc-level toc-level-0"><span class="toc-number">81</span> class IO::Path</li></a>
<a href="#t81.1"><li class="toc-level toc-level-1"><span class="toc-number">81.1</span> Methods</li></a>
<a href="#t81.1.1"><li class="toc-level toc-level-2"><span class="toc-number">81.1.1</span> method new</li></a>
<a href="#t81.1.2"><li class="toc-level toc-level-2"><span class="toc-number">81.1.2</span> method abspath</li></a>
<a href="#t81.1.3"><li class="toc-level toc-level-2"><span class="toc-number">81.1.3</span> method basename</li></a>
<a href="#t81.1.4"><li class="toc-level toc-level-2"><span class="toc-number">81.1.4</span> method extension</li></a>
<a href="#t81.1.5"><li class="toc-level toc-level-2"><span class="toc-number">81.1.5</span> method dirname</li></a>
<a href="#t81.1.6"><li class="toc-level toc-level-2"><span class="toc-number">81.1.6</span> method volume</li></a>
<a href="#t81.1.7"><li class="toc-level toc-level-2"><span class="toc-number">81.1.7</span> method parts</li></a>
<a href="#t81.1.8"><li class="toc-level toc-level-2"><span class="toc-number">81.1.8</span> method path</li></a>
<a href="#t81.1.9"><li class="toc-level toc-level-2"><span class="toc-number">81.1.9</span> method Str</li></a>
<a href="#t81.1.10"><li class="toc-level toc-level-2"><span class="toc-number">81.1.10</span> method open</li></a>
<a href="#t81.1.11"><li class="toc-level toc-level-2"><span class="toc-number">81.1.11</span> method watch</li></a>
<a href="#t81.1.12"><li class="toc-level toc-level-2"><span class="toc-number">81.1.12</span> method is-absolute</li></a>
<a href="#t81.1.13"><li class="toc-level toc-level-2"><span class="toc-number">81.1.13</span> method is-relative</li></a>
<a href="#t81.1.14"><li class="toc-level toc-level-2"><span class="toc-number">81.1.14</span> method absolute</li></a>
<a href="#t81.1.15"><li class="toc-level toc-level-2"><span class="toc-number">81.1.15</span> method relative</li></a>
<a href="#t81.1.16"><li class="toc-level toc-level-2"><span class="toc-number">81.1.16</span> method parent</li></a>
<a href="#t81.1.17"><li class="toc-level toc-level-2"><span class="toc-number">81.1.17</span> method child</li></a>
<a href="#t81.1.18"><li class="toc-level toc-level-2"><span class="toc-number">81.1.18</span> method resolve</li></a>
<a href="#t81.1.19"><li class="toc-level toc-level-2"><span class="toc-number">81.1.19</span> routine dir</li></a>
<a href="#t81.1.20"><li class="toc-level toc-level-2"><span class="toc-number">81.1.20</span> routine slurp</li></a>
<a href="#t81.1.21"><li class="toc-level toc-level-2"><span class="toc-number">81.1.21</span> routine spurt</li></a>
<a href="#t81.1.22"><li class="toc-level toc-level-2"><span class="toc-number">81.1.22</span> routine chdir</li></a>
<a href="#t81.1.23"><li class="toc-level toc-level-2"><span class="toc-number">81.1.23</span> routine mkdir</li></a>
<a href="#t81.1.24"><li class="toc-level toc-level-2"><span class="toc-number">81.1.24</span> routine rmdir</li></a>
<a href="#t81.1.25"><li class="toc-level toc-level-2"><span class="toc-number">81.1.25</span> routine chmod</li></a>
<a href="#t81.1.26"><li class="toc-level toc-level-2"><span class="toc-number">81.1.26</span> routine rename</li></a>
<a href="#t81.1.27"><li class="toc-level toc-level-2"><span class="toc-number">81.1.27</span> routine copy</li></a>
<a href="#t81.1.28"><li class="toc-level toc-level-2"><span class="toc-number">81.1.28</span> routine move</li></a>
<a href="#t81.1.29"><li class="toc-level toc-level-2"><span class="toc-number">81.1.29</span> routine symlink</li></a>
<a href="#t81.1.30"><li class="toc-level toc-level-2"><span class="toc-number">81.1.30</span> routine link</li></a>
<a href="#t81.1.31"><li class="toc-level toc-level-2"><span class="toc-number">81.1.31</span> routine unlink</li></a>
<a href="#t81.1.32"><li class="toc-level toc-level-2"><span class="toc-number">81.1.32</span> method IO</li></a>
<a href="#t81.1.33"><li class="toc-level toc-level-2"><span class="toc-number">81.1.33</span> method SPEC</li></a>
<a href="#t81.2"><li class="toc-level toc-level-1"><span class="toc-number">81.2</span> File test operators</li></a>
<a href="#t81.3"><li class="toc-level toc-level-1"><span class="toc-number">81.3</span> File timestamp retrieval</li></a>
<a href="#t81.3.1"><li class="toc-level toc-level-2"><span class="toc-number">81.3.1</span> method modified</li></a>
<a href="#t81.3.2"><li class="toc-level toc-level-2"><span class="toc-number">81.3.2</span> method accessed</li></a>
<a href="#t81.3.3"><li class="toc-level toc-level-2"><span class="toc-number">81.3.3</span> method changed</li></a>
<a href="#t81.4"><li class="toc-level toc-level-1"><span class="toc-number">81.4</span> File permissions retrieval</li></a>
<a href="#t81.4.1"><li class="toc-level toc-level-2"><span class="toc-number">81.4.1</span> method mode</li></a>
<a href="#t81.5"><li class="toc-level toc-level-1"><span class="toc-number">81.5</span> Related roles and classes</li></a>
<a href="#t82"><li class="toc-level toc-level-0"><span class="toc-number">82</span> class IO::Pipe</li></a>
<a href="#t82.1"><li class="toc-level toc-level-1"><span class="toc-number">82.1</span> Methods</li></a>
<a href="#t82.1.1"><li class="toc-level toc-level-2"><span class="toc-number">82.1.1</span> method proc</li></a>
<a href="#t83"><li class="toc-level toc-level-0"><span class="toc-number">83</span> role IO::Socket</li></a>
<a href="#t83.1"><li class="toc-level toc-level-1"><span class="toc-number">83.1</span> Methods</li></a>
<a href="#t83.1.1"><li class="toc-level toc-level-2"><span class="toc-number">83.1.1</span> method recv</li></a>
<a href="#t83.1.2"><li class="toc-level toc-level-2"><span class="toc-number">83.1.2</span> method read</li></a>
<a href="#t83.1.3"><li class="toc-level toc-level-2"><span class="toc-number">83.1.3</span> method print</li></a>
<a href="#t83.1.4"><li class="toc-level toc-level-2"><span class="toc-number">83.1.4</span> method write</li></a>
<a href="#t83.1.5"><li class="toc-level toc-level-2"><span class="toc-number">83.1.5</span> method put</li></a>
<a href="#t83.1.6"><li class="toc-level toc-level-2"><span class="toc-number">83.1.6</span> method close</li></a>
<a href="#t83.1.7"><li class="toc-level toc-level-2"><span class="toc-number">83.1.7</span> method native-descriptor</li></a>
<a href="#t84"><li class="toc-level toc-level-0"><span class="toc-number">84</span> class IO::Socket::Async</li></a>
<a href="#t84.1"><li class="toc-level toc-level-1"><span class="toc-number">84.1</span> Methods</li></a>
<a href="#t84.1.1"><li class="toc-level toc-level-2"><span class="toc-number">84.1.1</span> method connect</li></a>
<a href="#t84.1.2"><li class="toc-level toc-level-2"><span class="toc-number">84.1.2</span> method listen</li></a>
<a href="#t84.1.3"><li class="toc-level toc-level-2"><span class="toc-number">84.1.3</span> method udp</li></a>
<a href="#t84.1.4"><li class="toc-level toc-level-2"><span class="toc-number">84.1.4</span> method bind-udp</li></a>
<a href="#t84.1.5"><li class="toc-level toc-level-2"><span class="toc-number">84.1.5</span> method print</li></a>
<a href="#t84.1.6"><li class="toc-level toc-level-2"><span class="toc-number">84.1.6</span> method print-to</li></a>
<a href="#t84.1.7"><li class="toc-level toc-level-2"><span class="toc-number">84.1.7</span> method write</li></a>
<a href="#t84.1.8"><li class="toc-level toc-level-2"><span class="toc-number">84.1.8</span> method write-to</li></a>
<a href="#t84.1.9"><li class="toc-level toc-level-2"><span class="toc-number">84.1.9</span> method Supply</li></a>
<a href="#t84.1.10"><li class="toc-level toc-level-2"><span class="toc-number">84.1.10</span> method close</li></a>
<a href="#t85"><li class="toc-level toc-level-0"><span class="toc-number">85</span> class IO::Socket::INET</li></a>
<a href="#t85.1"><li class="toc-level toc-level-1"><span class="toc-number">85.1</span> Methods</li></a>
<a href="#t85.1.1"><li class="toc-level toc-level-2"><span class="toc-number">85.1.1</span> method new</li></a>
<a href="#t85.2"><li class="toc-level toc-level-1"><span class="toc-number">85.2</span> Methods</li></a>
<a href="#t85.2.1"><li class="toc-level toc-level-2"><span class="toc-number">85.2.1</span> method get</li></a>
<a href="#t85.2.2"><li class="toc-level toc-level-2"><span class="toc-number">85.2.2</span> method lines</li></a>
<a href="#t85.2.3"><li class="toc-level toc-level-2"><span class="toc-number">85.2.3</span> method accept</li></a>
<a href="#t86"><li class="toc-level toc-level-0"><span class="toc-number">86</span> class IO::Spec</li></a>
<a href="#t86.1"><li class="toc-level toc-level-1"><span class="toc-number">86.1</span> Methods</li></a>
<a href="#t86.1.1"><li class="toc-level toc-level-2"><span class="toc-number">86.1.1</span> method canonpath</li></a>
<a href="#t86.1.2"><li class="toc-level toc-level-2"><span class="toc-number">86.1.2</span> method dir-sep</li></a>
<a href="#t86.1.3"><li class="toc-level toc-level-2"><span class="toc-number">86.1.3</span> method curdir</li></a>
<a href="#t86.1.4"><li class="toc-level toc-level-2"><span class="toc-number">86.1.4</span> method updir</li></a>
<a href="#t86.1.5"><li class="toc-level toc-level-2"><span class="toc-number">86.1.5</span> method curupdir</li></a>
<a href="#t86.1.6"><li class="toc-level toc-level-2"><span class="toc-number">86.1.6</span> method rootdir</li></a>
<a href="#t86.1.7"><li class="toc-level toc-level-2"><span class="toc-number">86.1.7</span> method devnull</li></a>
<a href="#t86.1.8"><li class="toc-level toc-level-2"><span class="toc-number">86.1.8</span> method basename</li></a>
<a href="#t86.1.9"><li class="toc-level toc-level-2"><span class="toc-number">86.1.9</span> method extension</li></a>
<a href="#t86.1.10"><li class="toc-level toc-level-2"><span class="toc-number">86.1.10</span> method tmpdir</li></a>
<a href="#t86.1.11"><li class="toc-level toc-level-2"><span class="toc-number">86.1.11</span> method is-absolute</li></a>
<a href="#t86.1.12"><li class="toc-level toc-level-2"><span class="toc-number">86.1.12</span> method path</li></a>
<a href="#t86.1.13"><li class="toc-level toc-level-2"><span class="toc-number">86.1.13</span> method splitpath</li></a>
<a href="#t86.1.14"><li class="toc-level toc-level-2"><span class="toc-number">86.1.14</span> method split</li></a>
<a href="#t86.1.15"><li class="toc-level toc-level-2"><span class="toc-number">86.1.15</span> method join</li></a>
<a href="#t86.1.16"><li class="toc-level toc-level-2"><span class="toc-number">86.1.16</span> method catpath</li></a>
<a href="#t86.1.17"><li class="toc-level toc-level-2"><span class="toc-number">86.1.17</span> method catdir</li></a>
<a href="#t86.1.18"><li class="toc-level toc-level-2"><span class="toc-number">86.1.18</span> method splitdir</li></a>
<a href="#t86.1.19"><li class="toc-level toc-level-2"><span class="toc-number">86.1.19</span> method catfile</li></a>
<a href="#t86.1.20"><li class="toc-level toc-level-2"><span class="toc-number">86.1.20</span> method abs2rel</li></a>
<a href="#t86.1.21"><li class="toc-level toc-level-2"><span class="toc-number">86.1.21</span> method rel2abs</li></a>
<a href="#t87"><li class="toc-level toc-level-0"><span class="toc-number">87</span> class IO::Spec::Cygwin</li></a>
<a href="#t87.1"><li class="toc-level toc-level-1"><span class="toc-number">87.1</span> Methods</li></a>
<a href="#t87.1.1"><li class="toc-level toc-level-2"><span class="toc-number">87.1.1</span> method canonpath</li></a>
<a href="#t87.1.2"><li class="toc-level toc-level-2"><span class="toc-number">87.1.2</span> method dir-sep</li></a>
<a href="#t87.1.3"><li class="toc-level toc-level-2"><span class="toc-number">87.1.3</span> method curdir</li></a>
<a href="#t87.1.4"><li class="toc-level toc-level-2"><span class="toc-number">87.1.4</span> method updir</li></a>
<a href="#t87.1.5"><li class="toc-level toc-level-2"><span class="toc-number">87.1.5</span> method curupdir</li></a>
<a href="#t87.1.6"><li class="toc-level toc-level-2"><span class="toc-number">87.1.6</span> method rootdir</li></a>
<a href="#t87.1.7"><li class="toc-level toc-level-2"><span class="toc-number">87.1.7</span> method devnull</li></a>
<a href="#t87.1.8"><li class="toc-level toc-level-2"><span class="toc-number">87.1.8</span> method basename</li></a>
<a href="#t87.1.9"><li class="toc-level toc-level-2"><span class="toc-number">87.1.9</span> method extension</li></a>
<a href="#t87.1.10"><li class="toc-level toc-level-2"><span class="toc-number">87.1.10</span> method tmpdir</li></a>
<a href="#t87.1.11"><li class="toc-level toc-level-2"><span class="toc-number">87.1.11</span> method is-absolute</li></a>
<a href="#t87.1.12"><li class="toc-level toc-level-2"><span class="toc-number">87.1.12</span> method path</li></a>
<a href="#t87.1.13"><li class="toc-level toc-level-2"><span class="toc-number">87.1.13</span> method splitpath</li></a>
<a href="#t87.1.14"><li class="toc-level toc-level-2"><span class="toc-number">87.1.14</span> method split</li></a>
<a href="#t87.1.15"><li class="toc-level toc-level-2"><span class="toc-number">87.1.15</span> method join</li></a>
<a href="#t87.1.16"><li class="toc-level toc-level-2"><span class="toc-number">87.1.16</span> method catpath</li></a>
<a href="#t87.1.17"><li class="toc-level toc-level-2"><span class="toc-number">87.1.17</span> method catdir</li></a>
<a href="#t87.1.18"><li class="toc-level toc-level-2"><span class="toc-number">87.1.18</span> method splitdir</li></a>
<a href="#t87.1.19"><li class="toc-level toc-level-2"><span class="toc-number">87.1.19</span> method catfile</li></a>
<a href="#t87.1.20"><li class="toc-level toc-level-2"><span class="toc-number">87.1.20</span> method abs2rel</li></a>
<a href="#t87.1.21"><li class="toc-level toc-level-2"><span class="toc-number">87.1.21</span> method rel2abs</li></a>
<a href="#t88"><li class="toc-level toc-level-0"><span class="toc-number">88</span> class IO::Spec::QNX</li></a>
<a href="#t88.1"><li class="toc-level toc-level-1"><span class="toc-number">88.1</span> Methods</li></a>
<a href="#t88.1.1"><li class="toc-level toc-level-2"><span class="toc-number">88.1.1</span> method canonpath</li></a>
<a href="#t88.1.2"><li class="toc-level toc-level-2"><span class="toc-number">88.1.2</span> method dir-sep</li></a>
<a href="#t88.1.3"><li class="toc-level toc-level-2"><span class="toc-number">88.1.3</span> method curdir</li></a>
<a href="#t88.1.4"><li class="toc-level toc-level-2"><span class="toc-number">88.1.4</span> method updir</li></a>
<a href="#t88.1.5"><li class="toc-level toc-level-2"><span class="toc-number">88.1.5</span> method curupdir</li></a>
<a href="#t88.1.6"><li class="toc-level toc-level-2"><span class="toc-number">88.1.6</span> method rootdir</li></a>
<a href="#t88.1.7"><li class="toc-level toc-level-2"><span class="toc-number">88.1.7</span> method devnull</li></a>
<a href="#t88.1.8"><li class="toc-level toc-level-2"><span class="toc-number">88.1.8</span> method basename</li></a>
<a href="#t88.1.9"><li class="toc-level toc-level-2"><span class="toc-number">88.1.9</span> method extension</li></a>
<a href="#t88.1.10"><li class="toc-level toc-level-2"><span class="toc-number">88.1.10</span> method tmpdir</li></a>
<a href="#t88.1.11"><li class="toc-level toc-level-2"><span class="toc-number">88.1.11</span> method is-absolute</li></a>
<a href="#t88.1.12"><li class="toc-level toc-level-2"><span class="toc-number">88.1.12</span> method path</li></a>
<a href="#t88.1.13"><li class="toc-level toc-level-2"><span class="toc-number">88.1.13</span> method splitpath</li></a>
<a href="#t88.1.14"><li class="toc-level toc-level-2"><span class="toc-number">88.1.14</span> method split</li></a>
<a href="#t88.1.15"><li class="toc-level toc-level-2"><span class="toc-number">88.1.15</span> method join</li></a>
<a href="#t88.1.16"><li class="toc-level toc-level-2"><span class="toc-number">88.1.16</span> method catpath</li></a>
<a href="#t88.1.17"><li class="toc-level toc-level-2"><span class="toc-number">88.1.17</span> method catdir</li></a>
<a href="#t88.1.18"><li class="toc-level toc-level-2"><span class="toc-number">88.1.18</span> method splitdir</li></a>
<a href="#t88.1.19"><li class="toc-level toc-level-2"><span class="toc-number">88.1.19</span> method catfile</li></a>
<a href="#t88.1.20"><li class="toc-level toc-level-2"><span class="toc-number">88.1.20</span> method abs2rel</li></a>
<a href="#t88.1.21"><li class="toc-level toc-level-2"><span class="toc-number">88.1.21</span> method rel2abs</li></a>
<a href="#t89"><li class="toc-level toc-level-0"><span class="toc-number">89</span> class IO::Spec::Unix</li></a>
<a href="#t89.1"><li class="toc-level toc-level-1"><span class="toc-number">89.1</span> Methods</li></a>
<a href="#t89.1.1"><li class="toc-level toc-level-2"><span class="toc-number">89.1.1</span> method canonpath</li></a>
<a href="#t89.1.2"><li class="toc-level toc-level-2"><span class="toc-number">89.1.2</span> method dir-sep</li></a>
<a href="#t89.1.3"><li class="toc-level toc-level-2"><span class="toc-number">89.1.3</span> method curdir</li></a>
<a href="#t89.1.4"><li class="toc-level toc-level-2"><span class="toc-number">89.1.4</span> method updir</li></a>
<a href="#t89.1.5"><li class="toc-level toc-level-2"><span class="toc-number">89.1.5</span> method curupdir</li></a>
<a href="#t89.1.6"><li class="toc-level toc-level-2"><span class="toc-number">89.1.6</span> method rootdir</li></a>
<a href="#t89.1.7"><li class="toc-level toc-level-2"><span class="toc-number">89.1.7</span> method devnull</li></a>
<a href="#t89.1.8"><li class="toc-level toc-level-2"><span class="toc-number">89.1.8</span> method basename</li></a>
<a href="#t89.1.9"><li class="toc-level toc-level-2"><span class="toc-number">89.1.9</span> method extension</li></a>
<a href="#t89.1.10"><li class="toc-level toc-level-2"><span class="toc-number">89.1.10</span> method tmpdir</li></a>
<a href="#t89.1.11"><li class="toc-level toc-level-2"><span class="toc-number">89.1.11</span> method is-absolute</li></a>
<a href="#t89.1.12"><li class="toc-level toc-level-2"><span class="toc-number">89.1.12</span> method path</li></a>
<a href="#t89.1.13"><li class="toc-level toc-level-2"><span class="toc-number">89.1.13</span> method splitpath</li></a>
<a href="#t89.1.14"><li class="toc-level toc-level-2"><span class="toc-number">89.1.14</span> method split</li></a>
<a href="#t89.1.15"><li class="toc-level toc-level-2"><span class="toc-number">89.1.15</span> method join</li></a>
<a href="#t89.1.16"><li class="toc-level toc-level-2"><span class="toc-number">89.1.16</span> method catpath</li></a>
<a href="#t89.1.17"><li class="toc-level toc-level-2"><span class="toc-number">89.1.17</span> method catdir</li></a>
<a href="#t89.1.18"><li class="toc-level toc-level-2"><span class="toc-number">89.1.18</span> method splitdir</li></a>
<a href="#t89.1.19"><li class="toc-level toc-level-2"><span class="toc-number">89.1.19</span> method catfile</li></a>
<a href="#t89.1.20"><li class="toc-level toc-level-2"><span class="toc-number">89.1.20</span> method abs2rel</li></a>
<a href="#t89.1.21"><li class="toc-level toc-level-2"><span class="toc-number">89.1.21</span> method rel2abs</li></a>
<a href="#t90"><li class="toc-level toc-level-0"><span class="toc-number">90</span> class IO::Spec::Win32</li></a>
<a href="#t90.1"><li class="toc-level toc-level-1"><span class="toc-number">90.1</span> Methods</li></a>
<a href="#t90.1.1"><li class="toc-level toc-level-2"><span class="toc-number">90.1.1</span> method canonpath</li></a>
<a href="#t90.1.2"><li class="toc-level toc-level-2"><span class="toc-number">90.1.2</span> method dir-sep</li></a>
<a href="#t90.1.3"><li class="toc-level toc-level-2"><span class="toc-number">90.1.3</span> method curdir</li></a>
<a href="#t90.1.4"><li class="toc-level toc-level-2"><span class="toc-number">90.1.4</span> method updir</li></a>
<a href="#t90.1.5"><li class="toc-level toc-level-2"><span class="toc-number">90.1.5</span> method curupdir</li></a>
<a href="#t90.1.6"><li class="toc-level toc-level-2"><span class="toc-number">90.1.6</span> method rootdir</li></a>
<a href="#t90.1.7"><li class="toc-level toc-level-2"><span class="toc-number">90.1.7</span> method devnull</li></a>
<a href="#t90.1.8"><li class="toc-level toc-level-2"><span class="toc-number">90.1.8</span> method basename</li></a>
<a href="#t90.1.9"><li class="toc-level toc-level-2"><span class="toc-number">90.1.9</span> method extension</li></a>
<a href="#t90.1.10"><li class="toc-level toc-level-2"><span class="toc-number">90.1.10</span> method tmpdir</li></a>
<a href="#t90.1.11"><li class="toc-level toc-level-2"><span class="toc-number">90.1.11</span> method is-absolute</li></a>
<a href="#t90.1.12"><li class="toc-level toc-level-2"><span class="toc-number">90.1.12</span> method path</li></a>
<a href="#t90.1.13"><li class="toc-level toc-level-2"><span class="toc-number">90.1.13</span> method splitpath</li></a>
<a href="#t90.1.14"><li class="toc-level toc-level-2"><span class="toc-number">90.1.14</span> method split</li></a>
<a href="#t90.1.15"><li class="toc-level toc-level-2"><span class="toc-number">90.1.15</span> method join</li></a>
<a href="#t90.1.16"><li class="toc-level toc-level-2"><span class="toc-number">90.1.16</span> method catpath</li></a>
<a href="#t90.1.17"><li class="toc-level toc-level-2"><span class="toc-number">90.1.17</span> method catdir</li></a>
<a href="#t90.1.18"><li class="toc-level toc-level-2"><span class="toc-number">90.1.18</span> method splitdir</li></a>
<a href="#t90.1.19"><li class="toc-level toc-level-2"><span class="toc-number">90.1.19</span> method catfile</li></a>
<a href="#t90.1.20"><li class="toc-level toc-level-2"><span class="toc-number">90.1.20</span> method abs2rel</li></a>
<a href="#t90.1.21"><li class="toc-level toc-level-2"><span class="toc-number">90.1.21</span> method rel2abs</li></a>
<a href="#t91"><li class="toc-level toc-level-0"><span class="toc-number">91</span> class IO::Special</li></a>
<a href="#t91.1"><li class="toc-level toc-level-1"><span class="toc-number">91.1</span> Methods</li></a>
<a href="#t91.1.1"><li class="toc-level toc-level-2"><span class="toc-number">91.1.1</span> method new</li></a>
<a href="#t91.1.2"><li class="toc-level toc-level-2"><span class="toc-number">91.1.2</span> method WHICH</li></a>
<a href="#t91.1.3"><li class="toc-level toc-level-2"><span class="toc-number">91.1.3</span> method Str</li></a>
<a href="#t91.1.4"><li class="toc-level toc-level-2"><span class="toc-number">91.1.4</span> method IO</li></a>
<a href="#t91.1.5"><li class="toc-level toc-level-2"><span class="toc-number">91.1.5</span> method e</li></a>
<a href="#t91.1.6"><li class="toc-level toc-level-2"><span class="toc-number">91.1.6</span> method d</li></a>
<a href="#t91.1.7"><li class="toc-level toc-level-2"><span class="toc-number">91.1.7</span> method f</li></a>
<a href="#t91.1.8"><li class="toc-level toc-level-2"><span class="toc-number">91.1.8</span> method s</li></a>
<a href="#t91.1.9"><li class="toc-level toc-level-2"><span class="toc-number">91.1.9</span> method l</li></a>
<a href="#t91.1.10"><li class="toc-level toc-level-2"><span class="toc-number">91.1.10</span> method r</li></a>
<a href="#t91.1.11"><li class="toc-level toc-level-2"><span class="toc-number">91.1.11</span> method w</li></a>
<a href="#t91.1.12"><li class="toc-level toc-level-2"><span class="toc-number">91.1.12</span> method x</li></a>
<a href="#t91.1.13"><li class="toc-level toc-level-2"><span class="toc-number">91.1.13</span> method modified</li></a>
<a href="#t91.1.14"><li class="toc-level toc-level-2"><span class="toc-number">91.1.14</span> method accessed</li></a>
<a href="#t91.1.15"><li class="toc-level toc-level-2"><span class="toc-number">91.1.15</span> method changed</li></a>
<a href="#t91.1.16"><li class="toc-level toc-level-2"><span class="toc-number">91.1.16</span> method mode</li></a>
<a href="#t92"><li class="toc-level toc-level-0"><span class="toc-number">92</span> class Instant</li></a>
<a href="#t92.1"><li class="toc-level toc-level-1"><span class="toc-number">92.1</span> Methods</li></a>
<a href="#t92.1.1"><li class="toc-level toc-level-2"><span class="toc-number">92.1.1</span> method from-posix</li></a>
<a href="#t92.1.2"><li class="toc-level toc-level-2"><span class="toc-number">92.1.2</span> method to-posix</li></a>
<a href="#t92.1.3"><li class="toc-level toc-level-2"><span class="toc-number">92.1.3</span> method Date</li></a>
<a href="#t93"><li class="toc-level toc-level-0"><span class="toc-number">93</span> class Int</li></a>
<a href="#t93.1"><li class="toc-level toc-level-1"><span class="toc-number">93.1</span> Methods</li></a>
<a href="#t93.1.1"><li class="toc-level toc-level-2"><span class="toc-number">93.1.1</span> routine chr</li></a>
<a href="#t93.1.2"><li class="toc-level toc-level-2"><span class="toc-number">93.1.2</span> routine expmod</li></a>
<a href="#t93.1.3"><li class="toc-level toc-level-2"><span class="toc-number">93.1.3</span> method polymod</li></a>
<a href="#t93.1.4"><li class="toc-level toc-level-2"><span class="toc-number">93.1.4</span> routine is-prime</li></a>
<a href="#t93.1.5"><li class="toc-level toc-level-2"><span class="toc-number">93.1.5</span> routine lsb</li></a>
<a href="#t93.1.6"><li class="toc-level toc-level-2"><span class="toc-number">93.1.6</span> routine msb</li></a>
<a href="#t93.1.7"><li class="toc-level toc-level-2"><span class="toc-number">93.1.7</span> routine unival</li></a>
<a href="#t93.2"><li class="toc-level toc-level-1"><span class="toc-number">93.2</span> Operators</li></a>
<a href="#t93.2.1"><li class="toc-level toc-level-2"><span class="toc-number">93.2.1</span> infix div</li></a>
<a href="#t94"><li class="toc-level toc-level-0"><span class="toc-number">94</span> class IntStr</li></a>
<a href="#t94.1"><li class="toc-level toc-level-1"><span class="toc-number">94.1</span> Methods</li></a>
<a href="#t94.1.1"><li class="toc-level toc-level-2"><span class="toc-number">94.1.1</span> method new</li></a>
<a href="#t94.1.2"><li class="toc-level toc-level-2"><span class="toc-number">94.1.2</span> method Numeric</li></a>
<a href="#t94.1.3"><li class="toc-level toc-level-2"><span class="toc-number">94.1.3</span> method Int</li></a>
<a href="#t94.1.4"><li class="toc-level toc-level-2"><span class="toc-number">94.1.4</span> method Str</li></a>
<a href="#t94.2"><li class="toc-level toc-level-1"><span class="toc-number">94.2</span> Operators</li></a>
<a href="#t94.2.1"><li class="toc-level toc-level-2"><span class="toc-number">94.2.1</span> infix cmp</li></a>
<a href="#t95"><li class="toc-level toc-level-0"><span class="toc-number">95</span> role Iterable</li></a>
<a href="#t95.1"><li class="toc-level toc-level-1"><span class="toc-number">95.1</span> Methods</li></a>
<a href="#t95.1.1"><li class="toc-level toc-level-2"><span class="toc-number">95.1.1</span> method iterator</li></a>
<a href="#t95.1.2"><li class="toc-level toc-level-2"><span class="toc-number">95.1.2</span> method flat</li></a>
<a href="#t95.1.3"><li class="toc-level toc-level-2"><span class="toc-number">95.1.3</span> method lazy</li></a>
<a href="#t95.1.4"><li class="toc-level toc-level-2"><span class="toc-number">95.1.4</span> method hyper</li></a>
<a href="#t95.1.5"><li class="toc-level toc-level-2"><span class="toc-number">95.1.5</span> method race</li></a>
<a href="#t96"><li class="toc-level toc-level-0"><span class="toc-number">96</span> role Iterator</li></a>
<a href="#t96.1"><li class="toc-level toc-level-1"><span class="toc-number">96.1</span> Methods</li></a>
<a href="#t96.1.1"><li class="toc-level toc-level-2"><span class="toc-number">96.1.1</span> method pull-one</li></a>
<a href="#t96.1.2"><li class="toc-level toc-level-2"><span class="toc-number">96.1.2</span> method push-exactly</li></a>
<a href="#t96.1.3"><li class="toc-level toc-level-2"><span class="toc-number">96.1.3</span> method push-at-least</li></a>
<a href="#t96.1.4"><li class="toc-level toc-level-2"><span class="toc-number">96.1.4</span> method push-all</li></a>
<a href="#t96.1.5"><li class="toc-level toc-level-2"><span class="toc-number">96.1.5</span> method push-until-lazy</li></a>
<a href="#t96.1.6"><li class="toc-level toc-level-2"><span class="toc-number">96.1.6</span> method is-lazy</li></a>
<a href="#t96.1.7"><li class="toc-level toc-level-2"><span class="toc-number">96.1.7</span> method count-only</li></a>
<a href="#t96.1.8"><li class="toc-level toc-level-2"><span class="toc-number">96.1.8</span> method sink-all</li></a>
<a href="#t97"><li class="toc-level toc-level-0"><span class="toc-number">97</span> class Junction</li></a>
<a href="#t97.1"><li class="toc-level toc-level-1"><span class="toc-number">97.1</span> See Also</li></a>
<a href="#t98"><li class="toc-level toc-level-0"><span class="toc-number">98</span> class Label</li></a>
<a href="#t98.1"><li class="toc-level toc-level-1"><span class="toc-number">98.1</span> Methods</li></a>
<a href="#t98.1.1"><li class="toc-level toc-level-2"><span class="toc-number">98.1.1</span> method next</li></a>
<a href="#t98.1.2"><li class="toc-level toc-level-2"><span class="toc-number">98.1.2</span> method last</li></a>
<a href="#t99"><li class="toc-level toc-level-0"><span class="toc-number">99</span> class List</li></a>
<a href="#t99.1"><li class="toc-level toc-level-1"><span class="toc-number">99.1</span> Items, Flattening and Sigils</li></a>
<a href="#t99.2"><li class="toc-level toc-level-1"><span class="toc-number">99.2</span> Methods</li></a>
<a href="#t99.2.1"><li class="toc-level toc-level-2"><span class="toc-number">99.2.1</span> routine elems</li></a>
<a href="#t99.2.2"><li class="toc-level toc-level-2"><span class="toc-number">99.2.2</span> routine end</li></a>
<a href="#t99.2.3"><li class="toc-level toc-level-2"><span class="toc-number">99.2.3</span> routine keys</li></a>
<a href="#t99.2.4"><li class="toc-level toc-level-2"><span class="toc-number">99.2.4</span> routine values</li></a>
<a href="#t99.2.5"><li class="toc-level toc-level-2"><span class="toc-number">99.2.5</span> routine kv</li></a>
<a href="#t99.2.6"><li class="toc-level toc-level-2"><span class="toc-number">99.2.6</span> routine pairs</li></a>
<a href="#t99.2.7"><li class="toc-level toc-level-2"><span class="toc-number">99.2.7</span> routine join</li></a>
<a href="#t99.2.8"><li class="toc-level toc-level-2"><span class="toc-number">99.2.8</span> routine map</li></a>
<a href="#t99.2.9"><li class="toc-level toc-level-2"><span class="toc-number">99.2.9</span> sub flat</li></a>
<a href="#t99.2.10"><li class="toc-level toc-level-2"><span class="toc-number">99.2.10</span> method flatmap</li></a>
<a href="#t99.2.11"><li class="toc-level toc-level-2"><span class="toc-number">99.2.11</span> routine grep</li></a>
<a href="#t99.2.12"><li class="toc-level toc-level-2"><span class="toc-number">99.2.12</span> routine first</li></a>
<a href="#t99.2.13"><li class="toc-level toc-level-2"><span class="toc-number">99.2.13</span> method head</li></a>
<a href="#t99.2.14"><li class="toc-level toc-level-2"><span class="toc-number">99.2.14</span> method tail</li></a>
<a href="#t99.2.15"><li class="toc-level toc-level-2"><span class="toc-number">99.2.15</span> routine categorize</li></a>
<a href="#t99.2.16"><li class="toc-level toc-level-2"><span class="toc-number">99.2.16</span> routine classify</li></a>
<a href="#t99.2.17"><li class="toc-level toc-level-2"><span class="toc-number">99.2.17</span> method Bool</li></a>
<a href="#t99.2.18"><li class="toc-level toc-level-2"><span class="toc-number">99.2.18</span> method Str</li></a>
<a href="#t99.2.19"><li class="toc-level toc-level-2"><span class="toc-number">99.2.19</span> method Int</li></a>
<a href="#t99.2.20"><li class="toc-level toc-level-2"><span class="toc-number">99.2.20</span> method Numeric</li></a>
<a href="#t99.2.21"><li class="toc-level toc-level-2"><span class="toc-number">99.2.21</span> method Capture</li></a>
<a href="#t99.2.22"><li class="toc-level toc-level-2"><span class="toc-number">99.2.22</span> routine pick</li></a>
<a href="#t99.2.23"><li class="toc-level toc-level-2"><span class="toc-number">99.2.23</span> routine roll</li></a>
<a href="#t99.2.24"><li class="toc-level toc-level-2"><span class="toc-number">99.2.24</span> routine eager</li></a>
<a href="#t99.2.25"><li class="toc-level toc-level-2"><span class="toc-number">99.2.25</span> routine reverse</li></a>
<a href="#t99.2.26"><li class="toc-level toc-level-2"><span class="toc-number">99.2.26</span> routine rotate</li></a>
<a href="#t99.2.27"><li class="toc-level toc-level-2"><span class="toc-number">99.2.27</span> routine sort</li></a>
<a href="#t99.2.28"><li class="toc-level toc-level-2"><span class="toc-number">99.2.28</span> routine unique</li></a>
<a href="#t99.2.29"><li class="toc-level toc-level-2"><span class="toc-number">99.2.29</span> routine repeated</li></a>
<a href="#t99.2.30"><li class="toc-level toc-level-2"><span class="toc-number">99.2.30</span> routine squish</li></a>
<a href="#t99.2.31"><li class="toc-level toc-level-2"><span class="toc-number">99.2.31</span> routine reduce</li></a>
<a href="#t99.2.32"><li class="toc-level toc-level-2"><span class="toc-number">99.2.32</span> routine combinations</li></a>
<a href="#t99.2.33"><li class="toc-level toc-level-2"><span class="toc-number">99.2.33</span> routine permutations</li></a>
<a href="#t99.2.34"><li class="toc-level toc-level-2"><span class="toc-number">99.2.34</span> method rotor</li></a>
<a href="#t99.2.35"><li class="toc-level toc-level-2"><span class="toc-number">99.2.35</span> routine zip</li></a>
<a href="#t99.2.36"><li class="toc-level toc-level-2"><span class="toc-number">99.2.36</span> sub roundrobin</li></a>
<a href="#t99.2.37"><li class="toc-level toc-level-2"><span class="toc-number">99.2.37</span> routine sum</li></a>
<a href="#t99.2.38"><li class="toc-level toc-level-2"><span class="toc-number">99.2.38</span> method fmt</li></a>
<a href="#t100"><li class="toc-level toc-level-0"><span class="toc-number">100</span> class Lock</li></a>
<a href="#t100.1"><li class="toc-level toc-level-1"><span class="toc-number">100.1</span> Methods</li></a>
<a href="#t100.1.1"><li class="toc-level toc-level-2"><span class="toc-number">100.1.1</span> method protect</li></a>
<a href="#t100.1.2"><li class="toc-level toc-level-2"><span class="toc-number">100.1.2</span> method lock</li></a>
<a href="#t100.1.3"><li class="toc-level toc-level-2"><span class="toc-number">100.1.3</span> method unlock</li></a>
<a href="#t100.1.4"><li class="toc-level toc-level-2"><span class="toc-number">100.1.4</span> method condition</li></a>
<a href="#t101"><li class="toc-level toc-level-0"><span class="toc-number">101</span> class Macro</li></a>
<a href="#t102"><li class="toc-level toc-level-0"><span class="toc-number">102</span> class Map</li></a>
<a href="#t102.1"><li class="toc-level toc-level-1"><span class="toc-number">102.1</span> Methods</li></a>
<a href="#t102.1.1"><li class="toc-level toc-level-2"><span class="toc-number">102.1.1</span> method new</li></a>
<a href="#t102.1.2"><li class="toc-level toc-level-2"><span class="toc-number">102.1.2</span> method elems</li></a>
<a href="#t102.1.3"><li class="toc-level toc-level-2"><span class="toc-number">102.1.3</span> method ACCEPTS</li></a>
<a href="#t102.1.4"><li class="toc-level toc-level-2"><span class="toc-number">102.1.4</span> method keys</li></a>
<a href="#t102.1.5"><li class="toc-level toc-level-2"><span class="toc-number">102.1.5</span> method values</li></a>
<a href="#t102.1.6"><li class="toc-level toc-level-2"><span class="toc-number">102.1.6</span> method pairs</li></a>
<a href="#t102.1.7"><li class="toc-level toc-level-2"><span class="toc-number">102.1.7</span> method antipairs</li></a>
<a href="#t102.1.8"><li class="toc-level toc-level-2"><span class="toc-number">102.1.8</span> method invert</li></a>
<a href="#t102.1.9"><li class="toc-level toc-level-2"><span class="toc-number">102.1.9</span> method kv</li></a>
<a href="#t102.1.10"><li class="toc-level toc-level-2"><span class="toc-number">102.1.10</span> method Int</li></a>
<a href="#t102.1.11"><li class="toc-level toc-level-2"><span class="toc-number">102.1.11</span> method Numeric</li></a>
<a href="#t102.1.12"><li class="toc-level toc-level-2"><span class="toc-number">102.1.12</span> method Bool</li></a>
<a href="#t102.1.13"><li class="toc-level toc-level-2"><span class="toc-number">102.1.13</span> method Capture</li></a>
<a href="#t103"><li class="toc-level toc-level-0"><span class="toc-number">103</span> class Match</li></a>
<a href="#t103.1"><li class="toc-level toc-level-1"><span class="toc-number">103.1</span> Methods</li></a>
<a href="#t103.1.1"><li class="toc-level toc-level-2"><span class="toc-number">103.1.1</span> method orig</li></a>
<a href="#t103.1.2"><li class="toc-level toc-level-2"><span class="toc-number">103.1.2</span> method from</li></a>
<a href="#t103.1.3"><li class="toc-level toc-level-2"><span class="toc-number">103.1.3</span> method to</li></a>
<a href="#t103.1.4"><li class="toc-level toc-level-2"><span class="toc-number">103.1.4</span> method made</li></a>
<a href="#t103.1.5"><li class="toc-level toc-level-2"><span class="toc-number">103.1.5</span> method ast</li></a>
<a href="#t103.1.6"><li class="toc-level toc-level-2"><span class="toc-number">103.1.6</span> method Str</li></a>
<a href="#t103.1.7"><li class="toc-level toc-level-2"><span class="toc-number">103.1.7</span> method caps</li></a>
<a href="#t103.1.8"><li class="toc-level toc-level-2"><span class="toc-number">103.1.8</span> method chunks</li></a>
<a href="#t103.1.9"><li class="toc-level toc-level-2"><span class="toc-number">103.1.9</span> method list</li></a>
<a href="#t103.1.10"><li class="toc-level toc-level-2"><span class="toc-number">103.1.10</span> method hash</li></a>
<a href="#t103.1.11"><li class="toc-level toc-level-2"><span class="toc-number">103.1.11</span> method prematch</li></a>
<a href="#t103.1.12"><li class="toc-level toc-level-2"><span class="toc-number">103.1.12</span> method postmatch</li></a>
<a href="#t103.1.13"><li class="toc-level toc-level-2"><span class="toc-number">103.1.13</span> method make</li></a>
<a href="#t104"><li class="toc-level toc-level-0"><span class="toc-number">104</span> role Metamodel::AttributeContainer</li></a>
<a href="#t104.1"><li class="toc-level toc-level-1"><span class="toc-number">104.1</span> Methods</li></a>
<a href="#t104.1.1"><li class="toc-level toc-level-2"><span class="toc-number">104.1.1</span> method add_attribute</li></a>
<a href="#t104.1.2"><li class="toc-level toc-level-2"><span class="toc-number">104.1.2</span> method attributes</li></a>
<a href="#t104.1.3"><li class="toc-level toc-level-2"><span class="toc-number">104.1.3</span> method set_rw</li></a>
<a href="#t104.1.4"><li class="toc-level toc-level-2"><span class="toc-number">104.1.4</span> method rw</li></a>
<a href="#t105"><li class="toc-level toc-level-0"><span class="toc-number">105</span> role Metamodel::C3MRO</li></a>
<a href="#t105.1"><li class="toc-level toc-level-1"><span class="toc-number">105.1</span> Methods</li></a>
<a href="#t105.1.1"><li class="toc-level toc-level-2"><span class="toc-number">105.1.1</span> compute_mro</li></a>
<a href="#t105.1.2"><li class="toc-level toc-level-2"><span class="toc-number">105.1.2</span> mro</li></a>
<a href="#t105.1.3"><li class="toc-level toc-level-2"><span class="toc-number">105.1.3</span> mro_unhidden</li></a>
<a href="#t106"><li class="toc-level toc-level-0"><span class="toc-number">106</span> class Metamodel::ClassHOW</li></a>
<a href="#t106.1"><li class="toc-level toc-level-1"><span class="toc-number">106.1</span> Methods</li></a>
<a href="#t106.1.1"><li class="toc-level toc-level-2"><span class="toc-number">106.1.1</span> method add_fallback</li></a>
<a href="#t106.1.2"><li class="toc-level toc-level-2"><span class="toc-number">106.1.2</span> method can</li></a>
<a href="#t106.1.3"><li class="toc-level toc-level-2"><span class="toc-number">106.1.3</span> method compose</li></a>
<a href="#t107"><li class="toc-level toc-level-0"><span class="toc-number">107</span> role Metamodel::Finalization</li></a>
<a href="#t107.1"><li class="toc-level toc-level-1"><span class="toc-number">107.1</span> Methods</li></a>
<a href="#t107.1.1"><li class="toc-level toc-level-2"><span class="toc-number">107.1.1</span> method setup_finalization</li></a>
<a href="#t107.1.2"><li class="toc-level toc-level-2"><span class="toc-number">107.1.2</span> method destroyers</li></a>
<a href="#t108"><li class="toc-level toc-level-0"><span class="toc-number">108</span> role Metamodel::MROBasedMethodDispatch</li></a>
<a href="#t108.1"><li class="toc-level toc-level-1"><span class="toc-number">108.1</span> Methods</li></a>
<a href="#t108.1.1"><li class="toc-level toc-level-2"><span class="toc-number">108.1.1</span> method find_method</li></a>
<a href="#t108.1.2"><li class="toc-level toc-level-2"><span class="toc-number">108.1.2</span> method find_method_qualified</li></a>
<a href="#t109"><li class="toc-level toc-level-0"><span class="toc-number">109</span> role Metamodel::MethodContainer</li></a>
<a href="#t109.1"><li class="toc-level toc-level-1"><span class="toc-number">109.1</span> Methods</li></a>
<a href="#t109.1.1"><li class="toc-level toc-level-2"><span class="toc-number">109.1.1</span> method add_method</li></a>
<a href="#t109.1.2"><li class="toc-level toc-level-2"><span class="toc-number">109.1.2</span> method methods</li></a>
<a href="#t109.1.3"><li class="toc-level toc-level-2"><span class="toc-number">109.1.3</span> method method_table</li></a>
<a href="#t110"><li class="toc-level toc-level-0"><span class="toc-number">110</span> role Metamodel::MultipleInheritance</li></a>
<a href="#t110.1"><li class="toc-level toc-level-1"><span class="toc-number">110.1</span> Methods</li></a>
<a href="#t110.1.1"><li class="toc-level toc-level-2"><span class="toc-number">110.1.1</span> method add_parent</li></a>
<a href="#t110.1.2"><li class="toc-level toc-level-2"><span class="toc-number">110.1.2</span> method parents</li></a>
<a href="#t110.1.3"><li class="toc-level toc-level-2"><span class="toc-number">110.1.3</span> method hides</li></a>
<a href="#t110.1.4"><li class="toc-level toc-level-2"><span class="toc-number">110.1.4</span> method hidden</li></a>
<a href="#t110.1.5"><li class="toc-level toc-level-2"><span class="toc-number">110.1.5</span> method set_hidden</li></a>
<a href="#t111"><li class="toc-level toc-level-0"><span class="toc-number">111</span> role Metamodel::Naming</li></a>
<a href="#t111.1"><li class="toc-level toc-level-1"><span class="toc-number">111.1</span> Methods</li></a>
<a href="#t111.1.1"><li class="toc-level toc-level-2"><span class="toc-number">111.1.1</span> method name</li></a>
<a href="#t111.1.2"><li class="toc-level toc-level-2"><span class="toc-number">111.1.2</span> method set_name</li></a>
<a href="#t112"><li class="toc-level toc-level-0"><span class="toc-number">112</span> class Metamodel::Primitives</li></a>
<a href="#t112.1"><li class="toc-level toc-level-1"><span class="toc-number">112.1</span> Methods</li></a>
<a href="#t112.1.1"><li class="toc-level toc-level-2"><span class="toc-number">112.1.1</span> method create_type</li></a>
<a href="#t112.1.2"><li class="toc-level toc-level-2"><span class="toc-number">112.1.2</span> method set_package</li></a>
<a href="#t112.1.3"><li class="toc-level toc-level-2"><span class="toc-number">112.1.3</span> method install_method_cache</li></a>
<a href="#t112.1.4"><li class="toc-level toc-level-2"><span class="toc-number">112.1.4</span> method configure_type_checking</li></a>
<a href="#t112.1.5"><li class="toc-level toc-level-2"><span class="toc-number">112.1.5</span> method configure_destroy</li></a>
<a href="#t112.1.6"><li class="toc-level toc-level-2"><span class="toc-number">112.1.6</span> method compose_type</li></a>
<a href="#t112.1.7"><li class="toc-level toc-level-2"><span class="toc-number">112.1.7</span> method rebless</li></a>
<a href="#t112.1.8"><li class="toc-level toc-level-2"><span class="toc-number">112.1.8</span> method is_type</li></a>
<a href="#t113"><li class="toc-level toc-level-0"><span class="toc-number">113</span> role Metamodel::PrivateMethodContainer</li></a>
<a href="#t113.1"><li class="toc-level toc-level-1"><span class="toc-number">113.1</span> Methods</li></a>
<a href="#t113.1.1"><li class="toc-level toc-level-2"><span class="toc-number">113.1.1</span> method add_private_method</li></a>
<a href="#t113.1.2"><li class="toc-level toc-level-2"><span class="toc-number">113.1.2</span> method private_method_table</li></a>
<a href="#t114"><li class="toc-level toc-level-0"><span class="toc-number">114</span> role Metamodel::RoleContainer</li></a>
<a href="#t114.1"><li class="toc-level toc-level-1"><span class="toc-number">114.1</span> Methods</li></a>
<a href="#t114.1.1"><li class="toc-level toc-level-2"><span class="toc-number">114.1.1</span> method add_role</li></a>
<a href="#t114.1.2"><li class="toc-level toc-level-2"><span class="toc-number">114.1.2</span> method roles_to_compose</li></a>
<a href="#t115"><li class="toc-level toc-level-0"><span class="toc-number">115</span> role Metamodel::Trusting</li></a>
<a href="#t115.1"><li class="toc-level toc-level-1"><span class="toc-number">115.1</span> Methods</li></a>
<a href="#t115.1.1"><li class="toc-level toc-level-2"><span class="toc-number">115.1.1</span> method add_trustee</li></a>
<a href="#t115.1.2"><li class="toc-level toc-level-2"><span class="toc-number">115.1.2</span> method trusts</li></a>
<a href="#t115.1.3"><li class="toc-level toc-level-2"><span class="toc-number">115.1.3</span> method is_trusted</li></a>
<a href="#t116"><li class="toc-level toc-level-0"><span class="toc-number">116</span> class Method</li></a>
<a href="#t117"><li class="toc-level toc-level-0"><span class="toc-number">117</span> class Mix</li></a>
<a href="#t117.1"><li class="toc-level toc-level-1"><span class="toc-number">117.1</span> Creating <span class="code">Mix</span> objects</li></a>
<a href="#t117.2"><li class="toc-level toc-level-1"><span class="toc-number">117.2</span> Operators</li></a>
<a href="#t117.2.1"><li class="toc-level toc-level-2"><span class="toc-number">117.2.1</span> sub mix</li></a>
<a href="#t117.3"><li class="toc-level toc-level-1"><span class="toc-number">117.3</span> See Also</li></a>
<a href="#t118"><li class="toc-level toc-level-0"><span class="toc-number">118</span> class MixHash</li></a>
<a href="#t118.1"><li class="toc-level toc-level-1"><span class="toc-number">118.1</span> Creating <span class="code">MixHash</span> objects</li></a>
<a href="#t118.2"><li class="toc-level toc-level-1"><span class="toc-number">118.2</span> Operators</li></a>
<a href="#t118.3"><li class="toc-level toc-level-1"><span class="toc-number">118.3</span> See Also</li></a>
<a href="#t119"><li class="toc-level toc-level-0"><span class="toc-number">119</span> role Mixy</li></a>
<a href="#t119.1"><li class="toc-level toc-level-1"><span class="toc-number">119.1</span> Methods</li></a>
<a href="#t119.1.1"><li class="toc-level toc-level-2"><span class="toc-number">119.1.1</span> method total</li></a>
<a href="#t119.1.2"><li class="toc-level toc-level-2"><span class="toc-number">119.1.2</span> method roll</li></a>
<a href="#t119.2"><li class="toc-level toc-level-1"><span class="toc-number">119.2</span> See Also</li></a>
<a href="#t120"><li class="toc-level toc-level-0"><span class="toc-number">120</span> class Mu</li></a>
<a href="#t120.1"><li class="toc-level toc-level-1"><span class="toc-number">120.1</span> Methods</li></a>
<a href="#t120.1.1"><li class="toc-level toc-level-2"><span class="toc-number">120.1.1</span> routine defined</li></a>
<a href="#t120.1.2"><li class="toc-level toc-level-2"><span class="toc-number">120.1.2</span> routine isa</li></a>
<a href="#t120.1.3"><li class="toc-level toc-level-2"><span class="toc-number">120.1.3</span> routine does</li></a>
<a href="#t120.1.4"><li class="toc-level toc-level-2"><span class="toc-number">120.1.4</span> routine Bool</li></a>
<a href="#t120.1.5"><li class="toc-level toc-level-2"><span class="toc-number">120.1.5</span> method Str</li></a>
<a href="#t120.1.6"><li class="toc-level toc-level-2"><span class="toc-number">120.1.6</span> routine gist</li></a>
<a href="#t120.1.7"><li class="toc-level toc-level-2"><span class="toc-number">120.1.7</span> routine perl</li></a>
<a href="#t120.1.8"><li class="toc-level toc-level-2"><span class="toc-number">120.1.8</span> method clone</li></a>
<a href="#t120.1.9"><li class="toc-level toc-level-2"><span class="toc-number">120.1.9</span> method new</li></a>
<a href="#t120.1.10"><li class="toc-level toc-level-2"><span class="toc-number">120.1.10</span> method bless</li></a>
<a href="#t120.1.11"><li class="toc-level toc-level-2"><span class="toc-number">120.1.11</span> method CREATE</li></a>
<a href="#t120.1.12"><li class="toc-level toc-level-2"><span class="toc-number">120.1.12</span> method print</li></a>
<a href="#t120.1.13"><li class="toc-level toc-level-2"><span class="toc-number">120.1.13</span> method put</li></a>
<a href="#t120.1.14"><li class="toc-level toc-level-2"><span class="toc-number">120.1.14</span> method say</li></a>
<a href="#t120.1.15"><li class="toc-level toc-level-2"><span class="toc-number">120.1.15</span> method ACCEPTS</li></a>
<a href="#t120.1.16"><li class="toc-level toc-level-2"><span class="toc-number">120.1.16</span> method WHICH</li></a>
<a href="#t120.1.17"><li class="toc-level toc-level-2"><span class="toc-number">120.1.17</span> method WHERE</li></a>
<a href="#t120.1.18"><li class="toc-level toc-level-2"><span class="toc-number">120.1.18</span> method WHY</li></a>
<a href="#t120.1.19"><li class="toc-level toc-level-2"><span class="toc-number">120.1.19</span> trait is export</li></a>
<a href="#t120.1.20"><li class="toc-level toc-level-2"><span class="toc-number">120.1.20</span> method return</li></a>
<a href="#t120.1.21"><li class="toc-level toc-level-2"><span class="toc-number">120.1.21</span> method return-rw</li></a>
<a href="#t120.1.22"><li class="toc-level toc-level-2"><span class="toc-number">120.1.22</span> method take</li></a>
<a href="#t120.1.23"><li class="toc-level toc-level-2"><span class="toc-number">120.1.23</span> method so</li></a>
<a href="#t120.1.24"><li class="toc-level toc-level-2"><span class="toc-number">120.1.24</span> method not</li></a>
<a href="#t121"><li class="toc-level toc-level-0"><span class="toc-number">121</span> class NFC</li></a>
<a href="#t122"><li class="toc-level toc-level-0"><span class="toc-number">122</span> class NFD</li></a>
<a href="#t123"><li class="toc-level toc-level-0"><span class="toc-number">123</span> class NFKC</li></a>
<a href="#t124"><li class="toc-level toc-level-0"><span class="toc-number">124</span> class NFKD</li></a>
<a href="#t125"><li class="toc-level toc-level-0"><span class="toc-number">125</span> class Nil</li></a>
<a href="#t125.1"><li class="toc-level toc-level-1"><span class="toc-number">125.1</span> Methods</li></a>
<a href="#t125.1.1"><li class="toc-level toc-level-2"><span class="toc-number">125.1.1</span> method append</li></a>
<a href="#t125.1.2"><li class="toc-level toc-level-2"><span class="toc-number">125.1.2</span> method gist</li></a>
<a href="#t125.1.3"><li class="toc-level toc-level-2"><span class="toc-number">125.1.3</span> method Str</li></a>
<a href="#t125.1.4"><li class="toc-level toc-level-2"><span class="toc-number">125.1.4</span> method new</li></a>
<a href="#t125.1.5"><li class="toc-level toc-level-2"><span class="toc-number">125.1.5</span> method prepend</li></a>
<a href="#t125.1.6"><li class="toc-level toc-level-2"><span class="toc-number">125.1.6</span> method push</li></a>
<a href="#t125.1.7"><li class="toc-level toc-level-2"><span class="toc-number">125.1.7</span> method unshift</li></a>
<a href="#t125.1.8"><li class="toc-level toc-level-2"><span class="toc-number">125.1.8</span> method Numeric</li></a>
<a href="#t126"><li class="toc-level toc-level-0"><span class="toc-number">126</span> class Num</li></a>
<a href="#t126.0.1"><li class="toc-level toc-level-2"><span class="toc-number">126.0.1</span> NaN</li></a>
<a href="#t126.0.2"><li class="toc-level toc-level-2"><span class="toc-number">126.0.2</span> method rand</li></a>
<a href="#t126.0.3"><li class="toc-level toc-level-2"><span class="toc-number">126.0.3</span> sub srand</li></a>
<a href="#t127"><li class="toc-level toc-level-0"><span class="toc-number">127</span> class NumStr</li></a>
<a href="#t127.1"><li class="toc-level toc-level-1"><span class="toc-number">127.1</span> Methods</li></a>
<a href="#t127.1.1"><li class="toc-level toc-level-2"><span class="toc-number">127.1.1</span> method new</li></a>
<a href="#t127.1.2"><li class="toc-level toc-level-2"><span class="toc-number">127.1.2</span> method Numeric</li></a>
<a href="#t127.1.3"><li class="toc-level toc-level-2"><span class="toc-number">127.1.3</span> method Num</li></a>
<a href="#t127.1.4"><li class="toc-level toc-level-2"><span class="toc-number">127.1.4</span> method Str</li></a>
<a href="#t127.2"><li class="toc-level toc-level-1"><span class="toc-number">127.2</span> Operators</li></a>
<a href="#t127.2.1"><li class="toc-level toc-level-2"><span class="toc-number">127.2.1</span> infix cmp</li></a>
<a href="#t128"><li class="toc-level toc-level-0"><span class="toc-number">128</span> role Numeric</li></a>
<a href="#t128.1"><li class="toc-level toc-level-1"><span class="toc-number">128.1</span> Methods</li></a>
<a href="#t128.1.1"><li class="toc-level toc-level-2"><span class="toc-number">128.1.1</span> method Real</li></a>
<a href="#t128.1.2"><li class="toc-level toc-level-2"><span class="toc-number">128.1.2</span> method Int</li></a>
<a href="#t128.1.3"><li class="toc-level toc-level-2"><span class="toc-number">128.1.3</span> method Rat</li></a>
<a href="#t128.1.4"><li class="toc-level toc-level-2"><span class="toc-number">128.1.4</span> method Num</li></a>
<a href="#t128.1.5"><li class="toc-level toc-level-2"><span class="toc-number">128.1.5</span> method narrow</li></a>
<a href="#t128.1.6"><li class="toc-level toc-level-2"><span class="toc-number">128.1.6</span> method ACCEPTS</li></a>
<a href="#t128.1.7"><li class="toc-level toc-level-2"><span class="toc-number">128.1.7</span> routine log</li></a>
<a href="#t128.1.8"><li class="toc-level toc-level-2"><span class="toc-number">128.1.8</span> routine log10</li></a>
<a href="#t128.1.9"><li class="toc-level toc-level-2"><span class="toc-number">128.1.9</span> routine exp</li></a>
<a href="#t128.1.10"><li class="toc-level toc-level-2"><span class="toc-number">128.1.10</span> method roots</li></a>
<a href="#t128.1.11"><li class="toc-level toc-level-2"><span class="toc-number">128.1.11</span> routine abs</li></a>
<a href="#t128.1.12"><li class="toc-level toc-level-2"><span class="toc-number">128.1.12</span> routine sqrt</li></a>
<a href="#t128.1.13"><li class="toc-level toc-level-2"><span class="toc-number">128.1.13</span> method conj</li></a>
<a href="#t128.1.14"><li class="toc-level toc-level-2"><span class="toc-number">128.1.14</span> method Bool</li></a>
<a href="#t128.1.15"><li class="toc-level toc-level-2"><span class="toc-number">128.1.15</span> method succ</li></a>
<a href="#t128.1.16"><li class="toc-level toc-level-2"><span class="toc-number">128.1.16</span> method pred</li></a>
<a href="#t129"><li class="toc-level toc-level-0"><span class="toc-number">129</span> class ObjAt</li></a>
<a href="#t130"><li class="toc-level toc-level-0"><span class="toc-number">130</span> enum Order</li></a>
<a href="#t130.1"><li class="toc-level toc-level-1"><span class="toc-number">130.1</span> Operators</li></a>
<a href="#t130.1.1"><li class="toc-level toc-level-2"><span class="toc-number">130.1.1</span> infix cmp</li></a>
<a href="#t130.1.2"><li class="toc-level toc-level-2"><span class="toc-number">130.1.2</span> infix &lt;=></li></a>
<a href="#t131"><li class="toc-level toc-level-0"><span class="toc-number">131</span> class Pair</li></a>
<a href="#t131.1"><li class="toc-level toc-level-1"><span class="toc-number">131.1</span> Methods</li></a>
<a href="#t131.1.1"><li class="toc-level toc-level-2"><span class="toc-number">131.1.1</span> method antipair</li></a>
<a href="#t131.1.2"><li class="toc-level toc-level-2"><span class="toc-number">131.1.2</span> method key</li></a>
<a href="#t131.1.3"><li class="toc-level toc-level-2"><span class="toc-number">131.1.3</span> method value</li></a>
<a href="#t131.1.4"><li class="toc-level toc-level-2"><span class="toc-number">131.1.4</span> infix cmp</li></a>
<a href="#t131.1.5"><li class="toc-level toc-level-2"><span class="toc-number">131.1.5</span> method fmt</li></a>
<a href="#t131.1.6"><li class="toc-level toc-level-2"><span class="toc-number">131.1.6</span> method kv</li></a>
<a href="#t131.1.7"><li class="toc-level toc-level-2"><span class="toc-number">131.1.7</span> method pairs</li></a>
<a href="#t131.1.8"><li class="toc-level toc-level-2"><span class="toc-number">131.1.8</span> method freeze</li></a>
<a href="#t131.1.9"><li class="toc-level toc-level-2"><span class="toc-number">131.1.9</span> method Str</li></a>
<a href="#t132"><li class="toc-level toc-level-0"><span class="toc-number">132</span> class Parameter</li></a>
<a href="#t132.1"><li class="toc-level toc-level-1"><span class="toc-number">132.1</span> Methods</li></a>
<a href="#t132.1.1"><li class="toc-level toc-level-2"><span class="toc-number">132.1.1</span> method name</li></a>
<a href="#t132.1.2"><li class="toc-level toc-level-2"><span class="toc-number">132.1.2</span> method sigil</li></a>
<a href="#t132.1.3"><li class="toc-level toc-level-2"><span class="toc-number">132.1.3</span> method type</li></a>
<a href="#t132.1.4"><li class="toc-level toc-level-2"><span class="toc-number">132.1.4</span> method constraints</li></a>
<a href="#t132.1.5"><li class="toc-level toc-level-2"><span class="toc-number">132.1.5</span> method named</li></a>
<a href="#t132.1.6"><li class="toc-level toc-level-2"><span class="toc-number">132.1.6</span> method named_names</li></a>
<a href="#t132.1.7"><li class="toc-level toc-level-2"><span class="toc-number">132.1.7</span> method positional</li></a>
<a href="#t132.1.8"><li class="toc-level toc-level-2"><span class="toc-number">132.1.8</span> method slurpy</li></a>
<a href="#t132.1.9"><li class="toc-level toc-level-2"><span class="toc-number">132.1.9</span> method twigil</li></a>
<a href="#t132.1.10"><li class="toc-level toc-level-2"><span class="toc-number">132.1.10</span> method optional</li></a>
<a href="#t132.1.11"><li class="toc-level toc-level-2"><span class="toc-number">132.1.11</span> method raw</li></a>
<a href="#t132.1.12"><li class="toc-level toc-level-2"><span class="toc-number">132.1.12</span> method capture</li></a>
<a href="#t132.1.13"><li class="toc-level toc-level-2"><span class="toc-number">132.1.13</span> method rw</li></a>
<a href="#t132.1.14"><li class="toc-level toc-level-2"><span class="toc-number">132.1.14</span> method copy</li></a>
<a href="#t132.1.15"><li class="toc-level toc-level-2"><span class="toc-number">132.1.15</span> method readonly</li></a>
<a href="#t132.1.16"><li class="toc-level toc-level-2"><span class="toc-number">132.1.16</span> method invocant</li></a>
<a href="#t132.1.17"><li class="toc-level toc-level-2"><span class="toc-number">132.1.17</span> method default</li></a>
<a href="#t132.1.18"><li class="toc-level toc-level-2"><span class="toc-number">132.1.18</span> method type_captures</li></a>
<a href="#t132.1.19"><li class="toc-level toc-level-2"><span class="toc-number">132.1.19</span> method sub_signature</li></a>
<a href="#t133"><li class="toc-level toc-level-0"><span class="toc-number">133</span> class Pod::Block</li></a>
<a href="#t133.1"><li class="toc-level toc-level-1"><span class="toc-number">133.1</span> Methods</li></a>
<a href="#t133.1.1"><li class="toc-level toc-level-2"><span class="toc-number">133.1.1</span> method contents</li></a>
<a href="#t133.1.2"><li class="toc-level toc-level-2"><span class="toc-number">133.1.2</span> method config</li></a>
<a href="#t134"><li class="toc-level toc-level-0"><span class="toc-number">134</span> class Pod::Block::Code</li></a>
<a href="#t134.1"><li class="toc-level toc-level-1"><span class="toc-number">134.1</span> Methods</li></a>
<a href="#t134.1.1"><li class="toc-level toc-level-2"><span class="toc-number">134.1.1</span> method allowed</li></a>
<a href="#t135"><li class="toc-level toc-level-0"><span class="toc-number">135</span> class Pod::Block::Named</li></a>
<a href="#t135.1"><li class="toc-level toc-level-1"><span class="toc-number">135.1</span> Methods</li></a>
<a href="#t135.1.1"><li class="toc-level toc-level-2"><span class="toc-number">135.1.1</span> method name</li></a>
<a href="#t136"><li class="toc-level toc-level-0"><span class="toc-number">136</span> class Pod::Block::Para</li></a>
<a href="#t137"><li class="toc-level toc-level-0"><span class="toc-number">137</span> class Pod::Item</li></a>
<a href="#t137.1"><li class="toc-level toc-level-1"><span class="toc-number">137.1</span> Methods</li></a>
<a href="#t137.1.1"><li class="toc-level toc-level-2"><span class="toc-number">137.1.1</span> method level</li></a>
<a href="#t138"><li class="toc-level toc-level-0"><span class="toc-number">138</span> role Positional</li></a>
<a href="#t138.1"><li class="toc-level toc-level-1"><span class="toc-number">138.1</span> Methods</li></a>
<a href="#t138.1.1"><li class="toc-level toc-level-2"><span class="toc-number">138.1.1</span> method of</li></a>
<a href="#t139"><li class="toc-level toc-level-0"><span class="toc-number">139</span> role PositionalBindFailover</li></a>
<a href="#t139.1"><li class="toc-level toc-level-1"><span class="toc-number">139.1</span> Methods</li></a>
<a href="#t139.1.1"><li class="toc-level toc-level-2"><span class="toc-number">139.1.1</span> method cache</li></a>
<a href="#t139.1.2"><li class="toc-level toc-level-2"><span class="toc-number">139.1.2</span> method list</li></a>
<a href="#t139.1.3"><li class="toc-level toc-level-2"><span class="toc-number">139.1.3</span> method iterator</li></a>
<a href="#t140"><li class="toc-level toc-level-0"><span class="toc-number">140</span> class Proc</li></a>
<a href="#t140.1"><li class="toc-level toc-level-1"><span class="toc-number">140.1</span> Methods</li></a>
<a href="#t140.1.1"><li class="toc-level toc-level-2"><span class="toc-number">140.1.1</span> method new</li></a>
<a href="#t140.1.2"><li class="toc-level toc-level-2"><span class="toc-number">140.1.2</span> method sink</li></a>
<a href="#t140.1.3"><li class="toc-level toc-level-2"><span class="toc-number">140.1.3</span> method spawn</li></a>
<a href="#t140.1.4"><li class="toc-level toc-level-2"><span class="toc-number">140.1.4</span> method exitcode</li></a>
<a href="#t140.1.5"><li class="toc-level toc-level-2"><span class="toc-number">140.1.5</span> method signal</li></a>
<a href="#t140.1.6"><li class="toc-level toc-level-2"><span class="toc-number">140.1.6</span> method pid</li></a>
<a href="#t141"><li class="toc-level toc-level-0"><span class="toc-number">141</span> class Proc::Async</li></a>
<a href="#t141.1"><li class="toc-level toc-level-1"><span class="toc-number">141.1</span> Methods</li></a>
<a href="#t141.1.1"><li class="toc-level toc-level-2"><span class="toc-number">141.1.1</span> method new</li></a>
<a href="#t141.1.2"><li class="toc-level toc-level-2"><span class="toc-number">141.1.2</span> method stdout</li></a>
<a href="#t141.1.3"><li class="toc-level toc-level-2"><span class="toc-number">141.1.3</span> method stderr</li></a>
<a href="#t141.1.4"><li class="toc-level toc-level-2"><span class="toc-number">141.1.4</span> method w</li></a>
<a href="#t141.1.5"><li class="toc-level toc-level-2"><span class="toc-number">141.1.5</span> method start</li></a>
<a href="#t141.1.6"><li class="toc-level toc-level-2"><span class="toc-number">141.1.6</span> method started</li></a>
<a href="#t141.1.7"><li class="toc-level toc-level-2"><span class="toc-number">141.1.7</span> method path</li></a>
<a href="#t141.1.8"><li class="toc-level toc-level-2"><span class="toc-number">141.1.8</span> method args</li></a>
<a href="#t141.1.9"><li class="toc-level toc-level-2"><span class="toc-number">141.1.9</span> method write</li></a>
<a href="#t141.1.10"><li class="toc-level toc-level-2"><span class="toc-number">141.1.10</span> method print</li></a>
<a href="#t141.1.11"><li class="toc-level toc-level-2"><span class="toc-number">141.1.11</span> method say</li></a>
<a href="#t141.1.12"><li class="toc-level toc-level-2"><span class="toc-number">141.1.12</span> method close-stdin</li></a>
<a href="#t141.1.13"><li class="toc-level toc-level-2"><span class="toc-number">141.1.13</span> method kill</li></a>
<a href="#t142"><li class="toc-level toc-level-0"><span class="toc-number">142</span> class Promise</li></a>
<a href="#t142.1"><li class="toc-level toc-level-1"><span class="toc-number">142.1</span> Methods</li></a>
<a href="#t142.1.1"><li class="toc-level toc-level-2"><span class="toc-number">142.1.1</span> method start</li></a>
<a href="#t142.1.2"><li class="toc-level toc-level-2"><span class="toc-number">142.1.2</span> method in</li></a>
<a href="#t142.1.3"><li class="toc-level toc-level-2"><span class="toc-number">142.1.3</span> method at</li></a>
<a href="#t142.1.4"><li class="toc-level toc-level-2"><span class="toc-number">142.1.4</span> method allof</li></a>
<a href="#t142.1.5"><li class="toc-level toc-level-2"><span class="toc-number">142.1.5</span> method anyof</li></a>
<a href="#t142.1.6"><li class="toc-level toc-level-2"><span class="toc-number">142.1.6</span> method then</li></a>
<a href="#t142.1.7"><li class="toc-level toc-level-2"><span class="toc-number">142.1.7</span> method keep</li></a>
<a href="#t142.1.8"><li class="toc-level toc-level-2"><span class="toc-number">142.1.8</span> method break</li></a>
<a href="#t142.1.9"><li class="toc-level toc-level-2"><span class="toc-number">142.1.9</span> method result</li></a>
<a href="#t142.1.10"><li class="toc-level toc-level-2"><span class="toc-number">142.1.10</span> method cause</li></a>
<a href="#t142.1.11"><li class="toc-level toc-level-2"><span class="toc-number">142.1.11</span> method Bool</li></a>
<a href="#t142.1.12"><li class="toc-level toc-level-2"><span class="toc-number">142.1.12</span> method status</li></a>
<a href="#t142.1.13"><li class="toc-level toc-level-2"><span class="toc-number">142.1.13</span> method scheduler</li></a>
<a href="#t142.1.14"><li class="toc-level toc-level-2"><span class="toc-number">142.1.14</span> method vow</li></a>
<a href="#t142.1.15"><li class="toc-level toc-level-2"><span class="toc-number">142.1.15</span> method Supply</li></a>
<a href="#t142.1.16"><li class="toc-level toc-level-2"><span class="toc-number">142.1.16</span> sub await</li></a>
<a href="#t143"><li class="toc-level toc-level-0"><span class="toc-number">143</span> class Proxy</li></a>
<a href="#t143.1"><li class="toc-level toc-level-1"><span class="toc-number">143.1</span> Methods</li></a>
<a href="#t143.1.1"><li class="toc-level toc-level-2"><span class="toc-number">143.1.1</span> method new</li></a>
<a href="#t144"><li class="toc-level toc-level-0"><span class="toc-number">144</span> role QuantHash</li></a>
<a href="#t145"><li class="toc-level toc-level-0"><span class="toc-number">145</span> class Range</li></a>
<a href="#t145.1"><li class="toc-level toc-level-1"><span class="toc-number">145.1</span> Methods</li></a>
<a href="#t145.1.1"><li class="toc-level toc-level-2"><span class="toc-number">145.1.1</span> method min</li></a>
<a href="#t145.1.2"><li class="toc-level toc-level-2"><span class="toc-number">145.1.2</span> method excludes-min</li></a>
<a href="#t145.1.3"><li class="toc-level toc-level-2"><span class="toc-number">145.1.3</span> method max</li></a>
<a href="#t145.1.4"><li class="toc-level toc-level-2"><span class="toc-number">145.1.4</span> method excludes-max</li></a>
<a href="#t145.1.5"><li class="toc-level toc-level-2"><span class="toc-number">145.1.5</span> method bounds</li></a>
<a href="#t145.1.6"><li class="toc-level toc-level-2"><span class="toc-number">145.1.6</span> method infinite</li></a>
<a href="#t145.1.7"><li class="toc-level toc-level-2"><span class="toc-number">145.1.7</span> method is-int</li></a>
<a href="#t145.1.8"><li class="toc-level toc-level-2"><span class="toc-number">145.1.8</span> method int-bounds</li></a>
<a href="#t145.1.9"><li class="toc-level toc-level-2"><span class="toc-number">145.1.9</span> method minmax</li></a>
<a href="#t145.1.10"><li class="toc-level toc-level-2"><span class="toc-number">145.1.10</span> method elems</li></a>
<a href="#t145.1.11"><li class="toc-level toc-level-2"><span class="toc-number">145.1.11</span> method list</li></a>
<a href="#t145.1.12"><li class="toc-level toc-level-2"><span class="toc-number">145.1.12</span> method flat</li></a>
<a href="#t145.1.13"><li class="toc-level toc-level-2"><span class="toc-number">145.1.13</span> method pick</li></a>
<a href="#t145.1.14"><li class="toc-level toc-level-2"><span class="toc-number">145.1.14</span> method roll</li></a>
<a href="#t146"><li class="toc-level toc-level-0"><span class="toc-number">146</span> class Rat</li></a>
<a href="#t146.1"><li class="toc-level toc-level-1"><span class="toc-number">146.1</span> Methods</li></a>
<a href="#t146.1.1"><li class="toc-level toc-level-2"><span class="toc-number">146.1.1</span> method perl</li></a>
<a href="#t147"><li class="toc-level toc-level-0"><span class="toc-number">147</span> class RatStr</li></a>
<a href="#t147.1"><li class="toc-level toc-level-1"><span class="toc-number">147.1</span> Methods</li></a>
<a href="#t147.1.1"><li class="toc-level toc-level-2"><span class="toc-number">147.1.1</span> method new</li></a>
<a href="#t147.1.2"><li class="toc-level toc-level-2"><span class="toc-number">147.1.2</span> method Numeric</li></a>
<a href="#t147.1.3"><li class="toc-level toc-level-2"><span class="toc-number">147.1.3</span> method Rat</li></a>
<a href="#t147.1.4"><li class="toc-level toc-level-2"><span class="toc-number">147.1.4</span> method Str</li></a>
<a href="#t147.2"><li class="toc-level toc-level-1"><span class="toc-number">147.2</span> Operators</li></a>
<a href="#t147.2.1"><li class="toc-level toc-level-2"><span class="toc-number">147.2.1</span> infix cmp</li></a>
<a href="#t148"><li class="toc-level toc-level-0"><span class="toc-number">148</span> role Rational</li></a>
<a href="#t148.1"><li class="toc-level toc-level-1"><span class="toc-number">148.1</span> Methods</li></a>
<a href="#t148.1.1"><li class="toc-level toc-level-2"><span class="toc-number">148.1.1</span> method new</li></a>
<a href="#t148.1.2"><li class="toc-level toc-level-2"><span class="toc-number">148.1.2</span> method numerator</li></a>
<a href="#t148.1.3"><li class="toc-level toc-level-2"><span class="toc-number">148.1.3</span> method denominator</li></a>
<a href="#t148.1.4"><li class="toc-level toc-level-2"><span class="toc-number">148.1.4</span> method nude</li></a>
<a href="#t148.1.5"><li class="toc-level toc-level-2"><span class="toc-number">148.1.5</span> method norm</li></a>
<a href="#t148.1.6"><li class="toc-level toc-level-2"><span class="toc-number">148.1.6</span> method base-repeating</li></a>
<a href="#t149"><li class="toc-level toc-level-0"><span class="toc-number">149</span> role Real</li></a>
<a href="#t149.1"><li class="toc-level toc-level-1"><span class="toc-number">149.1</span> Methods</li></a>
<a href="#t149.1.1"><li class="toc-level toc-level-2"><span class="toc-number">149.1.1</span> method Rat</li></a>
<a href="#t149.1.2"><li class="toc-level toc-level-2"><span class="toc-number">149.1.2</span> routine rand</li></a>
<a href="#t149.1.3"><li class="toc-level toc-level-2"><span class="toc-number">149.1.3</span> method sign</li></a>
<a href="#t149.1.4"><li class="toc-level toc-level-2"><span class="toc-number">149.1.4</span> method round</li></a>
<a href="#t149.1.5"><li class="toc-level toc-level-2"><span class="toc-number">149.1.5</span> method floor</li></a>
<a href="#t149.1.6"><li class="toc-level toc-level-2"><span class="toc-number">149.1.6</span> method ceiling</li></a>
<a href="#t149.1.7"><li class="toc-level toc-level-2"><span class="toc-number">149.1.7</span> method truncate</li></a>
<a href="#t149.1.8"><li class="toc-level toc-level-2"><span class="toc-number">149.1.8</span> method base</li></a>
<a href="#t150"><li class="toc-level toc-level-0"><span class="toc-number">150</span> class Regex</li></a>
<a href="#t150.1"><li class="toc-level toc-level-1"><span class="toc-number">150.1</span> Methods</li></a>
<a href="#t150.1.1"><li class="toc-level toc-level-2"><span class="toc-number">150.1.1</span> method ACCEPTS</li></a>
<a href="#t150.1.2"><li class="toc-level toc-level-2"><span class="toc-number">150.1.2</span> method Bool</li></a>
<a href="#t151"><li class="toc-level toc-level-0"><span class="toc-number">151</span> class Routine</li></a>
<a href="#t151.1"><li class="toc-level toc-level-1"><span class="toc-number">151.1</span> Methods</li></a>
<a href="#t151.1.1"><li class="toc-level toc-level-2"><span class="toc-number">151.1.1</span> method name</li></a>
<a href="#t151.1.2"><li class="toc-level toc-level-2"><span class="toc-number">151.1.2</span> method multi</li></a>
<a href="#t151.1.3"><li class="toc-level toc-level-2"><span class="toc-number">151.1.3</span> method candidates</li></a>
<a href="#t151.1.4"><li class="toc-level toc-level-2"><span class="toc-number">151.1.4</span> method wrap</li></a>
<a href="#t151.1.5"><li class="toc-level toc-level-2"><span class="toc-number">151.1.5</span> method unwrap</li></a>
<a href="#t151.1.6"><li class="toc-level toc-level-2"><span class="toc-number">151.1.6</span> method yada</li></a>
<a href="#t151.1.7"><li class="toc-level toc-level-2"><span class="toc-number">151.1.7</span> trait is cached</li></a>
<a href="#t151.1.8"><li class="toc-level toc-level-2"><span class="toc-number">151.1.8</span> trait is pure</li></a>
<a href="#t151.1.9"><li class="toc-level toc-level-2"><span class="toc-number">151.1.9</span> trait is rw</li></a>
<a href="#t151.1.10"><li class="toc-level toc-level-2"><span class="toc-number">151.1.10</span> trait is export</li></a>
<a href="#t151.1.11"><li class="toc-level toc-level-2"><span class="toc-number">151.1.11</span> trait is DEPRECATED</li></a>
<a href="#t151.1.12"><li class="toc-level toc-level-2"><span class="toc-number">151.1.12</span> trait is hidden-from-backtrace</li></a>
<a href="#t152"><li class="toc-level toc-level-0"><span class="toc-number">152</span> class Scalar</li></a>
<a href="#t153"><li class="toc-level toc-level-0"><span class="toc-number">153</span> role Scheduler</li></a>
<a href="#t153.1"><li class="toc-level toc-level-1"><span class="toc-number">153.1</span> Methods</li></a>
<a href="#t153.1.1"><li class="toc-level toc-level-2"><span class="toc-number">153.1.1</span> method uncaught_handler</li></a>
<a href="#t153.1.2"><li class="toc-level toc-level-2"><span class="toc-number">153.1.2</span> method cue</li></a>
<a href="#t154"><li class="toc-level toc-level-0"><span class="toc-number">154</span> class Semaphore</li></a>
<a href="#t154.1"><li class="toc-level toc-level-1"><span class="toc-number">154.1</span> Methods</li></a>
<a href="#t154.1.1"><li class="toc-level toc-level-2"><span class="toc-number">154.1.1</span> method new</li></a>
<a href="#t154.1.2"><li class="toc-level toc-level-2"><span class="toc-number">154.1.2</span> method acquire</li></a>
<a href="#t154.1.3"><li class="toc-level toc-level-2"><span class="toc-number">154.1.3</span> method try_acquire</li></a>
<a href="#t154.1.4"><li class="toc-level toc-level-2"><span class="toc-number">154.1.4</span> method release</li></a>
<a href="#t155"><li class="toc-level toc-level-0"><span class="toc-number">155</span> class Seq</li></a>
<a href="#t155.1"><li class="toc-level toc-level-1"><span class="toc-number">155.1</span> Methods</li></a>
<a href="#t155.1.1"><li class="toc-level toc-level-2"><span class="toc-number">155.1.1</span> method new</li></a>
<a href="#t155.1.2"><li class="toc-level toc-level-2"><span class="toc-number">155.1.2</span> method iterator</li></a>
<a href="#t155.1.3"><li class="toc-level toc-level-2"><span class="toc-number">155.1.3</span> method is-lazy</li></a>
<a href="#t155.1.4"><li class="toc-level toc-level-2"><span class="toc-number">155.1.4</span> method eager</li></a>
<a href="#t155.1.5"><li class="toc-level toc-level-2"><span class="toc-number">155.1.5</span> method from-loop</li></a>
<a href="#t156"><li class="toc-level toc-level-0"><span class="toc-number">156</span> class Set</li></a>
<a href="#t156.1"><li class="toc-level toc-level-1"><span class="toc-number">156.1</span> Creating <span class="code">Set</span> objects</li></a>
<a href="#t156.2"><li class="toc-level toc-level-1"><span class="toc-number">156.2</span> Operators</li></a>
<a href="#t156.3"><li class="toc-level toc-level-1"><span class="toc-number">156.3</span> Subroutines</li></a>
<a href="#t156.3.1"><li class="toc-level toc-level-2"><span class="toc-number">156.3.1</span> sub set</li></a>
<a href="#t156.4"><li class="toc-level toc-level-1"><span class="toc-number">156.4</span> See Also</li></a>
<a href="#t157"><li class="toc-level toc-level-0"><span class="toc-number">157</span> class SetHash</li></a>
<a href="#t157.1"><li class="toc-level toc-level-1"><span class="toc-number">157.1</span> Creating <span class="code">SetHash</span> objects</li></a>
<a href="#t157.2"><li class="toc-level toc-level-1"><span class="toc-number">157.2</span> Operators</li></a>
<a href="#t157.3"><li class="toc-level toc-level-1"><span class="toc-number">157.3</span> See Also</li></a>
<a href="#t158"><li class="toc-level toc-level-0"><span class="toc-number">158</span> role Setty</li></a>
<a href="#t158.1"><li class="toc-level toc-level-1"><span class="toc-number">158.1</span> Methods</li></a>
<a href="#t158.1.1"><li class="toc-level toc-level-2"><span class="toc-number">158.1.1</span> method grab</li></a>
<a href="#t158.1.2"><li class="toc-level toc-level-2"><span class="toc-number">158.1.2</span> method grabpairs</li></a>
<a href="#t158.1.3"><li class="toc-level toc-level-2"><span class="toc-number">158.1.3</span> method pick</li></a>
<a href="#t158.1.4"><li class="toc-level toc-level-2"><span class="toc-number">158.1.4</span> method roll</li></a>
<a href="#t158.1.5"><li class="toc-level toc-level-2"><span class="toc-number">158.1.5</span> method keys</li></a>
<a href="#t158.1.6"><li class="toc-level toc-level-2"><span class="toc-number">158.1.6</span> method values</li></a>
<a href="#t158.1.7"><li class="toc-level toc-level-2"><span class="toc-number">158.1.7</span> method kv</li></a>
<a href="#t158.1.8"><li class="toc-level toc-level-2"><span class="toc-number">158.1.8</span> method elems</li></a>
<a href="#t158.1.9"><li class="toc-level toc-level-2"><span class="toc-number">158.1.9</span> method total</li></a>
<a href="#t158.1.10"><li class="toc-level toc-level-2"><span class="toc-number">158.1.10</span> method ACCEPTS</li></a>
<a href="#t158.2"><li class="toc-level toc-level-1"><span class="toc-number">158.2</span> See Also</li></a>
<a href="#t159"><li class="toc-level toc-level-0"><span class="toc-number">159</span> class Signature</li></a>
<a href="#t159.1"><li class="toc-level toc-level-1"><span class="toc-number">159.1</span> Signature Literals</li></a>
<a href="#t159.1.1"><li class="toc-level toc-level-2"><span class="toc-number">159.1.1</span> Parameter Separators</li></a>
<a href="#t159.1.2"><li class="toc-level toc-level-2"><span class="toc-number">159.1.2</span> Type Constraints <a name="564"></a></li></a>
<a href="#t159.1.2.1"><li class="toc-level toc-level-3"><span class="toc-number">159.1.2.1</span> <a name="568"></a>Constraining Defined and Undefined Values</li></a>
<a href="#t159.1.2.2"><li class="toc-level toc-level-3"><span class="toc-number">159.1.2.2</span> <a name="569"></a>Constraining signatures of Callables</li></a>
<a href="#t159.1.2.3"><li class="toc-level toc-level-3"><span class="toc-number">159.1.2.3</span> <a name="570"></a>Constraining Return Types</li></a>
<a href="#t159.1.2.4"><li class="toc-level toc-level-3"><span class="toc-number">159.1.2.4</span> <a name="571"></a>Coercion Type</li></a>
<a href="#t159.1.3"><li class="toc-level toc-level-2"><span class="toc-number">159.1.3</span> <a name="572"></a>Slurpy (A.K.A. Variadic) Parameters</li></a>
<a href="#t159.1.4"><li class="toc-level toc-level-2"><span class="toc-number">159.1.4</span> Single Argument Rule Slurpy</li></a>
<a href="#t159.1.5"><li class="toc-level toc-level-2"><span class="toc-number">159.1.5</span> Type Captures</li></a>
<a href="#t159.1.6"><li class="toc-level toc-level-2"><span class="toc-number">159.1.6</span> Positional vs. Named</li></a>
<a href="#t159.1.7"><li class="toc-level toc-level-2"><span class="toc-number">159.1.7</span> Optional and Mandatory Parameters</li></a>
<a href="#t159.1.8"><li class="toc-level toc-level-2"><span class="toc-number">159.1.8</span> Destructuring Parameters</li></a>
<a href="#t159.1.9"><li class="toc-level toc-level-2"><span class="toc-number">159.1.9</span> Long Names</li></a>
<a href="#t159.1.10"><li class="toc-level toc-level-2"><span class="toc-number">159.1.10</span> <a name="578"></a>Capture Parameters</li></a>
<a href="#t159.1.11"><li class="toc-level toc-level-2"><span class="toc-number">159.1.11</span> <a name="579"></a>Parameter Traits and Modifiers</li></a>
<a href="#t159.2"><li class="toc-level toc-level-1"><span class="toc-number">159.2</span> Methods</li></a>
<a href="#t159.2.1"><li class="toc-level toc-level-2"><span class="toc-number">159.2.1</span> method params</li></a>
<a href="#t159.2.2"><li class="toc-level toc-level-2"><span class="toc-number">159.2.2</span> method arity</li></a>
<a href="#t159.2.3"><li class="toc-level toc-level-2"><span class="toc-number">159.2.3</span> method count</li></a>
<a href="#t159.2.4"><li class="toc-level toc-level-2"><span class="toc-number">159.2.4</span> method returns</li></a>
<a href="#t159.2.5"><li class="toc-level toc-level-2"><span class="toc-number">159.2.5</span> method ACCEPTS</li></a>
<a href="#t160"><li class="toc-level toc-level-0"><span class="toc-number">160</span> class Slip</li></a>
<a href="#t160.1"><li class="toc-level toc-level-1"><span class="toc-number">160.1</span> Methods</li></a>
<a href="#t160.1.1"><li class="toc-level toc-level-2"><span class="toc-number">160.1.1</span> sub slip</li></a>
<a href="#t160.2"><li class="toc-level toc-level-1"><span class="toc-number">160.2</span> Constants</li></a>
<a href="#t160.2.1"><li class="toc-level toc-level-2"><span class="toc-number">160.2.1</span> <a name="565"></a> <span class="code">Empty</span> </li></a>
<a href="#t161"><li class="toc-level toc-level-0"><span class="toc-number">161</span> class Stash</li></a>
<a href="#t162"><li class="toc-level toc-level-0"><span class="toc-number">162</span> class Str</li></a>
<a href="#t162.1"><li class="toc-level toc-level-1"><span class="toc-number">162.1</span> Methods</li></a>
<a href="#t162.1.1"><li class="toc-level toc-level-2"><span class="toc-number">162.1.1</span> routine chop</li></a>
<a href="#t162.1.2"><li class="toc-level toc-level-2"><span class="toc-number">162.1.2</span> routine chomp</li></a>
<a href="#t162.1.3"><li class="toc-level toc-level-2"><span class="toc-number">162.1.3</span> routine lc</li></a>
<a href="#t162.1.4"><li class="toc-level toc-level-2"><span class="toc-number">162.1.4</span> routine uc</li></a>
<a href="#t162.1.5"><li class="toc-level toc-level-2"><span class="toc-number">162.1.5</span> routine fc</li></a>
<a href="#t162.1.6"><li class="toc-level toc-level-2"><span class="toc-number">162.1.6</span> routine tc</li></a>
<a href="#t162.1.7"><li class="toc-level toc-level-2"><span class="toc-number">162.1.7</span> routine tclc</li></a>
<a href="#t162.1.8"><li class="toc-level toc-level-2"><span class="toc-number">162.1.8</span> routine wordcase</li></a>
<a href="#t162.1.9"><li class="toc-level toc-level-2"><span class="toc-number">162.1.9</span> method lcfirst</li></a>
<a href="#t162.1.10"><li class="toc-level toc-level-2"><span class="toc-number">162.1.10</span> method ucfirst</li></a>
<a href="#t162.1.11"><li class="toc-level toc-level-2"><span class="toc-number">162.1.11</span> method unival</li></a>
<a href="#t162.1.12"><li class="toc-level toc-level-2"><span class="toc-number">162.1.12</span> method univals</li></a>
<a href="#t162.1.13"><li class="toc-level toc-level-2"><span class="toc-number">162.1.13</span> method length</li></a>
<a href="#t162.1.14"><li class="toc-level toc-level-2"><span class="toc-number">162.1.14</span> routine chars</li></a>
<a href="#t162.1.15"><li class="toc-level toc-level-2"><span class="toc-number">162.1.15</span> method encode</li></a>
<a href="#t162.1.16"><li class="toc-level toc-level-2"><span class="toc-number">162.1.16</span> routine index</li></a>
<a href="#t162.1.17"><li class="toc-level toc-level-2"><span class="toc-number">162.1.17</span> routine rindex</li></a>
<a href="#t162.1.18"><li class="toc-level toc-level-2"><span class="toc-number">162.1.18</span> routine split</li></a>
<a href="#t162.1.19"><li class="toc-level toc-level-2"><span class="toc-number">162.1.19</span> routine comb</li></a>
<a href="#t162.1.20"><li class="toc-level toc-level-2"><span class="toc-number">162.1.20</span> routine lines</li></a>
<a href="#t162.1.21"><li class="toc-level toc-level-2"><span class="toc-number">162.1.21</span> routine words</li></a>
<a href="#t162.1.22"><li class="toc-level toc-level-2"><span class="toc-number">162.1.22</span> routine flip</li></a>
<a href="#t162.1.23"><li class="toc-level toc-level-2"><span class="toc-number">162.1.23</span> sub printf</li></a>
<a href="#t162.1.24"><li class="toc-level toc-level-2"><span class="toc-number">162.1.24</span> sub sprintf</li></a>
<a href="#t162.1.25"><li class="toc-level toc-level-2"><span class="toc-number">162.1.25</span> method starts-with</li></a>
<a href="#t162.1.26"><li class="toc-level toc-level-2"><span class="toc-number">162.1.26</span> method ends-with</li></a>
<a href="#t162.1.27"><li class="toc-level toc-level-2"><span class="toc-number">162.1.27</span> method subst</li></a>
<a href="#t162.1.28"><li class="toc-level toc-level-2"><span class="toc-number">162.1.28</span> method subst-mutate</li></a>
<a href="#t162.1.29"><li class="toc-level toc-level-2"><span class="toc-number">162.1.29</span> routine substr</li></a>
<a href="#t162.1.30"><li class="toc-level toc-level-2"><span class="toc-number">162.1.30</span> method substr-eq</li></a>
<a href="#t162.1.31"><li class="toc-level toc-level-2"><span class="toc-number">162.1.31</span> method substr-rw</li></a>
<a href="#t162.1.32"><li class="toc-level toc-level-2"><span class="toc-number">162.1.32</span> routine samemark</li></a>
<a href="#t162.1.33"><li class="toc-level toc-level-2"><span class="toc-number">162.1.33</span> method succ</li></a>
<a href="#t162.1.34"><li class="toc-level toc-level-2"><span class="toc-number">162.1.34</span> method pred</li></a>
<a href="#t162.1.35"><li class="toc-level toc-level-2"><span class="toc-number">162.1.35</span> routine ord</li></a>
<a href="#t162.1.36"><li class="toc-level toc-level-2"><span class="toc-number">162.1.36</span> method ords</li></a>
<a href="#t162.1.37"><li class="toc-level toc-level-2"><span class="toc-number">162.1.37</span> method trans</li></a>
<a href="#t162.1.38"><li class="toc-level toc-level-2"><span class="toc-number">162.1.38</span> method indent</li></a>
<a href="#t162.1.39"><li class="toc-level toc-level-2"><span class="toc-number">162.1.39</span> method trim</li></a>
<a href="#t162.1.40"><li class="toc-level toc-level-2"><span class="toc-number">162.1.40</span> method trim-trailing</li></a>
<a href="#t162.1.41"><li class="toc-level toc-level-2"><span class="toc-number">162.1.41</span> method trim-leading</li></a>
<a href="#t162.1.42"><li class="toc-level toc-level-2"><span class="toc-number">162.1.42</span> method NFC</li></a>
<a href="#t162.1.43"><li class="toc-level toc-level-2"><span class="toc-number">162.1.43</span> method NFD</li></a>
<a href="#t162.1.44"><li class="toc-level toc-level-2"><span class="toc-number">162.1.44</span> method NFKC</li></a>
<a href="#t162.1.45"><li class="toc-level toc-level-2"><span class="toc-number">162.1.45</span> method NFKD</li></a>
<a href="#t162.1.46"><li class="toc-level toc-level-2"><span class="toc-number">162.1.46</span> method ACCEPTS</li></a>
<a href="#t162.1.47"><li class="toc-level toc-level-2"><span class="toc-number">162.1.47</span> sub val</li></a>
<a href="#t163"><li class="toc-level toc-level-0"><span class="toc-number">163</span> role Stringy</li></a>
<a href="#t164"><li class="toc-level toc-level-0"><span class="toc-number">164</span> class Sub</li></a>
<a href="#t165"><li class="toc-level toc-level-0"><span class="toc-number">165</span> class Submethod</li></a>
<a href="#t165.1"><li class="toc-level toc-level-1"><span class="toc-number">165.1</span> Methods</li></a>
<a href="#t166"><li class="toc-level toc-level-0"><span class="toc-number">166</span> class Supplier</li></a>
<a href="#t166.1"><li class="toc-level toc-level-1"><span class="toc-number">166.1</span> Methods</li></a>
<a href="#t166.1.1"><li class="toc-level toc-level-2"><span class="toc-number">166.1.1</span> method new</li></a>
<a href="#t166.1.2"><li class="toc-level toc-level-2"><span class="toc-number">166.1.2</span> method Supply</li></a>
<a href="#t166.1.3"><li class="toc-level toc-level-2"><span class="toc-number">166.1.3</span> method emit</li></a>
<a href="#t166.1.4"><li class="toc-level toc-level-2"><span class="toc-number">166.1.4</span> method done</li></a>
<a href="#t166.1.5"><li class="toc-level toc-level-2"><span class="toc-number">166.1.5</span> method quit</li></a>
<a href="#t167"><li class="toc-level toc-level-0"><span class="toc-number">167</span> class Supply</li></a>
<a href="#t167.1"><li class="toc-level toc-level-1"><span class="toc-number">167.1</span> Methods that return Taps</li></a>
<a href="#t167.1.1"><li class="toc-level toc-level-2"><span class="toc-number">167.1.1</span> method tap</li></a>
<a href="#t167.1.2"><li class="toc-level toc-level-2"><span class="toc-number">167.1.2</span> method act</li></a>
<a href="#t167.2"><li class="toc-level toc-level-1"><span class="toc-number">167.2</span> Utility methods</li></a>
<a href="#t167.2.1"><li class="toc-level toc-level-2"><span class="toc-number">167.2.1</span> method Channel</li></a>
<a href="#t167.2.2"><li class="toc-level toc-level-2"><span class="toc-number">167.2.2</span> method Promise</li></a>
<a href="#t167.2.3"><li class="toc-level toc-level-2"><span class="toc-number">167.2.3</span> method live</li></a>
<a href="#t167.2.4"><li class="toc-level toc-level-2"><span class="toc-number">167.2.4</span> method schedule-on</li></a>
<a href="#t167.3"><li class="toc-level toc-level-1"><span class="toc-number">167.3</span> Methods that wait until the supply is done</li></a>
<a href="#t167.3.1"><li class="toc-level toc-level-2"><span class="toc-number">167.3.1</span> method wait</li></a>
<a href="#t167.3.2"><li class="toc-level toc-level-2"><span class="toc-number">167.3.2</span> method list</li></a>
<a href="#t167.3.3"><li class="toc-level toc-level-2"><span class="toc-number">167.3.3</span> method grab</li></a>
<a href="#t167.3.4"><li class="toc-level toc-level-2"><span class="toc-number">167.3.4</span> method reverse</li></a>
<a href="#t167.3.5"><li class="toc-level toc-level-2"><span class="toc-number">167.3.5</span> method sort</li></a>
<a href="#t167.4"><li class="toc-level toc-level-1"><span class="toc-number">167.4</span> Methods that return another Supply</li></a>
<a href="#t167.4.1"><li class="toc-level toc-level-2"><span class="toc-number">167.4.1</span> method from-list</li></a>
<a href="#t167.4.2"><li class="toc-level toc-level-2"><span class="toc-number">167.4.2</span> method share</li></a>
<a href="#t167.4.3"><li class="toc-level toc-level-2"><span class="toc-number">167.4.3</span> method flat</li></a>
<a href="#t167.4.4"><li class="toc-level toc-level-2"><span class="toc-number">167.4.4</span> method do</li></a>
<a href="#t167.4.5"><li class="toc-level toc-level-2"><span class="toc-number">167.4.5</span> method interval</li></a>
<a href="#t167.4.6"><li class="toc-level toc-level-2"><span class="toc-number">167.4.6</span> method grep</li></a>
<a href="#t167.4.7"><li class="toc-level toc-level-2"><span class="toc-number">167.4.7</span> method map</li></a>
<a href="#t167.4.8"><li class="toc-level toc-level-2"><span class="toc-number">167.4.8</span> method batch</li></a>
<a href="#t167.4.9"><li class="toc-level toc-level-2"><span class="toc-number">167.4.9</span> method elems</li></a>
<a href="#t167.4.10"><li class="toc-level toc-level-2"><span class="toc-number">167.4.10</span> method head</li></a>
<a href="#t167.4.11"><li class="toc-level toc-level-2"><span class="toc-number">167.4.11</span> method tail</li></a>
<a href="#t167.4.12"><li class="toc-level toc-level-2"><span class="toc-number">167.4.12</span> method rotor</li></a>
<a href="#t167.4.13"><li class="toc-level toc-level-2"><span class="toc-number">167.4.13</span> method delayed</li></a>
<a href="#t167.4.14"><li class="toc-level toc-level-2"><span class="toc-number">167.4.14</span> method throttle</li></a>
<a href="#t167.4.14.1"><li class="toc-level toc-level-3"><span class="toc-number">167.4.14.1</span> control messages</li></a>
<a href="#t167.4.14.2"><li class="toc-level toc-level-3"><span class="toc-number">167.4.14.2</span> status message</li></a>
<a href="#t167.4.14.3"><li class="toc-level toc-level-3"><span class="toc-number">167.4.14.3</span> Examples</li></a>
<a href="#t167.4.15"><li class="toc-level toc-level-2"><span class="toc-number">167.4.15</span> method stable</li></a>
<a href="#t167.4.16"><li class="toc-level toc-level-2"><span class="toc-number">167.4.16</span> method reduce</li></a>
<a href="#t167.4.17"><li class="toc-level toc-level-2"><span class="toc-number">167.4.17</span> method lines</li></a>
<a href="#t167.4.18"><li class="toc-level toc-level-2"><span class="toc-number">167.4.18</span> method words</li></a>
<a href="#t167.4.19"><li class="toc-level toc-level-2"><span class="toc-number">167.4.19</span> method unique</li></a>
<a href="#t167.4.20"><li class="toc-level toc-level-2"><span class="toc-number">167.4.20</span> method squish</li></a>
<a href="#t167.4.21"><li class="toc-level toc-level-2"><span class="toc-number">167.4.21</span> method max</li></a>
<a href="#t167.4.22"><li class="toc-level toc-level-2"><span class="toc-number">167.4.22</span> method min</li></a>
<a href="#t167.4.23"><li class="toc-level toc-level-2"><span class="toc-number">167.4.23</span> method minmax</li></a>
<a href="#t167.4.24"><li class="toc-level toc-level-2"><span class="toc-number">167.4.24</span> method start</li></a>
<a href="#t167.4.25"><li class="toc-level toc-level-2"><span class="toc-number">167.4.25</span> method migrate</li></a>
<a href="#t167.5"><li class="toc-level toc-level-1"><span class="toc-number">167.5</span> Methods that combine supplies</li></a>
<a href="#t167.5.1"><li class="toc-level toc-level-2"><span class="toc-number">167.5.1</span> method merge</li></a>
<a href="#t167.5.2"><li class="toc-level toc-level-2"><span class="toc-number">167.5.2</span> method zip</li></a>
<a href="#t167.5.3"><li class="toc-level toc-level-2"><span class="toc-number">167.5.3</span> method zip-latest</li></a>
<a href="#t167.6"><li class="toc-level toc-level-1"><span class="toc-number">167.6</span> I/O features exposed as supplies</li></a>
<a href="#t167.6.1"><li class="toc-level toc-level-2"><span class="toc-number">167.6.1</span> sub signal</li></a>
<a href="#t167.6.2"><li class="toc-level toc-level-2"><span class="toc-number">167.6.2</span> method IO::Notification.watch-path</li></a>
<a href="#t168"><li class="toc-level toc-level-0"><span class="toc-number">168</span> class Tap</li></a>
<a href="#t168.1"><li class="toc-level toc-level-1"><span class="toc-number">168.1</span> Methods</li></a>
<a href="#t168.1.1"><li class="toc-level toc-level-2"><span class="toc-number">168.1.1</span> method emit</li></a>
<a href="#t168.1.2"><li class="toc-level toc-level-2"><span class="toc-number">168.1.2</span> method done</li></a>
<a href="#t168.1.3"><li class="toc-level toc-level-2"><span class="toc-number">168.1.3</span> method quit</li></a>
<a href="#t168.1.4"><li class="toc-level toc-level-2"><span class="toc-number">168.1.4</span> method closing</li></a>
<a href="#t168.1.5"><li class="toc-level toc-level-2"><span class="toc-number">168.1.5</span> method supply</li></a>
<a href="#t168.1.6"><li class="toc-level toc-level-2"><span class="toc-number">168.1.6</span> method close</li></a>
<a href="#t169"><li class="toc-level toc-level-0"><span class="toc-number">169</span> class Thread</li></a>
<a href="#t169.1"><li class="toc-level toc-level-1"><span class="toc-number">169.1</span> Methods</li></a>
<a href="#t169.1.1"><li class="toc-level toc-level-2"><span class="toc-number">169.1.1</span> method new</li></a>
<a href="#t169.1.2"><li class="toc-level toc-level-2"><span class="toc-number">169.1.2</span> method start</li></a>
<a href="#t169.1.3"><li class="toc-level toc-level-2"><span class="toc-number">169.1.3</span> method run</li></a>
<a href="#t169.1.4"><li class="toc-level toc-level-2"><span class="toc-number">169.1.4</span> method id</li></a>
<a href="#t169.1.5"><li class="toc-level toc-level-2"><span class="toc-number">169.1.5</span> method finish</li></a>
<a href="#t169.1.6"><li class="toc-level toc-level-2"><span class="toc-number">169.1.6</span> method join</li></a>
<a href="#t169.1.7"><li class="toc-level toc-level-2"><span class="toc-number">169.1.7</span> method yield</li></a>
<a href="#t169.1.8"><li class="toc-level toc-level-2"><span class="toc-number">169.1.8</span> method app_lifetime</li></a>
<a href="#t169.1.9"><li class="toc-level toc-level-2"><span class="toc-number">169.1.9</span> method name</li></a>
<a href="#t169.1.10"><li class="toc-level toc-level-2"><span class="toc-number">169.1.10</span> method Str</li></a>
<a href="#t170"><li class="toc-level toc-level-0"><span class="toc-number">170</span> class ThreadPoolScheduler</li></a>
<a href="#t170.1"><li class="toc-level toc-level-1"><span class="toc-number">170.1</span> Methods</li></a>
<a href="#t170.1.1"><li class="toc-level toc-level-2"><span class="toc-number">170.1.1</span> new</li></a>
<a href="#t171"><li class="toc-level toc-level-0"><span class="toc-number">171</span> class Uni</li></a>
<a href="#t171.1"><li class="toc-level toc-level-1"><span class="toc-number">171.1</span> Methods</li></a>
<a href="#t171.1.1"><li class="toc-level toc-level-2"><span class="toc-number">171.1.1</span> method new</li></a>
<a href="#t171.1.2"><li class="toc-level toc-level-2"><span class="toc-number">171.1.2</span> method NFC</li></a>
<a href="#t171.1.3"><li class="toc-level toc-level-2"><span class="toc-number">171.1.3</span> method NFD</li></a>
<a href="#t171.1.4"><li class="toc-level toc-level-2"><span class="toc-number">171.1.4</span> method NFKC</li></a>
<a href="#t171.1.5"><li class="toc-level toc-level-2"><span class="toc-number">171.1.5</span> method NFKD</li></a>
<a href="#t171.1.6"><li class="toc-level toc-level-2"><span class="toc-number">171.1.6</span> method codes</li></a>
<a href="#t171.1.7"><li class="toc-level toc-level-2"><span class="toc-number">171.1.7</span> method elems</li></a>
<a href="#t172"><li class="toc-level toc-level-0"><span class="toc-number">172</span> class Variable</li></a>
<a href="#t172.1"><li class="toc-level toc-level-1"><span class="toc-number">172.1</span> Routines</li></a>
<a href="#t172.1.1"><li class="toc-level toc-level-2"><span class="toc-number">172.1.1</span> method name</li></a>
<a href="#t172.1.2"><li class="toc-level toc-level-2"><span class="toc-number">172.1.2</span> trait is default</li></a>
<a href="#t172.1.3"><li class="toc-level toc-level-2"><span class="toc-number">172.1.3</span> trait is dynamic</li></a>
<a href="#t173"><li class="toc-level toc-level-0"><span class="toc-number">173</span> class Version</li></a>
<a href="#t173.1"><li class="toc-level toc-level-1"><span class="toc-number">173.1</span> Methods</li></a>
<a href="#t173.1.1"><li class="toc-level toc-level-2"><span class="toc-number">173.1.1</span> method new</li></a>
<a href="#t173.1.2"><li class="toc-level toc-level-2"><span class="toc-number">173.1.2</span> method parts</li></a>
<a href="#t173.1.3"><li class="toc-level toc-level-2"><span class="toc-number">173.1.3</span> method plus</li></a>
<a href="#t173.1.4"><li class="toc-level toc-level-2"><span class="toc-number">173.1.4</span> method Str</li></a>
<a href="#t173.1.5"><li class="toc-level toc-level-2"><span class="toc-number">173.1.5</span> method gist</li></a>
<a href="#t174"><li class="toc-level toc-level-0"><span class="toc-number">174</span> class Whatever</li></a>
<a href="#t174.1"><li class="toc-level toc-level-1"><span class="toc-number">174.1</span> Methods</li></a>
<a href="#t174.1.1"><li class="toc-level toc-level-2"><span class="toc-number">174.1.1</span> method ACCEPTS</li></a>
<a href="#t175"><li class="toc-level toc-level-0"><span class="toc-number">175</span> class WhateverCode</li></a>
<a href="#t176"><li class="toc-level toc-level-0"><span class="toc-number">176</span> class X::AdHoc</li></a>
<a href="#t176.1"><li class="toc-level toc-level-1"><span class="toc-number">176.1</span> Methods</li></a>
<a href="#t176.1.1"><li class="toc-level toc-level-2"><span class="toc-number">176.1.1</span> method payload</li></a>
<a href="#t177"><li class="toc-level toc-level-0"><span class="toc-number">177</span> class X::Anon::Augment</li></a>
<a href="#t177.1"><li class="toc-level toc-level-1"><span class="toc-number">177.1</span> Methods</li></a>
<a href="#t177.1.1"><li class="toc-level toc-level-2"><span class="toc-number">177.1.1</span> method package-kind</li></a>
<a href="#t178"><li class="toc-level toc-level-0"><span class="toc-number">178</span> class X::Anon::Multi</li></a>
<a href="#t178.1"><li class="toc-level toc-level-1"><span class="toc-number">178.1</span> Methods</li></a>
<a href="#t178.1.1"><li class="toc-level toc-level-2"><span class="toc-number">178.1.1</span> method multiness</li></a>
<a href="#t178.1.2"><li class="toc-level toc-level-2"><span class="toc-number">178.1.2</span> method routine-type</li></a>
<a href="#t179"><li class="toc-level toc-level-0"><span class="toc-number">179</span> class X::Assignment::RO</li></a>
<a href="#t179.1"><li class="toc-level toc-level-1"><span class="toc-number">179.1</span> Methods</li></a>
<a href="#t179.1.1"><li class="toc-level toc-level-2"><span class="toc-number">179.1.1</span> method typename</li></a>
<a href="#t180"><li class="toc-level toc-level-0"><span class="toc-number">180</span> class X::Attribute::NoPackage</li></a>
<a href="#t180.1"><li class="toc-level toc-level-1"><span class="toc-number">180.1</span> Methods</li></a>
<a href="#t180.1.1"><li class="toc-level toc-level-2"><span class="toc-number">180.1.1</span> method name</li></a>
<a href="#t181"><li class="toc-level toc-level-0"><span class="toc-number">181</span> class X::Attribute::Package</li></a>
<a href="#t181.1"><li class="toc-level toc-level-1"><span class="toc-number">181.1</span> Methods</li></a>
<a href="#t181.1.1"><li class="toc-level toc-level-2"><span class="toc-number">181.1.1</span> method name</li></a>
<a href="#t181.1.2"><li class="toc-level toc-level-2"><span class="toc-number">181.1.2</span> method package-kind</li></a>
<a href="#t182"><li class="toc-level toc-level-0"><span class="toc-number">182</span> class X::Attribute::Undeclared</li></a>
<a href="#t182.1"><li class="toc-level toc-level-1"><span class="toc-number">182.1</span> Methods</li></a>
<a href="#t182.1.1"><li class="toc-level toc-level-2"><span class="toc-number">182.1.1</span> method package-kind</li></a>
<a href="#t182.1.2"><li class="toc-level toc-level-2"><span class="toc-number">182.1.2</span> method package-name</li></a>
<a href="#t183"><li class="toc-level toc-level-0"><span class="toc-number">183</span> class X::Augment::NoSuchType</li></a>
<a href="#t183.1"><li class="toc-level toc-level-1"><span class="toc-number">183.1</span> Methods</li></a>
<a href="#t183.1.1"><li class="toc-level toc-level-2"><span class="toc-number">183.1.1</span> method package-kind</li></a>
<a href="#t183.1.2"><li class="toc-level toc-level-2"><span class="toc-number">183.1.2</span> method package</li></a>
<a href="#t184"><li class="toc-level toc-level-0"><span class="toc-number">184</span> class X::Bind</li></a>
<a href="#t185"><li class="toc-level toc-level-0"><span class="toc-number">185</span> class X::Bind::NativeType</li></a>
<a href="#t185.1"><li class="toc-level toc-level-1"><span class="toc-number">185.1</span> Methods</li></a>
<a href="#t185.1.1"><li class="toc-level toc-level-2"><span class="toc-number">185.1.1</span> method name</li></a>
<a href="#t186"><li class="toc-level toc-level-0"><span class="toc-number">186</span> class X::Bind::Slice</li></a>
<a href="#t186.1"><li class="toc-level toc-level-1"><span class="toc-number">186.1</span> Methods</li></a>
<a href="#t186.1.1"><li class="toc-level toc-level-2"><span class="toc-number">186.1.1</span> method type</li></a>
<a href="#t187"><li class="toc-level toc-level-0"><span class="toc-number">187</span> class X::Caller::NotDynamic</li></a>
<a href="#t187.1"><li class="toc-level toc-level-1"><span class="toc-number">187.1</span> Methods</li></a>
<a href="#t187.1.1"><li class="toc-level toc-level-2"><span class="toc-number">187.1.1</span> method symbol</li></a>
<a href="#t188"><li class="toc-level toc-level-0"><span class="toc-number">188</span> class X::Channel::ReceiveOnClosed</li></a>
<a href="#t188.1"><li class="toc-level toc-level-1"><span class="toc-number">188.1</span> Methods</li></a>
<a href="#t188.1.1"><li class="toc-level toc-level-2"><span class="toc-number">188.1.1</span> method channel</li></a>
<a href="#t189"><li class="toc-level toc-level-0"><span class="toc-number">189</span> class X::Channel::SendOnClosed</li></a>
<a href="#t189.1"><li class="toc-level toc-level-1"><span class="toc-number">189.1</span> Methods</li></a>
<a href="#t189.1.1"><li class="toc-level toc-level-2"><span class="toc-number">189.1.1</span> method channel</li></a>
<a href="#t190"><li class="toc-level toc-level-0"><span class="toc-number">190</span> role X::Comp</li></a>
<a href="#t190.1"><li class="toc-level toc-level-1"><span class="toc-number">190.1</span> Methods</li></a>
<a href="#t190.1.1"><li class="toc-level toc-level-2"><span class="toc-number">190.1.1</span> method filename</li></a>
<a href="#t190.1.2"><li class="toc-level toc-level-2"><span class="toc-number">190.1.2</span> method line</li></a>
<a href="#t190.1.3"><li class="toc-level toc-level-2"><span class="toc-number">190.1.3</span> method column</li></a>
<a href="#t191"><li class="toc-level toc-level-0"><span class="toc-number">191</span> class X::Composition::NotComposable</li></a>
<a href="#t191.1"><li class="toc-level toc-level-1"><span class="toc-number">191.1</span> Methods</li></a>
<a href="#t191.1.1"><li class="toc-level toc-level-2"><span class="toc-number">191.1.1</span> method target-name</li></a>
<a href="#t191.1.2"><li class="toc-level toc-level-2"><span class="toc-number">191.1.2</span> method composer</li></a>
<a href="#t192"><li class="toc-level toc-level-0"><span class="toc-number">192</span> class X::Constructor::Positional</li></a>
<a href="#t193"><li class="toc-level toc-level-0"><span class="toc-number">193</span> class X::ControlFlow</li></a>
<a href="#t193.1"><li class="toc-level toc-level-1"><span class="toc-number">193.1</span> Methods</li></a>
<a href="#t193.1.1"><li class="toc-level toc-level-2"><span class="toc-number">193.1.1</span> method illegal</li></a>
<a href="#t193.1.2"><li class="toc-level toc-level-2"><span class="toc-number">193.1.2</span> method enclosing</li></a>
<a href="#t194"><li class="toc-level toc-level-0"><span class="toc-number">194</span> class X::ControlFlow::Return</li></a>
<a href="#t195"><li class="toc-level toc-level-0"><span class="toc-number">195</span> class X::DateTime::TimezoneClash</li></a>
<a href="#t195.1"><li class="toc-level toc-level-1"><span class="toc-number">195.1</span> Methods</li></a>
<a href="#t195.1.1"><li class="toc-level toc-level-2"><span class="toc-number">195.1.1</span> message</li></a>
<a href="#t196"><li class="toc-level toc-level-0"><span class="toc-number">196</span> class X::Declaration::Scope</li></a>
<a href="#t196.1"><li class="toc-level toc-level-1"><span class="toc-number">196.1</span> Methods</li></a>
<a href="#t196.1.1"><li class="toc-level toc-level-2"><span class="toc-number">196.1.1</span> method scope</li></a>
<a href="#t196.1.2"><li class="toc-level toc-level-2"><span class="toc-number">196.1.2</span> method declaration</li></a>
<a href="#t197"><li class="toc-level toc-level-0"><span class="toc-number">197</span> class X::Declaration::Scope::Multi</li></a>
<a href="#t198"><li class="toc-level toc-level-0"><span class="toc-number">198</span> class X::Does::TypeObject</li></a>
<a href="#t198.1"><li class="toc-level toc-level-1"><span class="toc-number">198.1</span> Methods</li></a>
<a href="#t198.1.1"><li class="toc-level toc-level-2"><span class="toc-number">198.1.1</span> method type</li></a>
<a href="#t199"><li class="toc-level toc-level-0"><span class="toc-number">199</span> class X::Eval::NoSuchLang</li></a>
<a href="#t199.1"><li class="toc-level toc-level-1"><span class="toc-number">199.1</span> Methods</li></a>
<a href="#t199.1.1"><li class="toc-level toc-level-2"><span class="toc-number">199.1.1</span> method lang</li></a>
<a href="#t200"><li class="toc-level toc-level-0"><span class="toc-number">200</span> class X::Export::NameClash</li></a>
<a href="#t200.1"><li class="toc-level toc-level-1"><span class="toc-number">200.1</span> Methods</li></a>
<a href="#t200.1.1"><li class="toc-level toc-level-2"><span class="toc-number">200.1.1</span> method symbol</li></a>
<a href="#t201"><li class="toc-level toc-level-0"><span class="toc-number">201</span> role X::IO</li></a>
<a href="#t202"><li class="toc-level toc-level-0"><span class="toc-number">202</span> class X::IO::Chdir</li></a>
<a href="#t202.1"><li class="toc-level toc-level-1"><span class="toc-number">202.1</span> Methods</li></a>
<a href="#t202.1.1"><li class="toc-level toc-level-2"><span class="toc-number">202.1.1</span> method path</li></a>
<a href="#t203"><li class="toc-level toc-level-0"><span class="toc-number">203</span> class X::IO::Chmod</li></a>
<a href="#t204"><li class="toc-level toc-level-0"><span class="toc-number">204</span> class X::IO::Copy</li></a>
<a href="#t204.1"><li class="toc-level toc-level-1"><span class="toc-number">204.1</span> Methods</li></a>
<a href="#t204.1.1"><li class="toc-level toc-level-2"><span class="toc-number">204.1.1</span> method from</li></a>
<a href="#t204.1.2"><li class="toc-level toc-level-2"><span class="toc-number">204.1.2</span> method to</li></a>
<a href="#t205"><li class="toc-level toc-level-0"><span class="toc-number">205</span> class X::IO::Cwd</li></a>
<a href="#t206"><li class="toc-level toc-level-0"><span class="toc-number">206</span> class X::IO::Dir</li></a>
<a href="#t206.1"><li class="toc-level toc-level-1"><span class="toc-number">206.1</span> Methods</li></a>
<a href="#t206.1.1"><li class="toc-level toc-level-2"><span class="toc-number">206.1.1</span> method path</li></a>
<a href="#t207"><li class="toc-level toc-level-0"><span class="toc-number">207</span> class X::IO::DoesNotExist</li></a>
<a href="#t207.1"><li class="toc-level toc-level-1"><span class="toc-number">207.1</span> Methods</li></a>
<a href="#t207.1.1"><li class="toc-level toc-level-2"><span class="toc-number">207.1.1</span> method path</li></a>
<a href="#t207.1.2"><li class="toc-level toc-level-2"><span class="toc-number">207.1.2</span> method trying</li></a>
<a href="#t208"><li class="toc-level toc-level-0"><span class="toc-number">208</span> class X::IO::Link</li></a>
<a href="#t208.1"><li class="toc-level toc-level-1"><span class="toc-number">208.1</span> Methods</li></a>
<a href="#t208.1.1"><li class="toc-level toc-level-2"><span class="toc-number">208.1.1</span> method target</li></a>
<a href="#t208.1.2"><li class="toc-level toc-level-2"><span class="toc-number">208.1.2</span> method name</li></a>
<a href="#t209"><li class="toc-level toc-level-0"><span class="toc-number">209</span> class X::IO::Mkdir</li></a>
<a href="#t209.1"><li class="toc-level toc-level-1"><span class="toc-number">209.1</span> Methods</li></a>
<a href="#t209.1.1"><li class="toc-level toc-level-2"><span class="toc-number">209.1.1</span> method path</li></a>
<a href="#t209.1.2"><li class="toc-level toc-level-2"><span class="toc-number">209.1.2</span> method mode</li></a>
<a href="#t210"><li class="toc-level toc-level-0"><span class="toc-number">210</span> class X::IO::Move</li></a>
<a href="#t210.1"><li class="toc-level toc-level-1"><span class="toc-number">210.1</span> Methods</li></a>
<a href="#t210.1.1"><li class="toc-level toc-level-2"><span class="toc-number">210.1.1</span> method from</li></a>
<a href="#t210.1.2"><li class="toc-level toc-level-2"><span class="toc-number">210.1.2</span> method to</li></a>
<a href="#t211"><li class="toc-level toc-level-0"><span class="toc-number">211</span> class X::IO::Rename</li></a>
<a href="#t211.1"><li class="toc-level toc-level-1"><span class="toc-number">211.1</span> Methods</li></a>
<a href="#t211.1.1"><li class="toc-level toc-level-2"><span class="toc-number">211.1.1</span> method from</li></a>
<a href="#t211.1.2"><li class="toc-level toc-level-2"><span class="toc-number">211.1.2</span> method to</li></a>
<a href="#t212"><li class="toc-level toc-level-0"><span class="toc-number">212</span> class X::IO::Rmdir</li></a>
<a href="#t212.1"><li class="toc-level toc-level-1"><span class="toc-number">212.1</span> Methods</li></a>
<a href="#t212.1.1"><li class="toc-level toc-level-2"><span class="toc-number">212.1.1</span> method path</li></a>
<a href="#t213"><li class="toc-level toc-level-0"><span class="toc-number">213</span> class X::IO::Symlink</li></a>
<a href="#t213.1"><li class="toc-level toc-level-1"><span class="toc-number">213.1</span> Methods</li></a>
<a href="#t213.1.1"><li class="toc-level toc-level-2"><span class="toc-number">213.1.1</span> method name</li></a>
<a href="#t213.1.2"><li class="toc-level toc-level-2"><span class="toc-number">213.1.2</span> method target</li></a>
<a href="#t214"><li class="toc-level toc-level-0"><span class="toc-number">214</span> class X::IO::Unlink</li></a>
<a href="#t214.1"><li class="toc-level toc-level-1"><span class="toc-number">214.1</span> Methods</li></a>
<a href="#t214.1.1"><li class="toc-level toc-level-2"><span class="toc-number">214.1.1</span> method path</li></a>
<a href="#t215"><li class="toc-level toc-level-0"><span class="toc-number">215</span> class X::Inheritance::NotComposed</li></a>
<a href="#t215.1"><li class="toc-level toc-level-1"><span class="toc-number">215.1</span> Methods</li></a>
<a href="#t215.1.1"><li class="toc-level toc-level-2"><span class="toc-number">215.1.1</span> method child-name</li></a>
<a href="#t215.1.2"><li class="toc-level toc-level-2"><span class="toc-number">215.1.2</span> method parent-name</li></a>
<a href="#t216"><li class="toc-level toc-level-0"><span class="toc-number">216</span> class X::Inheritance::Unsupported</li></a>
<a href="#t216.1"><li class="toc-level toc-level-1"><span class="toc-number">216.1</span> Methods</li></a>
<a href="#t216.1.1"><li class="toc-level toc-level-2"><span class="toc-number">216.1.1</span> method child-typename</li></a>
<a href="#t216.1.2"><li class="toc-level toc-level-2"><span class="toc-number">216.1.2</span> method parent</li></a>
<a href="#t217"><li class="toc-level toc-level-0"><span class="toc-number">217</span> class X::Method::InvalidQualifier</li></a>
<a href="#t217.1"><li class="toc-level toc-level-1"><span class="toc-number">217.1</span> Methods</li></a>
<a href="#t217.1.1"><li class="toc-level toc-level-2"><span class="toc-number">217.1.1</span> method method</li></a>
<a href="#t217.1.2"><li class="toc-level toc-level-2"><span class="toc-number">217.1.2</span> method invocant</li></a>
<a href="#t217.1.3"><li class="toc-level toc-level-2"><span class="toc-number">217.1.3</span> method qualifier-type</li></a>
<a href="#t218"><li class="toc-level toc-level-0"><span class="toc-number">218</span> X::Method::NotFound</li></a>
<a href="#t218.1"><li class="toc-level toc-level-1"><span class="toc-number">218.1</span> Methods</li></a>
<a href="#t218.1.1"><li class="toc-level toc-level-2"><span class="toc-number">218.1.1</span> method method</li></a>
<a href="#t218.1.2"><li class="toc-level toc-level-2"><span class="toc-number">218.1.2</span> method typename</li></a>
<a href="#t218.1.3"><li class="toc-level toc-level-2"><span class="toc-number">218.1.3</span> method private</li></a>
<a href="#t219"><li class="toc-level toc-level-0"><span class="toc-number">219</span> class X::Method::Private::Permission</li></a>
<a href="#t219.1"><li class="toc-level toc-level-1"><span class="toc-number">219.1</span> Methods</li></a>
<a href="#t219.1.1"><li class="toc-level toc-level-2"><span class="toc-number">219.1.1</span> method method</li></a>
<a href="#t219.1.2"><li class="toc-level toc-level-2"><span class="toc-number">219.1.2</span> method source-package</li></a>
<a href="#t219.1.3"><li class="toc-level toc-level-2"><span class="toc-number">219.1.3</span> method calling-package</li></a>
<a href="#t220"><li class="toc-level toc-level-0"><span class="toc-number">220</span> class X::Method::Private::Unqualified</li></a>
<a href="#t220.1"><li class="toc-level toc-level-1"><span class="toc-number">220.1</span> Methods</li></a>
<a href="#t220.1.1"><li class="toc-level toc-level-2"><span class="toc-number">220.1.1</span> method method</li></a>
<a href="#t221"><li class="toc-level toc-level-0"><span class="toc-number">221</span> class X::Mixin::NotComposable</li></a>
<a href="#t221.1"><li class="toc-level toc-level-1"><span class="toc-number">221.1</span> Methods</li></a>
<a href="#t221.1.1"><li class="toc-level toc-level-2"><span class="toc-number">221.1.1</span> method target</li></a>
<a href="#t221.1.2"><li class="toc-level toc-level-2"><span class="toc-number">221.1.2</span> method rolish</li></a>
<a href="#t222"><li class="toc-level toc-level-0"><span class="toc-number">222</span> class X::NYI</li></a>
<a href="#t222.1"><li class="toc-level toc-level-1"><span class="toc-number">222.1</span> Methods</li></a>
<a href="#t222.1.1"><li class="toc-level toc-level-2"><span class="toc-number">222.1.1</span> method features</li></a>
<a href="#t223"><li class="toc-level toc-level-0"><span class="toc-number">223</span> class X::NoDispatcher</li></a>
<a href="#t223.1"><li class="toc-level toc-level-1"><span class="toc-number">223.1</span> Methods</li></a>
<a href="#t223.1.1"><li class="toc-level toc-level-2"><span class="toc-number">223.1.1</span> method redispatcher</li></a>
<a href="#t224"><li class="toc-level toc-level-0"><span class="toc-number">224</span> class X::Numeric::Real</li></a>
<a href="#t224.1"><li class="toc-level toc-level-1"><span class="toc-number">224.1</span> Methods</li></a>
<a href="#t224.1.1"><li class="toc-level toc-level-2"><span class="toc-number">224.1.1</span> method source</li></a>
<a href="#t224.1.2"><li class="toc-level toc-level-2"><span class="toc-number">224.1.2</span> method target</li></a>
<a href="#t224.1.3"><li class="toc-level toc-level-2"><span class="toc-number">224.1.3</span> method reason</li></a>
<a href="#t225"><li class="toc-level toc-level-0"><span class="toc-number">225</span> role X::OS</li></a>
<a href="#t225.1"><li class="toc-level toc-level-1"><span class="toc-number">225.1</span> Methods</li></a>
<a href="#t225.1.1"><li class="toc-level toc-level-2"><span class="toc-number">225.1.1</span> method os-error</li></a>
<a href="#t226"><li class="toc-level toc-level-0"><span class="toc-number">226</span> class X::Obsolete</li></a>
<a href="#t226.1"><li class="toc-level toc-level-1"><span class="toc-number">226.1</span> Methods</li></a>
<a href="#t226.1.1"><li class="toc-level toc-level-2"><span class="toc-number">226.1.1</span> method old</li></a>
<a href="#t226.1.2"><li class="toc-level toc-level-2"><span class="toc-number">226.1.2</span> method replacement</li></a>
<a href="#t226.1.3"><li class="toc-level toc-level-2"><span class="toc-number">226.1.3</span> method when</li></a>
<a href="#t227"><li class="toc-level toc-level-0"><span class="toc-number">227</span> class X::OutOfRange</li></a>
<a href="#t227.1"><li class="toc-level toc-level-1"><span class="toc-number">227.1</span> Methods</li></a>
<a href="#t227.1.1"><li class="toc-level toc-level-2"><span class="toc-number">227.1.1</span> method what</li></a>
<a href="#t227.1.2"><li class="toc-level toc-level-2"><span class="toc-number">227.1.2</span> method got</li></a>
<a href="#t227.1.3"><li class="toc-level toc-level-2"><span class="toc-number">227.1.3</span> method range</li></a>
<a href="#t227.1.4"><li class="toc-level toc-level-2"><span class="toc-number">227.1.4</span> method comment</li></a>
<a href="#t228"><li class="toc-level toc-level-0"><span class="toc-number">228</span> class X::Package::Stubbed</li></a>
<a href="#t228.1"><li class="toc-level toc-level-1"><span class="toc-number">228.1</span> Methods</li></a>
<a href="#t228.1.1"><li class="toc-level toc-level-2"><span class="toc-number">228.1.1</span> method packages</li></a>
<a href="#t229"><li class="toc-level toc-level-0"><span class="toc-number">229</span> class X::Parameter::Default</li></a>
<a href="#t229.1"><li class="toc-level toc-level-1"><span class="toc-number">229.1</span> Methods</li></a>
<a href="#t229.1.1"><li class="toc-level toc-level-2"><span class="toc-number">229.1.1</span> method how</li></a>
<a href="#t229.1.2"><li class="toc-level toc-level-2"><span class="toc-number">229.1.2</span> method parameter</li></a>
<a href="#t230"><li class="toc-level toc-level-0"><span class="toc-number">230</span> X::Parameter::MultipleTypeConstraints</li></a>
<a href="#t230.1"><li class="toc-level toc-level-1"><span class="toc-number">230.1</span> Methods</li></a>
<a href="#t230.1.1"><li class="toc-level toc-level-2"><span class="toc-number">230.1.1</span> method parameter</li></a>
<a href="#t231"><li class="toc-level toc-level-0"><span class="toc-number">231</span> class X::Parameter::Placeholder</li></a>
<a href="#t231.1"><li class="toc-level toc-level-1"><span class="toc-number">231.1</span> Methods</li></a>
<a href="#t231.1.1"><li class="toc-level toc-level-2"><span class="toc-number">231.1.1</span> method parameter</li></a>
<a href="#t231.1.2"><li class="toc-level toc-level-2"><span class="toc-number">231.1.2</span> method right</li></a>
<a href="#t232"><li class="toc-level toc-level-0"><span class="toc-number">232</span> class X::Parameter::Twigil</li></a>
<a href="#t232.1"><li class="toc-level toc-level-1"><span class="toc-number">232.1</span> Methods</li></a>
<a href="#t232.1.1"><li class="toc-level toc-level-2"><span class="toc-number">232.1.1</span> method parameter</li></a>
<a href="#t232.1.2"><li class="toc-level toc-level-2"><span class="toc-number">232.1.2</span> method twigil</li></a>
<a href="#t233"><li class="toc-level toc-level-0"><span class="toc-number">233</span> X::Parameter::WrongOrder</li></a>
<a href="#t233.1"><li class="toc-level toc-level-1"><span class="toc-number">233.1</span> Methods</li></a>
<a href="#t233.1.1"><li class="toc-level toc-level-2"><span class="toc-number">233.1.1</span> method misplaced</li></a>
<a href="#t233.1.2"><li class="toc-level toc-level-2"><span class="toc-number">233.1.2</span> method parameter</li></a>
<a href="#t233.1.3"><li class="toc-level toc-level-2"><span class="toc-number">233.1.3</span> method after</li></a>
<a href="#t234"><li class="toc-level toc-level-0"><span class="toc-number">234</span> class X::Phaser::Multiple</li></a>
<a href="#t234.1"><li class="toc-level toc-level-1"><span class="toc-number">234.1</span> Methods</li></a>
<a href="#t234.1.1"><li class="toc-level toc-level-2"><span class="toc-number">234.1.1</span> method block</li></a>
<a href="#t235"><li class="toc-level toc-level-0"><span class="toc-number">235</span> class X::Phaser::PrePost</li></a>
<a href="#t235.1"><li class="toc-level toc-level-1"><span class="toc-number">235.1</span> Methods</li></a>
<a href="#t235.1.1"><li class="toc-level toc-level-2"><span class="toc-number">235.1.1</span> method phaser</li></a>
<a href="#t235.1.2"><li class="toc-level toc-level-2"><span class="toc-number">235.1.2</span> method condition</li></a>
<a href="#t236"><li class="toc-level toc-level-0"><span class="toc-number">236</span> class X::Placeholder::Block</li></a>
<a href="#t236.1"><li class="toc-level toc-level-1"><span class="toc-number">236.1</span> Methods</li></a>
<a href="#t236.1.1"><li class="toc-level toc-level-2"><span class="toc-number">236.1.1</span> method placeholder</li></a>
<a href="#t237"><li class="toc-level toc-level-0"><span class="toc-number">237</span> X::Placeholder::Mainline</li></a>
<a href="#t238"><li class="toc-level toc-level-0"><span class="toc-number">238</span> role X::Pod</li></a>
<a href="#t239"><li class="toc-level toc-level-0"><span class="toc-number">239</span> role X::Proc::Async</li></a>
<a href="#t239.1"><li class="toc-level toc-level-1"><span class="toc-number">239.1</span> Methods</li></a>
<a href="#t239.1.1"><li class="toc-level toc-level-2"><span class="toc-number">239.1.1</span> method proc</li></a>
<a href="#t240"><li class="toc-level toc-level-0"><span class="toc-number">240</span> class X::Proc::Async::AlreadyStarted</li></a>
<a href="#t241"><li class="toc-level toc-level-0"><span class="toc-number">241</span> class X::Proc::Async::CharsOrBytes</li></a>
<a href="#t241.1"><li class="toc-level toc-level-1"><span class="toc-number">241.1</span> Methods</li></a>
<a href="#t241.1.1"><li class="toc-level toc-level-2"><span class="toc-number">241.1.1</span> method handle</li></a>
<a href="#t242"><li class="toc-level toc-level-0"><span class="toc-number">242</span> class X::Proc::Async::MustBeStarted</li></a>
<a href="#t242.1"><li class="toc-level toc-level-1"><span class="toc-number">242.1</span> Methods</li></a>
<a href="#t242.1.1"><li class="toc-level toc-level-2"><span class="toc-number">242.1.1</span> method method</li></a>
<a href="#t243"><li class="toc-level toc-level-0"><span class="toc-number">243</span> class X::Proc::Async::OpenForWriting</li></a>
<a href="#t243.1"><li class="toc-level toc-level-1"><span class="toc-number">243.1</span> Methods</li></a>
<a href="#t243.1.1"><li class="toc-level toc-level-2"><span class="toc-number">243.1.1</span> method method</li></a>
<a href="#t244"><li class="toc-level toc-level-0"><span class="toc-number">244</span> class X::Proc::Async::TapBeforeSpawn</li></a>
<a href="#t244.1"><li class="toc-level toc-level-1"><span class="toc-number">244.1</span> Methods</li></a>
<a href="#t244.1.1"><li class="toc-level toc-level-2"><span class="toc-number">244.1.1</span> method handle</li></a>
<a href="#t245"><li class="toc-level toc-level-0"><span class="toc-number">245</span> class X::Promise::CauseOnlyValidOnBroken</li></a>
<a href="#t245.1"><li class="toc-level toc-level-1"><span class="toc-number">245.1</span> Methods</li></a>
<a href="#t245.1.1"><li class="toc-level toc-level-2"><span class="toc-number">245.1.1</span> method promise</li></a>
<a href="#t245.1.2"><li class="toc-level toc-level-2"><span class="toc-number">245.1.2</span> method status</li></a>
<a href="#t246"><li class="toc-level toc-level-0"><span class="toc-number">246</span> class X::Promise::Vowed</li></a>
<a href="#t246.1"><li class="toc-level toc-level-1"><span class="toc-number">246.1</span> Methods</li></a>
<a href="#t246.1.1"><li class="toc-level toc-level-2"><span class="toc-number">246.1.1</span> method promise</li></a>
<a href="#t247"><li class="toc-level toc-level-0"><span class="toc-number">247</span> class X::Redeclaration</li></a>
<a href="#t247.1"><li class="toc-level toc-level-1"><span class="toc-number">247.1</span> Methods</li></a>
<a href="#t247.1.1"><li class="toc-level toc-level-2"><span class="toc-number">247.1.1</span> method symbol</li></a>
<a href="#t247.1.2"><li class="toc-level toc-level-2"><span class="toc-number">247.1.2</span> method what</li></a>
<a href="#t247.1.3"><li class="toc-level toc-level-2"><span class="toc-number">247.1.3</span> method postfix</li></a>
<a href="#t248"><li class="toc-level toc-level-0"><span class="toc-number">248</span> class X::Role::Initialization</li></a>
<a href="#t248.1"><li class="toc-level toc-level-1"><span class="toc-number">248.1</span> Methods</li></a>
<a href="#t248.1.1"><li class="toc-level toc-level-2"><span class="toc-number">248.1.1</span> method role</li></a>
<a href="#t249"><li class="toc-level toc-level-0"><span class="toc-number">249</span> class X::Seq::Consumed</li></a>
<a href="#t250"><li class="toc-level toc-level-0"><span class="toc-number">250</span> class X::Sequence::Deduction</li></a>
<a href="#t251"><li class="toc-level toc-level-0"><span class="toc-number">251</span> class X::Signature::NameClash</li></a>
<a href="#t251.1"><li class="toc-level toc-level-1"><span class="toc-number">251.1</span> Methods</li></a>
<a href="#t251.1.1"><li class="toc-level toc-level-2"><span class="toc-number">251.1.1</span> method name</li></a>
<a href="#t252"><li class="toc-level toc-level-0"><span class="toc-number">252</span> class X::Signature::Placeholder</li></a>
<a href="#t252.1"><li class="toc-level toc-level-1"><span class="toc-number">252.1</span> Methods</li></a>
<a href="#t252.1.1"><li class="toc-level toc-level-2"><span class="toc-number">252.1.1</span> method placeholder</li></a>
<a href="#t253"><li class="toc-level toc-level-0"><span class="toc-number">253</span> class X::Str::Numeric</li></a>
<a href="#t253.1"><li class="toc-level toc-level-1"><span class="toc-number">253.1</span> Methods</li></a>
<a href="#t253.1.1"><li class="toc-level toc-level-2"><span class="toc-number">253.1.1</span> method source</li></a>
<a href="#t253.1.2"><li class="toc-level toc-level-2"><span class="toc-number">253.1.2</span> method pos</li></a>
<a href="#t253.1.3"><li class="toc-level toc-level-2"><span class="toc-number">253.1.3</span> method reason</li></a>
<a href="#t254"><li class="toc-level toc-level-0"><span class="toc-number">254</span> class X::StubCode</li></a>
<a href="#t254.1"><li class="toc-level toc-level-1"><span class="toc-number">254.1</span> Methods</li></a>
<a href="#t254.1.1"><li class="toc-level toc-level-2"><span class="toc-number">254.1.1</span> method message</li></a>
<a href="#t255"><li class="toc-level toc-level-0"><span class="toc-number">255</span> role X::Syntax</li></a>
<a href="#t256"><li class="toc-level toc-level-0"><span class="toc-number">256</span> class X::Syntax::Augment::WithoutMonkeyTyping</li></a>
<a href="#t257"><li class="toc-level toc-level-0"><span class="toc-number">257</span> class X::Syntax::Comment::Embedded</li></a>
<a href="#t258"><li class="toc-level toc-level-0"><span class="toc-number">258</span> class X::Syntax::Confused</li></a>
<a href="#t259"><li class="toc-level toc-level-0"><span class="toc-number">259</span> class X::Syntax::InfixInTermPosition</li></a>
<a href="#t259.1"><li class="toc-level toc-level-1"><span class="toc-number">259.1</span> Methods</li></a>
<a href="#t259.1.1"><li class="toc-level toc-level-2"><span class="toc-number">259.1.1</span> method infix</li></a>
<a href="#t260"><li class="toc-level toc-level-0"><span class="toc-number">260</span> class X::Syntax::Malformed</li></a>
<a href="#t260.1"><li class="toc-level toc-level-1"><span class="toc-number">260.1</span> Methods</li></a>
<a href="#t260.1.1"><li class="toc-level toc-level-2"><span class="toc-number">260.1.1</span> method what</li></a>
<a href="#t261"><li class="toc-level toc-level-0"><span class="toc-number">261</span> class X::Syntax::Missing</li></a>
<a href="#t261.1"><li class="toc-level toc-level-1"><span class="toc-number">261.1</span> Methods</li></a>
<a href="#t261.1.1"><li class="toc-level toc-level-2"><span class="toc-number">261.1.1</span> method what</li></a>
<a href="#t262"><li class="toc-level toc-level-0"><span class="toc-number">262</span> class X::Syntax::NegatedPair</li></a>
<a href="#t262.1"><li class="toc-level toc-level-1"><span class="toc-number">262.1</span> Methods</li></a>
<a href="#t262.1.1"><li class="toc-level toc-level-2"><span class="toc-number">262.1.1</span> method key</li></a>
<a href="#t263"><li class="toc-level toc-level-0"><span class="toc-number">263</span> class X::Syntax::NoSelf</li></a>
<a href="#t263.1"><li class="toc-level toc-level-1"><span class="toc-number">263.1</span> Methods</li></a>
<a href="#t263.1.1"><li class="toc-level toc-level-2"><span class="toc-number">263.1.1</span> method variable</li></a>
<a href="#t264"><li class="toc-level toc-level-0"><span class="toc-number">264</span> class X::Syntax::Number::RadixOutOfRange</li></a>
<a href="#t264.1"><li class="toc-level toc-level-1"><span class="toc-number">264.1</span> Methods</li></a>
<a href="#t264.1.1"><li class="toc-level toc-level-2"><span class="toc-number">264.1.1</span> method radix</li></a>
<a href="#t265"><li class="toc-level toc-level-0"><span class="toc-number">265</span> class X::Syntax::P5</li></a>
<a href="#t266"><li class="toc-level toc-level-0"><span class="toc-number">266</span> class X::Syntax::Regex::Adverb</li></a>
<a href="#t266.1"><li class="toc-level toc-level-1"><span class="toc-number">266.1</span> Methods</li></a>
<a href="#t266.1.1"><li class="toc-level toc-level-2"><span class="toc-number">266.1.1</span> method adverb</li></a>
<a href="#t266.1.2"><li class="toc-level toc-level-2"><span class="toc-number">266.1.2</span> method construct</li></a>
<a href="#t267"><li class="toc-level toc-level-0"><span class="toc-number">267</span> class X::Syntax::Regex::SolitaryQuantifier</li></a>
<a href="#t268"><li class="toc-level toc-level-0"><span class="toc-number">268</span> class X::Syntax::Reserved</li></a>
<a href="#t268.1"><li class="toc-level toc-level-1"><span class="toc-number">268.1</span> Methods</li></a>
<a href="#t268.1.1"><li class="toc-level toc-level-2"><span class="toc-number">268.1.1</span> method reserved</li></a>
<a href="#t268.1.2"><li class="toc-level toc-level-2"><span class="toc-number">268.1.2</span> method instead</li></a>
<a href="#t269"><li class="toc-level toc-level-0"><span class="toc-number">269</span> class X::Syntax::Self::WithoutObject</li></a>
<a href="#t270"><li class="toc-level toc-level-0"><span class="toc-number">270</span> class X::Syntax::Signature::InvocantMarker</li></a>
<a href="#t271"><li class="toc-level toc-level-0"><span class="toc-number">271</span> class X::Syntax::Term::MissingInitializer</li></a>
<a href="#t272"><li class="toc-level toc-level-0"><span class="toc-number">272</span> class X::Syntax::UnlessElse</li></a>
<a href="#t273"><li class="toc-level toc-level-0"><span class="toc-number">273</span> class X::Syntax::Variable::Match</li></a>
<a href="#t274"><li class="toc-level toc-level-0"><span class="toc-number">274</span> class X::Syntax::Variable::Numeric</li></a>
<a href="#t274.1"><li class="toc-level toc-level-1"><span class="toc-number">274.1</span> Methods</li></a>
<a href="#t274.1.1"><li class="toc-level toc-level-2"><span class="toc-number">274.1.1</span> method what</li></a>
<a href="#t275"><li class="toc-level toc-level-0"><span class="toc-number">275</span> class X::Syntax::Variable::Twigil</li></a>
<a href="#t275.1"><li class="toc-level toc-level-1"><span class="toc-number">275.1</span> Methods</li></a>
<a href="#t275.1.1"><li class="toc-level toc-level-2"><span class="toc-number">275.1.1</span> method twigil</li></a>
<a href="#t275.1.2"><li class="toc-level toc-level-2"><span class="toc-number">275.1.2</span> method scope</li></a>
<a href="#t276"><li class="toc-level toc-level-0"><span class="toc-number">276</span> role X::Temporal</li></a>
<a href="#t277"><li class="toc-level toc-level-0"><span class="toc-number">277</span> class X::Temporal::InvalidFormat</li></a>
<a href="#t277.1"><li class="toc-level toc-level-1"><span class="toc-number">277.1</span> Methods</li></a>
<a href="#t277.1.1"><li class="toc-level toc-level-2"><span class="toc-number">277.1.1</span> method invalid-str</li></a>
<a href="#t277.1.2"><li class="toc-level toc-level-2"><span class="toc-number">277.1.2</span> method target</li></a>
<a href="#t277.1.3"><li class="toc-level toc-level-2"><span class="toc-number">277.1.3</span> method format</li></a>
<a href="#t278"><li class="toc-level toc-level-0"><span class="toc-number">278</span> class X::TypeCheck</li></a>
<a href="#t278.1"><li class="toc-level toc-level-1"><span class="toc-number">278.1</span> Methods</li></a>
<a href="#t278.1.1"><li class="toc-level toc-level-2"><span class="toc-number">278.1.1</span> method operation</li></a>
<a href="#t278.1.2"><li class="toc-level toc-level-2"><span class="toc-number">278.1.2</span> method got</li></a>
<a href="#t278.1.3"><li class="toc-level toc-level-2"><span class="toc-number">278.1.3</span> method expected</li></a>
<a href="#t279"><li class="toc-level toc-level-0"><span class="toc-number">279</span> class X::TypeCheck::Assignment</li></a>
<a href="#t280"><li class="toc-level toc-level-0"><span class="toc-number">280</span> class X::TypeCheck::Binding</li></a>
<a href="#t281"><li class="toc-level toc-level-0"><span class="toc-number">281</span> class X::TypeCheck::Return</li></a>
<a href="#t282"><li class="toc-level toc-level-0"><span class="toc-number">282</span> class X::TypeCheck::Splice</li></a>
<a href="#t282.1"><li class="toc-level toc-level-1"><span class="toc-number">282.1</span> Methods</li></a>
<a href="#t282.1.1"><li class="toc-level toc-level-2"><span class="toc-number">282.1.1</span> method action</li></a>
<a href="#t283"><li class="toc-level toc-level-0"><span class="toc-number">283</span> class X::Undeclared</li></a>
<a href="#t283.1"><li class="toc-level toc-level-1"><span class="toc-number">283.1</span> Methods</li></a>
<a href="#t283.1.1"><li class="toc-level toc-level-2"><span class="toc-number">283.1.1</span> method symbol</li></a>
<a href="#t283.1.2"><li class="toc-level toc-level-2"><span class="toc-number">283.1.2</span> method what</li></a>
<a href="#t284"><li class="toc-level toc-level-0"><span class="toc-number">284</span> class int</li></a></ul></div><div id="index"><ul class="index">
<li>&emsp;<a href="#i36">36</a> <a href="#i37">37</a> <a href="#i215">215</a> <a href="#i224">224</a> <a href="#i225">225</a> <a href="#i228">228</a> <a href="#i232">232</a> <a href="#i236">236</a> <a href="#i239">239</a> <a href="#i242">242</a> <a href="#i244">244</a> <a href="#i249">249</a> <a href="#i256">256</a> <a href="#i261">261</a> <a href="#i262">262</a> <a href="#i263">263</a> <a href="#i264">264</a> <a href="#i265">265</a> <a href="#i266">266</a> <a href="#i267">267</a> <a href="#i269">269</a> <a href="#i274">274</a> <a href="#i276">276</a> <a href="#i279">279</a> <a href="#i281">281</a> <a href="#i282">282</a> <a href="#i285">285</a> <a href="#i296">296</a> <a href="#i298">298</a> <a href="#i300">300</a> <a href="#i302">302</a> <a href="#i304">304</a> <a href="#i306">306</a> <a href="#i307">307</a> <a href="#i309">309</a> <a href="#i311">311</a> <a href="#i313">313</a> <a href="#i314">314</a> <a href="#i320">320</a> <a href="#i322">322</a> <a href="#i323">323</a> <a href="#i326">326</a> <a href="#i328">328</a> <a href="#i329">329</a> <a href="#i330">330</a> <a href="#i331">331</a> <a href="#i332">332</a> <a href="#i333">333</a> <a href="#i334">334</a> <a href="#i335">335</a> <a href="#i336">336</a> <a href="#i337">337</a> <a href="#i338">338</a> <a href="#i339">339</a> <a href="#i340">340</a> <a href="#i341">341</a> <a href="#i342">342</a> <a href="#i343">343</a> <a href="#i344">344</a> <a href="#i345">345</a> <a href="#i346">346</a> <a href="#i347">347</a> <a href="#i348">348</a> <a href="#i349">349</a> <a href="#i350">350</a> <a href="#i351">351</a> <a href="#i352">352</a> <a href="#i355">355</a> <a href="#i361">361</a> <a href="#i366">366</a> <a href="#i369">369</a> <a href="#i372">372</a> <a href="#i374">374</a> <a href="#i375">375</a> <a href="#i384">384</a> <a href="#i385">385</a> <a href="#i393">393</a> <a href="#i394">394</a> <a href="#i396">396</a> <a href="#i398">398</a> <a href="#i399">399</a> <a href="#i401">401</a> <a href="#i402">402</a> <a href="#i403">403</a> <a href="#i404">404</a> <a href="#i405">405</a> <a href="#i407">407</a> <a href="#i408">408</a> <a href="#i410">410</a> <a href="#i411">411</a> <a href="#i413">413</a> <a href="#i414">414</a> <a href="#i415">415</a> <a href="#i416">416</a> <a href="#i417">417</a> <a href="#i418">418</a> <a href="#i419">419</a> <a href="#i420">420</a> <a href="#i421">421</a> <a href="#i422">422</a> <a href="#i423">423</a> <a href="#i424">424</a> <a href="#i425">425</a> <a href="#i426">426</a> <a href="#i427">427</a> <a href="#i428">428</a> <a href="#i429">429</a> <a href="#i430">430</a> <a href="#i431">431</a> <a href="#i432">432</a> <a href="#i433">433</a> <a href="#i441">441</a> <a href="#i539">539</a> <a href="#i540">540</a> <a href="#i541">541</a> <a href="#i542">542</a> <a href="#i543">543</a> <a href="#i544">544</a> <a href="#i545">545</a> <a href="#i546">546</a> <a href="#i547">547</a> <a href="#i548">548</a> <a href="#i549">549</a> <a href="#i550">550</a> <a href="#i551">551</a> <a href="#i552">552</a> <a href="#i553">553</a> <a href="#i554">554</a> <a href="#i555">555</a> <a href="#i580">580</a> <a href="#i581">581</a></li> <li>$!&emsp;<a href="#i479">479</a></li> <li>$*&emsp;<a href="#i478">478</a></li> <li>$*ARGFILES&emsp;<a href="#i510">510</a></li> <li>$*CWD&emsp;<a href="#i518">518</a></li> <li>$*DISTRO&emsp;<a href="#i520">520</a></li> <li>$*ERR&emsp;<a href="#i514">514</a></li> <li>$*EXECUTABLE&emsp;<a href="#i526">526</a></li> <li>$*EXECUTABLE-NAME&emsp;<a href="#i527">527</a></li> <li>$*GROUP&emsp;<a href="#i529">529</a></li> <li>$*HOME&emsp;<a href="#i530">530</a></li> <li>$*IN&emsp;<a href="#i512">512</a></li> <li>$*KERNEL&emsp;<a href="#i519">519</a></li> <li>$*OUT&emsp;<a href="#i513">513</a></li> <li>$*PERL&emsp;<a href="#i522">522</a></li> <li>$*PID&emsp;<a href="#i523">523</a></li> <li>$*PROGRAM&emsp;<a href="#i525">525</a></li> <li>$*PROGRAM-NAME&emsp;<a href="#i524">524</a></li> <li>$*REPO&emsp;<a href="#i516">516</a></li> <li>$*SCHEDULER&emsp;<a href="#i534">534</a></li> <li>$*SPEC&emsp;<a href="#i531">531</a></li> <li>$*THREAD&emsp;<a href="#i533">533</a></li> <li>$*TMPDIR&emsp;<a href="#i532">532</a></li> <li>$*TZ&emsp;<a href="#i517">517</a></li> <li>$*USER&emsp;<a href="#i528">528</a></li> <li>$*VM&emsp;<a href="#i521">521</a></li> <li>$.&emsp;<a href="#i481">481</a></li> <li>$:&emsp;<a href="#i483">483</a></li> <li>$=&emsp;<a href="#i484">484</a></li> <li>$?&emsp;<a href="#i480">480</a></li> <li>$?CLASS&emsp;<a href="#i504">504</a></li> <li>$?ENC&emsp;<a href="#i509">509</a></li> <li>$?FILE&emsp;<a href="#i494">494</a></li> <li>$?GRAMMAR&emsp;<a href="#i506">506</a></li> <li>$?LINE&emsp;<a href="#i495">495</a></li> <li>$?MODULE&emsp;<a href="#i503">503</a></li> <li>$?PACKAGE&emsp;<a href="#i502">502</a></li> <li>$?ROLE&emsp;<a href="#i505">505</a></li> <li>$?SCOPE&emsp;<a href="#i501">501</a></li> <li>$?TABSTOP&emsp;<a href="#i507">507</a></li> <li>$?USAGE&emsp;<a href="#i508">508</a></li> <li>$^&emsp;<a href="#i482">482</a></li> <li>$~&emsp;<a href="#i485">485</a></li> <li>$~MAIN&emsp;<a href="#i486">486</a></li> <li>$~P5Regex&emsp;<a href="#i491">491</a></li> <li>$~Quasi&emsp;<a href="#i488">488</a></li> <li>$~Quote&emsp;<a href="#i487">487</a></li> <li>$~Regex&emsp;<a href="#i489">489</a></li> <li>$~Trans&emsp;<a href="#i490">490</a></li> <li>%*ENV&emsp;<a href="#i515">515</a></li> <li>%?LANG&emsp;<a href="#i499">499</a></li> <li>%?RESOURCES&emsp;<a href="#i500">500</a></li> <li>%_&emsp;<a href="#i70">70</a></li> <li>&amp;amp;?BLOCK&emsp;<a href="#i498">498</a></li> <li>&amp;amp;?ROUTINE&emsp;<a href="#i497">497</a></li> <li>&amp;lt;?&amp;gt; &emsp;<a href="#i137">137</a></li> <li>() empty list&emsp;<a href="#i229">229</a></li> <li>--&gt;&emsp;<a href="#i570">570</a></li> <li>.( )&emsp;<a href="#i250">250</a></li> <li>... operators&emsp;<a href="#i357">357</a></li> <li>.[ ]&emsp;<a href="#i251">251</a></li> <li>.^ver package&emsp;<a href="#i252">252</a></li> <li>.defined&emsp;<a href="#i13">13</a></li> <li>.{ }&emsp;<a href="#i253">253</a></li> <li>6model&emsp;<a href="#i201">201</a></li> <li>:&emsp;<a href="#i557">557</a></li> <li>:!&emsp;<a href="#i559">559</a></li> <li>:$&emsp;<a href="#i560">560</a></li> <li>:: package&emsp;<a href="#i241">241</a></li> <li>::()&emsp;<a href="#i246">246</a></li> <li>::?CLASS&emsp;<a href="#i496">496</a></li> <li>:sym&amp;lt;&amp;gt; &emsp;<a href="#i123">123</a></li> <li>:{}&emsp;<a href="#i538">538</a></li> <li>&lt; &gt; word quote&emsp;<a href="#i316">316</a></li> <li>=&amp;gt; &emsp;<a href="#i558">558</a></li> <li>@*ARGS&emsp;<a href="#i511">511</a></li> <li>@_&emsp;<a href="#i69">69</a></li> <li>Abstract Class&emsp;<a href="#i74">74</a></li> <li>accessor methods&emsp;<a href="#i23">23</a></li> <li>Actions&emsp;<a href="#i142">142</a></li> <li>Advent Calendar&emsp;<a href="#i75">75</a></li> <li>Adverb&emsp;<a href="#i76">76</a></li> <li>Adverbial Pair&emsp;<a href="#i77">77</a></li> <li>ALAP&emsp;<a href="#i108">108</a></li> <li>Allomorph&emsp;<a href="#i78">78</a></li> <li>also declarator&emsp;<a href="#i35">35</a></li> <li>Anonymous&emsp;<a href="#i79">79</a></li> <li>anonymouse arguments (Signature)&emsp;<a href="#i566">566</a></li> <li>API&emsp;<a href="#i80">80</a></li> <li>Apocalypse&emsp;<a href="#i81">81</a></li> <li>Argument&emsp;<a href="#i71">71</a></li> <li>Arity&emsp;<a href="#i82">82</a></li> <li>array indexing operator array subscript operator&emsp;<a href="#i233">233</a></li> <li>AST&emsp;<a href="#i83">83</a></li> <li>asynchronous LAST (phasers)&emsp;<a href="#i303">303</a></li> <li>Attribute&emsp;<a href="#i220">220</a></li> <li>attributes&emsp;<a href="#i14">14</a></li> <li>autopun&emsp;<a href="#i109">109</a></li> <li>Autothreading&emsp;<a href="#i84">84</a></li> <li>backlog&emsp;<a href="#i110">110</a></li> <li>bail-out&emsp;<a href="#i464">464</a></li> <li>BEGIN (phasers)&emsp;<a href="#i271">271</a></li> <li>behavior&emsp;<a href="#i9">9</a></li> <li>bless&emsp;<a href="#i32">32</a></li> <li>block&emsp;<a href="#i85">85</a></li> <li>block constructor hash constructor&emsp;<a href="#i230">230</a></li> <li>Boolean&emsp;<a href="#i86">86</a></li> <li>Bot&emsp;<a href="#i111">111</a></li> <li>BUILD&emsp;<a href="#i33">33</a></li> <li>bytecode&emsp;<a href="#i87">87</a></li> <li>callsame&emsp;<a href="#i100">100</a></li> <li>callwith&emsp;<a href="#i99">99</a></li> <li>camelia&emsp;<a href="#i104">104</a></li> <li>Camelia&emsp;<a href="#i88">88</a></li> <li>can-ok&emsp;<a href="#i450">450</a></li> <li>CATCH&emsp;<a href="#i42">42</a></li> <li>CATCH (phasers)&emsp;<a href="#i297">297</a></li> <li>CHECK (phasers)&emsp;<a href="#i272">272</a></li> <li>class&emsp;<a href="#i4">4</a></li> <li>Class&emsp;<a href="#i89">89</a></li> <li>class Grammar&emsp;<a href="#i118">118</a></li> <li>classes&emsp;<a href="#i5">5</a></li> <li>classes accessors&emsp;<a href="#i24">24</a></li> <li>classes attributes&emsp;<a href="#i15">15</a></li> <li>classes behavior&emsp;<a href="#i10">10</a></li> <li>classes encapsulation&emsp;<a href="#i17">17</a></li> <li>classes has&emsp;<a href="#i8">8</a></li> <li>classes methods&emsp;<a href="#i27">27</a></li> <li>cmp-ok&emsp;<a href="#i447">447</a></li> <li>coercion type (signature)&emsp;<a href="#i571">571</a></li> <li>Colon List&emsp;<a href="#i91">91</a></li> <li>Color Pair&emsp;<a href="#i90">90</a></li> <li>COMPOSE (phasers)&emsp;<a href="#i301">301</a></li> <li>compunit&emsp;<a href="#i204">204</a> <a href="#i207">207</a> <a href="#i210">210</a></li> <li>constant&emsp;<a href="#i1">1</a></li> <li>constant (Terms)&emsp;<a href="#i449">449</a></li> <li>Constraint&emsp;<a href="#i564">564</a></li> <li>constructors&emsp;<a href="#i30">30</a></li> <li>CONTROL (phasers)&emsp;<a href="#i299">299</a></li> <li>control flow&emsp;<a href="#i38">38</a> <a href="#i39">39</a> <a href="#i40">40</a> <a href="#i41">41</a> <a href="#i45">45</a> <a href="#i47">47</a> <a href="#i51">51</a> <a href="#i55">55</a> <a href="#i58">58</a> <a href="#i59">59</a> <a href="#i60">60</a> <a href="#i61">61</a> <a href="#i62">62</a> <a href="#i63">63</a> <a href="#i64">64</a> <a href="#i65">65</a> <a href="#i66">66</a></li> <li>control flow default when&emsp;<a href="#i52">52</a></li> <li>control flow else elsif&emsp;<a href="#i44">44</a></li> <li>control flow gather take&emsp;<a href="#i48">48</a></li> <li>control flow given statement&emsp;<a href="#i54">54</a></li> <li>control flow proceed succeed&emsp;<a href="#i53">53</a></li> <li>control flow repeat&emsp;<a href="#i57">57</a></li> <li>control flow while until&emsp;<a href="#i56">56</a></li> <li>control flow with orwith without&emsp;<a href="#i46">46</a></li> <li>cross product operator&emsp;<a href="#i356">356</a></li> <li>dalek&emsp;<a href="#i105">105</a></li> <li>declarator&emsp;<a href="#i73">73</a></li> <li>declarator class&emsp;<a href="#i219">219</a></li> <li>declarator grammar&emsp;<a href="#i118">118</a></li> <li>declarator multi&emsp;<a href="#i72">72</a></li> <li>declarator regex&emsp;<a href="#i112">112</a> <a href="#i392">392</a></li> <li>declarator role&emsp;<a href="#i231">231</a></li> <li>declarator rule&emsp;<a href="#i112">112</a></li> <li>declarator sub&emsp;<a href="#i67">67</a></li> <li>declarator token&emsp;<a href="#i112">112</a></li> <li>decrement operator&emsp;<a href="#i258">258</a> <a href="#i260">260</a></li> <li>defined&emsp;<a href="#i12">12</a></li> <li>destructuring arguments (Signature)&emsp;<a href="#i576">576</a></li> <li>diag&emsp;<a href="#i466">466</a></li> <li>dies-ok&emsp;<a href="#i455">455</a></li> <li>does-ok&emsp;<a href="#i451">451</a></li> <li>DWIM&emsp;<a href="#i113">113</a></li> <li>Empty&emsp;<a href="#i565">565</a></li> <li>encapsulation&emsp;<a href="#i16">16</a></li> <li>END (phasers)&emsp;<a href="#i277">277</a></li> <li>ENTER (phasers)&emsp;<a href="#i278">278</a></li> <li>Enumeration  Enums  enum&emsp;<a href="#i474">474</a></li> <li>eval-dies-ok&emsp;<a href="#i457">457</a></li> <li>eval-lives-ok&emsp;<a href="#i458">458</a></li> <li>Exegesis&emsp;<a href="#i92">92</a></li> <li>False&emsp;<a href="#i93">93</a></li> <li>fiddly&emsp;<a href="#i94">94</a></li> <li>FIRST (phasers)&emsp;<a href="#i292">292</a></li> <li>flap&emsp;<a href="#i114">114</a></li> <li>fossil&emsp;<a href="#i115">115</a></li> <li>FSVO&emsp;<a href="#i116">116</a></li> <li>FTFY&emsp;<a href="#i117">117</a></li> <li>function reference (constrain)&emsp;<a href="#i569">569</a></li> <li>greatest common divisor operator&emsp;<a href="#i291">291</a></li> <li>handles&emsp;<a href="#i95">95</a></li> <li>handles trait&emsp;<a href="#i471">471</a></li> <li>has&emsp;<a href="#i7">7</a></li> <li>hash indexing operator hash subscript operator&emsp;<a href="#i234">234</a></li> <li>HOW (reserved method)&emsp;<a href="#i469">469</a></li> <li>hyper &lt;&lt;&emsp;<a href="#i226">226</a></li> <li>hyper &gt;&gt;&emsp;<a href="#i226">226</a></li> <li>hyper «&emsp;<a href="#i226">226</a></li> <li>hyper »&emsp;<a href="#i226">226</a></li> <li>iffy&emsp;<a href="#i96">96</a></li> <li>import&emsp;<a href="#i3">3</a></li> <li>increment operator&emsp;<a href="#i257">257</a> <a href="#i259">259</a></li> <li>INIT (phasers)&emsp;<a href="#i275">275</a></li> <li>instance&emsp;<a href="#i97">97</a></li> <li>integer bit shift operator left&emsp;<a href="#i289">289</a></li> <li>integer bit shift operator right&emsp;<a href="#i290">290</a></li> <li>Interface&emsp;<a href="#i98">98</a></li> <li>invocant&emsp;<a href="#i28">28</a></li> <li>IPC&emsp;<a href="#i165">165</a></li> <li>IRC&emsp;<a href="#i101">101</a></li> <li>is (container type)&emsp;<a href="#i476">476</a></li> <li>is (inheritance)&emsp;<a href="#i34">34</a> <a href="#i472">472</a></li> <li>is rw (class)&emsp;<a href="#i473">473</a></li> <li>is testing&emsp;<a href="#i443">443</a></li> <li>is-approx&emsp;<a href="#i445">445</a></li> <li>is-deeply&emsp;<a href="#i446">446</a></li> <li>isa-ok&emsp;<a href="#i448">448</a></li> <li>isnt&emsp;<a href="#i444">444</a></li> <li>IWBN&emsp;<a href="#i119">119</a></li> <li>KEEP (phasers)&emsp;<a href="#i283">283</a></li> <li>LAST (phasers)&emsp;<a href="#i295">295</a></li> <li>lazy list gather&emsp;<a href="#i49">49</a></li> <li>lazy list take&emsp;<a href="#i50">50</a></li> <li>lazy list …&emsp;<a href="#i359">359</a></li> <li>least common multiple operator&emsp;<a href="#i294">294</a></li> <li>LEAVE (phasers)&emsp;<a href="#i280">280</a></li> <li>Lexing&emsp;<a href="#i147">147</a></li> <li>LHF&emsp;<a href="#i120">120</a></li> <li>like&emsp;<a href="#i452">452</a></li> <li>LINK (phasers)&emsp;<a href="#i273">273</a></li> <li>Literal&emsp;<a href="#i148">148</a></li> <li>lives-ok&emsp;<a href="#i456">456</a></li> <li>Long Names&emsp;<a href="#i577">577</a></li> <li>LTA&emsp;<a href="#i121">121</a></li> <li>machine code&emsp;<a href="#i150">150</a></li> <li>MAIN&emsp;<a href="#i107">107</a></li> <li>Mainline&emsp;<a href="#i151">151</a></li> <li>mandatory named argument (Signature)&emsp;<a href="#i575">575</a></li> <li>matching adverb :c&emsp;<a href="#i406">406</a></li> <li>matching adverb :continue&emsp;<a href="#i406">406</a></li> <li>Member&emsp;<a href="#i222">222</a></li> <li>method call&emsp;<a href="#i237">237</a></li> <li>methods&emsp;<a href="#i26">26</a></li> <li>MoarVM&emsp;<a href="#i152">152</a></li> <li>MOP&emsp;<a href="#i202">202</a></li> <li>Multi-Dispatch&emsp;<a href="#i153">153</a></li> <li>multi-method&emsp;<a href="#i154">154</a></li> <li>NaN (definition)&emsp;<a href="#i556">556</a></li> <li>nativecall&emsp;<a href="#i214">214</a></li> <li>NEXT (phasers)&emsp;<a href="#i293">293</a></li> <li>nextsame&emsp;<a href="#i103">103</a></li> <li>nextwith&emsp;<a href="#i102">102</a></li> <li>Niecza&emsp;<a href="#i155">155</a></li> <li>Not Quite Perl&emsp;<a href="#i157">157</a></li> <li>NQP&emsp;<a href="#i156">156</a></li> <li>NST&emsp;<a href="#i124">124</a></li> <li>Numeric bitwise AND operator&emsp;<a href="#i287">287</a></li> <li>NYI&emsp;<a href="#i158">158</a></li> <li>o function combinator&emsp;<a href="#i536">536</a></li> <li>object hash&emsp;<a href="#i537">537</a></li> <li>objects bless&emsp;<a href="#i31">31</a></li> <li>ok nok&emsp;<a href="#i442">442</a></li> <li>OOP&emsp;<a href="#i159">159</a></li> <li>opcode&emsp;<a href="#i160">160</a></li> <li>Operator&emsp;<a href="#i161">161</a></li> <li>operators .&emsp;<a href="#i29">29</a></li> <li>Opt&emsp;<a href="#i126">126</a></li> <li>optional argument (Signature)&emsp;<a href="#i574">574</a></li> <li>OS&emsp;<a href="#i162">162</a></li> <li>P5&emsp;<a href="#i131">131</a></li> <li>P6&emsp;<a href="#i132">132</a></li> <li>pair constructor&emsp;<a href="#i353">353</a></li> <li>Parameter&emsp;<a href="#i164">164</a></li> <li>parameter *% slurpy argument (Signature)&emsp;<a href="#i572">572</a></li> <li>parameter *@&emsp;<a href="#i572">572</a></li> <li>parameter |&emsp;<a href="#i578">578</a></li> <li>Parrot&emsp;<a href="#i168">168</a></li> <li>Parse Tree&emsp;<a href="#i163">163</a></li> <li>pass flunk&emsp;<a href="#i465">465</a></li> <li>PAST&emsp;<a href="#i169">169</a></li> <li>PB&emsp;<a href="#i127">127</a></li> <li>PBP&emsp;<a href="#i128">128</a></li> <li>Perl&emsp;<a href="#i172">172</a></li> <li>perl&emsp;<a href="#i171">171</a></li> <li>Perl Community&emsp;<a href="#i173">173</a></li> <li>PERL6LIB&emsp;<a href="#i2">2</a></li> <li>plan&emsp;<a href="#i440">440</a></li> <li>POD&emsp;<a href="#i175">175</a></li> <li>positional argument (Signature) named argument (Signature)&emsp;<a href="#i573">573</a></li> <li>POST (phasers)&emsp;<a href="#i288">288</a></li> <li>postfix .&amp;amp;&emsp;<a href="#i238">238</a></li> <li>postfix .*&emsp;<a href="#i247">247</a></li> <li>postfix .+&emsp;<a href="#i245">245</a></li> <li>postfix .?&emsp;<a href="#i243">243</a></li> <li>postfix .^&emsp;<a href="#i240">240</a></li> <li>postfix call&emsp;<a href="#i254">254</a></li> <li>postfix ».&emsp;<a href="#i248">248</a></li> <li>PR&emsp;<a href="#i130">130</a></li> <li>PRE (phasers)&emsp;<a href="#i286">286</a></li> <li>prefix call&emsp;<a href="#i255">255</a></li> <li>Proc object&emsp;<a href="#i167">167</a></li> <li>Proc::Async object&emsp;<a href="#i170">170</a></li> <li>Property&emsp;<a href="#i221">221</a></li> <li>protoregex&emsp;<a href="#i125">125</a></li> <li>pugs&emsp;<a href="#i177">177</a></li> <li>Pull Request&emsp;<a href="#i176">176</a></li> <li>QAST&emsp;<a href="#i178">178</a></li> <li>QUIT asynchronous QUIT (phasers)&emsp;<a href="#i305">305</a></li> <li>quote " "&emsp;<a href="#i312">312</a></li> <li>quote ' '&emsp;<a href="#i310">310</a></li> <li>quote / /&emsp;<a href="#i354">354</a></li> <li>quote &lt;&lt; &gt;&gt;&emsp;<a href="#i319">319</a></li> <li>quote heredocs :to&emsp;<a href="#i327">327</a></li> <li>quote m&emsp;<a href="#i354">354</a></li> <li>quote q&emsp;<a href="#i310">310</a></li> <li>quote Q&emsp;<a href="#i308">308</a></li> <li>quote qq&emsp;<a href="#i312">312</a></li> <li>quote qqw&emsp;<a href="#i318">318</a></li> <li>quote qqww&emsp;<a href="#i319">319</a></li> <li>quote qqx&emsp;<a href="#i325">325</a></li> <li>quote qww&emsp;<a href="#i317">317</a></li> <li>quote qx&emsp;<a href="#i321">321</a></li> <li>quote rx&emsp;<a href="#i354">354</a></li> <li>quote s/ / /&emsp;<a href="#i391">391</a></li> <li>quote « »&emsp;<a href="#i319">319</a></li> <li>quote ｢ ｣&emsp;<a href="#i308">308</a></li> <li>qw quote-words&emsp;<a href="#i227">227</a></li> <li>qw word quote&emsp;<a href="#i315">315</a></li> <li>Rakudo&emsp;<a href="#i179">179</a></li> <li>regex $&emsp;<a href="#i387">387</a></li> <li>regex $$&emsp;<a href="#i388">388</a></li> <li>regex $&lt;capture&gt; =&emsp;<a href="#i390">390</a></li> <li>regex %&emsp;<a href="#i380">380</a></li> <li>regex %%&emsp;<a href="#i380">380</a></li> <li>regex ( )&emsp;<a href="#i390">390</a></li> <li>regex *&emsp;<a href="#i377">377</a></li> <li>regex +&emsp;<a href="#i376">376</a></li> <li>regex .&emsp;<a href="#i360">360</a></li> <li>regex :&emsp;<a href="#i382">382</a></li> <li>regex &lt;-[ ]&gt;&emsp;<a href="#i373">373</a></li> <li>regex &lt;:property&gt;&emsp;<a href="#i371">371</a></li> <li>regex &lt;&lt;&emsp;<a href="#i389">389</a></li> <li>regex &lt;[ ]&gt;&emsp;<a href="#i373">373</a></li> <li>regex &gt;&gt;&emsp;<a href="#i389">389</a></li> <li>regex ?&emsp;<a href="#i378">378</a> <a href="#i381">381</a></li> <li>regex [ ]&emsp;<a href="#i390">390</a></li> <li>regex \d regex \D&emsp;<a href="#i362">362</a></li> <li>regex \h regex \H&emsp;<a href="#i363">363</a></li> <li>regex \n regex \N&emsp;<a href="#i364">364</a></li> <li>regex \s regex \S&emsp;<a href="#i365">365</a></li> <li>regex \t regex \T&emsp;<a href="#i367">367</a></li> <li>regex \v regex \V&emsp;<a href="#i368">368</a></li> <li>regex \w regex \W&emsp;<a href="#i370">370</a></li> <li>regex ^&emsp;<a href="#i387">387</a></li> <li>regex ^^&emsp;<a href="#i388">388</a></li> <li>regex adverb :g&emsp;<a href="#i409">409</a></li> <li>regex adverb :global&emsp;<a href="#i409">409</a></li> <li>regex adverb :i&emsp;<a href="#i395">395</a></li> <li>regex adverb :ignorecase&emsp;<a href="#i395">395</a></li> <li>regex adverb :p&emsp;<a href="#i412">412</a></li> <li>regex adverb :pos&emsp;<a href="#i412">412</a></li> <li>regex adverb :r&emsp;<a href="#i397">397</a></li> <li>regex adverb :ratchet&emsp;<a href="#i397">397</a></li> <li>regex adverb :s&emsp;<a href="#i400">400</a></li> <li>regex adverb :sigspace&emsp;<a href="#i400">400</a></li> <li>regex quantifier **&emsp;<a href="#i379">379</a></li> <li>regex |&emsp;<a href="#i386">386</a></li> <li>regex ||&emsp;<a href="#i383">383</a></li> <li>regex «&emsp;<a href="#i389">389</a></li> <li>regex »&emsp;<a href="#i389">389</a></li> <li>Regular Expression regex&emsp;<a href="#i180">180</a></li> <li>REPL&emsp;<a href="#i174">174</a></li> <li>Repository&emsp;<a href="#i181">181</a></li> <li>return-rw&emsp;<a href="#i561">561</a></li> <li>returns&emsp;<a href="#i570">570</a></li> <li>roast&emsp;<a href="#i182">182</a></li> <li>RSN&emsp;<a href="#i133">133</a></li> <li>RT&emsp;<a href="#i135">135</a></li> <li>rule&emsp;<a href="#i183">183</a></li> <li>running programs&emsp;<a href="#i166">166</a></li> <li>rvalue&emsp;<a href="#i184">184</a></li> <li>Sigil&emsp;<a href="#i185">185</a></li> <li>Sigilless Variable&emsp;<a href="#i186">186</a></li> <li>sigils &amp;amp;&emsp;<a href="#i18">18</a></li> <li>signature literal (Signature)&emsp;<a href="#i562">562</a></li> <li>skip&emsp;<a href="#i462">462</a></li> <li>skip-rest&emsp;<a href="#i463">463</a></li> <li>Slot&emsp;<a href="#i223">223</a></li> <li>spaceship operator&emsp;<a href="#i324">324</a></li> <li>Spesh&emsp;<a href="#i187">187</a></li> <li>state&emsp;<a href="#i6">6</a></li> <li>STD&emsp;<a href="#i188">188</a></li> <li>Stub&emsp;<a href="#i189">189</a></li> <li>sub&emsp;<a href="#i216">216</a> <a href="#i217">217</a> <a href="#i218">218</a></li> <li>subscript adverb :delete&emsp;<a href="#i435">435</a></li> <li>subscript adverb :exists&emsp;<a href="#i434">434</a></li> <li>subscript adverb :k&emsp;<a href="#i438">438</a></li> <li>subscript adverb :kv&emsp;<a href="#i437">437</a></li> <li>subscript adverb :p&emsp;<a href="#i436">436</a></li> <li>subscript adverb :v&emsp;<a href="#i439">439</a></li> <li>subset&emsp;<a href="#i475">475</a></li> <li>subtest&emsp;<a href="#i460">460</a></li> <li>sym&emsp;<a href="#i122">122</a></li> <li>Symbol&emsp;<a href="#i190">190</a></li> <li>Synopsis&emsp;<a href="#i191">191</a></li> <li>syntax -&gt;&emsp;<a href="#i68">68</a></li> <li>Syntax Analysis&emsp;<a href="#i192">192</a></li> <li>syntax DEFINITE&emsp;<a href="#i212">212</a></li> <li>syntax HOW&emsp;<a href="#i209">209</a></li> <li>syntax VAR&emsp;<a href="#i213">213</a></li> <li>syntax WHAT&emsp;<a href="#i203">203</a></li> <li>syntax WHERE&emsp;<a href="#i208">208</a></li> <li>syntax WHICH&emsp;<a href="#i205">205</a></li> <li>syntax WHO&emsp;<a href="#i206">206</a></li> <li>syntax WHY&emsp;<a href="#i211">211</a></li> <li>test suite&emsp;<a href="#i193">193</a></li> <li>Texas operator&emsp;<a href="#i194">194</a></li> <li>throws-like&emsp;<a href="#i459">459</a></li> <li>Thunk&emsp;<a href="#i136">136</a></li> <li>TIMTOWTDI&emsp;<a href="#i138">138</a></li> <li>TMI&emsp;<a href="#i139">139</a></li> <li>TMTOWTDI&emsp;<a href="#i140">140</a></li> <li>todo&emsp;<a href="#i461">461</a></li> <li>TOP&emsp;<a href="#i129">129</a></li> <li>trait is copy&emsp;<a href="#i579">579</a></li> <li>trait is rw&emsp;<a href="#i579">579</a></li> <li>traits is rw&emsp;<a href="#i25">25</a></li> <li>True&emsp;<a href="#i195">195</a></li> <li>try blocks&emsp;<a href="#i43">43</a></li> <li>Twigil&emsp;<a href="#i477">477</a></li> <li>twigils&emsp;<a href="#i19">19</a></li> <li>twigils !&emsp;<a href="#i20">20</a></li> <li>twigils .&emsp;<a href="#i21">21</a></li> <li>twigils accessors&emsp;<a href="#i22">22</a></li> <li>type constraint (Signature)&emsp;<a href="#i563">563</a></li> <li>type constraint :_&emsp;<a href="#i568">568</a></li> <li>type constraint :D&emsp;<a href="#i568">568</a></li> <li>type constraint :U&emsp;<a href="#i568">568</a></li> <li>type object&emsp;<a href="#i11">11</a></li> <li>UGT&emsp;<a href="#i141">141</a></li> <li>UNDO (phasers)&emsp;<a href="#i284">284</a></li> <li>unlike&emsp;<a href="#i453">453</a></li> <li>upto operator&emsp;<a href="#i270">270</a></li> <li>use-ok&emsp;<a href="#i454">454</a></li> <li>value&emsp;<a href="#i196">196</a></li> <li>Value&emsp;<a href="#i149">149</a></li> <li>VAR (reserved method)&emsp;<a href="#i470">470</a></li> <li>Variable&emsp;<a href="#i197">197</a></li> <li>variable $0&emsp;<a href="#i492">492</a></li> <li>variable $1&emsp;<a href="#i492">492</a></li> <li>variable $&lt;named&gt;&emsp;<a href="#i493">493</a></li> <li>variable %()&emsp;<a href="#i493">493</a></li> <li>variable @()&emsp;<a href="#i492">492</a></li> <li>Variable Interpolation&emsp;<a href="#i198">198</a></li> <li>Virtual Machine&emsp;<a href="#i199">199</a></li> <li>WFM&emsp;<a href="#i143">143</a></li> <li>WHAT (reserved method)&emsp;<a href="#i467">467</a></li> <li>where clause (Signature)&emsp;<a href="#i567">567</a></li> <li>whitespace&emsp;<a href="#i200">200</a></li> <li>WHO (reserved method)&emsp;<a href="#i468">468</a></li> <li>will trait&emsp;<a href="#i268">268</a></li> <li>WIP&emsp;<a href="#i144">144</a></li> <li>WP&emsp;<a href="#i145">145</a></li> <li>ws&emsp;<a href="#i134">134</a></li> <li>WW&emsp;<a href="#i146">146</a></li> <li>yoleaux&emsp;<a href="#i106">106</a></li> <li>… operators&emsp;<a href="#i358">358</a></li> <li>∘ function combinator&emsp;<a href="#i535">535</a></li></ul></div></div>  </div>
</body></html>
